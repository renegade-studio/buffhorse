{
  "repoUrl": "https://github.com/CodebuffAI/codebuff",
  "generationDate": "2025-10-12T05:55:40.855Z",
  "evalCommits": [
    {
      "id": "filter-system-history",
      "sha": "456858ccc77ebfeb400ef12bcf9dd167470a6639",
      "parentSha": "6c362c3287badc5d4dfd0284d2d7a1044d1affa0",
      "spec": "Implement filtering of system messages from parent conversation history before passing it to spawned agents and add tests:\n\n1) Update conversation history construction in synchronous spawn handler\n- File: backend/src/tools/handlers/tool/spawn-agents.ts\n- Before creating the conversationHistoryMessage, derive messagesWithoutSystem by filtering getLatestState().messages to exclude any message where message.role === 'system'.\n- Build the conversationHistoryMessage using JSON.stringify(messagesWithoutSystem, null, 2) in the existing 'For context, the following is the conversation history between the user and an assistant:\\n\\n…' format.\n- Preserve existing includeMessageHistory logic: only push conversationHistoryMessage into subAgentMessages when the child agent template sets includeMessageHistory: true.\n\n2) Update conversation history construction in async spawn handler\n- File: backend/src/tools/handlers/tool/spawn-agents-async.ts\n- Mirror the exact filtering behavior: compute messagesWithoutSystem from getLatestState().messages and use it for JSON.stringify when setting the conversationHistoryMessage.\n- Keep the rest of the async flow unchanged (validation, spawning, streaming chunks, completion messaging).\n\n3) Add tests to verify message history behavior for spawned agents\n- File: backend/src/__tests__/spawn-agents-message-history.test.ts\n- Use bun:test and follow existing patterns in backend/src/__tests__/spawn-agents-permissions.test.ts and backend/src/__tests__/subagent-streaming.test.ts for mocking logger and loopAgentSteps.\n- Test cases to include:\n  a) When includeMessageHistory is true for the child agent template, the subagent's AgentState.messageHistory contains exactly one user-role message that includes the phrase 'conversation history between the user and an assistant', and the embedded JSON excludes system-role messages from the parent (verify no 'system' entries and that user/assistant entries remain).\n  b) When includeMessageHistory is false for the child agent template, the subagent's messageHistory is empty (no conversation history injected).\n  c) When the parent message history is empty, the injected conversation history message still exists and contains an empty JSON array ([]) in its content.\n  d) When the parent message history contains only system messages, the injected conversation history message exists and its JSON content is an empty array ([]).\n- Create simple mock AgentTemplate objects with controllable includeMessageHistory values and spawnableAgents, validate via handleSpawnAgents, and spy on loopAgentSteps to capture the subAgentState and avoid real execution.\n- Use existing test utilities: MockWebSocket and mockFileContext from backend/src/__tests__/test-utils, TEST_USER_ID from @codebuff/common/constants, and getInitialSessionState from @codebuff/common/types/session-state. Ensure logger calls are stubbed to reduce noise.\n\nAcceptance criteria:\n- Both handlers construct conversationHistoryMessage from a filtered set that excludes system messages.\n- New tests pass and validate the four scenarios above.\n- No changes to other message filtering utilities or runtime behavior beyond excluding system messages from the forwarded history.\n- Existing spawn-agents permissions and streaming tests remain green.",
      "prompt": "Improve spawned agent context handling so that parent system messages are not forwarded. Update both sync and async spawn flows to pass conversation history to sub-agents without any system-role entries, and add tests covering includeMessageHistory on/off, empty history, and system-only history. Keep the overall spawning, validation, and streaming behavior unchanged.",
      "supplementalFiles": [
        "backend/src/run-agent-step.ts",
        "backend/src/util/messages.ts",
        "backend/src/tools/handlers/list.ts",
        "backend/src/tools/definitions/tool/spawn-agents.ts",
        "backend/src/__tests__/spawn-agents-permissions.test.ts",
        "backend/src/__tests__/subagent-streaming.test.ts",
        "common/src/types/agent-template.ts",
        "common/src/types/message.ts"
      ],
      "fileDiffs": [
        {
          "path": "backend/src/__tests__/spawn-agents-message-history.test.ts",
          "status": "added",
          "diff": "Index: backend/src/__tests__/spawn-agents-message-history.test.ts\n===================================================================\n--- backend/src/__tests__/spawn-agents-message-history.test.ts\t6c362c3 (parent)\n+++ backend/src/__tests__/spawn-agents-message-history.test.ts\t456858c (commit)\n@@ -1,1 +1,255 @@\n-[NEW FILE]\n\\ No newline at end of file\n+import { describe, expect, it, beforeEach, afterEach, mock, spyOn } from 'bun:test'\n+import { handleSpawnAgents } from '../tools/handlers/tool/spawn-agents'\n+import { TEST_USER_ID } from '@codebuff/common/old-constants'\n+import { getInitialSessionState } from '@codebuff/common/types/session-state'\n+import { mockFileContext, MockWebSocket } from './test-utils'\n+import * as loggerModule from '../util/logger'\n+import * as runAgentStep from '../run-agent-step'\n+\n+import type { AgentTemplate } from '@codebuff/common/types/agent-template'\n+import type { CodebuffToolCall } from '@codebuff/common/tools/list'\n+import type { CodebuffMessage } from '@codebuff/common/types/message'\n+import type { WebSocket } from 'ws'\n+\n+describe('Spawn Agents Message History', () => {\n+  let mockSendSubagentChunk: any\n+  let mockLoopAgentSteps: any\n+  let capturedSubAgentState: any\n+\n+  beforeEach(() => {\n+    // Mock logger to reduce noise in tests\n+    spyOn(loggerModule.logger, 'debug').mockImplementation(() => {})\n+    spyOn(loggerModule.logger, 'error').mockImplementation(() => {})\n+    spyOn(loggerModule.logger, 'info').mockImplementation(() => {})\n+    spyOn(loggerModule.logger, 'warn').mockImplementation(() => {})\n+    spyOn(loggerModule, 'withLoggerContext').mockImplementation(\n+      async (context: any, fn: () => Promise<any>) => fn(),\n+    )\n+\n+    // Mock sendSubagentChunk\n+    mockSendSubagentChunk = mock(() => {})\n+\n+    // Mock loopAgentSteps to capture the subAgentState\n+    mockLoopAgentSteps = spyOn(\n+      runAgentStep,\n+      'loopAgentSteps',\n+    ).mockImplementation(async (ws, options) => {\n+      capturedSubAgentState = options.agentState\n+      return {\n+        agentState: {\n+          ...options.agentState,\n+          messageHistory: [\n+            ...options.agentState.messageHistory,\n+            { role: 'assistant', content: 'Mock agent response' },\n+          ],\n+        },\n+      }\n+    })\n+  })\n+\n+  afterEach(() => {\n+    mock.restore()\n+    capturedSubAgentState = undefined\n+  })\n+\n+  const createMockAgent = (id: string, includeMessageHistory = true): AgentTemplate => ({\n+    id,\n+    displayName: `Mock ${id}`,\n+    outputMode: 'last_message' as const,\n+    inputSchema: {\n+      prompt: {\n+        safeParse: () => ({ success: true }),\n+      } as any,\n+    },\n+    spawnerPrompt: '',\n+    model: '',\n+    includeMessageHistory,\n+    toolNames: [],\n+    spawnableAgents: ['child-agent'],\n+    systemPrompt: '',\n+    instructionsPrompt: '',\n+    stepPrompt: '',\n+  })\n+\n+  const createSpawnToolCall = (agentType: string, prompt = 'test prompt'): CodebuffToolCall<'spawn_agents'> => ({\n+    toolName: 'spawn_agents' as const,\n+    toolCallId: 'test-tool-call-id',\n+    input: {\n+      agents: [{ agent_type: agentType, prompt }],\n+    },\n+  })\n+\n+  it('should exclude system messages from conversation history when includeMessageHistory is true', async () => {\n+    const parentAgent = createMockAgent('parent', true)\n+    const childAgent = createMockAgent('child-agent', true)\n+    const ws = new MockWebSocket() as unknown as WebSocket\n+    const sessionState = getInitialSessionState(mockFileContext)\n+    const toolCall = createSpawnToolCall('child-agent')\n+\n+    // Create mock messages including system message\n+    const mockMessages: CodebuffMessage[] = [\n+      { role: 'system', content: 'This is the parent system prompt that should be excluded' },\n+      { role: 'user', content: 'Hello' },\n+      { role: 'assistant', content: 'Hi there!' },\n+      { role: 'user', content: 'How are you?' },\n+    ]\n+\n+    const { result } = handleSpawnAgents({\n+      previousToolCallFinished: Promise.resolve(),\n+      toolCall,\n+      fileContext: mockFileContext,\n+      clientSessionId: 'test-session',\n+      userInputId: 'test-input',\n+      getLatestState: () => ({ messages: mockMessages }),\n+      state: {\n+        ws,\n+        fingerprintId: 'test-fingerprint',\n+        userId: TEST_USER_ID,\n+        agentTemplate: parentAgent,\n+        localAgentTemplates: { 'child-agent': childAgent },\n+        sendSubagentChunk: mockSendSubagentChunk,\n+        messages: mockMessages,\n+        agentState: sessionState.mainAgentState,\n+      },\n+    })\n+\n+    await result\n+\n+    // Verify that the spawned agent was called\n+    expect(mockLoopAgentSteps).toHaveBeenCalledTimes(1)\n+\n+    // Verify that the subagent's message history contains the conversation history message\n+    expect(capturedSubAgentState.messageHistory).toHaveLength(1)\n+    const conversationHistoryMessage = capturedSubAgentState.messageHistory[0]\n+    expect(conversationHistoryMessage.role).toBe('user')\n+    expect(conversationHistoryMessage.content).toContain('conversation history between the user and an assistant')\n+\n+    // Parse the JSON content to verify system message is excluded\n+    const contentMatch = conversationHistoryMessage.content.match(/\\[([\\s\\S]*)\\]/)\n+    expect(contentMatch).toBeTruthy()\n+    const parsedMessages = JSON.parse(contentMatch![0])\n+\n+    // Verify system message is excluded\n+    expect(parsedMessages).toHaveLength(3) // Only user and assistant messages\n+    expect(parsedMessages.find((msg: any) => msg.role === 'system')).toBeUndefined()\n+    expect(parsedMessages.find((msg: any) => msg.content === 'This is the parent system prompt that should be excluded')).toBeUndefined()\n+\n+    // Verify user and assistant messages are included\n+    expect(parsedMessages.find((msg: any) => msg.content === 'Hello')).toBeTruthy()\n+    expect(parsedMessages.find((msg: any) => msg.content === 'Hi there!')).toBeTruthy()\n+    expect(parsedMessages.find((msg: any) => msg.content === 'How are you?')).toBeTruthy()\n+  })\n+\n+  it('should not include conversation history when includeMessageHistory is false', async () => {\n+    const parentAgent = createMockAgent('parent', true)\n+    const childAgent = createMockAgent('child-agent', false) // includeMessageHistory = false\n+    const ws = new MockWebSocket() as unknown as WebSocket\n+    const sessionState = getInitialSessionState(mockFileContext)\n+    const toolCall = createSpawnToolCall('child-agent')\n+\n+    const mockMessages: CodebuffMessage[] = [\n+      { role: 'system', content: 'System prompt' },\n+      { role: 'user', content: 'Hello' },\n+      { role: 'assistant', content: 'Hi there!' },\n+    ]\n+\n+    const { result } = handleSpawnAgents({\n+      previousToolCallFinished: Promise.resolve(),\n+      toolCall,\n+      fileContext: mockFileContext,\n+      clientSessionId: 'test-session',\n+      userInputId: 'test-input',\n+      getLatestState: () => ({ messages: mockMessages }),\n+      state: {\n+        ws,\n+        fingerprintId: 'test-fingerprint',\n+        userId: TEST_USER_ID,\n+        agentTemplate: parentAgent,\n+        localAgentTemplates: { 'child-agent': childAgent },\n+        sendSubagentChunk: mockSendSubagentChunk,\n+        messages: mockMessages,\n+        agentState: sessionState.mainAgentState,\n+      },\n+    })\n+\n+    await result\n+\n+    // Verify that the subagent's message history is empty when includeMessageHistory is false\n+    expect(capturedSubAgentState.messageHistory).toHaveLength(0)\n+  })\n+\n+  it('should handle empty message history gracefully', async () => {\n+    const parentAgent = createMockAgent('parent', true)\n+    const childAgent = createMockAgent('child-agent', true)\n+    const ws = new MockWebSocket() as unknown as WebSocket\n+    const sessionState = getInitialSessionState(mockFileContext)\n+    const toolCall = createSpawnToolCall('child-agent')\n+\n+    const mockMessages: CodebuffMessage[] = [] // Empty message history\n+\n+    const { result } = handleSpawnAgents({\n+      previousToolCallFinished: Promise.resolve(),\n+      toolCall,\n+      fileContext: mockFileContext,\n+      clientSessionId: 'test-session',\n+      userInputId: 'test-input',\n+      getLatestState: () => ({ messages: mockMessages }),\n+      state: {\n+        ws,\n+        fingerprintId: 'test-fingerprint',\n+        userId: TEST_USER_ID,\n+        agentTemplate: parentAgent,\n+        localAgentTemplates: { 'child-agent': childAgent },\n+        sendSubagentChunk: mockSendSubagentChunk,\n+        messages: mockMessages,\n+        agentState: sessionState.mainAgentState,\n+      },\n+    })\n+\n+    await result\n+\n+    // Verify that the subagent still gets a conversation history message, even if empty\n+    expect(capturedSubAgentState.messageHistory).toHaveLength(1)\n+    const conversationHistoryMessage = capturedSubAgentState.messageHistory[0]\n+    expect(conversationHistoryMessage.content).toContain('[]') // Empty array in JSON\n+  })\n+\n+  it('should handle message history with only system messages', async () => {\n+    const parentAgent = createMockAgent('parent', true)\n+    const childAgent = createMockAgent('child-agent', true)\n+    const ws = new MockWebSocket() as unknown as WebSocket\n+    const sessionState = getInitialSessionState(mockFileContext)\n+    const toolCall = createSpawnToolCall('child-agent')\n+\n+    const mockMessages: CodebuffMessage[] = [\n+      { role: 'system', content: 'System prompt 1' },\n+      { role: 'system', content: 'System prompt 2' },\n+    ]\n+\n+    const { result } = handleSpawnAgents({\n+      previousToolCallFinished: Promise.resolve(),\n+      toolCall,\n+      fileContext: mockFileContext,\n+      clientSessionId: 'test-session',\n+      userInputId: 'test-input',\n+      getLatestState: () => ({ messages: mockMessages }),\n+      state: {\n+        ws,\n+        fingerprintId: 'test-fingerprint',\n+        userId: TEST_USER_ID,\n+        agentTemplate: parentAgent,\n+        localAgentTemplates: { 'child-agent': childAgent },\n+        sendSubagentChunk: mockSendSubagentChunk,\n+        messages: mockMessages,\n+        agentState: sessionState.mainAgentState,\n+      },\n+    })\n+\n+    await result\n+\n+    // Verify that all system messages are filtered out\n+    expect(capturedSubAgentState.messageHistory).toHaveLength(1)\n+    const conversationHistoryMessage = capturedSubAgentState.messageHistory[0]\n+    expect(conversationHistoryMessage.content).toContain('[]') // Empty array in JSON since all system messages filtered out\n+  })\n+})\n"
        },
        {
          "path": "backend/src/tools/handlers/tool/spawn-agents-async.ts",
          "status": "modified",
          "diff": "Index: backend/src/tools/handlers/tool/spawn-agents-async.ts\n===================================================================\n--- backend/src/tools/handlers/tool/spawn-agents-async.ts\t6c362c3 (parent)\n+++ backend/src/tools/handlers/tool/spawn-agents-async.ts\t456858c (commit)\n@@ -116,12 +116,16 @@\n       agentId?: string\n       error?: string\n     }> = []\n \n+    // Filter out system messages from conversation history to avoid including parent's system prompt\n+    const messagesWithoutSystem = getLatestState().messages.filter(\n+      (message) => message.role !== 'system',\n+    )\n     const conversationHistoryMessage: CodebuffMessage = {\n       role: 'user',\n       content: `For context, the following is the conversation history between the user and an assistant:\\n\\n${JSON.stringify(\n-        getLatestState().messages,\n+        messagesWithoutSystem,\n         null,\n         2,\n       )}`,\n     }\n"
        },
        {
          "path": "backend/src/tools/handlers/tool/spawn-agents.ts",
          "status": "modified",
          "diff": "Index: backend/src/tools/handlers/tool/spawn-agents.ts\n===================================================================\n--- backend/src/tools/handlers/tool/spawn-agents.ts\t6c362c3 (parent)\n+++ backend/src/tools/handlers/tool/spawn-agents.ts\t456858c (commit)\n@@ -103,12 +103,16 @@\n     )\n   }\n \n   const triggerSpawnAgents = async () => {\n+    // Filter out system messages from conversation history to avoid including parent's system prompt\n+    const messagesWithoutSystem = getLatestState().messages.filter(\n+      (message) => message.role !== 'system',\n+    )\n     const conversationHistoryMessage: CodebuffMessage = {\n       role: 'user',\n       content: `For context, the following is the conversation history between the user and an assistant:\\n\\n${JSON.stringify(\n-        getLatestState().messages,\n+        messagesWithoutSystem,\n         null,\n         2,\n       )}`,\n     }\n"
        }
      ]
    },
    {
      "id": "add-deep-thinkers",
      "sha": "6c362c3287badc5d4dfd0284d2d7a1044d1affa0",
      "parentSha": "da2be987bd94f69d69098601facc78ff0b7168f4",
      "spec": "Implement a Deep Thinking agent suite with five agent definitions under .agents/deep-thinking that interoperate with the existing spawn_agents tool and programmatic agent loop.\n\nRequirements:\n1) Create agents and files\n- Add the following files and export default definitions that conform to .agents/types/agent-definition.ts:\n  - .agents/deep-thinking/deep-thinker.ts\n  - .agents/deep-thinking/deepest-thinker.ts\n  - .agents/deep-thinking/gemini-thinker.ts\n  - .agents/deep-thinking/gpt5-thinker.ts\n  - .agents/deep-thinking/sonnet-thinker.ts\n\n2) Deep thinker (orchestrator)\n- id: deep-thinker; displayName: Deep Thinker Agent; model: openai/gpt-5\n- reasoningOptions: enabled true; effort 'high'; exclude true\n- toolNames must include 'spawn_agents'\n- spawnableAgents must include: 'gpt5-thinker', 'sonnet-thinker', 'gemini-thinker'\n- includeMessageHistory: true\n- inputSchema: prompt (string with helpful description). Do not add params\n- outputMode: 'last_message'\n- spawnerPrompt: guidance that this agent coordinates multiple thinkers for deep analysis\n- systemPrompt and instructionsPrompt: describe synthesizing multi-model perspectives; emphasize depth and focusing on user prompt\n- handleSteps: generator that yields a spawn_agents call with three agents (gpt5-thinker, sonnet-thinker, gemini-thinker) passing the same prompt or a default fallback string; then yield 'STEP'\n\n3) Deepest thinker (meta-orchestrator)\n- id: deepest-thinker; displayName: Deepest Thinker Agent; model: openai/gpt-5\n- reasoningOptions: enabled true; effort 'high'; exclude true\n- toolNames must include 'spawn_agents'\n- spawnableAgents must include: 'deep-thinker'\n- includeMessageHistory: true\n- inputSchema: prompt (string with helpful description). No params\n- outputMode: 'all_messages' (so the backend format in spawn handler will include all messages minus the injected conversation history)\n- spawnerPrompt and systemPrompt: describe that it spawns several deep-thinker agents across different aspects\n- instructionsPrompt: instruct the agent to devise four sub-aspects of the prompt and spawn four deep-thinker agents covering those aspects; explicitly instruct that after spawning it should stop (no extra content)\n- No custom handleSteps is required if the instructions are sufficient for LLM-driven flows; if adding handleSteps, only orchestrate the spawn and rely on STEP/STEP_ALL per standards in .agents/types/agent-definition.ts\n\n4) Sub-thinkers\n- gpt5-thinker\n  - id: gpt5-thinker; displayName: GPT-5 Quick Thinker; model: openai/gpt-5\n  - reasoningOptions: enabled true; effort 'low'; exclude false\n  - inputSchema: prompt (string)\n  - includeMessageHistory: true\n  - outputMode: 'last_message'\n  - spawnerPrompt/instructionsPrompt: concise guidance for focused, insightful analysis\n- sonnet-thinker\n  - id: sonnet-thinker; displayName: Claude Sonnet Deep Thinker; model: anthropic/claude-4-sonnet-20250522\n  - inputSchema: prompt (string)\n  - includeMessageHistory: true\n  - outputMode: 'last_message'\n  - spawnerPrompt/instructionsPrompt: emphasize balanced, nuanced analysis\n- gemini-thinker\n  - id: gemini-thinker; displayName: Gemini Pro Creative Thinker; model: google/gemini-2.5-pro\n  - reasoningOptions: enabled true; effort 'low'; exclude false\n  - inputSchema: prompt (string)\n  - includeMessageHistory: true\n  - outputMode: 'last_message'\n  - spawnerPrompt/instructionsPrompt: emphasize creative, innovative exploration\n\n5) Compliance with runtime and validation\n- Ensure models match allowed options referenced in common/src/types/dynamic-agent-template.ts\n- When spawnableAgents is non-empty, include 'spawn_agents' in toolNames (validated by DynamicAgentTemplateSchema)\n- For any handleSteps generator: yield tool calls as { toolName, input }, then 'STEP' or 'STEP_ALL', matching the examples in .agents/types/agent-definition.ts and execution in backend/src/run-programmatic-step.ts\n- For includeMessageHistory true: the spawning handler will automatically inject prior conversation as the first user message (backend/src/tools/handlers/tool/spawn-agents.ts)\n- Set outputMode to 'last_message' unless the design explicitly requires 'all_messages' (deepest-thinker)\n\n6) No changes to backend or common code\n- Do not edit backend/src or common/src; the new agents must be loadable via npm-app/src/agents/load-agents.ts and executed by existing spawn_agents tooling.\n\nAcceptance checks:\n- The five agents are discoverable by the CLI loader (npm-app/src/agents/load-agents.ts) and have default exports\n- Spawning deep-thinker with a prompt yields spawn_agents, then proceeds to STEP and produces a synthesized last message\n- Spawning deepest-thinker with a prompt triggers instructions guiding spawning multiple deep-thinker agents and returns all messages output mode\n- spawn_agents permission checks pass: deep-thinker may spawn gpt5-thinker, sonnet-thinker, gemini-thinker; deepest-thinker may spawn deep-thinker\n- No type or validation errors during spawn (prompt schemas are simple string descriptors and do not use zod directly in .agents definitions)",
      "prompt": "Add a family of deep-thinking agents that orchestrate multi-model analysis. Create one coordinator agent that spawns three distinct sub-thinkers (OpenAI, Anthropic, and Gemini) and synthesizes their perspectives, plus a meta-coordinator that can spawn multiple instances of the coordinator to tackle different aspects of a problem. Each agent should define a clear purpose, model, and prompts, and the coordinators should be able to spawn their sub-agents. Ensure the definitions follow the existing agent typing, validation, and spawn mechanics used across the project.",
      "supplementalFiles": [
        ".agents/types/agent-definition.ts",
        ".agents/types/secret-agent-definition.ts",
        ".agents/factory/thinking-base.ts",
        "backend/src/tools/definitions/tool/spawn-agents.ts",
        "backend/src/tools/handlers/tool/spawn-agents.ts",
        "backend/src/run-programmatic-step.ts",
        "backend/src/run-agent-step.ts",
        "backend/src/templates/agent-registry.ts",
        "common/src/types/dynamic-agent-template.ts",
        "npm-app/src/agents/load-agents.ts",
        "common/src/tools/constants.ts",
        "backend/src/tools/definitions/list.ts",
        "backend/src/tools/tool-executor.ts"
      ],
      "fileDiffs": [
        {
          "path": ".agents/deep-thinking/deep-thinker.ts",
          "status": "added",
          "diff": "Index: .agents/deep-thinking/deep-thinker.ts\n===================================================================\n--- .agents/deep-thinking/deep-thinker.ts\tda2be98 (parent)\n+++ .agents/deep-thinking/deep-thinker.ts\t6c362c3 (commit)\n@@ -1,1 +1,70 @@\n-[NEW FILE]\n\\ No newline at end of file\n+import type { AgentDefinition } from '../types/agent-definition'\n+\n+const definition: AgentDefinition = {\n+  id: 'deep-thinker',\n+  displayName: 'Deep Thinker Agent',\n+  model: 'openai/gpt-5',\n+  reasoningOptions: {\n+    enabled: true,\n+    effort: 'high',\n+    // Don't include reasoning in final output.\n+    exclude: true,\n+  },\n+\n+  toolNames: ['spawn_agents'],\n+  spawnableAgents: [\n+    'gpt5-thinker',\n+    'sonnet-thinker',\n+    'gemini-thinker',\n+  ],\n+\n+  includeMessageHistory: true,\n+  inputSchema: {\n+    prompt: {\n+      type: 'string',\n+      description:\n+        'The topic, question, or problem to think deeply about and the goal you want to accomplish',\n+    },\n+  },\n+\n+  outputMode: 'last_message',\n+  spawnerPrompt:\n+    'Spawn this agent when you need the deepest possible analysis and thinking on any topic. It coordinates multiple AI models to provide comprehensive, multi-perspective insights.',\n+\n+  systemPrompt:\n+    'You are the Deep Thinker, an agent designed to provide the most comprehensive and insightful analysis possible.',\n+\n+  instructionsPrompt:\n+    'Synthesize the perspectives from your three sub-agents (GPT-5 deep thinker, Claude Sonnet balanced thinker, and Gemini Pro creative thinker) into a unified, deeper understanding. Prefer finding simple solutions if possible. Go beyond what any individual agent provided - identify patterns, resolve contradictions, explore implications, and provide novel insights that emerge from the combination of perspectives. Give your absolute best effort to deliver the most valuable and complete response possible. Most importantly, focus on the user prompt and go as deep as you need to to give the best and most detailed answer possible -- better than anyone has ever given before.',\n+\n+  handleSteps: function* ({ agentState, prompt, params }) {\n+    // Spawn all three thinking agents in parallel\n+\n+    const promptWithDefault = prompt ?? 'Think about this topic'\n+\n+    yield {\n+      toolName: 'spawn_agents',\n+      input: {\n+        agents: [\n+          {\n+            agent_type: 'gpt5-thinker',\n+            prompt: promptWithDefault,\n+          },\n+          {\n+            agent_type: 'sonnet-thinker',\n+            prompt: promptWithDefault,\n+          },\n+          {\n+            agent_type: 'gemini-thinker',\n+            prompt: promptWithDefault,\n+          },\n+        ],\n+      },\n+    }\n+\n+    // Let the main agent process and synthesize all the responses\n+    yield 'STEP'\n+  },\n+}\n+\n+export default definition\n"
        },
        {
          "path": ".agents/deep-thinking/deepest-thinker.ts",
          "status": "added",
          "diff": "Index: .agents/deep-thinking/deepest-thinker.ts\n===================================================================\n--- .agents/deep-thinking/deepest-thinker.ts\tda2be98 (parent)\n+++ .agents/deep-thinking/deepest-thinker.ts\t6c362c3 (commit)\n@@ -1,1 +1,40 @@\n-[NEW FILE]\n\\ No newline at end of file\n+import type { AgentDefinition } from '../types/agent-definition'\n+\n+const definition: AgentDefinition = {\n+  id: 'deepest-thinker',\n+  displayName: 'Deepest Thinker Agent',\n+  model: 'openai/gpt-5',\n+  reasoningOptions: {\n+    enabled: true,\n+    effort: 'high',\n+    exclude: true,\n+  },\n+\n+  toolNames: ['spawn_agents'],\n+  spawnableAgents: ['deep-thinker'],\n+\n+  includeMessageHistory: true,\n+  inputSchema: {\n+    prompt: {\n+      type: 'string',\n+      description:\n+        'The topic, question, or problem to think as deeply as possible about. Provide as much detail and context as you can.',\n+    },\n+  },\n+\n+  outputMode: 'all_messages',\n+\n+  spawnerPrompt:\n+    'Spawn this agent when you need the absolute deepest, most comprehensive analysis possible. It breaks down problems into multiple aspects and coordinates deep-thinkers to provide the ultimate synthesis.',\n+\n+  systemPrompt:\n+    'You are the Deepest Thinker, the ultimate analysis agent designed to provide the most profound and comprehensive insights humanly possible.',\n+\n+  instructionsPrompt: `Your mission is to provide the deepest possible analysis by prompting deep-thinker agents with important subproblems:\n+  \n+Spawn 4 deep-thinker agents to analyze different aspects of the user's prompt. It's up to you to come up with the 4 different aspects to analyze. Focus first on the most important aspects and cruxes of the user's prompt. Instruct them to find simple solutions if possible. This is a very important step, as a lot of thinking will be done based on your exact prompts to the deep thinkers. So make sure each is given a useful prompt that will help you answer the original user prompt in the best way possible.\n+\n+After spawning the agents you are done. Don't write anything else.`,\n+}\n+\n+export default definition\n"
        },
        {
          "path": ".agents/deep-thinking/gemini-thinker.ts",
          "status": "added",
          "diff": "Index: .agents/deep-thinking/gemini-thinker.ts\n===================================================================\n--- .agents/deep-thinking/gemini-thinker.ts\tda2be98 (parent)\n+++ .agents/deep-thinking/gemini-thinker.ts\t6c362c3 (commit)\n@@ -1,1 +1,32 @@\n-[NEW FILE]\n\\ No newline at end of file\n+import type { AgentDefinition } from '../types/agent-definition'\n+\n+const definition: AgentDefinition = {\n+  id: 'gemini-thinker',\n+  displayName: 'Gemini Pro Creative Thinker',\n+  model: 'google/gemini-2.5-pro',\n+  reasoningOptions: {\n+    enabled: true,\n+    effort: 'low',\n+    exclude: false,\n+  },\n+\n+  inputSchema: {\n+    prompt: {\n+      type: 'string',\n+      description:\n+        'The topic or question to explore with creative and innovative thinking',\n+    },\n+  },\n+\n+  includeMessageHistory: true,\n+\n+  outputMode: 'last_message',\n+\n+  spawnerPrompt:\n+    'Spawn this agent when you need creative, innovative thinking on a topic using Gemini Pro.',\n+\n+  instructionsPrompt:\n+    'You are a creative thinker using Gemini Pro. Approach the given prompt with innovation and creativity. Think outside the box, consider unconventional angles, and explore novel connections. Generate fresh insights and imaginative solutions while maintaining logical coherence. Your goal is to bring a unique creative perspective to complement other analytical approaches.',\n+}\n+\n+export default definition\n"
        },
        {
          "path": ".agents/deep-thinking/gpt5-thinker.ts",
          "status": "added",
          "diff": "Index: .agents/deep-thinking/gpt5-thinker.ts\n===================================================================\n--- .agents/deep-thinking/gpt5-thinker.ts\tda2be98 (parent)\n+++ .agents/deep-thinking/gpt5-thinker.ts\t6c362c3 (commit)\n@@ -1,1 +1,29 @@\n-[NEW FILE]\n\\ No newline at end of file\n+import type { AgentDefinition } from '../types/agent-definition'\n+\n+const definition: AgentDefinition = {\n+  id: 'gpt5-thinker',\n+  displayName: 'GPT-5 Quick Thinker',\n+  model: 'openai/gpt-5',\n+  reasoningOptions: {\n+    enabled: true,\n+    effort: 'low',\n+    exclude: false\n+  },\n+  \n+  inputSchema: {\n+    prompt: { \n+      type: 'string', \n+      description: 'The topic or question to think about deeply and thoroughly' \n+    }\n+  },\n+  \n+  includeMessageHistory: true,\n+  \n+  outputMode: 'last_message',\n+  \n+  spawnerPrompt: 'Spawn this agent when you need quick thinking on a topic using GPT-5 with focused reasoning effort.',\n+  \n+\n+  instructionsPrompt: 'You are a deep thinker using GPT-5 with focused reasoning. Think hard about the given prompt and provide insightful analysis. Dive deep into the topic, explore multiple angles, and generate meaningful insights. Your goal is to offer a perspective that contributes valuable depth to the overall analysis.'\n+}\n+export default definition\n\\ No newline at end of file\n"
        },
        {
          "path": ".agents/deep-thinking/sonnet-thinker.ts",
          "status": "added",
          "diff": "Index: .agents/deep-thinking/sonnet-thinker.ts\n===================================================================\n--- .agents/deep-thinking/sonnet-thinker.ts\tda2be98 (parent)\n+++ .agents/deep-thinking/sonnet-thinker.ts\t6c362c3 (commit)\n@@ -1,1 +1,24 @@\n-[NEW FILE]\n\\ No newline at end of file\n+import type { AgentDefinition } from '../types/agent-definition'\n+\n+const definition: AgentDefinition = {\n+  id: 'sonnet-thinker',\n+  displayName: 'Claude Sonnet Deep Thinker',\n+  model: 'anthropic/claude-4-sonnet-20250522',\n+  \n+  inputSchema: {\n+    prompt: { \n+      type: 'string', \n+      description: 'The topic or question to analyze with balanced depth and nuance' \n+    }\n+  },\n+  \n+  includeMessageHistory: true,\n+  \n+  outputMode: 'last_message',\n+  \n+  spawnerPrompt: 'Spawn this agent when you need balanced, nuanced thinking on a topic using Claude Sonnet 4.',\n+  \n+  instructionsPrompt: 'You are a balanced thinker using Claude Sonnet 4. Provide thoughtful, nuanced analysis that considers multiple perspectives and implications. Focus on depth while maintaining clarity. Consider edge cases, potential counterarguments, and broader context. Your analysis should be comprehensive yet well-structured.'\n+}\n+\n+export default definition\n\\ No newline at end of file\n"
        }
      ]
    },
    {
      "id": "validate-custom-tools",
      "sha": "30dc4867cf1ea5ee3a5b1d78f545c6f9db53be21",
      "parentSha": "212590da3577ddebdc9136e3929fcc5d586f8d2a",
      "spec": "Implement schema-based validation for custom tool inputs and adjust the data flow so the SDK parses inputs, while the backend only validates and strips the end-step flag:\n\n1) Backend: backend/src/tools/tool-executor.ts\n- In parseRawCustomToolCall:\n  - Keep the existing JSON Schema → Zod conversion and safeParse for validation.\n  - After validation succeeds, create a deep copy of rawToolCall.input (e.g., via JSON.parse(JSON.stringify(...))).\n  - Remove endsAgentStepParam (cb_easp) from this copied input if present.\n  - Return the copied input in the CustomToolCall (input: <copied-and-stripped>), NOT result.data. This preserves validation while ensuring the SDK receives the original shape without schema-driven transformations.\n- Do not change error handling: still return an error object when validation fails. Do not change parseRawToolCall.\n\n2) SDK: sdk/src/client.ts\n- Update CodebuffClient.run signature to be generic and accept typed custom tools:\n  - public async run<A extends string = string, B = any, C = any>({ ... customToolDefinitions?: CustomToolDefinition<A, B, C>[] ... })\n- In the custom tool handler branch (inside this.promptIdToCustomToolHandler[promptId]):\n  - Select the latest toolDef for the toolName.\n  - Parse the incoming input using toolDef.zodSchema.parse(input).\n  - Call the toolDef.handler with the parsed object.\n  - Return the tool result message as before (output.value = result.toolResultMessage).\n- Leave normal built-in tool handling unchanged.\n\n3) SDK: sdk/src/custom-tool.ts\n- Change the handler parameter type to accept the parsed Output type, not the raw Input type, for both the CustomToolDefinition interface and getCustomToolDefinintion factory:\n  - handler: (params: Output) => Promise<{ toolResultMessage: string }>\n- Preserve zodSchema and inputJsonSchema generation; endsAgentStep remains as-is.\n\nBehavioral outcomes:\n- Backend continues to validate custom tool inputs but forwards a sanitized copy of the original input (sans cb_easp) to the client.\n- SDK applies definitive Zod parsing and hands the parsed Output to the custom tool handler.\n- Type safety improves for custom tools via generics and updated handler signatures.\n- No changes to how built-in tools are parsed or executed, and no changes to endsAgentStep semantics beyond stripping from forwarded inputs.",
      "prompt": "Add schema-validated custom tool execution. Ensure the server validates custom tool inputs but forwards a sanitized copy of the original input (removing the end-of-step flag) to the client. In the SDK, parse custom tool inputs with the provided Zod schema before invoking the tool handler and update types so handlers receive fully parsed inputs. Keep built-in tool behavior and error handling unchanged.",
      "supplementalFiles": [
        "backend/src/tools/stream-parser.ts",
        "backend/src/xml-stream-parser.ts",
        "backend/src/tools/constants.ts",
        "common/src/tools/constants.ts",
        "sdk/src/index.ts"
      ],
      "fileDiffs": [
        {
          "path": "backend/src/tools/tool-executor.ts",
          "status": "modified",
          "diff": "Index: backend/src/tools/tool-executor.ts\n===================================================================\n--- backend/src/tools/tool-executor.ts\t212590d (parent)\n+++ backend/src/tools/tool-executor.ts\t30dc486 (commit)\n@@ -334,15 +334,15 @@\n       )}`,\n     }\n   }\n \n-  if (endsAgentStepParam in result.data) {\n-    delete result.data[endsAgentStepParam]\n+  const input = JSON.parse(JSON.stringify(rawToolCall.input))\n+  if (endsAgentStepParam in input) {\n+    delete input[endsAgentStepParam]\n   }\n-\n   return {\n     toolName: toolName,\n-    input: result.data,\n+    input,\n     toolCallId: rawToolCall.toolCallId,\n   }\n }\n \n"
        },
        {
          "path": "sdk/src/client.ts",
          "status": "modified",
          "diff": "Index: sdk/src/client.ts\n===================================================================\n--- sdk/src/client.ts\t212590d (parent)\n+++ sdk/src/client.ts\t30dc486 (commit)\n@@ -115,9 +115,9 @@\n    * @param maxAgentSteps - (Optional) Maximum number of steps the agent can take before stopping. Use this as a safety measure in case your agent starts going off the rails. A reasonable number is around 20.\n    *\n    * @returns A Promise that resolves to a RunState JSON object which you can pass to a subsequent run() call to continue the run.\n    */\n-  public async run({\n+  public async run<A extends string = string, B = any, C = any>({\n     agent,\n     prompt,\n     params,\n     handleEvent,\n@@ -135,9 +135,9 @@\n     previousRun?: RunState\n     projectFiles?: Record<string, string>\n     knowledgeFiles?: Record<string, string>\n     agentDefinitions?: AgentDefinition[]\n-    customToolDefinitions?: CustomToolDefinition[]\n+    customToolDefinitions?: CustomToolDefinition<A, B, C>[]\n     maxAgentSteps?: number\n   }): Promise<RunState> {\n     await this.websocketHandler.connect()\n \n@@ -168,15 +168,17 @@\n           throw new Error(\n             `Implementation for custom tool ${toolName} not found.`,\n           )\n         }\n-        const handler = toolDefs[toolDefs.length - 1].handler\n+        const toolDef = toolDefs[toolDefs.length - 1]\n+        const handler = toolDef.handler\n         try {\n           return {\n             success: true,\n             output: {\n               type: 'text',\n-              value: (await handler(input)).toolResultMessage,\n+              value: (await handler(toolDef.zodSchema.parse(input)))\n+                .toolResultMessage,\n             },\n           }\n         } catch (error) {\n           return {\n"
        },
        {
          "path": "sdk/src/custom-tool.ts",
          "status": "modified",
          "diff": "Index: sdk/src/custom-tool.ts\n===================================================================\n--- sdk/src/custom-tool.ts\t212590d (parent)\n+++ sdk/src/custom-tool.ts\t30dc486 (commit)\n@@ -12,9 +12,9 @@\n   inputJsonSchema: JSONSchema.BaseSchema\n   description?: string\n   endsAgentStep: boolean\n   exampleInputs: Input[]\n-  handler: (params: Input) => Promise<{\n+  handler: (params: Output) => Promise<{\n     toolResultMessage: string\n   }>\n }\n \n@@ -34,9 +34,9 @@\n   inputSchema: z.ZodType<Output, Input>\n   description?: string\n   endsAgentStep?: boolean\n   exampleInputs?: Input[]\n-  handler: (params: Input) => Promise<{\n+  handler: (params: Output) => Promise<{\n     toolResultMessage: string\n   }>\n }): CustomToolDefinition<ToolName, Output, Input> {\n   return {\n"
        }
      ]
    },
    {
      "id": "add-custom-tools",
      "sha": "212590da3577ddebdc9136e3929fcc5d586f8d2a",
      "parentSha": "9ed0f01496458a457fa6509ef5e4f5b3a06af1cb",
      "spec": "Implement end-to-end support for custom tools that are not part of the built-in ToolName enum.\n\nScope and requirements:\n1) File context and typing\n- Add a customToolDefinitions map to ProjectFileContext with the following shape:\n  - key: string toolName\n  - value: { inputJsonSchema: JSON Schema object; endsAgentStep?: boolean (default false); description?: string; exampleInputs?: array of example input objects }\n- Update common/src/util/file.ts:\n  - Introduce customToolDefinitionsSchema (record schema as described, default {}) and export its inferred types.\n  - Add customToolDefinitions to ProjectFileContextSchema and defaults (e.g., getDefaultProjectFileContext).\n  - Remove stale fileVersions field and its uses in defaults.\n- Update any call sites that construct a ProjectFileContext to include customToolDefinitions: {}\n  - npm-app/src/project-files.ts: include customToolDefinitions: {} in the returned context, remove fileVersions.\n  - evals/scaffolding.ts: include customToolDefinitions: {}, remove fileVersions.\n  - Update backend and common test fixtures to include customToolDefinitions and remove fileVersions where present.\n\n2) Agent and template typing\n- Allow agents to declare both built-in and custom tool names:\n  - common/src/types/agent-template.ts and common/src/templates/initial-agents-dir/types/agent-definition.ts: change toolNames type from ToolName[] to (ToolName | (string & {}))[].\n  - common/src/types/dynamic-agent-template.ts: change toolNames schema from z.array(z.enum(toolNames)) to z.string().array().optional().default([]).\n\n3) Prompt generation and tool description rendering\n- backend/src/tools/prompts.ts:\n  - Extend getToolsInstructions and getShortToolInstructions to accept readonly string[] and a customToolDefinitions map.\n  - For built-in tools, continue to render using zod schemas from codebuffToolDefs.\n  - For custom tools, render descriptions using inputJsonSchema (JSON Schema). Ensure endsAgentStep is reflected in the params schema by injecting the cb_easp const true requirement when endsAgentStep is true.\n  - Refactor paramsSection/buildToolDescription to accept either a zod schema or a JSON Schema variant (tag union), converting appropriately and injecting cb_easp when needed.\n  - Include optional examples for custom tools beneath their description using getToolCallString with provided exampleInputs.\n  - Minor example cleanups: str_replace old/new strings show a few lines of context; align indentation for add-message and set-messages examples.\n- backend/src/templates/strings.ts:\n  - Change tools parameter from ToolName[] to readonly string[].\n  - Pass fileContext.customToolDefinitions into getToolsInstructions and getShortToolInstructions when building prompts.\n\n4) Stream parsing and execution support for custom tools\n- backend/src/tools/stream-parser.ts:\n  - Register processors for all built-in toolNames and all keys of fileContext.customToolDefinitions.\n  - Collect tool calls as a union of built-in CodebuffToolCall and CustomToolCall.\n  - For built-ins, continue to call executeToolCall; for custom tools, delegate to a new executeCustomToolCall helper.\n\n- backend/src/tools/tool-executor.ts:\n  - Introduce type CustomToolCall { toolName: string; input: Record<string, unknown> } & Omit<ToolCallPart, 'type'>.\n  - Implement parseRawCustomToolCall(customToolDefs, rawToolCall, autoInsertEndStepParam=false):\n    - Validate input against the tool's inputJsonSchema by converting JSON Schema to Zod (use convertJsonSchemaToZod).\n    - If endsAgentStep is true for the tool, add cb_easp required const true in the validation schema and optionally auto-insert it into processed parameters.\n    - Return CustomToolCall or a ToolCallError with validation details.\n  - Implement executeCustomToolCall(ExecuteToolCallParams<string>):\n    - Parse and validate the raw tool call via parseRawCustomToolCall.\n    - Push a tool_call chunk to the client stream and append to toolCalls.\n    - Enforce availability: if agentTemplate.toolNames (string[]) does not include the toolName, push a tool result with a friendly error and return.\n    - Request execution via requestToolCall(ws, userInputId, toolName, input), push the tool_result chunk and append a rendered tool result system message to state.messages.\n\n5) SDK support to define and handle custom tools\n- sdk/src/custom-tool.ts:\n  - Add a helper getCustomToolDefinintion({ toolName, inputSchema, description?, endsAgentStep?, exampleInputs?, handler }) that returns a CustomToolDefinition with fields:\n    - toolName, zodSchema (the zod schema passed in), inputJsonSchema (z.toJSONSchema of inputSchema with io: 'input'), description, endsAgentStep, exampleInputs, handler(params) => { toolResultMessage: string }.\n  - Export the helper from sdk/src/index.ts.\n- sdk/src/client.ts:\n  - Accept an optional customToolDefinitions?: CustomToolDefinition[] in run() options and initialSessionState generation.\n  - Store a per-prompt mapping from promptId to a custom tool handler that dispatches based on toolName to the latest matching definition's handler.\n  - In handleToolCall, if the toolName is not a built-in (not in common toolNames), dispatch to the per-prompt custom tool handler; wrap handler errors into a successful text result with an error message or return success:false accordingly.\n- sdk/src/run-state.ts:\n  - Accept customToolDefinitions?: CustomToolDefinition[] in initialSessionState() and generateInitialRunState().\n  - Transform the array into a record keyed by toolName with { inputJsonSchema, description, endsAgentStep, exampleInputs } and set it on fileContext.customToolDefinitions.\n- sdk/package.json: bump zod to ^4.0.0 to align with zod/v4 usage.\n\n6) Tests and fixtures\n- Update backend and common tests/fixtures to include customToolDefinitions: {} within fileContext and remove fileVersions:\n  - backend/src/__tests__/* where fileContext is built or asserted (main-prompt*.test.ts, request-files-prompt.test.ts, run-agent-step-tools.test.ts, test-utils.ts).\n  - common/src/__tests__/handlesteps-parsing.test.ts.\n- Adjust any expectations that previously validated ToolName[] to allow string[] where appropriate.\n\n7) Documentation/safety\n- Ensure custom tool tags are recognized in the XML stream parser via the dynamic processor registration (no change to xml-stream-parser.ts itself).\n- Maintain existing security/auth checks; continue to use requestToolCall to route execution to the client SDK.\n\nNon-goals:\n- Do not alter built-in tool definitions or handlers beyond example formatting/indentation in add-message and set-messages descriptions.\n- Do not change xml-stream-parser behavior besides consumer registration of processors.\n\nAcceptance criteria:\n- Agents can declare custom tool names and receive tool instructions and short tool listings including custom tools.\n- During a run with customToolDefinitions provided from the SDK, the backend recognizes corresponding tool tags, validates inputs per JSON Schema, routes execution to the SDK client, and returns tool_result messages.\n- All updated tests pass with the new file context shape and without fileVersions.\n- SDK consumers can define a custom tool with getCustomToolDefinintion, pass it into run(), and observe it being callable by the model.\n",
      "prompt": "Add end-to-end support for user-defined custom tools alongside the built-in tool set. Agents should be able to list custom tools by string name, the system should describe and document them in prompts, recognize their calls in streamed responses, validate their inputs, and route execution to the SDK client where the tool handler runs. Include options for tools that end the agent step, and support example inputs for prompt documentation. Update types, schemas, and test fixtures accordingly.",
      "supplementalFiles": [
        "backend/src/xml-stream-parser.ts",
        "backend/src/websockets/websocket-action.ts",
        "backend/src/tools/definitions/list.ts",
        "common/src/tools/constants.ts",
        "common/src/tools/list.ts",
        "common/src/types/session-state.ts",
        "sdk/src/websocket-client.ts"
      ],
      "fileDiffs": [
        {
          "path": "backend/src/__tests__/main-prompt.integration.test.ts",
          "status": "modified",
          "diff": "Index: backend/src/__tests__/main-prompt.integration.test.ts\n===================================================================\n--- backend/src/__tests__/main-prompt.integration.test.ts\t9ed0f01 (parent)\n+++ backend/src/__tests__/main-prompt.integration.test.ts\t212590d (commit)\n@@ -55,10 +55,10 @@\n     arch: 'test',\n     homedir: '/home/test',\n     cpus: 1,\n   },\n-  fileVersions: [],\n   agentTemplates: {},\n+  customToolDefinitions: {},\n }\n \n // --- Integration Test with Real LLM Call ---\n describe.skip('mainPrompt (Integration)', () => {\n"
        },
        {
          "path": "backend/src/__tests__/main-prompt.test.ts",
          "status": "modified",
          "diff": "Index: backend/src/__tests__/main-prompt.test.ts\n===================================================================\n--- backend/src/__tests__/main-prompt.test.ts\t9ed0f01 (parent)\n+++ backend/src/__tests__/main-prompt.test.ts\t212590d (commit)\n@@ -213,17 +213,17 @@\n     },\n     changesSinceLastChat: {},\n     shellConfigFiles: {},\n     agentTemplates: {},\n+    customToolDefinitions: {},\n     systemInfo: {\n       platform: 'test',\n       shell: 'test',\n       nodeVersion: 'test',\n       arch: 'test',\n       homedir: '/home/test',\n       cpus: 1,\n     },\n-    fileVersions: [],\n   }\n \n   it('should add file updates to tool results in message history', async () => {\n     const sessionState = getInitialSessionState(mockFileContext)\n"
        },
        {
          "path": "backend/src/__tests__/request-files-prompt.test.ts",
          "status": "modified",
          "diff": "Index: backend/src/__tests__/request-files-prompt.test.ts\n===================================================================\n--- backend/src/__tests__/request-files-prompt.test.ts\t9ed0f01 (parent)\n+++ backend/src/__tests__/request-files-prompt.test.ts\t212590d (commit)\n@@ -91,8 +91,9 @@\n       homedir: '/Users/test',\n       cpus: 8,\n     },\n     agentTemplates: {},\n+    customToolDefinitions: {},\n   }\n   const mockAssistantPrompt = null\n   const mockAgentStepId = 'step1'\n   const mockClientSessionId = 'session1'\n"
        },
        {
          "path": "backend/src/__tests__/run-agent-step-tools.test.ts",
          "status": "modified",
          "diff": "Index: backend/src/__tests__/run-agent-step-tools.test.ts\n===================================================================\n--- backend/src/__tests__/run-agent-step-tools.test.ts\t9ed0f01 (parent)\n+++ backend/src/__tests__/run-agent-step-tools.test.ts\t212590d (commit)\n@@ -150,10 +150,10 @@\n       arch: 'test',\n       homedir: '/home/test',\n       cpus: 1,\n     },\n-    fileVersions: [],\n     agentTemplates: {},\n+    customToolDefinitions: {},\n   }\n \n   it('should set output with simple key-value pair', async () => {\n     const mockResponse =\n"
        },
        {
          "path": "backend/src/__tests__/test-utils.ts",
          "status": "modified",
          "diff": "Index: backend/src/__tests__/test-utils.ts\n===================================================================\n--- backend/src/__tests__/test-utils.ts\t9ed0f01 (parent)\n+++ backend/src/__tests__/test-utils.ts\t212590d (commit)\n@@ -14,8 +14,9 @@\n   fileTokenScores: {},\n   knowledgeFiles: {},\n   userKnowledgeFiles: {},\n   agentTemplates: {},\n+  customToolDefinitions: {},\n   gitChanges: {\n     status: '',\n     diff: '',\n     diffCached: '',\n@@ -30,6 +31,5 @@\n     arch: 'test',\n     homedir: '/home/test',\n     cpus: 1,\n   },\n-  fileVersions: [],\n }\n"
        },
        {
          "path": "backend/src/templates/strings.ts",
          "status": "modified",
          "diff": "Index: backend/src/templates/strings.ts\n===================================================================\n--- backend/src/templates/strings.ts\t9ed0f01 (parent)\n+++ backend/src/templates/strings.ts\t212590d (commit)\n@@ -18,9 +18,8 @@\n } from '../tools/prompts'\n import { parseUserMessage } from '../util/messages'\n \n import type { AgentTemplate, PlaceholderValue } from './types'\n-import type { ToolName } from '@codebuff/common/tools/constants'\n import type {\n   AgentState,\n   AgentTemplateType,\n } from '@codebuff/common/types/session-state'\n@@ -29,9 +28,9 @@\n export async function formatPrompt(\n   prompt: string,\n   fileContext: ProjectFileContext,\n   agentState: AgentState,\n-  tools: ToolName[],\n+  tools: readonly string[],\n   spawnableAgents: AgentTemplateType[],\n   agentTemplates: Record<string, AgentTemplate>,\n   intitialAgentPrompt?: string,\n ): Promise<string> {\n@@ -63,9 +62,12 @@\n     [PLACEHOLDER.GIT_CHANGES_PROMPT]: getGitChangesPrompt(fileContext),\n     [PLACEHOLDER.REMAINING_STEPS]: `${agentState.stepsRemaining!}`,\n     [PLACEHOLDER.PROJECT_ROOT]: fileContext.projectRoot,\n     [PLACEHOLDER.SYSTEM_INFO_PROMPT]: getSystemInfoPrompt(fileContext),\n-    [PLACEHOLDER.TOOLS_PROMPT]: getToolsInstructions(tools),\n+    [PLACEHOLDER.TOOLS_PROMPT]: getToolsInstructions(\n+      tools,\n+      fileContext.customToolDefinitions,\n+    ),\n     [PLACEHOLDER.AGENTS_PROMPT]: await buildSpawnableAgentsDescription(\n       spawnableAgents,\n       agentTemplates,\n     ),\n@@ -160,9 +162,12 @@\n   // Add tool instructions, spawnable agents, and output schema prompts to instructionsPrompt\n   if (promptType.type === 'instructionsPrompt' && agentState.agentType) {\n     addendum +=\n       '\\n\\n' +\n-      getShortToolInstructions(agentTemplate.toolNames) +\n+      getShortToolInstructions(\n+        agentTemplate.toolNames,\n+        fileContext.customToolDefinitions,\n+      ) +\n       '\\n\\n' +\n       (await buildSpawnableAgentsDescription(\n         agentTemplate.spawnableAgents,\n         agentTemplates,\n"
        },
        {
          "path": "backend/src/tools/definitions/tool/add-message.ts",
          "status": "modified",
          "diff": "Index: backend/src/tools/definitions/tool/add-message.ts\n===================================================================\n--- backend/src/tools/definitions/tool/add-message.ts\t9ed0f01 (parent)\n+++ backend/src/tools/definitions/tool/add-message.ts\t212590d (commit)\n@@ -6,10 +6,10 @@\n export const addMessageTool = {\n   toolName,\n   description: `\n Example:\n-    ${getToolCallString(toolName, {\n-      role: 'user',\n-      content: 'Hello, how are you?',\n-    })}\n+${getToolCallString(toolName, {\n+  role: 'user',\n+  content: 'Hello, how are you?',\n+})}\n   `.trim(),\n } satisfies ToolDescription\n"
        },
        {
          "path": "backend/src/tools/definitions/tool/set-messages.ts",
          "status": "modified",
          "diff": "Index: backend/src/tools/definitions/tool/set-messages.ts\n===================================================================\n--- backend/src/tools/definitions/tool/set-messages.ts\t9ed0f01 (parent)\n+++ backend/src/tools/definitions/tool/set-messages.ts\t212590d (commit)\n@@ -7,18 +7,18 @@\n export const setMessagesTool = {\n   toolName,\n   description: `\n Example:\n-    ${getToolCallString(toolName, {\n-      messages: [\n-        {\n-          role: 'user',\n-          content: 'Hello, how are you?',\n-        },\n-        {\n-          role: 'assistant',\n-          content: 'I am fine, thank you.',\n-        },\n-      ],\n-    })}\n+${getToolCallString(toolName, {\n+  messages: [\n+    {\n+      role: 'user',\n+      content: 'Hello, how are you?',\n+    },\n+    {\n+      role: 'assistant',\n+      content: 'I am fine, thank you.',\n+    },\n+  ],\n+})}\n   `.trim(),\n } satisfies ToolDescription\n"
        },
        {
          "path": "backend/src/tools/prompts.ts",
          "status": "modified",
          "diff": "Index: backend/src/tools/prompts.ts\n===================================================================\n--- backend/src/tools/prompts.ts\t9ed0f01 (parent)\n+++ backend/src/tools/prompts.ts\t212590d (commit)\n@@ -1,24 +1,51 @@\n import { endsAgentStepParam } from '@codebuff/common/tools/constants'\n import { getToolCallString } from '@codebuff/common/tools/utils'\n import { buildArray } from '@codebuff/common/util/array'\n+import { pluralize } from '@codebuff/common/util/string'\n import z from 'zod/v4'\n \n import { codebuffToolDefs } from './definitions/list'\n \n import type { ToolName } from '@codebuff/common/tools/constants'\n+import type { customToolDefinitionsSchema } from '@codebuff/common/util/file'\n+import type { JSONSchema } from 'zod/v4/core'\n \n-function paramsSection(schema: z.ZodObject, endsAgentStep: boolean) {\n-  const schemaWithEndsAgentStepParam = endsAgentStep\n-    ? schema.extend({\n-        [endsAgentStepParam]: z\n-          .literal(endsAgentStep)\n-          .describe('Easp flag must be set to true'),\n-      })\n-    : schema\n-  const jsonSchema = z.toJSONSchema(schemaWithEndsAgentStepParam, {\n-    io: 'input',\n-  })\n+function paramsSection(\n+  schema:\n+    | { type: 'zod'; value: z.ZodObject }\n+    | { type: 'json'; value: JSONSchema.BaseSchema },\n+  endsAgentStep: boolean,\n+) {\n+  const schemaWithEndsAgentStepParam =\n+    schema.type === 'zod'\n+      ? z.toJSONSchema(\n+          endsAgentStep\n+            ? schema.value.extend({\n+                [endsAgentStepParam]: z\n+                  .literal(endsAgentStep)\n+                  .describe('Easp flag must be set to true'),\n+              })\n+            : schema.value,\n+          { io: 'input' },\n+        )\n+      : JSON.parse(JSON.stringify(schema.value))\n+  if (schema.type === 'json') {\n+    if (!schemaWithEndsAgentStepParam.properties) {\n+      schemaWithEndsAgentStepParam.properties = {}\n+    }\n+    schemaWithEndsAgentStepParam.properties[endsAgentStepParam] = {\n+      const: true,\n+      type: 'boolean',\n+      description: 'Easp flag must be set to true',\n+    }\n+    if (!schemaWithEndsAgentStepParam.required) {\n+      schemaWithEndsAgentStepParam.required = []\n+    }\n+    schemaWithEndsAgentStepParam.required.push(endsAgentStepParam)\n+  }\n+\n+  const jsonSchema = schemaWithEndsAgentStepParam\n   delete jsonSchema.description\n   delete jsonSchema['$schema']\n   const paramsDescription = Object.keys(jsonSchema.properties ?? {}).length\n     ? JSON.stringify(jsonSchema, null, 2)\n@@ -33,43 +60,60 @@\n   return paramsSection\n }\n \n // Helper function to build the full tool description markdown\n-function buildToolDescription(\n+export function buildToolDescription(\n   toolName: string,\n-  schema: z.ZodObject,\n+  schema:\n+    | { type: 'zod'; value: z.ZodObject }\n+    | { type: 'json'; value: JSONSchema.BaseSchema },\n   description: string = '',\n   endsAgentStep: boolean,\n+  exampleInputs: any[] = [],\n ): string {\n+  const descriptionWithExamples = buildArray(\n+    description,\n+    exampleInputs.length > 0\n+      ? `${pluralize(exampleInputs.length, 'Example')}:`\n+      : '',\n+    ...exampleInputs.map((example) =>\n+      getToolCallString(toolName, example, endsAgentStep),\n+    ),\n+  ).join('\\n\\n')\n   return buildArray([\n     `### ${toolName}`,\n-    schema.description || '',\n+    schema.value.description || '',\n     paramsSection(schema, endsAgentStep),\n-    description,\n+    descriptionWithExamples,\n   ]).join('\\n\\n')\n }\n \n export const toolDescriptions = Object.fromEntries(\n   Object.entries(codebuffToolDefs).map(([name, config]) => [\n     name,\n     buildToolDescription(\n       name,\n-      config.parameters,\n+      { type: 'zod', value: config.parameters },\n       config.description,\n       config.endsAgentStep,\n     ),\n   ]),\n ) as Record<keyof typeof codebuffToolDefs, string>\n \n function buildShortToolDescription(\n   toolName: string,\n-  schema: z.ZodObject,\n+  schema:\n+    | { type: 'zod'; value: z.ZodObject }\n+    | { type: 'json'; value: JSONSchema.BaseSchema },\n   endsAgentStep: boolean,\n ): string {\n   return `${toolName}:\\n${paramsSection(schema, endsAgentStep)}`\n }\n \n-export const getToolsInstructions = (toolNames: readonly ToolName[]) =>\n+export const getToolsInstructions = (\n+  toolNames: readonly string[],\n+  customToolDefinitions: z.infer<typeof customToolDefinitionsSchema>,\n+) =>\n   `\n # Tools\n \n You (Buffy) have access to the following tools. Call them when needed.\n@@ -101,10 +145,10 @@\n ${getToolCallString('str_replace', {\n   path: 'path/to/example/file.ts',\n   replacements: [\n     {\n-      old: \"console.log('Hello world!');\\n\",\n-      new: \"console.log('Hello from Buffy!');\\n\",\n+      old: \"// some context\\nconsole.log('Hello world!');\\n\",\n+      new: \"// some context\\nconsole.log('Hello from Buffy!');\\n\",\n     },\n   ],\n })}\n \n@@ -134,15 +178,56 @@\n ## List of Tools\n \n These are the tools that you (Buffy) can use. The user cannot see these descriptions, so you should not reference any tool names, parameters, or descriptions.\n \n-${toolNames.map((name) => toolDescriptions[name]).join('\\n\\n')}`.trim()\n+${[\n+  ...(\n+    toolNames.filter((toolName) =>\n+      toolNames.includes(toolName as ToolName),\n+    ) as ToolName[]\n+  ).map((name) => toolDescriptions[name]),\n+  ...toolNames\n+    .filter((toolName) => toolName in customToolDefinitions)\n+    .map((toolName) => {\n+      const toolDef = customToolDefinitions[toolName]\n+      return buildToolDescription(\n+        toolName,\n+        { type: 'json', value: toolDef.inputJsonSchema },\n+        toolDef.description,\n+        toolDef.endsAgentStep,\n+        toolDef.exampleInputs,\n+      )\n+    }),\n+].join('\\n\\n')}`.trim()\n \n-export const getShortToolInstructions = (toolNames: readonly ToolName[]) => {\n-  const toolDescriptions = toolNames.map((name) => {\n-    const tool = codebuffToolDefs[name]\n-    return buildShortToolDescription(name, tool.parameters, tool.endsAgentStep)\n-  })\n+export const getShortToolInstructions = (\n+  toolNames: readonly string[],\n+  customToolDefinitions: z.infer<typeof customToolDefinitionsSchema>,\n+) => {\n+  const toolDescriptions = [\n+    ...(\n+      toolNames.filter(\n+        (name) => (name as keyof typeof codebuffToolDefs) in codebuffToolDefs,\n+      ) as (keyof typeof codebuffToolDefs)[]\n+    ).map((name) => {\n+      const tool = codebuffToolDefs[name]\n+      return buildShortToolDescription(\n+        name,\n+        { type: 'zod', value: tool.parameters },\n+        tool.endsAgentStep,\n+      )\n+    }),\n+    ...toolNames\n+      .filter((name) => name in customToolDefinitions)\n+      .map((name) => {\n+        const { inputJsonSchema, endsAgentStep } = customToolDefinitions[name]\n+        return buildShortToolDescription(\n+          name,\n+          { type: 'json', value: inputJsonSchema },\n+          endsAgentStep,\n+        )\n+      }),\n+  ]\n \n   return `## Tools\n Use the tools below to complete the user request, if applicable.\n \n"
        },
        {
          "path": "backend/src/tools/stream-parser.ts",
          "status": "modified",
          "diff": "Index: backend/src/tools/stream-parser.ts\n===================================================================\n--- backend/src/tools/stream-parser.ts\t9ed0f01 (parent)\n+++ backend/src/tools/stream-parser.ts\t212590d (commit)\n@@ -4,10 +4,11 @@\n \n import { expireMessages } from '../util/messages'\n import { sendAction } from '../websockets/websocket-action'\n import { processStreamWithTags } from '../xml-stream-parser'\n-import { executeToolCall } from './tool-executor'\n+import { executeCustomToolCall, executeToolCall } from './tool-executor'\n \n+import type { CustomToolCall } from './tool-executor'\n import type { AgentTemplate } from '../templates/types'\n import type { ToolName } from '@codebuff/common/tools/constants'\n import type { CodebuffToolCall } from '@codebuff/common/tools/list'\n import type { CodebuffMessage } from '@codebuff/common/types/message'\n@@ -65,9 +66,9 @@\n \n   const messages = [...options.messages]\n \n   const toolResults: ToolResult[] = []\n-  const toolCalls: CodebuffToolCall[] = []\n+  const toolCalls: (CodebuffToolCall | CustomToolCall)[] = []\n   const { promise: streamDonePromise, resolve: resolveStreamDonePromise } =\n     Promise.withResolvers<void>()\n   let previousToolCallFinished = streamDonePromise\n   const state: Record<string, any> = {\n@@ -119,14 +120,43 @@\n         })\n       },\n     }\n   }\n+  function customToolCallback(toolName: string) {\n+    return {\n+      onTagStart: () => {},\n+      onTagEnd: async (_: string, input: Record<string, string>) => {\n+        // delegated to reusable helper\n+        previousToolCallFinished = executeCustomToolCall({\n+          toolName,\n+          input,\n+          toolCalls,\n+          toolResults,\n+          previousToolCallFinished,\n+          ws,\n+          agentTemplate,\n+          fileContext,\n+          agentStepId,\n+          clientSessionId,\n+          userInputId,\n+          fullResponse: fullResponseChunks.join(''),\n+          onResponseChunk,\n+          state,\n+          userId,\n+        })\n+      },\n+    }\n+  }\n \n   const streamWithTags = processStreamWithTags(\n     stream,\n-    Object.fromEntries(\n-      toolNames.map((toolName) => [toolName, toolCallback(toolName)]),\n-    ),\n+    Object.fromEntries([\n+      ...toolNames.map((toolName) => [toolName, toolCallback(toolName)]),\n+      ...Object.keys(fileContext.customToolDefinitions).map((toolName) => [\n+        toolName,\n+        customToolCallback(toolName),\n+      ]),\n+    ]),\n     (toolName, error) => {\n       toolResults.push({\n         toolName,\n         toolCallId: generateCompactId(),\n"
        },
        {
          "path": "backend/src/tools/tool-executor.ts",
          "status": "modified",
          "diff": "Index: backend/src/tools/tool-executor.ts\n===================================================================\n--- backend/src/tools/tool-executor.ts\t9ed0f01 (parent)\n+++ backend/src/tools/tool-executor.ts\t212590d (commit)\n@@ -1,8 +1,9 @@\n import { endsAgentStepParam } from '@codebuff/common/tools/constants'\n import { renderToolResults } from '@codebuff/common/tools/utils'\n import { generateCompactId } from '@codebuff/common/util/string'\n import z from 'zod/v4'\n+import { convertJsonSchemaToZod } from 'zod-from-json-schema'\n \n import { checkLiveUserInput } from '../live-user-inputs'\n import { logger } from '../util/logger'\n import { asSystemMessage } from '../util/messages'\n@@ -19,11 +20,20 @@\n   CodebuffToolCall,\n } from '@codebuff/common/tools/list'\n import type { PrintModeEvent } from '@codebuff/common/types/print-mode'\n import type { ToolResult } from '@codebuff/common/types/session-state'\n-import type { ProjectFileContext } from '@codebuff/common/util/file'\n+import type {\n+  customToolDefinitionsSchema,\n+  ProjectFileContext,\n+} from '@codebuff/common/util/file'\n+import type { ToolCallPart } from 'ai'\n import type { WebSocket } from 'ws'\n \n+export type CustomToolCall = {\n+  toolName: string\n+  input: Record<string, unknown>\n+} & Omit<ToolCallPart, 'type'>\n+\n export type ToolCallError = {\n   toolName?: string\n   input: Record<string, unknown>\n   error: string\n@@ -95,12 +105,12 @@\n     toolCallId: rawToolCall.toolCallId,\n   } as CodebuffToolCall<T>\n }\n \n-export interface ExecuteToolCallParams<T extends ToolName = ToolName> {\n+export interface ExecuteToolCallParams<T extends string = ToolName> {\n   toolName: T\n   input: Record<string, unknown>\n-  toolCalls: CodebuffToolCall[]\n+  toolCalls: (CodebuffToolCall | CustomToolCall)[]\n   toolResults: ToolResult[]\n   previousToolCallFinished: Promise<void>\n   ws: WebSocket\n   agentTemplate: AgentTemplate\n@@ -257,4 +267,199 @@\n       content: asSystemMessage(renderToolResults([toolResult])),\n     })\n   })\n }\n+\n+export function parseRawCustomToolCall(\n+  customToolDefs: z.infer<typeof customToolDefinitionsSchema>,\n+  rawToolCall: {\n+    toolName: string\n+    toolCallId: string\n+    input: Record<string, unknown>\n+  },\n+  autoInsertEndStepParam: boolean = false,\n+): CustomToolCall | ToolCallError {\n+  const toolName = rawToolCall.toolName\n+\n+  if (!(toolName in customToolDefs)) {\n+    return {\n+      toolName,\n+      toolCallId: rawToolCall.toolCallId,\n+      input: rawToolCall.input,\n+      error: `Tool ${toolName} not found`,\n+    }\n+  }\n+\n+  const processedParameters: Record<string, any> = {}\n+  for (const [param, val] of Object.entries(rawToolCall.input ?? {})) {\n+    processedParameters[param] = val\n+  }\n+\n+  // Add the required codebuff_end_step parameter with the correct value for this tool if requested\n+  if (autoInsertEndStepParam) {\n+    processedParameters[endsAgentStepParam] =\n+      customToolDefs[toolName].endsAgentStep\n+  }\n+\n+  const jsonSchema = JSON.parse(\n+    JSON.stringify(customToolDefs[toolName].inputJsonSchema),\n+  )\n+  if (customToolDefs[toolName].endsAgentStep) {\n+    if (!jsonSchema.properties) {\n+      jsonSchema.properties = {}\n+    }\n+    jsonSchema.properties[endsAgentStepParam] = {\n+      const: true,\n+      type: 'boolean',\n+      description: 'Easp flag must be set to true',\n+    }\n+    if (!jsonSchema.required) {\n+      jsonSchema.required = []\n+    }\n+    jsonSchema.required.push(endsAgentStepParam)\n+  }\n+  const paramsSchema = convertJsonSchemaToZod(jsonSchema)\n+  const result = paramsSchema.safeParse(\n+    processedParameters,\n+  ) as z.ZodSafeParseResult<any>\n+\n+  if (!result.success) {\n+    return {\n+      toolName: toolName,\n+      toolCallId: rawToolCall.toolCallId,\n+      input: rawToolCall.input,\n+      error: `Invalid parameters for ${toolName}: ${JSON.stringify(\n+        result.error.issues,\n+        null,\n+        2,\n+      )}`,\n+    }\n+  }\n+\n+  if (endsAgentStepParam in result.data) {\n+    delete result.data[endsAgentStepParam]\n+  }\n+\n+  return {\n+    toolName: toolName,\n+    input: result.data,\n+    toolCallId: rawToolCall.toolCallId,\n+  }\n+}\n+\n+export function executeCustomToolCall({\n+  toolName,\n+  input,\n+  toolCalls,\n+  toolResults,\n+  previousToolCallFinished,\n+  ws,\n+  agentTemplate,\n+  fileContext,\n+  clientSessionId,\n+  userInputId,\n+  onResponseChunk,\n+  state,\n+  userId,\n+  autoInsertEndStepParam = false,\n+}: ExecuteToolCallParams<string>): Promise<void> {\n+  const toolCall: CustomToolCall | ToolCallError = parseRawCustomToolCall(\n+    fileContext.customToolDefinitions,\n+    {\n+      toolName,\n+      toolCallId: generateCompactId(),\n+      input,\n+    },\n+    autoInsertEndStepParam,\n+  )\n+  if ('error' in toolCall) {\n+    toolResults.push({\n+      toolName,\n+      toolCallId: toolCall.toolCallId,\n+      output: {\n+        type: 'text',\n+        value: toolCall.error,\n+      },\n+    })\n+    logger.debug(\n+      { toolCall, error: toolCall.error },\n+      `${toolName} error: ${toolCall.error}`,\n+    )\n+    return previousToolCallFinished\n+  }\n+\n+  onResponseChunk({\n+    type: 'tool_call',\n+    toolCallId: toolCall.toolCallId,\n+    toolName,\n+    input: toolCall.input,\n+  })\n+\n+  logger.debug(\n+    { toolCall },\n+    `${toolName} (${toolCall.toolCallId}) custom tool call detected in stream`,\n+  )\n+  toolCalls.push(toolCall)\n+\n+  // Filter out restricted tools in ask mode unless exporting summary\n+  if (!(agentTemplate.toolNames as string[]).includes(toolCall.toolName)) {\n+    toolResults.push({\n+      toolName,\n+      toolCallId: toolCall.toolCallId,\n+      output: {\n+        type: 'text',\n+        value: `Tool \\`${toolName}\\` is not currently available. Make sure to only use tools listed in the system instructions.`,\n+      },\n+    })\n+    return previousToolCallFinished\n+  }\n+\n+  return previousToolCallFinished\n+    .then(async () => {\n+      if (!checkLiveUserInput(userId, userInputId, clientSessionId)) {\n+        return ''\n+      }\n+\n+      const clientToolResult = await requestToolCall(\n+        ws,\n+        userInputId,\n+        toolCall.toolName,\n+        toolCall.input,\n+      )\n+      return (\n+        clientToolResult.error ??\n+        (clientToolResult.output?.type === 'text'\n+          ? clientToolResult.output.value\n+          : 'undefined')\n+      )\n+    })\n+    .then((result) => {\n+      const toolResult = {\n+        toolName,\n+        toolCallId: toolCall.toolCallId,\n+        output: {\n+          type: 'text' as const,\n+          value: result as string,\n+        },\n+      }\n+      logger.debug(\n+        { toolResult },\n+        `${toolName} (${toolResult.toolCallId}) custom tool result for tool`,\n+      )\n+      if (result === undefined) {\n+        return\n+      }\n+\n+      onResponseChunk({\n+        type: 'tool_result',\n+        toolCallId: toolResult.toolCallId,\n+        output: toolResult.output,\n+      })\n+\n+      toolResults.push(toolResult)\n+\n+      state.messages.push({\n+        role: 'user' as const,\n+        content: asSystemMessage(renderToolResults([toolResult])),\n+      })\n+    })\n+}\n"
        },
        {
          "path": "bun.lock",
          "status": "modified",
          "diff": "Index: bun.lock\n===================================================================\n--- bun.lock\t9ed0f01 (parent)\n+++ bun.lock\t212590d (commit)\n@@ -228,9 +228,9 @@\n       \"name\": \"@codebuff/sdk\",\n       \"version\": \"0.1.9\",\n       \"dependencies\": {\n         \"ai\": \"^5.0.0\",\n-        \"zod\": \"^3.25.67\",\n+        \"zod\": \"^4.0.0\",\n       },\n       \"devDependencies\": {\n         \"@types/bun\": \"^1.2.11\",\n         \"@types/node\": \"22\",\n"
        },
        {
          "path": "common/src/__tests__/handlesteps-parsing.test.ts",
          "status": "modified",
          "diff": "Index: common/src/__tests__/handlesteps-parsing.test.ts\n===================================================================\n--- common/src/__tests__/handlesteps-parsing.test.ts\t9ed0f01 (parent)\n+++ common/src/__tests__/handlesteps-parsing.test.ts\t212590d (commit)\n@@ -19,8 +19,9 @@\n       fileTree: [],\n       fileTokenScores: {},\n       knowledgeFiles: {},\n       agentTemplates: {},\n+      customToolDefinitions: {},\n       gitChanges: {\n         status: '',\n         diff: '',\n         diffCached: '',\n"
        },
        {
          "path": "common/src/templates/initial-agents-dir/types/agent-definition.ts",
          "status": "modified",
          "diff": "Index: common/src/templates/initial-agents-dir/types/agent-definition.ts\n===================================================================\n--- common/src/templates/initial-agents-dir/types/agent-definition.ts\t9ed0f01 (parent)\n+++ common/src/templates/initial-agents-dir/types/agent-definition.ts\t212590d (commit)\n@@ -55,9 +55,9 @@\n   // Tools and Subagents\n   // ============================================================================\n \n   /** Tools this agent can use. */\n-  toolNames?: ToolName[]\n+  toolNames?: (ToolName | (string & {}))[]\n \n   /** Other agents this agent can spawn, like 'codebuff/file-picker@0.0.1'.\n    *\n    * Use the fully qualified agent id from the agent store, including publisher and version: 'codebuff/file-picker@0.0.1'\n"
        },
        {
          "path": "common/src/types/agent-template.ts",
          "status": "modified",
          "diff": "Index: common/src/types/agent-template.ts\n===================================================================\n--- common/src/types/agent-template.ts\t9ed0f01 (parent)\n+++ common/src/types/agent-template.ts\t212590d (commit)\n@@ -13,9 +13,9 @@\n   displayName: string\n   model: Model\n   reasoningOptions?: OpenRouterProviderOptions['reasoning']\n \n-  toolNames: ToolName[]\n+  toolNames: (ToolName | (string & {}))[]\n   spawnableAgents: AgentTemplateType[]\n \n   spawnerPrompt?: string\n   systemPrompt: string\n"
        },
        {
          "path": "common/src/types/dynamic-agent-template.ts",
          "status": "modified",
          "diff": "Index: common/src/types/dynamic-agent-template.ts\n===================================================================\n--- common/src/types/dynamic-agent-template.ts\t9ed0f01 (parent)\n+++ common/src/types/dynamic-agent-template.ts\t212590d (commit)\n@@ -1,8 +1,7 @@\n import { z } from 'zod/v4'\n \n import { ALLOWED_MODEL_PREFIXES, models } from '../constants'\n-import { toolNames } from '../tools/constants'\n \n import type { JSONSchema } from 'zod/v4/core'\n \n // Filter models to only include those that begin with allowed prefixes\n@@ -114,9 +113,9 @@\n     )\n     .optional(),\n \n   // Tools and spawnable agents\n-  toolNames: z.array(z.enum(toolNames)).optional().default([]),\n+  toolNames: z.string().array().optional().default([]),\n   spawnableAgents: z.array(z.string()).optional().default([]),\n \n   // Input and output\n   inputSchema: InputSchemaObjectSchema,\n"
        },
        {
          "path": "common/src/util/file.ts",
          "status": "modified",
          "diff": "Index: common/src/util/file.ts\n===================================================================\n--- common/src/util/file.ts\t9ed0f01 (parent)\n+++ common/src/util/file.ts\t212590d (commit)\n@@ -4,9 +4,8 @@\n \n import { z } from 'zod/v4'\n \n import { CodebuffConfigSchema } from '../json-config/constants'\n-import { DynamicAgentTemplateSchema } from '../types/dynamic-agent-template'\n \n export const FileTreeNodeSchema: z.ZodType<FileTreeNode> = z.object({\n   name: z.string(),\n   type: z.enum(['file', 'directory']),\n@@ -38,8 +37,21 @@\n })\n \n export type FileVersion = z.infer<typeof FileVersionSchema>\n \n+export const customToolDefinitionsSchema = z\n+  .record(\n+    z.string(),\n+    z.object({\n+      inputJsonSchema: z.any(),\n+      endsAgentStep: z.boolean().optional().default(false),\n+      description: z.string().optional(),\n+      exampleInputs: z.record(z.string(), z.any()).array().optional(),\n+    }),\n+  )\n+  .default({})\n+export type CustomToolDefinitions = z.input<typeof customToolDefinitionsSchema>\n+\n export const ProjectFileContextSchema = z.object({\n   projectRoot: z.string(),\n   cwd: z.string(),\n   fileTree: z.array(z.custom<FileTreeNode>()),\n@@ -49,8 +61,9 @@\n     .optional(),\n   knowledgeFiles: z.record(z.string(), z.string()),\n   userKnowledgeFiles: z.record(z.string(), z.string()).optional(),\n   agentTemplates: z.record(z.string(), z.any()).default({}),\n+  customToolDefinitions: customToolDefinitionsSchema,\n   codebuffConfig: CodebuffConfigSchema.optional(),\n   gitChanges: z.object({\n     status: z.string(),\n     diff: z.string(),\n@@ -66,9 +79,8 @@\n     arch: z.string(),\n     homedir: z.string(),\n     cpus: z.number(),\n   }),\n-  fileVersions: z.array(z.array(FileVersionSchema)).optional(), // Keep temporarily for migration\n })\n \n export type ProjectFileContext = z.infer<typeof ProjectFileContextSchema>\n \n@@ -95,8 +107,9 @@\n   fileTokenScores: {},\n   knowledgeFiles: {},\n   userKnowledgeFiles: {},\n   agentTemplates: {},\n+  customToolDefinitions: {},\n   codebuffConfig: undefined,\n   gitChanges: {\n     status: '',\n     diff: '',\n"
        },
        {
          "path": "evals/scaffolding.ts",
          "status": "modified",
          "diff": "Index: evals/scaffolding.ts\n===================================================================\n--- evals/scaffolding.ts\t9ed0f01 (parent)\n+++ evals/scaffolding.ts\t212590d (commit)\n@@ -135,15 +135,15 @@\n       diffCached: '',\n       lastCommitMessages: '',\n     },\n     changesSinceLastChat: {},\n-    fileVersions: [],\n     systemInfo: getSystemInfo(),\n     shellConfigFiles: {},\n     knowledgeFiles,\n     fileTokenScores,\n     fileTree,\n     agentTemplates: {},\n+    customToolDefinitions: {},\n   }\n }\n \n export async function runAgentStepScaffolding(\n"
        },
        {
          "path": "npm-app/src/project-files.ts",
          "status": "modified",
          "diff": "Index: npm-app/src/project-files.ts\n===================================================================\n--- npm-app/src/project-files.ts\t9ed0f01 (parent)\n+++ npm-app/src/project-files.ts\t212590d (commit)\n@@ -309,15 +309,15 @@\n       fileTokenScores: tokenScores,\n       tokenCallers,\n       knowledgeFiles: knowledgeFilesWithScrapedContent,\n       agentTemplates: await loadLocalAgents({ verbose: false }),\n+      customToolDefinitions: {},\n       codebuffConfig,\n       shellConfigFiles,\n       systemInfo: getSystemInfo(),\n       userKnowledgeFiles: userKnowledgeFilesWithScrapedContent,\n       gitChanges,\n       changesSinceLastChat,\n-      fileVersions: [],\n     }\n   }\n \n   return cachedProjectFileContext\n"
        },
        {
          "path": "sdk/package.json",
          "status": "modified",
          "diff": "Index: sdk/package.json\n===================================================================\n--- sdk/package.json\t9ed0f01 (parent)\n+++ sdk/package.json\t212590d (commit)\n@@ -52,9 +52,9 @@\n     \"url\": \"https://github.com/codebuff/codebuff/issues\"\n   },\n   \"dependencies\": {\n     \"ai\": \"^5.0.0\",\n-    \"zod\": \"^3.25.67\"\n+    \"zod\": \"^4.0.0\"\n   },\n   \"devDependencies\": {\n     \"@types/node\": \"22\",\n     \"@types/bun\": \"^1.2.11\"\n"
        },
        {
          "path": "sdk/src/client.ts",
          "status": "modified",
          "diff": "Index: sdk/src/client.ts\n===================================================================\n--- sdk/src/client.ts\t9ed0f01 (parent)\n+++ sdk/src/client.ts\t212590d (commit)\n@@ -8,10 +8,13 @@\n   type ServerAction,\n } from '../../common/src/actions'\n import { API_KEY_ENV_VAR } from '../../common/src/constants'\n import { DEFAULT_MAX_AGENT_STEPS } from '../../common/src/json-config/constants'\n+import { toolNames } from '../../common/src/tools/constants'\n \n+import type { CustomToolDefinition } from './custom-tool'\n import type { AgentDefinition } from '../../common/src/templates/initial-agents-dir/types/agent-definition'\n+import type { ToolName } from '../../common/src/tools/constants'\n import type { PrintModeEvent } from '../../common/src/types/print-mode'\n \n type ClientToolName = 'write_file' | 'run_terminal_command'\n \n@@ -51,8 +54,12 @@\n   private readonly promptIdToResolveResponse: Record<\n     string,\n     { resolve: (response: any) => void; reject: (error: any) => void }\n   > = {}\n+  private readonly promptIdToCustomToolHandler: Record<\n+    string,\n+    WebSocketHandler['handleToolCall']\n+  > = {}\n \n   constructor({ apiKey, cwd, onError, overrideTools }: CodebuffClientOptions) {\n     const foundApiKey = apiKey ?? process.env[API_KEY_ENV_VAR]\n     if (!foundApiKey) {\n@@ -117,8 +124,9 @@\n     previousRun,\n     projectFiles,\n     knowledgeFiles,\n     agentDefinitions,\n+    customToolDefinitions,\n     maxAgentSteps = DEFAULT_MAX_AGENT_STEPS,\n   }: {\n     agent: string\n     prompt: string\n@@ -127,8 +135,9 @@\n     previousRun?: RunState\n     projectFiles?: Record<string, string>\n     knowledgeFiles?: Record<string, string>\n     agentDefinitions?: AgentDefinition[]\n+    customToolDefinitions?: CustomToolDefinition[]\n     maxAgentSteps?: number\n   }): Promise<RunState> {\n     await this.websocketHandler.connect()\n \n@@ -137,16 +146,58 @@\n       previousRun?.sessionState ??\n       initialSessionState(this.cwd, {\n         knowledgeFiles,\n         agentDefinitions,\n+        customToolDefinitions,\n         projectFiles,\n         maxAgentSteps,\n       })\n     sessionState.mainAgentState.stepsRemaining = maxAgentSteps\n     const toolResults = previousRun?.toolResults ?? []\n     if (handleEvent) {\n       this.promptIdToHandleEvent[promptId] = handleEvent\n     }\n+    if (customToolDefinitions) {\n+      this.promptIdToCustomToolHandler[promptId] = async ({\n+        toolName,\n+        input,\n+      }) => {\n+        const toolDefs = customToolDefinitions.filter(\n+          (def) => def.toolName === toolName,\n+        )\n+        if (toolDefs.length === 0) {\n+          throw new Error(\n+            `Implementation for custom tool ${toolName} not found.`,\n+          )\n+        }\n+        const handler = toolDefs[toolDefs.length - 1].handler\n+        try {\n+          return {\n+            success: true,\n+            output: {\n+              type: 'text',\n+              value: (await handler(input)).toolResultMessage,\n+            },\n+          }\n+        } catch (error) {\n+          return {\n+            success: false,\n+            output: {\n+              type: 'text',\n+              value:\n+                error &&\n+                typeof error === 'object' &&\n+                'message' in error &&\n+                typeof error.message === 'string'\n+                  ? error.message\n+                  : typeof error === 'string'\n+                    ? error\n+                    : 'Unknown error',\n+            },\n+          }\n+        }\n+      }\n+    }\n     this.websocketHandler.sendInput({\n       promptId,\n       prompt,\n       promptParams: params,\n@@ -188,8 +239,9 @@\n       promiseActions.resolve(state)\n \n       delete this.promptIdToResolveResponse[action.promptId]\n       delete this.promptIdToHandleEvent[action.promptId]\n+      delete this.promptIdToCustomToolHandler[action.promptId]\n     }\n   }\n \n   private async readFiles(filePath: string[]) {\n@@ -205,9 +257,14 @@\n     action: ServerAction<'tool-call-request'>,\n   ): ReturnType<WebSocketHandler['handleToolCall']> {\n     const toolName = action.toolName\n     const input = action.input\n+\n     let result: string\n+    if (!toolNames.includes(toolName as ToolName)) {\n+      return this.promptIdToCustomToolHandler[action.userInputId](action)\n+    }\n+\n     try {\n       let override = this.overrideTools[toolName as ClientToolName]\n       if (!override && toolName === 'str_replace') {\n         // Note: write_file and str_replace have the same implementation, so reuse their write_file override.\n"
        },
        {
          "path": "sdk/src/custom-tool.ts",
          "status": "added",
          "diff": "Index: sdk/src/custom-tool.ts\n===================================================================\n--- sdk/src/custom-tool.ts\t9ed0f01 (parent)\n+++ sdk/src/custom-tool.ts\t212590d (commit)\n@@ -1,1 +1,51 @@\n-[NEW FILE]\n\\ No newline at end of file\n+import z from 'zod/v4'\n+\n+import type { JSONSchema } from 'zod/v4/core'\n+\n+export type CustomToolDefinition<\n+  N extends string = string,\n+  Output = any,\n+  Input = any,\n+> = {\n+  toolName: N\n+  zodSchema: z.ZodType<Output, Input>\n+  inputJsonSchema: JSONSchema.BaseSchema\n+  description?: string\n+  endsAgentStep: boolean\n+  exampleInputs: Input[]\n+  handler: (params: Input) => Promise<{\n+    toolResultMessage: string\n+  }>\n+}\n+\n+export function getCustomToolDefinintion<\n+  ToolName extends string,\n+  Output,\n+  Input,\n+>({\n+  toolName,\n+  inputSchema,\n+  description,\n+  endsAgentStep = false,\n+  exampleInputs = [],\n+  handler,\n+}: {\n+  toolName: ToolName\n+  inputSchema: z.ZodType<Output, Input>\n+  description?: string\n+  endsAgentStep?: boolean\n+  exampleInputs?: Input[]\n+  handler: (params: Input) => Promise<{\n+    toolResultMessage: string\n+  }>\n+}): CustomToolDefinition<ToolName, Output, Input> {\n+  return {\n+    toolName,\n+    zodSchema: inputSchema,\n+    inputJsonSchema: z.toJSONSchema(inputSchema, { io: 'input' }),\n+    description,\n+    endsAgentStep,\n+    exampleInputs,\n+    handler,\n+  }\n+}\n"
        },
        {
          "path": "sdk/src/index.ts",
          "status": "modified",
          "diff": "Index: sdk/src/index.ts\n===================================================================\n--- sdk/src/index.ts\t9ed0f01 (parent)\n+++ sdk/src/index.ts\t212590d (commit)\n@@ -1,5 +1,6 @@\n export { CodebuffClient } from './client'\n+export { getCustomToolDefinintion } from './custom-tool'\n export {\n   generateInitialRunState,\n   initialSessionState,\n   withAdditionalMessage,\n"
        },
        {
          "path": "sdk/src/run-state.ts",
          "status": "modified",
          "diff": "Index: sdk/src/run-state.ts\n===================================================================\n--- sdk/src/run-state.ts\t9ed0f01 (parent)\n+++ sdk/src/run-state.ts\t212590d (commit)\n@@ -1,12 +1,14 @@\n import * as os from 'os'\n \n+import { type CustomToolDefinition } from './custom-tool'\n import { getInitialSessionState } from '../../common/src/types/session-state'\n \n import type { ServerAction } from '../../common/src/actions'\n import type { AgentDefinition } from '../../common/src/templates/initial-agents-dir/types/agent-definition'\n import type { CodebuffMessage } from '../../common/src/types/message'\n import type { SessionState } from '../../common/src/types/session-state'\n+import type { CustomToolDefinitions } from '../../common/src/util/file'\n \n export type RunState = {\n   sessionState: SessionState\n   toolResults: ServerAction<'prompt-response'>['toolResults']\n@@ -18,8 +20,9 @@\n     // TODO: Parse projectFiles into fileTree, fileTokenScores, tokenCallers\n     projectFiles?: Record<string, string>\n     knowledgeFiles?: Record<string, string>\n     agentDefinitions?: AgentDefinition[]\n+    customToolDefinitions?: CustomToolDefinition[]\n     maxAgentSteps?: number\n   },\n ) {\n   const { projectFiles = {}, agentDefinitions = [] } = options\n@@ -57,8 +60,23 @@\n       processedAgentTemplates[processedConfig.id] = processedConfig\n     }\n   })\n \n+  const processedCustomToolDefinitions: Record<\n+    string,\n+    Pick<CustomToolDefinition, keyof NonNullable<CustomToolDefinitions>[string]>\n+  > = Object.fromEntries(\n+    (options.customToolDefinitions ?? []).map((toolDefinition) => [\n+      toolDefinition.toolName,\n+      {\n+        inputJsonSchema: toolDefinition.inputJsonSchema,\n+        description: toolDefinition.description,\n+        endsAgentStep: toolDefinition.endsAgentStep,\n+        exampleInputs: toolDefinition.exampleInputs,\n+      },\n+    ]),\n+  )\n+\n   const initialState = getInitialSessionState({\n     projectRoot: cwd,\n     cwd,\n     fileTree: [],\n@@ -66,8 +84,9 @@\n     tokenCallers: {},\n     knowledgeFiles,\n     userKnowledgeFiles: {},\n     agentTemplates: processedAgentTemplates,\n+    customToolDefinitions: processedCustomToolDefinitions,\n     gitChanges: {\n       status: '',\n       diff: '',\n       diffCached: '',\n@@ -96,21 +115,24 @@\n   cwd,\n   projectFiles,\n   knowledgeFiles,\n   agentDefinitions,\n+  customToolDefinitions,\n   maxAgentSteps,\n }: {\n   cwd: string\n   projectFiles?: Record<string, string>\n   knowledgeFiles?: Record<string, string>\n   agentDefinitions?: AgentDefinition[]\n+  customToolDefinitions?: CustomToolDefinition[]\n   maxAgentSteps?: number\n }): RunState {\n   return {\n     sessionState: initialSessionState(cwd, {\n       projectFiles,\n       knowledgeFiles,\n       agentDefinitions,\n+      customToolDefinitions,\n       maxAgentSteps,\n     }),\n     toolResults: [],\n   }\n"
        }
      ]
    },
    {
      "id": "add-spawn-perms-tests",
      "sha": "257c9953c9ea6209f3404b5bfa01582bfe9aa524",
      "parentSha": "998b58579e7fcf7955ffbae544b6c66c09390ed6",
      "spec": "Implement unit tests for spawnable agent matching and permission enforcement, and make the matching helper importable.\n\nChanges to make:\n\n1) Export the matching helper so it can be imported by tests\n- File: backend/src/tools/handlers/tool/spawn-agents.ts\n- Change the local helper declaration from a non-exported function to a named export:\n  - Before: const getMatchingSpawn = (spawnableAgents, childFullAgentId) => { ... }\n  - After: export const getMatchingSpawn = (spawnableAgents, childFullAgentId) => { ... }\n- Do not alter its implementation logic; only change its export so tests can import it.\n\n2) Add a dedicated test suite validating agent matching across ID formats and permission checks in the handler\n- File: backend/src/__tests__/spawn-agents-permissions.test.ts\n- Test structure:\n  a) getMatchingSpawn function\n     - Exact matches with publisher/agent@version: match identical publisher, agent, version; return null for version/publisher/agent mismatches.\n     - publisher/agent without version: allow matching when child lacks version but spawnable has a version; match exact publisher/agent without version; reject if publisher differs.\n     - agent@version without publisher: allow matching when spawnable has publisher but child does not; reject when versions differ.\n     - simple agent name: match when spawnable uses simple name; match when spawnable includes publisher and/or version; reject for different agent names.\n     - edge cases: return null for empty child ID; return null for malformed child ID with too many path parts; return null when spawnableAgents is empty; tolerate malformed entries in spawnableAgents and still match valid ones; confirm function returns the first matching entry when multiple could match (e.g., ['thinker', 'codebuff/thinker@1.0.0']).\n\n  b) handleSpawnAgents permission validation\n     - Provide helpers to construct mock AgentTemplate objects and spawn tool calls (agent_type plus optional prompt/params) consistent with CodebuffToolCall<'spawn_agents'>.\n     - Mock logger methods (debug, error, info, warn) to no-op.\n     - Spy on run-agent-step loopAgentSteps to return a resolved result with agentState containing an assistant message (e.g., 'Mock agent response'), avoiding actual execution.\n     - Use getInitialSessionState, MockWebSocket, and mockFileContext from backend/src/__tests__/test-utils.ts to build state.\n     - Cases to cover:\n       • Allow spawning when child agent type is present in parentAgentTemplate.spawnableAgents; assert output includes the mocked assistant message and loopAgentSteps was called once.\n       • Reject spawning when requested agent type is not permitted by parent; assert the aggregated output includes an error message indicating the parent is not allowed to spawn the requested child, and loopAgentSteps was not called.\n       • Reject when requested agent template cannot be found in localAgentTemplates; assert a clear error in output (agent not found) and no loopAgentSteps calls.\n       • Handle versioned permission: parent allows 'codebuff/thinker@1.0.0', child template exists with that ID, and the spawn uses the same fully-qualified version; assert success.\n       • Allow simple child name when parent allows a versioned/publisher-qualified agent (e.g., parent allows 'codebuff/thinker@1.0.0', and localAgentTemplates registers both 'thinker' and 'codebuff/thinker@1.0.0' mapping to the same template); assert success.\n       • Reject version mismatch: parent allows '...@1.0.0' but requested spawn is '...@2.0.0'; assert error and no loopAgentSteps calls.\n       • Multiple agents mixed success/failure: one allowed (e.g., thinker) and one disallowed (e.g., reviewer); assert the combined output includes one mocked success and one permission error, and loopAgentSteps only called for the allowed one.\n- Ensure afterEach restores mocks.\n\nNotes:\n- Keep tests consistent with existing patterns in backend/src/__tests__ (use Bun's spyOn/mock). Reuse MockWebSocket and mockFileContext from backend/src/__tests__/test-utils.ts.\n- Use AgentTemplate and CodebuffToolCall typings from common/src for correctness.\n- Do not modify runtime behavior of handleSpawnAgents or the matching logic beyond exporting the helper.",
      "prompt": "Add comprehensive unit tests to verify that the spawn_agents tool enforces parent-to-child spawn permissions and that agent ID matching works across publisher, name, and version combinations. Include edge cases and mixed-success scenarios. Also make the internal matching helper importable so the tests can target it directly. Keep the handler logic unchanged; focus on exporting the helper and covering behavior via tests.",
      "supplementalFiles": [
        "backend/src/tools/handlers/list.ts",
        "backend/src/__tests__/test-utils.ts",
        "common/src/tools/list.ts",
        "common/src/types/agent-template.ts",
        "common/src/types/session-state.ts"
      ],
      "fileDiffs": [
        {
          "path": "backend/src/__tests__/spawn-agents-permissions.test.ts",
          "status": "added",
          "diff": "Index: backend/src/__tests__/spawn-agents-permissions.test.ts\n===================================================================\n--- backend/src/__tests__/spawn-agents-permissions.test.ts\t998b585 (parent)\n+++ backend/src/__tests__/spawn-agents-permissions.test.ts\t257c995 (commit)\n@@ -1,1 +1,439 @@\n-[NEW FILE]\n\\ No newline at end of file\n+import { describe, expect, it, beforeEach, afterEach, mock, spyOn } from 'bun:test'\n+import { getMatchingSpawn, handleSpawnAgents } from '../tools/handlers/tool/spawn-agents'\n+import { TEST_USER_ID } from '@codebuff/common/old-constants'\n+import { getInitialSessionState } from '@codebuff/common/types/session-state'\n+import { mockFileContext, MockWebSocket } from './test-utils'\n+import * as loggerModule from '../util/logger'\n+import * as runAgentStep from '../run-agent-step'\n+\n+import type { AgentTemplate } from '@codebuff/common/types/agent-template'\n+import type { CodebuffToolCall } from '@codebuff/common/tools/list'\n+import type { WebSocket } from 'ws'\n+\n+describe('Spawn Agents Permissions', () => {\n+  let mockSendSubagentChunk: any\n+  let mockLoopAgentSteps: any\n+\n+  beforeEach(() => {\n+    // Mock logger to reduce noise in tests\n+    spyOn(loggerModule.logger, 'debug').mockImplementation(() => {})\n+    spyOn(loggerModule.logger, 'error').mockImplementation(() => {})\n+    spyOn(loggerModule.logger, 'info').mockImplementation(() => {})\n+    spyOn(loggerModule.logger, 'warn').mockImplementation(() => {})\n+    spyOn(loggerModule, 'withLoggerContext').mockImplementation(\n+      async (context: any, fn: () => Promise<any>) => fn(),\n+    )\n+\n+    // Mock sendSubagentChunk\n+    mockSendSubagentChunk = mock(() => {})\n+\n+    // Mock loopAgentSteps to avoid actual agent execution\n+    mockLoopAgentSteps = spyOn(\n+      runAgentStep,\n+      'loopAgentSteps',\n+    ).mockImplementation(async (ws, options) => {\n+      return {\n+        agentState: {\n+          ...options.agentState,\n+          messageHistory: [\n+            { role: 'assistant', content: 'Mock agent response' },\n+          ],\n+        },\n+      }\n+    })\n+  })\n+\n+  afterEach(() => {\n+    mock.restore()\n+  })\n+\n+  describe('getMatchingSpawn function', () => {\n+    describe('exact matches with publisher/agent@version format', () => {\n+      it('should match exact publisher/agent@version', () => {\n+        const spawnableAgents = ['codebuff/thinker@1.0.0', 'codebuff/reviewer@2.1.0']\n+        const result = getMatchingSpawn(spawnableAgents, 'codebuff/thinker@1.0.0')\n+        expect(result).toBe('codebuff/thinker@1.0.0')\n+      })\n+\n+      it('should not match different versions', () => {\n+        const spawnableAgents = ['codebuff/thinker@1.0.0']\n+        const result = getMatchingSpawn(spawnableAgents, 'codebuff/thinker@2.0.0')\n+        expect(result).toBeNull()\n+      })\n+\n+      it('should not match different publishers', () => {\n+        const spawnableAgents = ['codebuff/thinker@1.0.0']\n+        const result = getMatchingSpawn(spawnableAgents, 'acme/thinker@1.0.0')\n+        expect(result).toBeNull()\n+      })\n+\n+      it('should not match different agent names', () => {\n+        const spawnableAgents = ['codebuff/thinker@1.0.0']\n+        const result = getMatchingSpawn(spawnableAgents, 'codebuff/reviewer@1.0.0')\n+        expect(result).toBeNull()\n+      })\n+    })\n+\n+    describe('publisher/agent format without version', () => {\n+      it('should match publisher/agent when child has no version', () => {\n+        const spawnableAgents = ['codebuff/thinker@1.0.0', 'acme/reviewer']\n+        const result = getMatchingSpawn(spawnableAgents, 'codebuff/thinker')\n+        expect(result).toBe('codebuff/thinker@1.0.0')\n+      })\n+\n+      it('should match exact publisher/agent without version', () => {\n+        const spawnableAgents = ['codebuff/thinker', 'acme/reviewer']\n+        const result = getMatchingSpawn(spawnableAgents, 'codebuff/thinker')\n+        expect(result).toBe('codebuff/thinker')\n+      })\n+\n+      it('should not match when publisher differs', () => {\n+        const spawnableAgents = ['codebuff/thinker@1.0.0']\n+        const result = getMatchingSpawn(spawnableAgents, 'acme/thinker')\n+        expect(result).toBeNull()\n+      })\n+    })\n+\n+    describe('agent@version format without publisher', () => {\n+      it('should match agent@version when spawnable has no publisher', () => {\n+        const spawnableAgents = ['thinker@1.0.0', 'reviewer@2.0.0']\n+        const result = getMatchingSpawn(spawnableAgents, 'thinker@1.0.0')\n+        expect(result).toBe('thinker@1.0.0')\n+      })\n+\n+      it('should match agent@version when spawnable has publisher but child does not', () => {\n+        const spawnableAgents = ['codebuff/thinker@1.0.0', 'reviewer@2.0.0']\n+        const result = getMatchingSpawn(spawnableAgents, 'thinker@1.0.0')\n+        expect(result).toBe('codebuff/thinker@1.0.0')\n+      })\n+\n+      it('should not match when versions differ', () => {\n+        const spawnableAgents = ['thinker@1.0.0']\n+        const result = getMatchingSpawn(spawnableAgents, 'thinker@2.0.0')\n+        expect(result).toBeNull()\n+      })\n+    })\n+\n+    describe('simple agent name format', () => {\n+      it('should match simple agent name', () => {\n+        const spawnableAgents = ['thinker', 'reviewer', 'file-picker']\n+        const result = getMatchingSpawn(spawnableAgents, 'thinker')\n+        expect(result).toBe('thinker')\n+      })\n+\n+      it('should match simple agent name when spawnable has publisher', () => {\n+        const spawnableAgents = ['codebuff/thinker@1.0.0', 'reviewer']\n+        const result = getMatchingSpawn(spawnableAgents, 'thinker')\n+        expect(result).toBe('codebuff/thinker@1.0.0')\n+      })\n+\n+      it('should match simple agent name when spawnable has version', () => {\n+        const spawnableAgents = ['thinker@1.0.0', 'reviewer']\n+        const result = getMatchingSpawn(spawnableAgents, 'thinker')\n+        expect(result).toBe('thinker@1.0.0')\n+      })\n+\n+      it('should not match when agent name differs', () => {\n+        const spawnableAgents = ['thinker', 'reviewer']\n+        const result = getMatchingSpawn(spawnableAgents, 'file-picker')\n+        expect(result).toBeNull()\n+      })\n+    })\n+\n+    describe('edge cases', () => {\n+      it('should return null for empty agent ID', () => {\n+        const spawnableAgents = ['thinker', 'reviewer']\n+        const result = getMatchingSpawn(spawnableAgents, '')\n+        expect(result).toBeNull()\n+      })\n+\n+      it('should return null for malformed agent ID', () => {\n+        const spawnableAgents = ['thinker', 'reviewer']\n+        const result = getMatchingSpawn(spawnableAgents, 'invalid/agent/format/too/many/slashes')\n+        expect(result).toBeNull()\n+      })\n+\n+      it('should return null when spawnableAgents is empty', () => {\n+        const spawnableAgents: string[] = []\n+        const result = getMatchingSpawn(spawnableAgents, 'thinker')\n+        expect(result).toBeNull()\n+      })\n+\n+      it('should handle malformed spawnable agent IDs gracefully', () => {\n+        const spawnableAgents = ['', 'invalid/agent/too/many/parts', 'thinker']\n+        const result = getMatchingSpawn(spawnableAgents, 'thinker')\n+        expect(result).toBe('thinker')\n+      })\n+\n+      it('should prioritize exact matches over partial matches', () => {\n+        const spawnableAgents = ['thinker', 'codebuff/thinker@1.0.0']\n+        const result = getMatchingSpawn(spawnableAgents, 'thinker')\n+        expect(result).toBe('thinker') // First match wins\n+      })\n+    })\n+  })\n+\n+  describe('handleSpawnAgents permission validation', () => {\n+    const createMockAgent = (id: string, spawnableAgents: string[] = []): AgentTemplate => ({\n+      id,\n+      displayName: `Mock ${id}`,\n+      outputMode: 'last_message' as const,\n+      inputSchema: {\n+        prompt: {\n+          safeParse: () => ({ success: true }),\n+        } as any,\n+      },\n+      spawnerPrompt: '',\n+      model: '',\n+      includeMessageHistory: true,\n+      toolNames: [],\n+      spawnableAgents,\n+      systemPrompt: '',\n+      instructionsPrompt: '',\n+      stepPrompt: '',\n+    })\n+\n+    const createSpawnToolCall = (agentType: string, prompt = 'test prompt'): CodebuffToolCall<'spawn_agents'> => ({\n+      toolName: 'spawn_agents' as const,\n+      toolCallId: 'test-tool-call-id',\n+      input: {\n+        agents: [{ agent_type: agentType, prompt }],\n+      },\n+    })\n+\n+    it('should allow spawning when agent is in spawnableAgents list', async () => {\n+      const parentAgent = createMockAgent('parent', ['thinker', 'reviewer'])\n+      const childAgent = createMockAgent('thinker')\n+      const ws = new MockWebSocket() as unknown as WebSocket\n+      const sessionState = getInitialSessionState(mockFileContext)\n+      const toolCall = createSpawnToolCall('thinker')\n+\n+      const { result } = handleSpawnAgents({\n+        previousToolCallFinished: Promise.resolve(),\n+        toolCall,\n+        fileContext: mockFileContext,\n+        clientSessionId: 'test-session',\n+        userInputId: 'test-input',\n+        getLatestState: () => ({ messages: [] }),\n+        state: {\n+          ws,\n+          fingerprintId: 'test-fingerprint',\n+          userId: TEST_USER_ID,\n+          agentTemplate: parentAgent,\n+          localAgentTemplates: { thinker: childAgent },\n+          sendSubagentChunk: mockSendSubagentChunk,\n+          messages: [],\n+          agentState: sessionState.mainAgentState,\n+        },\n+      })\n+\n+      const output = await result\n+      expect(output).toContain('Mock agent response')\n+      expect(mockLoopAgentSteps).toHaveBeenCalledTimes(1)\n+    })\n+\n+    it('should reject spawning when agent is not in spawnableAgents list', async () => {\n+      const parentAgent = createMockAgent('parent', ['thinker']) // Only allows thinker\n+      const childAgent = createMockAgent('reviewer')\n+      const ws = new MockWebSocket() as unknown as WebSocket\n+      const sessionState = getInitialSessionState(mockFileContext)\n+      const toolCall = createSpawnToolCall('reviewer') // Try to spawn reviewer\n+\n+      const { result } = handleSpawnAgents({\n+        previousToolCallFinished: Promise.resolve(),\n+        toolCall,\n+        fileContext: mockFileContext,\n+        clientSessionId: 'test-session',\n+        userInputId: 'test-input',\n+        getLatestState: () => ({ messages: [] }),\n+        state: {\n+          ws,\n+          fingerprintId: 'test-fingerprint',\n+          userId: TEST_USER_ID,\n+          agentTemplate: parentAgent,\n+          localAgentTemplates: { reviewer: childAgent },\n+          sendSubagentChunk: mockSendSubagentChunk,\n+          messages: [],\n+          agentState: sessionState.mainAgentState,\n+        },\n+      })\n+\n+      const output = await result\n+      expect(output).toContain('Error spawning agent')\n+      expect(output).toContain('is not allowed to spawn child agent type reviewer')\n+      expect(mockLoopAgentSteps).not.toHaveBeenCalled()\n+    })\n+\n+    it('should reject spawning when agent template is not found', async () => {\n+      const parentAgent = createMockAgent('parent', ['nonexistent'])\n+      const ws = new MockWebSocket() as unknown as WebSocket\n+      const sessionState = getInitialSessionState(mockFileContext)\n+      const toolCall = createSpawnToolCall('nonexistent')\n+\n+      const { result } = handleSpawnAgents({\n+        previousToolCallFinished: Promise.resolve(),\n+        toolCall,\n+        fileContext: mockFileContext,\n+        clientSessionId: 'test-session',\n+        userInputId: 'test-input',\n+        getLatestState: () => ({ messages: [] }),\n+        state: {\n+          ws,\n+          fingerprintId: 'test-fingerprint',\n+          userId: TEST_USER_ID,\n+          agentTemplate: parentAgent,\n+          localAgentTemplates: {}, // Empty - agent not found\n+          sendSubagentChunk: mockSendSubagentChunk,\n+          messages: [],\n+          agentState: sessionState.mainAgentState,\n+        },\n+      })\n+\n+      const output = await result\n+      expect(output).toContain('Error spawning agent')\n+      expect(output).toContain('Agent type nonexistent not found')\n+      expect(mockLoopAgentSteps).not.toHaveBeenCalled()\n+    })\n+\n+    it('should handle versioned agent permissions correctly', async () => {\n+      const parentAgent = createMockAgent('parent', ['codebuff/thinker@1.0.0'])\n+      const childAgent = createMockAgent('codebuff/thinker@1.0.0')\n+      const ws = new MockWebSocket() as unknown as WebSocket\n+      const sessionState = getInitialSessionState(mockFileContext)\n+      const toolCall = createSpawnToolCall('codebuff/thinker@1.0.0')\n+\n+      const { result } = handleSpawnAgents({\n+        previousToolCallFinished: Promise.resolve(),\n+        toolCall,\n+        fileContext: mockFileContext,\n+        clientSessionId: 'test-session',\n+        userInputId: 'test-input',\n+        getLatestState: () => ({ messages: [] }),\n+        state: {\n+          ws,\n+          fingerprintId: 'test-fingerprint',\n+          userId: TEST_USER_ID,\n+          agentTemplate: parentAgent,\n+          localAgentTemplates: { 'codebuff/thinker@1.0.0': childAgent },\n+          sendSubagentChunk: mockSendSubagentChunk,\n+          messages: [],\n+          agentState: sessionState.mainAgentState,\n+        },\n+      })\n+\n+      const output = await result\n+      expect(output).toContain('Mock agent response')\n+      expect(mockLoopAgentSteps).toHaveBeenCalledTimes(1)\n+    })\n+\n+    it('should allow spawning simple agent name when parent allows versioned agent', async () => {\n+      const parentAgent = createMockAgent('parent', ['codebuff/thinker@1.0.0'])\n+      const childAgent = createMockAgent('codebuff/thinker@1.0.0')\n+      const ws = new MockWebSocket() as unknown as WebSocket\n+      const sessionState = getInitialSessionState(mockFileContext)\n+      const toolCall = createSpawnToolCall('thinker') // Simple name\n+\n+      const { result } = handleSpawnAgents({\n+        previousToolCallFinished: Promise.resolve(),\n+        toolCall,\n+        fileContext: mockFileContext,\n+        clientSessionId: 'test-session',\n+        userInputId: 'test-input',\n+        getLatestState: () => ({ messages: [] }),\n+        state: {\n+          ws,\n+          fingerprintId: 'test-fingerprint',\n+          userId: TEST_USER_ID,\n+          agentTemplate: parentAgent,\n+          localAgentTemplates: { \n+            'thinker': childAgent,\n+            'codebuff/thinker@1.0.0': childAgent, // Register with both keys\n+          },\n+          sendSubagentChunk: mockSendSubagentChunk,\n+          messages: [],\n+          agentState: sessionState.mainAgentState,\n+        },\n+      })\n+\n+      const output = await result\n+      expect(output).toContain('Mock agent response')\n+      expect(mockLoopAgentSteps).toHaveBeenCalledTimes(1)\n+    })\n+\n+    it('should reject when version mismatch exists', async () => {\n+      const parentAgent = createMockAgent('parent', ['codebuff/thinker@1.0.0'])\n+      const childAgent = createMockAgent('codebuff/thinker@2.0.0')\n+      const ws = new MockWebSocket() as unknown as WebSocket\n+      const sessionState = getInitialSessionState(mockFileContext)\n+      const toolCall = createSpawnToolCall('codebuff/thinker@2.0.0')\n+\n+      const { result } = handleSpawnAgents({\n+        previousToolCallFinished: Promise.resolve(),\n+        toolCall,\n+        fileContext: mockFileContext,\n+        clientSessionId: 'test-session',\n+        userInputId: 'test-input',\n+        getLatestState: () => ({ messages: [] }),\n+        state: {\n+          ws,\n+          fingerprintId: 'test-fingerprint',\n+          userId: TEST_USER_ID,\n+          agentTemplate: parentAgent,\n+          localAgentTemplates: { 'codebuff/thinker@2.0.0': childAgent },\n+          sendSubagentChunk: mockSendSubagentChunk,\n+          messages: [],\n+          agentState: sessionState.mainAgentState,\n+        },\n+      })\n+\n+      const output = await result\n+      expect(output).toContain('Error spawning agent')\n+      expect(output).toContain('is not allowed to spawn child agent type')\n+      expect(mockLoopAgentSteps).not.toHaveBeenCalled()\n+    })\n+\n+    it('should handle multiple agents with mixed success/failure', async () => {\n+      const parentAgent = createMockAgent('parent', ['thinker']) // Only allows thinker\n+      const thinkerAgent = createMockAgent('thinker')\n+      const reviewerAgent = createMockAgent('reviewer')\n+      const ws = new MockWebSocket() as unknown as WebSocket\n+      const sessionState = getInitialSessionState(mockFileContext)\n+      \n+      const toolCall: CodebuffToolCall<'spawn_agents'> = {\n+        toolName: 'spawn_agents' as const,\n+        toolCallId: 'test-tool-call-id',\n+        input: {\n+          agents: [\n+            { agent_type: 'thinker', prompt: 'Think about this' },\n+            { agent_type: 'reviewer', prompt: 'Review this' }, // Should fail\n+          ],\n+        },\n+      }\n+\n+      const { result } = handleSpawnAgents({\n+        previousToolCallFinished: Promise.resolve(),\n+        toolCall,\n+        fileContext: mockFileContext,\n+        clientSessionId: 'test-session',\n+        userInputId: 'test-input',\n+        getLatestState: () => ({ messages: [] }),\n+        state: {\n+          ws,\n+          fingerprintId: 'test-fingerprint',\n+          userId: TEST_USER_ID,\n+          agentTemplate: parentAgent,\n+          localAgentTemplates: { thinker: thinkerAgent, reviewer: reviewerAgent },\n+          sendSubagentChunk: mockSendSubagentChunk,\n+          messages: [],\n+          agentState: sessionState.mainAgentState,\n+        },\n+      })\n+\n+      const output = await result\n+      expect(output).toContain('Mock agent response') // Successful thinker spawn\n+      expect(output).toContain('Error spawning agent') // Failed reviewer spawn\n+      expect(output).toContain('is not allowed to spawn child agent type reviewer')\n+      expect(mockLoopAgentSteps).toHaveBeenCalledTimes(1) // Only thinker was spawned\n+    })\n+  })\n+})\n"
        },
        {
          "path": "backend/src/tools/handlers/tool/spawn-agents.ts",
          "status": "modified",
          "diff": "Index: backend/src/tools/handlers/tool/spawn-agents.ts\n===================================================================\n--- backend/src/tools/handlers/tool/spawn-agents.ts\t998b585 (parent)\n+++ backend/src/tools/handlers/tool/spawn-agents.ts\t257c995 (commit)\n@@ -281,9 +281,9 @@\n     state: {},\n   }\n }) satisfies CodebuffToolHandlerFunction<'spawn_agents'>\n \n-const getMatchingSpawn = (\n+export const getMatchingSpawn = (\n   spawnableAgents: AgentTemplateType[],\n   childFullAgentId: string,\n ) => {\n   const {\n"
        }
      ]
    },
    {
      "id": "extract-agent-parsing",
      "sha": "998b58579e7fcf7955ffbae544b6c66c09390ed6",
      "parentSha": "9f0b66d0aba7697d52deeda224987bee02feafef",
      "spec": "Implement shared agent ID parsing and update backend usage.\n\n1) Add shared parsing util\n- Create common/src/util/agent-id-parsing.ts with two functions:\n  - parseAgentId(fullAgentId: string): returns an object with optional fields { publisherId?: string; agentId?: string; version?: string }. Must support:\n    - publisher/agent[@version]\n    - agent[@version] (no publisher)\n    - For invalid or missing components, return an object with undefined fields (no exceptions, no nulls).\n  - parsePublishedAgentId(fullAgentId: string): returns { publisherId: string; agentId: string; version?: string } | null. Use parseAgentId internally, but return null unless both publisherId and agentId are present.\n\n2) Update agent registry to use published-only parsing for DB fetch\n- File: backend/src/templates/agent-registry.ts\n  - Remove the local export function parseAgentId entirely.\n  - Import parsePublishedAgentId from @codebuff/common/util/agent-id-parsing.\n  - In getAgentTemplate:\n    - Replace parseAgentId(agentId) with parsePublishedAgentId(agentId).\n    - If it returns null, attempt a fallback using DEFAULT_ORG_PREFIX (e.g., parsePublishedAgentId(`${DEFAULT_ORG_PREFIX}${agentId}`)).\n    - If fallback parsing succeeds, call fetchAgentFromDatabase with the parsed struct and return/cache as before.\n    - Keep database caching behavior unchanged (cache specific versions only; do not cache latest results).\n  - Ensure parseAgentId is no longer exported from this module and no other code in this file depends on it.\n\n3) Update spawn-agents handler to use the shared general parser\n- File: backend/src/tools/handlers/tool/spawn-agents.ts\n  - Import parseAgentId from @codebuff/common/util/agent-id-parsing.\n  - Do not import parseAgentId from ../../../templates/agent-registry.\n  - In getMatchingSpawn(spawnableAgents, childFullAgentId):\n    - Parse childFullAgentId with parseAgentId and destructure publisherId, agentId, version. If child agentId is missing/undefined, return null immediately.\n    - For each spawnableAgent in spawnableAgents, parse with parseAgentId, destructure publisherId, agentId, version. If spawnable agentId is missing/undefined, continue to next.\n    - Keep the existing matching logic, comparing id/publisher/version for exact match; also preserve the existing fallbacks when the child omits version and/or publisher (exactly as currently implemented, but now using possibly-undefined fields instead of null-return semantics).\n\n4) No changes required in other spawn handlers\n- backend/src/tools/handlers/tool/spawn-agents-async.ts and spawn-agent-inline.ts may continue using simple includes checks; do not modify them.\n\n5) Behavior and compatibility requirements\n- Database fetch must only occur for IDs that parse as published (publisher/agent with optional @version). Local agents (no publisher) should continue to resolve from localAgentTemplates and never hit the DB.\n- Fallback to DEFAULT_ORG_PREFIX must only occur when initial parsing fails to detect a published format.\n- Spawning must support child IDs specified as:\n  - publisher/agent@version\n  - publisher/agent (no version)\n  - agent@version (no publisher)\n  - agent (bare id)\n  and match against parent spawnableAgents appropriately using the updated parsing.\n- Ensure no exports or imports rely on the removed parseAgentId in agent-registry.\n\n6) Testing expectations (no test edits required)\n- Existing tests that cover agent ID resolution, registry priority/caching, and spawnable matching should pass. In particular, DB fetch should only trigger for published IDs, and getAgentTemplate should still fall back to DEFAULT_ORG_PREFIX where appropriate.",
      "prompt": "Please consolidate agent ID parsing across the backend by introducing a shared util and updating the registry and spawn logic:\n- Add a common parser that can handle both published and local agent IDs, and a strict parser that only passes when a publisher is present.\n- Update the agent registry to rely on the strict parser for DB lookups and to prefix with the default org when needed.\n- Update the spawn-agents handler to use the shared general parser, with guards for optional fields, so that unprefixed, prefixed, and versioned forms are all matched correctly against the parent’s spawnable agents.\nKeep the existing registry cache behavior and spawn matching semantics the same, and make sure existing tests pass without modification.",
      "supplementalFiles": [
        "common/src/util/agent-name-normalization.ts",
        "common/src/constants/agents.ts",
        "common/src/util/agent-name-resolver.ts",
        "common/src/templates/agent-validation.ts",
        "backend/src/__tests__/agent-id-resolution.test.ts",
        "backend/src/__tests__/agent-registry.test.ts",
        "backend/src/main-prompt.ts",
        "backend/src/run-agent-step.ts",
        "backend/src/tools/handlers/tool/spawn-agents-async.ts",
        "backend/src/tools/handlers/tool/spawn-agent-inline.ts"
      ],
      "fileDiffs": [
        {
          "path": "backend/src/templates/agent-registry.ts",
          "status": "modified",
          "diff": "Index: backend/src/templates/agent-registry.ts\n===================================================================\n--- backend/src/templates/agent-registry.ts\t9f0b66d (parent)\n+++ backend/src/templates/agent-registry.ts\t998b585 (commit)\n@@ -11,41 +11,16 @@\n   validateSingleAgent,\n } from '@codebuff/common/templates/agent-validation'\n import { DynamicAgentTemplate } from '@codebuff/common/types/dynamic-agent-template'\n import { DEFAULT_ORG_PREFIX } from '@codebuff/common/util/agent-name-normalization'\n+import { parsePublishedAgentId } from '@codebuff/common/util/agent-id-parsing'\n \n export type AgentRegistry = Record<string, AgentTemplate>\n \n // Global database cache - only state in the system\n const databaseAgentCache = new Map<string, AgentTemplate | null>()\n \n /**\n- * Parse agent ID to extract publisher, agent name, and version\n- */\n-export function parseAgentId(fullAgentId: string): {\n-  publisherId: string\n-  agentId: string\n-  version?: string\n-} | null {\n-  // Check if it's in the publisher/agent-id[@version] format\n-  const parts = fullAgentId.split('/')\n-  if (parts.length !== 2) {\n-    return null\n-  }\n-\n-  const [publisherId, agentNameWithVersion] = parts\n-\n-  // Check for version suffix\n-  const versionMatch = agentNameWithVersion.match(/^(.+)@(.+)$/)\n-  if (versionMatch) {\n-    const [, agentId, version] = versionMatch\n-    return { publisherId, agentId, version }\n-  }\n-\n-  return { publisherId, agentId: agentNameWithVersion }\n-}\n-\n-/**\n  * Fetch an agent from the database by publisher/agent-id[@version] format\n  */\n async function fetchAgentFromDatabase(parsedAgentId: {\n   publisherId: string\n@@ -167,12 +142,14 @@\n   if (databaseAgentCache.has(cacheKey)) {\n     return databaseAgentCache.get(cacheKey) || null\n   }\n \n-  const parsed = parseAgentId(agentId)\n+  const parsed = parsePublishedAgentId(agentId)\n   if (!parsed) {\n     // If agentId doesn't parse as publisher/agent format, try as codebuff/agentId\n-    const codebuffParsed = parseAgentId(`${DEFAULT_ORG_PREFIX}${agentId}`)\n+    const codebuffParsed = parsePublishedAgentId(\n+      `${DEFAULT_ORG_PREFIX}${agentId}`,\n+    )\n     if (codebuffParsed) {\n       const dbAgent = await fetchAgentFromDatabase(codebuffParsed)\n       if (dbAgent) {\n         databaseAgentCache.set(cacheKey, dbAgent)\n"
        },
        {
          "path": "backend/src/tools/handlers/tool/spawn-agents.ts",
          "status": "modified",
          "diff": "Index: backend/src/tools/handlers/tool/spawn-agents.ts\n===================================================================\n--- backend/src/tools/handlers/tool/spawn-agents.ts\t9f0b66d (parent)\n+++ backend/src/tools/handlers/tool/spawn-agents.ts\t998b585 (commit)\n@@ -1,11 +1,9 @@\n import { MAX_AGENT_STEPS_DEFAULT } from '@codebuff/common/constants/agents'\n import { generateCompactId } from '@codebuff/common/util/string'\n+import { parseAgentId } from '@codebuff/common/util/agent-id-parsing'\n \n-import {\n-  getAgentTemplate,\n-  parseAgentId,\n-} from '../../../templates/agent-registry'\n+import { getAgentTemplate } from '../../../templates/agent-registry'\n import { logger } from '../../../util/logger'\n \n import type { CodebuffToolHandlerFunction } from '../handler-function-type'\n import type { CodebuffToolCall } from '@codebuff/common/tools/list'\n@@ -287,24 +285,29 @@\n const getMatchingSpawn = (\n   spawnableAgents: AgentTemplateType[],\n   childFullAgentId: string,\n ) => {\n-  const parsedChildAgentId = parseAgentId(childFullAgentId)\n-  if (!parsedChildAgentId) return null\n   const {\n     publisherId: childPublisherId,\n     agentId: childAgentId,\n     version: childVersion,\n-  } = parsedChildAgentId\n+  } = parseAgentId(childFullAgentId)\n \n+  if (!childAgentId) {\n+    return null\n+  }\n+\n   for (const spawnableAgent of spawnableAgents) {\n-    const parsedSpawnableAgent = parseAgentId(spawnableAgent)\n-    if (!parsedSpawnableAgent) continue\n     const {\n       publisherId: spawnablePublisherId,\n       agentId: spawnableAgentId,\n       version: spawnableVersion,\n-    } = parsedSpawnableAgent\n+    } = parseAgentId(spawnableAgent)\n+\n+    if (!spawnableAgentId) {\n+      continue\n+    }\n+\n     if (\n       spawnableAgentId === childAgentId &&\n       spawnablePublisherId === childPublisherId &&\n       spawnableVersion === childVersion\n"
        },
        {
          "path": "common/src/util/agent-id-parsing.ts",
          "status": "added",
          "diff": "Index: common/src/util/agent-id-parsing.ts\n===================================================================\n--- common/src/util/agent-id-parsing.ts\t9f0b66d (parent)\n+++ common/src/util/agent-id-parsing.ts\t998b585 (commit)\n@@ -1,1 +1,75 @@\n-[NEW FILE]\n\\ No newline at end of file\n+/**\n+ * Parse agent ID to extract publisher, agent name, and version\n+ * Supports formats:\n+ * - publisher/agentId[@version]\n+ * - agentId[@version] (no publisher)\n+ */\n+export function parseAgentId(fullAgentId: string): {\n+  publisherId?: string\n+  agentId?: string\n+  version?: string\n+} {\n+  // Check if it's in the publisher/agent-id[@version] format\n+  const parts = fullAgentId.split('/')\n+\n+  if (parts.length === 2) {\n+    // Full format: publisher/agentId[@version]\n+    const [publisherId, agentNameWithVersion] = parts\n+\n+    if (!publisherId || !agentNameWithVersion) {\n+      return { publisherId: undefined, agentId: undefined, version: undefined }\n+    }\n+\n+    // Check for version suffix\n+    const versionMatch = agentNameWithVersion.match(/^(.+)@(.+)$/)\n+    if (versionMatch) {\n+      const [, agentId, version] = versionMatch\n+      return { publisherId, agentId, version }\n+    }\n+\n+    return { publisherId, agentId: agentNameWithVersion }\n+  } else if (parts.length === 1) {\n+    // Just agent name (for backward compatibility)\n+    const agentNameWithVersion = parts[0]\n+\n+    if (!agentNameWithVersion) {\n+      return { publisherId: undefined, agentId: undefined, version: undefined }\n+    }\n+\n+    // Check for version suffix\n+    const versionMatch = agentNameWithVersion.match(/^(.+)@(.+)$/)\n+    if (versionMatch) {\n+      const [, agentId, version] = versionMatch\n+      return { publisherId: undefined, agentId, version }\n+    }\n+\n+    return {\n+      publisherId: undefined,\n+      agentId: agentNameWithVersion,\n+      version: undefined,\n+    }\n+  }\n+\n+  return { publisherId: undefined, agentId: undefined, version: undefined }\n+}\n+\n+/**\n+ * Parse publishded agent ID to extract publisher, agent name, and optionally version\n+ *\n+ * If the agent ID is not in the publisher/agent format, return null\n+ */\n+export function parsePublishedAgentId(fullAgentId: string): {\n+  publisherId: string\n+  agentId: string\n+  version?: string\n+} | null {\n+  const { publisherId, agentId, version } = parseAgentId(fullAgentId)\n+  if (!publisherId || !agentId) {\n+    return null\n+  }\n+  return {\n+    publisherId,\n+    agentId,\n+    version,\n+  }\n+}\n"
        }
      ]
    },
    {
      "id": "match-spawn-agents",
      "sha": "9f0b66d0aba7697d52deeda224987bee02feafef",
      "parentSha": "fa5b77d8bef79f00c188f650362fe1ba171d08bc",
      "spec": "Implement flexible spawnable agent matching when spawning child agents.\n\nRequired changes:\n\n1) backend/src/templates/agent-registry.ts\n- Export the agent ID parser function so it can be reused by other modules.\n  - Change the parseAgentId function declaration from a non-exported function to an exported function (export function parseAgentId(...)).\n  - Do not change its behavior or signature.\n\n2) backend/src/tools/handlers/tool/spawn-agents.ts\n- Import the exported parseAgentId from the agent registry module.\n- Replace the simple inclusion check of parentAgentTemplate.spawnableAgents.includes(agentType) with a flexible matching function.\n- Add a new helper function in this file:\n  - getMatchingSpawn(spawnableAgents: AgentTemplateType[], childFullAgentId: string): AgentTemplateType | null\n  - Use parseAgentId to parse the childFullAgentId and each spawnable agent ID.\n  - Matching rules:\n    • If child provides publisher, agent, and version: require exact match of all three.\n    • If child provides publisher and agent (no version): match any spawnable entry with the same publisher and agent (any version).\n    • If child provides agent and version (no publisher): match any spawnable entry with the same agent and version (any publisher).\n    • If child provides only agent (no publisher/version): match any spawnable entry with the same agent (any publisher/version).\n  - Return the first matching spawnable agent string if found; otherwise return null.\n- In the spawn loop:\n  - Fetch the child agent template using getAgentTemplate(agentTypeStr, localAgentTemplates) (do not rely on the cast variable for fetching).\n  - Determine allowance using the helper above: const agentType = getMatchingSpawn(parentAgentTemplate.spawnableAgents, agentTypeStr).\n  - If agentType is null, throw with the message: `Agent type ${parentAgentTemplate.id} is not allowed to spawn child agent type ${agentTypeStr}.` (note: use the original request string in the error).\n  - Use the matched agentType (the canonical spawnable agent string) when assigning subAgentState.agentType and in log/return structures. Leave agentTemplate.id usage for loopAgentSteps unchanged.\n- Keep all other logic (schema validation, message history handling, streaming, reporting) intact.\n\nScope:\n- Only modify the two files above. Do not change spawn-agent-inline.ts or spawn-agents-async.ts in this task.\n\nAcceptance criteria:\n- parseAgentId is exported from backend/src/templates/agent-registry.ts and remains functionally identical.\n- spawn-agents.ts imports parseAgentId and includes a getMatchingSpawn helper implementing the matching rules described.\n- Spawning with agent_type values that omit publisher and/or version succeeds when there is an equivalent entry in parentAgentTemplate.spawnableAgents under the matching rules.\n- Spawning still fails with a clear error when no matching spawnable agent is found.\n- Existing behavior for input schema validation, message streaming, and reporting remains unchanged.",
      "prompt": "Enable flexible matching for spawning subagents. When a parent agent spawns children, the child agent_type string may include an optional publisher and/or version. Update the spawn-agents handler so a child can be allowed if its identifier matches any of the parent’s spawnable agents by agent name alone, by name+publisher, by name+version, or by exact name+publisher+version. Export the existing agent ID parser and use it to implement this matching, while preserving all current spawning, validation, and streaming behaviors.",
      "supplementalFiles": [
        "backend/src/tools/handlers/tool/spawn-agents-async.ts",
        "backend/src/tools/handlers/tool/spawn-agent-inline.ts",
        "backend/src/templates/prompts.ts",
        "backend/src/templates/strings.ts",
        "backend/src/__tests__/agent-id-resolution.test.ts",
        "backend/src/__tests__/subagent-streaming.test.ts",
        "common/src/types/session-state.ts",
        "common/src/types/agent-template.ts"
      ],
      "fileDiffs": [
        {
          "path": "backend/src/templates/agent-registry.ts",
          "status": "modified",
          "diff": "Index: backend/src/templates/agent-registry.ts\n===================================================================\n--- backend/src/templates/agent-registry.ts\tfa5b77d (parent)\n+++ backend/src/templates/agent-registry.ts\t9f0b66d (commit)\n@@ -20,9 +20,9 @@\n \n /**\n  * Parse agent ID to extract publisher, agent name, and version\n  */\n-function parseAgentId(fullAgentId: string): {\n+export function parseAgentId(fullAgentId: string): {\n   publisherId: string\n   agentId: string\n   version?: string\n } | null {\n"
        },
        {
          "path": "backend/src/tools/handlers/tool/spawn-agents.ts",
          "status": "modified",
          "diff": "Index: backend/src/tools/handlers/tool/spawn-agents.ts\n===================================================================\n--- backend/src/tools/handlers/tool/spawn-agents.ts\tfa5b77d (parent)\n+++ backend/src/tools/handlers/tool/spawn-agents.ts\t9f0b66d (commit)\n@@ -1,8 +1,11 @@\n import { MAX_AGENT_STEPS_DEFAULT } from '@codebuff/common/constants/agents'\n import { generateCompactId } from '@codebuff/common/util/string'\n \n-import { getAgentTemplate } from '../../../templates/agent-registry'\n+import {\n+  getAgentTemplate,\n+  parseAgentId,\n+} from '../../../templates/agent-registry'\n import { logger } from '../../../util/logger'\n \n import type { CodebuffToolHandlerFunction } from '../handler-function-type'\n import type { CodebuffToolCall } from '@codebuff/common/tools/list'\n@@ -112,21 +115,24 @@\n       )}`,\n     }\n     const results = await Promise.allSettled(\n       agents.map(async ({ agent_type: agentTypeStr, prompt, params }) => {\n-        const agentType = agentTypeStr as AgentTemplateType\n         const agentTemplate = await getAgentTemplate(\n-          agentType,\n+          agentTypeStr,\n           localAgentTemplates,\n         )\n \n         if (!agentTemplate) {\n           throw new Error(`Agent type ${agentTypeStr} not found.`)\n         }\n \n-        if (!parentAgentTemplate.spawnableAgents.includes(agentType)) {\n+        const agentType = getMatchingSpawn(\n+          parentAgentTemplate.spawnableAgents,\n+          agentTypeStr,\n+        )\n+        if (!agentType) {\n           throw new Error(\n-            `Agent type ${parentAgentTemplate.id} is not allowed to spawn child agent type ${agentType}.`,\n+            `Agent type ${parentAgentTemplate.id} is not allowed to spawn child agent type ${agentTypeStr}.`,\n           )\n         }\n \n         // Validate prompt and params against agent's schema\n@@ -276,4 +282,57 @@\n     result: previousToolCallFinished.then(triggerSpawnAgents),\n     state: {},\n   }\n }) satisfies CodebuffToolHandlerFunction<'spawn_agents'>\n+\n+const getMatchingSpawn = (\n+  spawnableAgents: AgentTemplateType[],\n+  childFullAgentId: string,\n+) => {\n+  const parsedChildAgentId = parseAgentId(childFullAgentId)\n+  if (!parsedChildAgentId) return null\n+  const {\n+    publisherId: childPublisherId,\n+    agentId: childAgentId,\n+    version: childVersion,\n+  } = parsedChildAgentId\n+\n+  for (const spawnableAgent of spawnableAgents) {\n+    const parsedSpawnableAgent = parseAgentId(spawnableAgent)\n+    if (!parsedSpawnableAgent) continue\n+    const {\n+      publisherId: spawnablePublisherId,\n+      agentId: spawnableAgentId,\n+      version: spawnableVersion,\n+    } = parsedSpawnableAgent\n+    if (\n+      spawnableAgentId === childAgentId &&\n+      spawnablePublisherId === childPublisherId &&\n+      spawnableVersion === childVersion\n+    ) {\n+      return spawnableAgent\n+    }\n+    if (!childVersion && childPublisherId) {\n+      if (\n+        spawnablePublisherId === childPublisherId &&\n+        spawnableAgentId === childAgentId\n+      ) {\n+        return spawnableAgent\n+      }\n+    }\n+    if (!childPublisherId && childVersion) {\n+      if (\n+        spawnableAgentId === childAgentId &&\n+        spawnableVersion === childVersion\n+      ) {\n+        return spawnableAgent\n+      }\n+    }\n+\n+    if (!childVersion && !childPublisherId) {\n+      if (spawnableAgentId === childAgentId) {\n+        return spawnableAgent\n+      }\n+    }\n+  }\n+  return null\n+}\n"
        }
      ]
    },
    {
      "id": "add-reasoning-options",
      "sha": "fa437205fa35b3bc6833e59793b49cc3c8e613b8",
      "parentSha": "db6d9e8376bfdac666c6407b695fc20b219aced2",
      "spec": "Implement template-level reasoning configuration and wire it to OpenRouter provider options.\n\n1) Type additions in agent definitions\n- .agents/types/agent-definition.ts: Add an optional field reasoningOptions with the documented shape: { enabled?: boolean; exclude?: boolean } AND either { max_tokens: number } OR { effort: 'high' | 'medium' | 'low' }. Place the JSDoc with the OpenRouter link and notes about requirements.\n- common/src/templates/initial-agents-dir/types/agent-definition.ts: Mirror the same reasoningOptions field and documentation as above to keep public template types in sync.\n\n2) AgentTemplate type surface\n- common/src/types/agent-template.ts: Import type OpenRouterProviderOptions from @codebuff/internal/openrouter-ai-sdk. Add a new property reasoningOptions: OpenRouterProviderOptions['reasoning'] to AgentTemplate so compiled templates expose this field.\n\n3) Dynamic template validation\n- common/src/types/dynamic-agent-template.ts: Extend the DynamicAgentDefinitionSchema with an optional reasoningOptions: object({ enabled?: boolean, exclude?: boolean }).and(union([ { max_tokens: number }, { effort: enum('high','medium','low') } ])) so programmatic agents can declare reasoning options. Leave DynamicAgentTemplateSchema behavior unchanged aside from inheriting this field.\n\n4) Streaming pipeline propagation\n- backend/src/prompt-agent-stream.ts: Import type OpenRouterProviderOptions from @codebuff/internal/openrouter-ai-sdk. Ensure options.providerOptions is initialized. Ensure options.providerOptions.openrouter exists. Assign (options.providerOptions.openrouter as OpenRouterProviderOptions).reasoning = template.reasoningOptions. Keep existing Gemini thinkingConfig defaults intact. This centralizes provider option assembly at the template level.\n\n5) Centralize providerOptions (remove from ai-sdk wrapper)\n- backend/src/llm-apis/vercel-ai-sdk/ai-sdk.ts: Remove the import of GoogleGenerativeAIProviderOptions and the providerOptions.google.thinkingConfig block from streamText options. The providerOptions will now be supplied by callers (prompt-agent-stream) based on the selected provider. Do not change model routing logic.\n\n6) Example agent update\n- .agents/base-lite.ts: Add a default reasoningOptions for this agent: enabled: true, exclude: false, and effort: 'high'.\n\n7) Type-only import cleanup\n- .agents/factory/base.ts: Convert the import of ModelName to a type-only import (import type { ModelName } from 'types/agent-definition') to satisfy TS and avoid runtime import.\n\nAcceptance notes\n- Reasoning settings should be visible on AgentTemplate typing and allowed in dynamic templates.\n- For OpenRouter-backed models, stream requests must include providerOptions.openrouter.reasoning matching the template’s reasoningOptions when present.\n- Gemini-specific thinkingConfig defaults must still be applied, but only from prompt-agent-stream, not ai-sdk.ts.\n- Existing openrouter model setup (includeReasoning true, usage include) remains unchanged.\n- All changes compile with no type errors.",
      "prompt": "Add a template-level reasoning configuration that agents can specify and have it applied at runtime. Introduce an optional \"reasoningOptions\" field on agent definitions and dynamic templates (supporting either a max token budget or an effort level, with optional enable/exclude flags). Validate this field in the dynamic template schema. Update the streaming path so these options are passed to the OpenRouter provider as reasoning settings for each agent. Centralize any provider-specific options in the template-aware streaming code and remove such configuration from the lower-level AI SDK wrapper. Provide a baseline agent example that opts into high reasoning effort.",
      "supplementalFiles": [
        "backend/src/llm-apis/openrouter.ts",
        "backend/src/llm-apis/vercel-ai-sdk/openrouter.ts",
        "packages/internal/src/openrouter-ai-sdk/types/index.ts",
        "packages/internal/src/openrouter-ai-sdk/chat/index.ts"
      ],
      "fileDiffs": [
        {
          "path": ".agents/base-lite.ts",
          "status": "modified",
          "diff": "Index: .agents/base-lite.ts\n===================================================================\n--- .agents/base-lite.ts\tdb6d9e8 (parent)\n+++ .agents/base-lite.ts\tfa43720 (commit)\n@@ -6,7 +6,12 @@\n const definition: SecretAgentDefinition = {\n   id: 'base-lite',\n   publisher,\n   ...base('openai/gpt-5'),\n+  reasoningOptions: {\n+    enabled: true,\n+    exclude: false,\n+    effort: 'high',\n+  },\n }\n \n export default definition\n"
        },
        {
          "path": ".agents/factory/base.ts",
          "status": "modified",
          "diff": "Index: .agents/factory/base.ts\n===================================================================\n--- .agents/factory/base.ts\tdb6d9e8 (parent)\n+++ .agents/factory/base.ts\tfa43720 (commit)\n@@ -7,9 +7,9 @@\n } from '../prompts'\n import { AgentTemplateTypes } from '../types/secret-agent-definition'\n \n import type { SecretAgentDefinition } from '../types/secret-agent-definition'\n-import { ModelName } from 'types/agent-definition'\n+import type { ModelName } from 'types/agent-definition'\n \n export const base = (\n   model: ModelName,\n   allAvailableAgents?: string[],\n"
        },
        {
          "path": ".agents/types/agent-definition.ts",
          "status": "modified",
          "diff": "Index: .agents/types/agent-definition.ts\n===================================================================\n--- .agents/types/agent-definition.ts\tdb6d9e8 (parent)\n+++ .agents/types/agent-definition.ts\tfa43720 (commit)\n@@ -33,8 +33,25 @@\n \n   /** AI model to use for this agent. Can be any model in OpenRouter: https://openrouter.ai/models */\n   model: ModelName\n \n+  /**\n+   * https://openrouter.ai/docs/use-cases/reasoning-tokens\n+   * One of `max_tokens` or `effort` is required.\n+   * If `exclude` is true, reasoning will be removed from the response. Default is false.\n+   */\n+  reasoningOptions?: {\n+    enabled?: boolean\n+    exclude?: boolean\n+  } & (\n+    | {\n+        max_tokens: number\n+      }\n+    | {\n+        effort: 'high' | 'medium' | 'low'\n+      }\n+  )\n+\n   // ============================================================================\n   // Tools and Subagents\n   // ============================================================================\n \n"
        },
        {
          "path": "backend/src/llm-apis/vercel-ai-sdk/ai-sdk.ts",
          "status": "modified",
          "diff": "Index: backend/src/llm-apis/vercel-ai-sdk/ai-sdk.ts\n===================================================================\n--- backend/src/llm-apis/vercel-ai-sdk/ai-sdk.ts\tdb6d9e8 (parent)\n+++ backend/src/llm-apis/vercel-ai-sdk/ai-sdk.ts\tfa43720 (commit)\n@@ -22,9 +22,8 @@\n import { openRouterLanguageModel } from '../openrouter'\n import { vertexFinetuned } from './vertex-finetuned'\n \n import type { System } from '../claude'\n-import type { GoogleGenerativeAIProviderOptions } from '@ai-sdk/google'\n import type {\n   GeminiModel,\n   Model,\n   OpenAIModel,\n@@ -97,16 +96,8 @@\n   const response = streamText({\n     ...options,\n     model: aiSDKModel,\n     maxRetries: options.maxRetries,\n-    providerOptions: {\n-      google: {\n-        thinkingConfig: {\n-          includeThoughts: false,\n-          thinkingBudget: options.thinkingBudget ?? 128,\n-        },\n-      } satisfies GoogleGenerativeAIProviderOptions,\n-    },\n   })\n \n   let content = ''\n   let reasoning = false\n"
        },
        {
          "path": "backend/src/prompt-agent-stream.ts",
          "status": "modified",
          "diff": "Index: backend/src/prompt-agent-stream.ts\n===================================================================\n--- backend/src/prompt-agent-stream.ts\tdb6d9e8 (parent)\n+++ backend/src/prompt-agent-stream.ts\tfa43720 (commit)\n@@ -4,8 +4,9 @@\n import { globalStopSequence } from './tools/constants'\n \n import type { AgentTemplate } from './templates/types'\n import type { CodebuffMessage } from '@codebuff/common/types/message'\n+import type { OpenRouterProviderOptions } from '@codebuff/internal/openrouter-ai-sdk'\n \n export const getAgentStreamFromTemplate = (params: {\n   clientSessionId: string\n   fingerprintId: string\n@@ -39,19 +40,25 @@\n     const primaryModel = Array.isArray(model) ? model[0] : model\n     const provider =\n       providerModelNames[primaryModel as keyof typeof providerModelNames]\n \n+    if (!options.providerOptions) {\n+      options.providerOptions = {}\n+    }\n     if (provider === 'gemini') {\n-      if (!options.providerOptions) {\n-        options.providerOptions = {}\n-      }\n       if (!options.providerOptions.gemini) {\n         options.providerOptions.gemini = {}\n       }\n       if (!options.providerOptions.gemini.thinkingConfig) {\n         options.providerOptions.gemini.thinkingConfig = { thinkingBudget: 128 }\n       }\n     }\n+    if (!options.providerOptions.openrouter) {\n+      options.providerOptions.openrouter = {}\n+    }\n+    ;(\n+      options.providerOptions.openrouter as OpenRouterProviderOptions\n+    ).reasoning = template.reasoningOptions\n \n     return promptAiSdkStream(options)\n   }\n \n"
        },
        {
          "path": "common/src/templates/initial-agents-dir/types/agent-definition.ts",
          "status": "modified",
          "diff": "Index: common/src/templates/initial-agents-dir/types/agent-definition.ts\n===================================================================\n--- common/src/templates/initial-agents-dir/types/agent-definition.ts\tdb6d9e8 (parent)\n+++ common/src/templates/initial-agents-dir/types/agent-definition.ts\tfa43720 (commit)\n@@ -33,8 +33,25 @@\n \n   /** AI model to use for this agent. Can be any model in OpenRouter: https://openrouter.ai/models */\n   model: ModelName\n \n+  /**\n+   * https://openrouter.ai/docs/use-cases/reasoning-tokens\n+   * One of `max_tokens` or `effort` is required.\n+   * If `exclude` is true, reasoning will be removed from the response. Default is false.\n+   */\n+  reasoningOptions?: {\n+    enabled?: boolean\n+    exclude?: boolean\n+  } & (\n+    | {\n+        max_tokens: number\n+      }\n+    | {\n+        effort: 'high' | 'medium' | 'low'\n+      }\n+  )\n+\n   // ============================================================================\n   // Tools and Subagents\n   // ============================================================================\n \n"
        },
        {
          "path": "common/src/types/agent-template.ts",
          "status": "modified",
          "diff": "Index: common/src/types/agent-template.ts\n===================================================================\n--- common/src/types/agent-template.ts\tdb6d9e8 (parent)\n+++ common/src/types/agent-template.ts\tfa43720 (commit)\n@@ -1,8 +1,9 @@\n import type { Model } from '../constants'\n import type { AgentState, AgentTemplateType } from './session-state'\n import type { ToolCall } from '../templates/initial-agents-dir/types/agent-definition'\n import type { ToolName } from '../tools/constants'\n+import type { OpenRouterProviderOptions } from '@codebuff/internal/openrouter-ai-sdk'\n import type { z } from 'zod/v4'\n \n export type AgentTemplate<\n   P = string | undefined,\n@@ -10,8 +11,9 @@\n > = {\n   id: AgentTemplateType\n   displayName: string\n   model: Model\n+  reasoningOptions: OpenRouterProviderOptions['reasoning']\n \n   toolNames: ToolName[]\n   spawnableAgents: AgentTemplateType[]\n \n"
        },
        {
          "path": "common/src/types/dynamic-agent-template.ts",
          "status": "modified",
          "diff": "Index: common/src/types/dynamic-agent-template.ts\n===================================================================\n--- common/src/types/dynamic-agent-template.ts\tdb6d9e8 (parent)\n+++ common/src/types/dynamic-agent-template.ts\tfa43720 (commit)\n@@ -100,8 +100,20 @@\n \n   // Required fields for new agents\n   displayName: z.string(),\n   model: z.string(),\n+  reasoningOptions: z\n+    .object({\n+      enabled: z.boolean().optional(),\n+      exclude: z.boolean().optional(),\n+    })\n+    .and(\n+      z.union([\n+        z.object({ max_tokens: z.number() }),\n+        z.object({ effort: z.enum(['high', 'medium', 'low']) }),\n+      ]),\n+    )\n+    .optional(),\n \n   // Tools and spawnable agents\n   toolNames: z.array(z.enum(toolNames)).optional().default([]),\n   spawnableAgents: z.array(z.string()).optional().default([]),\n"
        }
      ]
    },
    {
      "id": "add-sidebar-fades",
      "sha": "257cb3720d2c6d77d44059d6cff4b36269cf993c",
      "parentSha": "44535dc680b565d8a8b2b2429865a23cb529d3f3",
      "spec": "Implement dynamic fade indicators and a custom thin scrollbar for the desktop docs sidebar.\n\nScope:\n- Desktop sidebar in web/src/app/docs/layout.tsx\n- Global styles in web/src/styles/globals.css\n\nRequirements:\n1) Desktop sidebar fade indicators\n- The desktop docs sidebar should display a subtle gradient fade at the top when the sidebar is scrolled away from the top, and a subtle gradient fade at the bottom when it is not scrolled to the end. When at the very top, the top fade is hidden; when at the very bottom, the bottom fade is hidden.\n- The fades must be non-interactive (pointer-events: none) and should not interfere with navigation.\n- Initial fade visibility must be computed on mount so the correct state is shown even before user scrolling.\n\n2) Scrollable container and state\n- Wrap the existing DocSidebar in a scrollable container inside the fixed desktop sidebar wrapper. The fixed wrapper maintains the same position, width, and height as before, while the inner container becomes the scroll surface.\n- Add a ref to the scrollable container and listen to its scroll events to determine whether the view is at the top or bottom and update local state flags for fade visibility accordingly. Clean up the scroll listener on unmount.\n- Preserve existing onNavigate behavior and close interactions; do not change the DocSidebar API.\n\n3) Preserve existing navigation smooth-scrolling behavior\n- Keep the smooth scrolling to hash targets on back/forward navigation that already exists in the docs layout.\n- Ensure hash-based navigation and initial load do not regress fade behavior (i.e., fades update correctly after programmatic scrolls).\n\n4) Visual treatment and classes\n- Apply a thin, themed custom scrollbar to the scrollable sidebar container using a class (e.g., 'custom-scrollbar').\n- The scrollable container should retain appropriate padding and visual separation (rounded corners, subtle border/shadow/backdrop) consistent with the site’s design system. The exact style values can use existing Tailwind tokens (background, border, backdrop-blur) to match the diff’s intent.\n\n5) Global scrollbar styles\n- In web/src/styles/globals.css, define styles for the new 'custom-scrollbar' class to render a slim scrollbar:\n  - WebKit: 6px width; transparent track; rounded thumb using theme border color at ~60% opacity; hover and active states slightly stronger.\n  - Firefox: thin scrollbar with appropriate colors using theme variables.\n\nNon-requirements:\n- Do not alter mobile sidebar (Sheet) behavior.\n- Do not change DocSidebar logic or its exported API.\n\nFiles to change:\n- web/src/app/docs/layout.tsx: Add useRef import, local UI state for top/bottom fades, scroll handler, fixed wrapper with an inner scrollable container (carrying the 'custom-scrollbar' class), and conditional top/bottom gradient overlays. Preserve existing smooth hashchange logic and mobile Sheet usage.\n- web/src/styles/globals.css: Add the 'custom-scrollbar' rules for WebKit and Firefox, keeping existing styles intact.",
      "prompt": "Enhance the desktop docs sidebar UX by adding subtle top/bottom gradient fades that appear based on scroll position and a thin, themed custom scrollbar. The fades should show when there’s overflow in that direction (top when not at the top, bottom when not at the bottom), be non-interactive, and update on initial render and during scroll. Apply the custom scrollbar styles via a CSS class and use it on the scrollable sidebar container. Preserve the current hash-based smooth scrolling behavior and leave the mobile Sheet implementation unchanged.",
      "supplementalFiles": [
        "web/src/components/docs/doc-sidebar.tsx",
        "web/src/components/ui/sheet.tsx",
        "web/src/components/ui/button.tsx",
        "web/src/app/docs/[category]/page.tsx",
        "web/src/components/docs/toc.tsx"
      ],
      "fileDiffs": [
        {
          "path": "web/src/app/docs/layout.tsx",
          "status": "modified",
          "diff": "Index: web/src/app/docs/layout.tsx\n===================================================================\n--- web/src/app/docs/layout.tsx\t44535dc (parent)\n+++ web/src/app/docs/layout.tsx\t257cb37 (commit)\n@@ -1,9 +1,9 @@\n 'use client'\n \n import { Menu } from 'lucide-react'\n import { usePathname } from 'next/navigation'\n-import { useState, useEffect } from 'react'\n+import { useState, useEffect, useRef } from 'react'\n \n import { DocSidebar, sections } from '@/components/docs/doc-sidebar'\n import { Button } from '@/components/ui/button'\n import { Sheet, SheetContent, SheetTrigger } from '@/components/ui/sheet'\n@@ -14,8 +14,11 @@\n   children: React.ReactNode\n }) {\n   const pathname = usePathname()\n   const [open, setOpen] = useState(false)\n+  const [showTopFade, setShowTopFade] = useState(false)\n+  const [showBottomFade, setShowBottomFade] = useState(false)\n+  const sidebarRef = useRef<HTMLDivElement>(null)\n \n   // New: Smoothly scroll to hash target on back/forward navigation\n   useEffect(() => {\n     const handleHashChange = () => {\n@@ -31,16 +34,50 @@\n     window.addEventListener('hashchange', handleHashChange)\n     return () => window.removeEventListener('hashchange', handleHashChange)\n   }, [])\n \n+  // Handle sidebar scroll for dynamic fade effects\n+  useEffect(() => {\n+    const sidebarElement = sidebarRef.current\n+    if (!sidebarElement) return\n+\n+    const handleScroll = () => {\n+      const { scrollTop, scrollHeight, clientHeight } = sidebarElement\n+      const isAtTop = scrollTop === 0\n+      const isAtBottom = scrollTop + clientHeight >= scrollHeight - 1\n+\n+      setShowTopFade(!isAtTop)\n+      setShowBottomFade(!isAtBottom)\n+    }\n+\n+    // Check initial state\n+    handleScroll()\n+\n+    sidebarElement.addEventListener('scroll', handleScroll)\n+    return () => sidebarElement.removeEventListener('scroll', handleScroll)\n+  }, [])\n+\n   return (\n     <div className=\"pt-8\">\n       <div className=\"container flex md:space-x-8 overflow-x-hidden\">\n         <div className=\"hidden lg:block w-64 shrink-0\">\n-          <DocSidebar\n-            className=\"fixed top-24 w-64 h-[calc(100vh-12rem)] overflow-y-auto pr-4 z-40\"\n-            onNavigate={() => setOpen(false)}\n-          />\n+          <div className=\"fixed top-24 w-64 h-[calc(100vh-12rem)] z-40\">\n+            {/* Dynamic gradient fade indicators */}\n+            {showTopFade && (\n+              <div className=\"absolute top-0 left-0 right-0 h-6 bg-gradient-to-b from-background to-transparent pointer-events-none z-10 rounded-t-lg transition-opacity duration-200\" />\n+            )}\n+            {showBottomFade && (\n+              <div className=\"absolute bottom-0 left-0 right-0 h-6 bg-gradient-to-t from-background to-transparent pointer-events-none z-10 rounded-b-lg transition-opacity duration-200\" />\n+            )}\n+\n+            {/* Enhanced scrollable container */}\n+            <div\n+              ref={sidebarRef}\n+              className=\"relative h-full overflow-y-auto pr-4 pl-4 pt-6 pb-6 custom-scrollbar bg-background/95 backdrop-blur-sm rounded-lg border border-border/50 shadow-lg\"\n+            >\n+              <DocSidebar className=\"\" onNavigate={() => setOpen(false)} />\n+            </div>\n+          </div>\n         </div>\n         <main className=\"flex-1 mx-auto pb-36 md:px-8 min-w-0\">{children}</main>\n       </div>\n       <div className=\"flex items-center lg:hidden sticky bottom-0 z-50 bg-background/80 backdrop-blur-sm container p-4 rounded-t-lg border-t\">\n"
        },
        {
          "path": "web/src/styles/globals.css",
          "status": "modified",
          "diff": "Index: web/src/styles/globals.css\n===================================================================\n--- web/src/styles/globals.css\t44535dc (parent)\n+++ web/src/styles/globals.css\t257cb37 (commit)\n@@ -132,4 +132,32 @@\n \n .terminal-code::-webkit-scrollbar-thumb:hover {\n   @apply bg-zinc-600;\n }\n+\n+/* Enhanced docs sidebar scrollbar */\n+.custom-scrollbar::-webkit-scrollbar {\n+  width: 6px;\n+}\n+\n+.custom-scrollbar::-webkit-scrollbar-track {\n+  @apply bg-transparent;\n+}\n+\n+.custom-scrollbar::-webkit-scrollbar-thumb {\n+  @apply bg-border/60 rounded-full;\n+  transition: background-color 0.2s ease;\n+}\n+\n+.custom-scrollbar::-webkit-scrollbar-thumb:hover {\n+  @apply bg-border;\n+}\n+\n+.custom-scrollbar::-webkit-scrollbar-thumb:active {\n+  @apply bg-foreground/20;\n+}\n+\n+/* Firefox scrollbar */\n+.custom-scrollbar {\n+  scrollbar-width: thin;\n+  scrollbar-color: hsl(var(--border) / 0.6) transparent;\n+}\n"
        }
      ]
    },
    {
      "id": "enhance-docs-nav",
      "sha": "26140c86a06d66f531c17146d969be30957ef1fc",
      "parentSha": "dfc91bdd72d1ca2eddc3ab09e0d0dbbc73963c5a",
      "spec": "Implement smooth hash navigation and copy-link UX improvements for the docs, and update specific docs content pages to match the new structure.\n\nBehavioral changes to implement:\n1) Smooth hash navigation and history behavior\n- When landing on a /docs page with a hash (#section), the page should smoothly scroll to that section on initial render.\n- When the hash in the URL changes (e.g., via back/forward browser navigation), the page should smoothly scroll to the corresponding anchor.\n- When a user clicks a docs heading, the URL should update (push a new history entry with the heading's hash) and the page should smoothly scroll to that heading.\n\nRequired file updates:\n- web/src/app/docs/layout.tsx\n  • Convert imports to include useEffect from React.\n  • Add a client-side effect that: (a) on mount, reads window.location.hash and, if present, scrolls the corresponding element into view with smooth behavior; (b) attaches a hashchange listener that smoothly scrolls to the new target on hash changes; (c) cleans up the listener on unmount.\n\n- web/src/components/docs/copy-heading.tsx\n  • Update the heading onClick handler: if an id exists, push a new history state with the current pathname plus #id, then smoothly scroll the target into view. Preserve the existing clipboard copy button behavior.\n\n- web/src/components/docs/mdx/mdx-components.tsx\n  • In the createHeadingWithCopyLink heading click handler, before scrolling, push a new history state that appends #id to the current pathname, then perform smooth scroll. Keep mobile-specific copy-button visibility behavior intact.\n\nContent synchronization and restructuring:\n- web/src/content/advanced/claude-code-comparison.mdx\n  • Under \"When to Choose Codebuff\", add bullets for SDK/programmatic access and advanced agent system.\n  • Under \"When to Choose Claude Code\", expand the list to include first-party integration requirements, enterprise/security controls, centralized admin controls, and prioritizing first-party model/tool access.\n  • Replace the feature comparison block with a well-formed Markdown table listing rows like: CLI-based interaction, Natural language commands, Autonomous test execution, Large context window (update ranges to 200k–1M where appropriate), Directory-specific context awareness, Fast diff edits, Cost, Polished UI, Minimal interruptions, Full-featured SDK, Programmatic agent creation, Project templates. Ensure the table formatting is valid and renders correctly.\n  • Fix the internal link for blending models to the docs advanced anchor without a trailing question mark: /docs/advanced#what-models-do-you-use\n\n- web/src/content/agents/creating-new-agents.mdx\n  • Clean up and de-duplicate content: ensure the \"Types\" list is properly formatted; convert control-flow and context-access notes into clear bulleted lists; standardize comment labeling within code samples (e.g., use “agentState: …”).\n  • Remove overly long or redundant example sections (e.g., large prompt .md files and broad advanced agent samples) to focus the page, and retain concise domain-specific examples where appropriate.\n  • Consolidate the “Control Flow” section into a simple three-bullet list (yield 'STEP', yield 'STEP_ALL', return) and ensure it appears only once.\n\n- web/src/content/agents/customizing-agents.mdx\n  • Add a new \"Domain-Specific Customization\" section explaining that agents are most effective as context managers and suggesting using specialty reviewers as spawnable subagents. Include a placeholder MarkdownTable block beneath a brief “Comparison: Context managers vs. specialty replicas” line.\n  • Reformat the \"Available Fields\" section into grouped bullet lists for Core, Tools, Prompts, Input/Output, and Programmatic, listing each field on its own bullet.\n  • In Troubleshooting, add a \"Running specific agents\" sub-point describing testing with --agent <agent-id>, and keep the existing tips list.\n\n- web/src/content/agents/overview.mdx\n  • Rewrite the \"What Makes Codebuff Agents Unique?\" paragraph to a plain statement (no callout/quote) emphasizing programmatic control via TypeScript generators and deterministic behavior.\n  • Add a \"Built-in Agents\" section listing the built-ins (codebuff/base, reviewer, thinker, researcher, planner, file-picker).\n  • Remove the domain-specific customization examples block from this page to reduce redundancy (that content is covered on the customization page).\n\nNotes:\n- Do not alter styling classes beyond what’s necessary for behavior.\n- Keep all existing accessibility labels and semantics.\n- Ensure new history behavior uses pushState for heading clicks and preserves existing replaceState behavior in the sidebar component.\n- Verify that TOC and sidebar anchors continue to work with the new history and scroll behavior.",
      "prompt": "Improve the developer docs experience: make heading clicks update the URL with the section hash and smoothly scroll to the heading, and ensure back/forward navigation to hashes also smoothly scrolls to the right place. Then refresh the Codebuff vs Claude Code comparison and agent-related docs to match current messaging: add SDK/programmatic bullets, expand Claude-specific enterprise reasons, standardize the feature comparison table, streamline the creating/customizing agent docs with concise control flow and field lists, and move domain-specific customization examples out of the overview into the customization page. Keep styles and existing components intact while making these UX and content updates.",
      "supplementalFiles": [
        "web/src/components/docs/doc-sidebar.tsx",
        "web/src/components/docs/toc.tsx",
        "web/src/components/docs/mdx/markdown-table.tsx",
        "web/src/components/docs/mdx/custom-link.tsx",
        "web/src/lib/docs.ts"
      ],
      "fileDiffs": [
        {
          "path": "web/src/app/docs/layout.tsx",
          "status": "modified",
          "diff": "Index: web/src/app/docs/layout.tsx\n===================================================================\n--- web/src/app/docs/layout.tsx\tdfc91bd (parent)\n+++ web/src/app/docs/layout.tsx\t26140c8 (commit)\n@@ -1,9 +1,9 @@\n 'use client'\n \n import { Menu } from 'lucide-react'\n import { usePathname } from 'next/navigation'\n-import { useState } from 'react'\n+import { useState, useEffect } from 'react'\n \n import { DocSidebar, sections } from '@/components/docs/doc-sidebar'\n import { Button } from '@/components/ui/button'\n import { Sheet, SheetContent, SheetTrigger } from '@/components/ui/sheet'\n@@ -14,8 +14,25 @@\n   children: React.ReactNode\n }) {\n   const pathname = usePathname()\n   const [open, setOpen] = useState(false)\n+\n+  // New: Smoothly scroll to hash target on back/forward navigation\n+  useEffect(() => {\n+    const handleHashChange = () => {\n+      const id = window.location.hash.slice(1)\n+      if (id) {\n+        document.getElementById(id)?.scrollIntoView({ behavior: 'smooth' })\n+      }\n+    }\n+\n+    // If landing with a hash, ensure smooth scroll to target\n+    handleHashChange()\n+\n+    window.addEventListener('hashchange', handleHashChange)\n+    return () => window.removeEventListener('hashchange', handleHashChange)\n+  }, [])\n+\n   return (\n     <div className=\"pt-8\">\n       <div className=\"container flex md:space-x-8 overflow-x-hidden\">\n         <DocSidebar\n"
        },
        {
          "path": "web/src/components/docs/copy-heading.tsx",
          "status": "modified",
          "diff": "Index: web/src/components/docs/copy-heading.tsx\n===================================================================\n--- web/src/components/docs/copy-heading.tsx\tdfc91bd (parent)\n+++ web/src/components/docs/copy-heading.tsx\t26140c8 (commit)\n@@ -28,12 +28,13 @@\n       <h1\n         {...props}\n         id={id}\n         className=\"inline-block hover:cursor-pointer hover:underline -mb-4 scroll-mt-24 font-serif\"\n-        onClick={() =>\n-          id &&\n+        onClick={() => {\n+          if (!id) return\n+          history.pushState(null, '', `${window.location.pathname}#${id}`)\n           document.getElementById(id)?.scrollIntoView({ behavior: 'smooth' })\n-        }\n+        }}\n       >\n         {title}\n         <button\n           onClick={(e) => {\n"
        },
        {
          "path": "web/src/components/docs/mdx/mdx-components.tsx",
          "status": "modified",
          "diff": "Index: web/src/components/docs/mdx/mdx-components.tsx\n===================================================================\n--- web/src/components/docs/mdx/mdx-components.tsx\tdfc91bd (parent)\n+++ web/src/components/docs/mdx/mdx-components.tsx\t26140c8 (commit)\n@@ -96,8 +96,10 @@\n     }\n \n     const handleClick = () => {\n       if (id) {\n+        // Add a history entry with the new hash and smoothly scroll\n+        history.pushState(null, '', `${window.location.pathname}#${id}`)\n         document.getElementById(id)?.scrollIntoView({ behavior: 'smooth' })\n       }\n \n       // On mobile, toggle copy button visibility when title is tapped\n"
        },
        {
          "path": "web/src/content/advanced/claude-code-comparison.mdx",
          "status": "modified",
          "diff": "Index: web/src/content/advanced/claude-code-comparison.mdx\n===================================================================\n--- web/src/content/advanced/claude-code-comparison.mdx\tdfc91bd (parent)\n+++ web/src/content/advanced/claude-code-comparison.mdx\t26140c8 (commit)\n@@ -24,24 +24,38 @@\n - Cost: Codebuff is one third the cost of Claude Code for equivalent tasks and even less for back-and-forth conversation\n - Codebase Analysis: Codebuff pulls more context from scanning your entire codebase, rather than file-by-file. Codebuff also [blends different models](/docs/advanced#what-models-do-you-use) based on their strengths to provide more accurate results.\n - Staying in Flow: Codebuff requires fewer confirmation prompts for file edits and command execution.\n - Focused changes: Codebuff does just what you asked for, while Claude Code will often get carried away editing more and more files.\n+- SDK and Programmatic Access: Codebuff provides a full TypeScript SDK for programmatic integration, allowing you to create custom workflows and embed AI coding capabilities into your own tools.\n+- Advanced Agent System: Create custom agents with TypeScript generator functions, spawn subagents, and orchestrate complex multi-step workflows that go far beyond simple chat interactions.\n \n ## When to Choose Claude Code\n \n Claude Code might be a better choice if you:\n \n-- Can't use an intermediary provider, need to use the API directly from Anthropic\n+- You require first-party Anthropic integration (no intermediary/proxy) for procurement, data handling, or legal reasons\n+- You need enterprise security/compliance controls directly from Anthropic (e.g., SOC 2/ISO programs, data-retention controls, private/VPC networking options)\n+- Your org needs centralized admin controls within Anthropic's ecosystem (SSO, RBAC, governance, auditability)\n+- You prioritize early access to Anthropic model capabilities and first-party tooling\n \n+\n ## Feature Comparison\n \n <MarkdownTable>\n-  | Feature | Codebuff | Claude Code | | --- | --- | --- | | CLI-based\n-  interaction | ✅ | ✅ | | Natural language commands | ✅ | ✅ | | Autonomous\n-  test execution | ✅ | ✅ | | Deep, targeted context awareness | ✅ | ❌ | |\n-  Large context window | ✅ (200k - 1M) | ✅ (200k) | | Fast diff edits (no full\n-  rewrites) | ✅ | ❌ | | Accuracy at scale | ✅ | ❌ | | Cost | $ | $$$ | |\n-  Polished UI | ❌ | ✅ | | Minimal interruptions | ✅ | ❌ |\n+| Feature | Codebuff | Claude Code |\n+| --- | --- | --- |\n+| CLI-based interaction | ✅ | ✅ |\n+| Natural language commands | ✅ | ✅ |\n+| Autonomous test execution | ✅ | ✅ |\n+| Large context window | ✅ (200k-1M) | ✅ (200k-1M) |\n+| Directory-specific context awareness | ✅ | 🔄 |\n+| Fast diff edits (no full rewrites) | ✅ | ❌ |\n+| Cost | $ | $$ |\n+| Polished UI | ❌ | ✅ |\n+| Minimal interruptions | ✅ | ❌ |\n+| Full-featured SDK | ✅ | ❌ |\n+| Programmatic agent creation | ✅ | ❌ |\n+| Project templates | ✅ | ❌ |\n </MarkdownTable>\n \n ## Summary\n \n"
        },
        {
          "path": "web/src/content/agents/creating-new-agents.mdx",
          "status": "modified",
          "diff": "Index: web/src/content/agents/creating-new-agents.mdx\n===================================================================\n--- web/src/content/agents/creating-new-agents.mdx\tdfc91bd (parent)\n+++ web/src/content/agents/creating-new-agents.mdx\t26140c8 (commit)\n@@ -5,84 +5,26 @@\n order: 2\n ---\n \n # Creating New Agents\n-\n Create specialized agents from scratch using TypeScript files in the `.agents/` directory.\n \n **Types:**\n \n-- **LLM-based** - Use prompts and language models\n-- **Programmatic** - Use TypeScript generator functions with `handleSteps`\n+  - **LLM-based** - Use prompts and language models\n+  - **Programmatic** - Use TypeScript generator functions with `handleSteps`\n \n-## Basic Structure\n-\n-Create a new TypeScript file in `.agents/` directory:\n-\n-**.agents/code-analyzer.ts**\n-```typescript\n-import { AgentDefinition } from './types/agent-definition'\n-\n-const definition: AgentDefinition = {\n-  id: \"code-analyzer\",\n-  displayName: \"Code Analysis Expert\",\n-  spawnerPrompt: \"Spawn for deep code analysis and refactoring suggestions\",\n-  model: \"anthropic/claude-4-sonnet-20250522\",\n-\n-  toolNames: [\"read_files\", \"code_search\", \"spawn_agents\", \"write_file\"],\n-  spawnableAgents: [\"codebuff/thinker@0.0.1\", \"codebuff/reviewer@0.0.1\"],\n-\n-  handleSteps: function* ({ agentState, prompt, params }) {\n-    // First, find relevant files\n-    const { toolResult: files } = yield {\n-      toolName: 'find_files',\n-      input: { query: prompt }\n-    }\n-\n-    // Read the most important files\n-    if (files) {\n-      const filePaths = JSON.parse(files).slice(0, 5)\n-\n-      const { toolResult } = yield {\n-        toolName: 'read_files',\n-        input: { paths: ['file1.ts', 'file2.ts'] }\n-      }\n-    }\n-\n-    // Spawn a thinker for deep analysis\n-    yield {\n-      toolName: 'spawn_agents',\n-      input: {\n-        agents: [{\n-          agent_type: 'thinker',\n-          prompt: `Analyze the code structure and suggest improvements for: ${prompt}`\n-        }]\n-      }\n-    }\n-\n-    // Let the agent generate its response\n-    yield 'STEP_ALL'\n-\n-export default definition\n-```\n-\n-```\n-\n **Control Flow:**\n-- `yield 'STEP'` - Run one LLM generation step\n-- `yield 'STEP_ALL'` - Run until completion\n-- `return` - End the agent's turn\n \n+  - `yield 'STEP'` - Run one LLM generation step\n+  - `yield 'STEP_ALL'` - Run until completion\n+  - `return` - End the agent's turn\n+\n **Accessing Context:**\n-- `agentState` - Current agent state and message history\n-- `prompt` - User's prompt to the agent\n-- `params` - Additional parameters passed to the agent\n-# Creating New Agents\n-Create specialized agents from scratch using TypeScript files in the `.agents/` directory.\n-**Types:**\n \n-- **LLM-based** - Use prompts and language models\n-- **Programmatic** - Use TypeScript generator functions with `handleSteps`\n+  - `agentState` - Current agent state and message history\n+  - `prompt` - User's prompt to the agent\n+  - `params` - Additional parameters passed to the agent\n \n ## Basic Structure\n \n Create a new TypeScript file in `.agents/` directory:\n@@ -117,25 +59,11 @@\n }\n \n export default definition\n ```\n-**.agents/templates/doc-writer-system.md**\n \n-```markdown\n-# Documentation Writer\n+## Domain-Specific Examples\n \n-Create clear, comprehensive documentation for codebases.\n-\n-## Guidelines\n-\n-- Research codebase first\n-- Use clear, concise language\n-- Include practical examples\n-- Test examples for accuracy\n-```\n-\n-## More Domain-Specific Examples\n-\n ### API Documentation Agent\n \n Specialized for documenting REST APIs and GraphQL schemas:\n \n@@ -207,135 +135,18 @@\n }\n \n export default definition\n ```\n-**.agents/templates/migration-guidelines.md**\n \n-```markdown\n-# Database Migration Guidelines\n-\n-## Safety First\n-\n-- Always create reversible migrations (up and down)\n-- Test migrations on a copy of production data\n-- Add indexes for new foreign keys\n-- Use transactions where supported\n-\n-## Performance Considerations\n-\n-- Avoid locking tables during peak hours\n-- Use `ADD COLUMN` with defaults carefully\n-- Consider batching large data changes\n-- Monitor migration execution time\n-\n-## Best Practices\n-\n-- Include descriptive migration names\n-- Add comments explaining complex changes\n-- Validate data integrity after migration\n-- Keep migrations atomic and focused\n-```\n-\n-## Advanced Examples\n-\n-### Frontend Development Coordinator\n-\n-**.agents/frontend-coordinator.ts**\n-```typescript\n-import { AgentDefinition } from './types/agent-definition'\n-\n-const definition: AgentDefinition = {\n-  id: \"frontend-coordinator\",\n-  version: \"1.0.0\",\n-  displayName: \"Frontend Development Coordinator\",\n-  spawnerPrompt: \"Spawn this agent to coordinate frontend development tasks with React best practices and component architecture\",\n-  model: \"anthropic/claude-4-sonnet-20250522\",\n-  outputMode: \"last_message\",\n-  includeMessageHistory: true,\n-  toolNames: [\"read_files\", \"write_file\", \"code_search\", \"spawn_agents\", \"end_turn\"],\n-  spawnableAgents: [\"codebuff/reviewer@0.0.1\", \"codebuff/researcher@0.0.1\", \"codebuff/file-picker@0.0.1\"],\n-  inputSchema: {\n-    prompt: {\n-      type: \"string\",\n-      description: \"Frontend development task to coordinate\"\n-    }\n-  },\n-  systemPrompt: \"You are a frontend development coordinator specializing in React best practices. Guide development workflows and ensure code quality.\",\n-  instructionsPrompt: \"Coordinate the frontend development task, spawning appropriate agents as needed.\",\n-  stepPrompt: \"Continue coordinating the frontend development workflow. Use end_turn when complete.\"\n-}\n-\n-export default definition\n-```\n-\n-### API Development Specialist\n-\n-**.agents/api-specialist.ts**\n-```typescript\n-import { AgentDefinition } from './types/agent-definition'\n-\n-const definition: AgentDefinition = {\n-  id: \"api-specialist\",\n-  version: \"1.0.0\",\n-  displayName: \"API Development Specialist\",\n-  spawnerPrompt: \"Spawn this agent for REST API development, OpenAPI compliance, and endpoint documentation\",\n-  model: \"anthropic/claude-4-sonnet-20250522\",\n-  outputMode: \"last_message\",\n-  includeMessageHistory: true,\n-  toolNames: [\"read_files\", \"write_file\", \"code_search\", \"spawn_agents\", \"run_terminal_command\", \"end_turn\"],\n-  spawnableAgents: [\"codebuff/reviewer@0.0.1\", \"codebuff/researcher@0.0.1\", \"codebuff/file-picker@0.0.1\"],\n-  inputSchema: {\n-    prompt: {\n-      type: \"string\",\n-      description: \"API development or documentation task\"\n-    }\n-  },\n-  systemPrompt: \"You are an API development specialist focused on creating robust, well-documented REST APIs following industry standards.\",\n-  instructionsPrompt: \"Handle the API development task, ensuring proper design patterns and documentation.\",\n-  stepPrompt: \"Continue working on the API development task. Use end_turn when complete.\"\n-}\n-\n-export default definition\n-```\n-\n-### DevOps Automation Agent\n-\n-**.agents/devops-automator.ts**\n-```typescript\n-import { AgentDefinition } from './types/agent-definition'\n-\n-const definition: AgentDefinition = {\n-  id: \"devops-automator\",\n-  version: \"1.0.0\",\n-  displayName: \"DevOps Automation Specialist\",\n-  spawnerPrompt: \"Spawn this agent for infrastructure automation, CI/CD pipelines, and deployment configuration\",\n-  model: \"anthropic/claude-4-sonnet-20250522\",\n-  outputMode: \"last_message\",\n-  includeMessageHistory: true,\n-  toolNames: [\"read_files\", \"write_file\", \"code_search\", \"spawn_agents\", \"run_terminal_command\", \"end_turn\"],\n-  spawnableAgents: [\"codebuff/reviewer@0.0.1\", \"codebuff/researcher@0.0.1\", \"codebuff/file-picker@0.0.1\"],\n-  inputSchema: {\n-    prompt: {\n-      type: \"string\",\n-      description: \"Infrastructure or deployment automation task\"\n-    }\n-  },\n-  systemPrompt: \"You are a DevOps automation specialist focused on secure, scalable infrastructure and deployment pipelines.\",\n-  instructionsPrompt: \"Handle the infrastructure or deployment automation task with security and reliability in mind.\",\n-  stepPrompt: \"Continue working on the DevOps automation task. Use end_turn when complete.\"\n-}export default definition\n-```\n-\n ## Programmatic Agents (Advanced)\n \n-**🎯 This is where Codebuff agents become truly powerful!** While LLM-based agents work well for many tasks, programmatic agents give you precise control over complex workflows.\n+**🎯 This is where Codebuff agents become truly powerful!** While LLM-based agents work well for many tasks, programmatic agents give you precise control over complex workflows, while still letting you tap into LLMs when you want them.\n \n ### Why Use Programmatic Agents?\n \n - **Deterministic workflows** - Guarantee specific steps happen in order\n-- **Dynamic decision making** - Branch based on actual file contents or tool results\n+- **Dynamic decision making** - Branch based on your own logic\n - **Complex orchestration** - Coordinate multiple agents and tools with logic\n-- **Error handling** - Catch and handle tool errors programmatically\n - **State management** - Maintain state across multiple agent steps\n \n ### How It Works\n \n@@ -396,11 +207,11 @@\n Your `handleSteps` function receives context and yields actions:\n \n ```typescript\n handleSteps: function* ({ agentState, prompt, params }) {\n-  // agentState - Current conversation and agent state\n-  // prompt - What the user asked this agent to do\n-  // params - Additional parameters passed to the agent\n+  // agentState: Current conversation and agent state\n+  // prompt: What the user asked this agent to do\n+  // params: Additional parameters passed to the agent\n \n   // Your logic here...\n }\n ```\n@@ -425,13 +236,12 @@\n ```\n \n #### 3. Control Flow Options\n \n-| Command | Purpose | When to Use |\n-|---------|---------|------------|\n-| `yield 'STEP'` | Run one LLM generation | Need single response |\n-| `yield 'STEP_ALL'` | Run until completion | Let LLM finish the task |\n-| `return` | End immediately | Task complete or error |\n+**Control Flow:**\n+- `yield 'STEP'` - Run one LLM generation step\n+- `yield 'STEP_ALL'` - Run until completion\n+- `return` - End the agent's turn\n \n #### 4. Advanced Example: Conditional Workflow\n \n ```typescript\n"
        },
        {
          "path": "web/src/content/agents/customizing-agents.mdx",
          "status": "modified",
          "diff": "Index: web/src/content/agents/customizing-agents.mdx\n===================================================================\n--- web/src/content/agents/customizing-agents.mdx\tdfc91bd (parent)\n+++ web/src/content/agents/customizing-agents.mdx\t26140c8 (commit)\n@@ -15,8 +15,23 @@\n ├── security-coordinator.ts\n └── types/\n     └── agent-definition.ts\n ```\n+\n+### Domain-Specific Customization\n+\n+Agents adapt to your specific workflow and project needs.\n+\n+Keep in mind you'll get the most value from agents if you see them as a means of managing your context window. Think about how you want to break down tasks and build your agents around that, as opposed to replicating engineering specialties.\n+\n+Comparison: Context managers vs. specialty replicas\n+\n+<MarkdownTable>\n+\n+</MarkdownTable>\n+\n+**Tip:** Use specialty reviewers as spawnable subagents that your context-manager agent calls at the right time in the workflow.\n+\n ## Example: Security Coordinator Agent\n \n Create a specialized agent for security-focused workflows:\n \n@@ -60,19 +75,19 @@\n ```typescript\n const definition: AgentDefinition = {\n   id: \"security-coordinator\",\n   // ... other fields ...\n-  \n+\n   handleSteps: function* ({ prompt, params }) {\n     // 1. Scan for security vulnerabilities\n     const { toolResult: scanResults } = yield {\n       toolName: 'code_search',\n-      input: { \n+      input: {\n         pattern: '(eval|exec|dangerouslySetInnerHTML|process\\.env)',\n         flags: '-i'\n       }\n     }\n-    \n+\n     // 2. If vulnerabilities found, spawn security reviewer\n     if (scanResults) {\n       yield {\n         toolName: 'spawn_agents',\n@@ -83,9 +98,9 @@\n           }]\n         }\n       }\n     }\n-    \n+\n     // 3. Let the agent handle the rest\n     yield 'STEP_ALL'\n   }\n }\n@@ -98,32 +113,44 @@\n - Implement complex conditional logic\n \n ## Available Fields\n \n-**Core:** `id`, `displayName`, `model`, `version`, `publisher`\n-**Tools:** `toolNames`, `spawnableAgents`\n-**Prompts:** `spawnerPrompt`, `systemPrompt`, `instructionsPrompt`, `stepPrompt`\n-**Input/Output:** `inputSchema`, `outputMode`, `outputSchema`, `includeMessageHistory`\n-**Programmatic:** `handleSteps`\n+**Core:**\n+  - `id`\n+  - `displayName`\n+  - `model`\n+  - `version`\n+  - `publisher`\n \n-## Built-in Agents\n+**Tools:**\n+  - `toolNames`\n+  - `spawnableAgents`\n \n-- `codebuff/base` - Main coding assistant\n-- `codebuff/reviewer` - Code review\n-- `codebuff/thinker` - Deep thinking\n-- `codebuff/researcher` - Research & docs\n-- `codebuff/planner` - Planning & architecture\n-- `codebuff/file-picker` - File discovery\n+**Prompts:**\n+  - `spawnerPrompt`\n+  - `systemPrompt`\n+  - `instructionsPrompt`\n+  - `stepPrompt`\n \n+**Input/Output:**\n+  - `inputSchema`\n+  - `outputMode`\n+  - `outputSchema`\n+  - `includeMessageHistory`\n+\n+**Programmatic:**\n+  - `handleSteps`\n+\n+\n ## Troubleshooting\n \n **Agent not loading:** Check TypeScript syntax, file must export default AgentDefinition\n+\n **Type errors:** Import types from `'./types/agent-definition'`\n+\n **Prompts not applying:** Verify file paths are relative to `.agents/` directory\n \n+**Running specific agents:**\n \n-**Debug tips:**\n-\n 1. Check TypeScript: `bun run typecheck` in `.agents/` directory\n 2. Restart Codebuff to see errors\n 3. Test with `--agent <agent-id>` to debug specific agents\n-**Next:** [Create new agents](/docs/agents/creating-new-agents) or see [troubleshooting guide](/docs/agents#troubleshooting-agent-customization)\n"
        },
        {
          "path": "web/src/content/agents/overview.mdx",
          "status": "modified",
          "diff": "Index: web/src/content/agents/overview.mdx\n===================================================================\n--- web/src/content/agents/overview.mdx\tdfc91bd (parent)\n+++ web/src/content/agents/overview.mdx\t26140c8 (commit)\n@@ -18,10 +18,19 @@\n - **File Discovery** - Navigate large codebases\n \n ## What Makes Codebuff Agents Unique?\n \n-> **💡 Key Innovation:** Unlike other AI coding assistants, Codebuff agents can be **programmatically controlled** using TypeScript generator functions. This means you can write actual code to orchestrate complex workflows, make dynamic decisions based on file contents, and ensure deterministic execution paths. It's the difference between hoping an LLM understands your instructions vs. guaranteeing specific behavior.\n+Codebuff agents can be **programmatically controlled** using TypeScript generator functions. You can write actual code to orchestrate complex workflows, make decisions based on file contents, and add in determinism as you see fit. Instead of hoping an LLM understands your instructions you can guarantee specific behavior.\n \n+## Built-in Agents\n+\n+- `codebuff/base` - Main coding assistant\n+- `codebuff/reviewer` - Code review\n+- `codebuff/thinker` - Deep thinking\n+- `codebuff/researcher` - Research & docs\n+- `codebuff/planner` - Planning & architecture\n+- `codebuff/file-picker` - File discovery\n+\n ## Agent Workflow\n \n A typical call to Codebuff may result in the following flow:\n \n@@ -59,16 +68,8 @@\n 3. **Planning** creates step-by-step plan\n 4. **Base** implements changes informed by the previous agents\n 5. **Reviewer** checks for security issues\n \n-### Domain-Specific Customization\n-\n-Agents adapt to your specific workflow and project needs. You can create specialized agents tailored to your domain or build new ones for unique tasks, like the following:\n-\n-- **Frontend**: React component reviewer\n-- **Backend**: API security reviewer\n-- **DevOps**: Infrastructure deployment agent\n-\n ### Agent Coordination\n \n Agents coordinate through the `spawnerPrompt` field, which helps other agents understand when and why to spawn them. This creates intelligent workflows where:\n \n"
        }
      ]
    },
    {
      "id": "fix-agent-steps",
      "sha": "fe667af3a17f32624f5943804b77070986d3174f",
      "parentSha": "00e88602aa42434b29918217257804fbd63413cc",
      "spec": "Implement a consistent default and correct propagation for agent step limits across config and SDK, and document the fix.\n\n1) Introduce a shared default constant in config schema\n- File: common/src/json-config/constants.ts\n  - Add an exported constant named DEFAULT_MAX_AGENT_STEPS set to 12.\n  - In CodebuffConfigSchema, change the maxAgentSteps default from a hardcoded number to use DEFAULT_MAX_AGENT_STEPS.\n\n2) Ensure SDK uses the shared default and correctly initializes stepsRemaining\n- File: sdk/src/client.ts\n  - Import DEFAULT_MAX_AGENT_STEPS from common/src/json-config/constants.\n  - In the run() method parameter destructuring, set the default for the maxAgentSteps argument to DEFAULT_MAX_AGENT_STEPS so a consistent value is used when the caller does not provide one.\n  - After computing the sessionState (either from previousRun or initialSessionState), set sessionState.mainAgentState.stepsRemaining = maxAgentSteps so the session uses the intended cap for the current run.\n\n3) Document the fix\n- File: sdk/CHANGELOG.md\n  - Under the current unreleased section, add a Fixed entry: \"maxAgentSteps resets every run\" to describe the bug fix.\n\nConstraints and notes:\n- Do not alter backend step decrement logic (backend/src/run-agent-step.ts) or the base default of 25 in common/src/constants/agents.ts; the SDK and config-level default coordinate via the new constant.\n- Do not modify the structure of RunState or session-state schemas; only set stepsRemaining via the SDK run flow as specified.\n- Preserve existing behavior for projectFiles, knowledgeFiles, and agentDefinitions handling in the SDK.\n- Do not change any other files.\n",
      "prompt": "Unify the default for the agent step limit and fix SDK behavior so that the configured maxAgentSteps reliably applies each run. Add a shared constant for the default in the config schema, make the SDK use that constant as the default run() parameter, and ensure the SDK sets stepsRemaining on the session state based on the provided or defaulted value. Update the changelog to reflect the fix.",
      "supplementalFiles": [
        "common/src/constants/agents.ts",
        "common/src/types/session-state.ts",
        "sdk/src/run-state.ts",
        "backend/src/run-agent-step.ts",
        "npm-app/src/json-config/parser.ts"
      ],
      "fileDiffs": [
        {
          "path": "common/src/json-config/constants.ts",
          "status": "modified",
          "diff": "Index: common/src/json-config/constants.ts\n===================================================================\n--- common/src/json-config/constants.ts\t00e8860 (parent)\n+++ common/src/json-config/constants.ts\tfe667af (commit)\n@@ -63,8 +63,10 @@\n       .describe('Whether this command should be run'),\n   })\n   .describe('Defines a single file change hook.')\n \n+export const DEFAULT_MAX_AGENT_STEPS = 12\n+\n export const CodebuffConfigSchema = z\n   .object({\n     description: z\n       .any()\n@@ -80,9 +82,9 @@\n       .describe('An array of commands to run on file changes.'),\n     maxAgentSteps: z\n       .number()\n       .optional()\n-      .default(12)\n+      .default(DEFAULT_MAX_AGENT_STEPS)\n       .describe(\n         'Maximum number of turns agent will take before being forced to end',\n       ),\n     baseAgent: z.string().optional().describe('Specify default base agent'),\n"
        },
        {
          "path": "sdk/CHANGELOG.md",
          "status": "modified",
          "diff": "Index: sdk/CHANGELOG.md\n===================================================================\n--- sdk/CHANGELOG.md\t00e8860 (parent)\n+++ sdk/CHANGELOG.md\tfe667af (commit)\n@@ -11,8 +11,12 @@\n ### Changed\n \n - Automatic parsing of `knowledgeFiles` if not provided\n \n+### Fixed\n+\n+- `maxAgentSteps` resets every run\n+\n ## [0.1.8] - 2025-08-13\n \n ### Added\n \n"
        },
        {
          "path": "sdk/src/client.ts",
          "status": "modified",
          "diff": "Index: sdk/src/client.ts\n===================================================================\n--- sdk/src/client.ts\t00e8860 (parent)\n+++ sdk/src/client.ts\tfe667af (commit)\n@@ -10,8 +10,9 @@\n   PromptResponseSchema,\n   type ServerAction,\n } from '../../common/src/actions'\n import { API_KEY_ENV_VAR } from '../../common/src/constants'\n+import { DEFAULT_MAX_AGENT_STEPS } from '../../common/src/json-config/constants'\n \n import type { AgentDefinition } from '../../common/src/templates/initial-agents-dir/types/agent-definition'\n import type { PrintModeEvent } from '../../common/src/types/print-mode'\n \n@@ -130,9 +131,9 @@\n     previousRun,\n     projectFiles,\n     knowledgeFiles,\n     agentDefinitions,\n-    maxAgentSteps,\n+    maxAgentSteps = DEFAULT_MAX_AGENT_STEPS,\n   }: {\n     agent: string\n     prompt: string\n     params?: Record<string, any>\n@@ -153,8 +154,9 @@\n         agentDefinitions,\n         projectFiles,\n         maxAgentSteps,\n       })\n+    sessionState.mainAgentState.stepsRemaining = maxAgentSteps\n     const toolResults = previousRun?.toolResults ?? []\n     if (handleEvent) {\n       this.promptIdToHandleEvent[promptId] = handleEvent\n     }\n"
        }
      ]
    },
    {
      "id": "autodetect-knowledge",
      "sha": "00e88602aa42434b29918217257804fbd63413cc",
      "parentSha": "ce0b5521f0aaa513886dcc3787e51aea4dbe5a6d",
      "spec": "Implement automatic knowledge file detection in the SDK run-state initializer and document the change.\n\nRequired changes:\n\n1) sdk/src/run-state.ts\n- In initialSessionState(cwd, options):\n  - Read `projectFiles` from options with a default of an empty object; do not default `knowledgeFiles` at destructure time.\n  - If `knowledgeFiles` is undefined, construct it from `projectFiles` by scanning all entries and selecting only those whose file path (case-insensitive) ends with either \"knowledge.md\" or \"claude.md\". Include these as { [path]: content } in the resulting `knowledgeFiles` object.\n  - Remove any guard that would inadvertently skip all entries (e.g., checking `if (filePath in projectFiles) continue`).\n  - Pass the computed `knowledgeFiles` to getInitialSessionState as before. If no matches are found, pass an empty object.\n  - Keep all other behavior (agentDefinitions processing, maxAgentSteps, system info) unchanged.\n\n2) sdk/CHANGELOG.md\n- Under version 0.1.9, add a \"Changed\" section (or extend it if present) that includes a bullet stating: \"Automatic parsing of knowledgeFiles if not provided\" to reflect the new behavior.\n\nBehavioral expectations:\n- When consumers call CodebuffClient.run without `knowledgeFiles` but with `projectFiles`, knowledge files are automatically populated from `projectFiles` using the filename suffix rules above.\n- If `knowledgeFiles` is explicitly provided, do not modify it.\n- Matching is case-insensitive and based solely on path suffix; no additional filtering (like agent template path exclusions) is required in the SDK.\n- If `projectFiles` is absent or empty and `knowledgeFiles` is undefined, `knowledgeFiles` should default to an empty object.",
      "prompt": "Add automatic discovery of knowledge files in the SDK run state builder. When users call the SDK without providing knowledge files but do provide project files, detect knowledge files from the provided project files and include them in the session. Treat files as knowledge files when their path ends with knowledge.md or claude.md (case-insensitive). Leave explicit knowledgeFiles untouched when provided. Update the changelog for the current SDK version to mention this behavior change.",
      "supplementalFiles": [
        "sdk/src/client.ts",
        "common/src/types/session-state.ts",
        "npm-app/src/project-files.ts",
        "backend/src/system-prompt/prompts.ts"
      ],
      "fileDiffs": [
        {
          "path": "sdk/CHANGELOG.md",
          "status": "modified",
          "diff": "Index: sdk/CHANGELOG.md\n===================================================================\n--- sdk/CHANGELOG.md\tce0b552 (parent)\n+++ sdk/CHANGELOG.md\t00e8860 (commit)\n@@ -7,8 +7,12 @@\n ### Added\n \n - `closeConnection` method in `CodebuffClient`\n \n+### Changed\n+\n+- Automatic parsing of `knowledgeFiles` if not provided\n+\n ## [0.1.8] - 2025-08-13\n \n ### Added\n \n"
        },
        {
          "path": "sdk/src/run-state.ts",
          "status": "modified",
          "diff": "Index: sdk/src/run-state.ts\n===================================================================\n--- sdk/src/run-state.ts\tce0b552 (parent)\n+++ sdk/src/run-state.ts\t00e8860 (commit)\n@@ -21,10 +21,29 @@\n     agentDefinitions?: AgentDefinition[]\n     maxAgentSteps?: number\n   },\n ) {\n-  const { knowledgeFiles = {}, agentDefinitions = [] } = options\n+  const { projectFiles = {}, agentDefinitions = [] } = options\n+  let { knowledgeFiles } = options\n \n+  if (knowledgeFiles === undefined) {\n+    knowledgeFiles = {}\n+    for (const [filePath, fileContents] of Object.entries(projectFiles)) {\n+      if (filePath in projectFiles) {\n+        continue\n+      }\n+      const lowercasePathName = filePath.toLowerCase()\n+      if (\n+        !lowercasePathName.endsWith('knowledge.md') &&\n+        !lowercasePathName.endsWith('claude.md')\n+      ) {\n+        continue\n+      }\n+\n+      knowledgeFiles[filePath] = fileContents\n+    }\n+  }\n+\n   // Process agentDefinitions array and convert handleSteps functions to strings\n   const processedAgentTemplates: Record<string, any> = {}\n   agentDefinitions.forEach((definition) => {\n     const processedConfig = { ...definition } as Record<string, any>\n"
        }
      ]
    },
    {
      "id": "type-client-tools",
      "sha": "af3f741b0c759aa21a60c249f3d38c1a7a5f3142",
      "parentSha": "c675e57a0652f6fb1b60b992a528d58800031ffd",
      "spec": "Implement strongly-typed client tool calls and consolidate related types.\n\n1) Centralize tool call types in common/src/tools/list.ts\n- Add imports: z from 'zod/v4', FileChangeSchema from common/src/actions, and ToolCallPart from 'ai'.\n- Define CodebuffToolCall<T> type using llmToolCallSchema parameter types and Omit<ToolCallPart,'type'>.\n- Replace the old object-literal clientToolCallSchema with a zod discriminatedUnion('toolName') covering only the tools invokable on the client: browser_logs, code_search, create_plan (input: FileChangeSchema), run_file_change_hooks, run_terminal_command (input: llm schema AND z.object({ mode: 'assistant'|'user' })), str_replace (input: FileChangeSchema), write_file (input: FileChangeSchema).\n- Export clientToolNames by mapping over the discriminated union options, and export ClientToolName as (typeof clientToolNames)[number].\n- Export ClientToolCall<T extends ClientToolName> = z.infer<typeof clientToolCallSchema> & { toolName: T } & Omit<ToolCallPart, 'type'>.\n\n2) Remove backend-local type definitions and import from common\n- backend/src/tools/constants.ts: Remove CodebuffToolCall and ClientToolCall type definitions and related imports; keep only globalStopSequence derived from endsAgentStepParam.\n- Update all backend imports to use @codebuff/common/tools/list for CodebuffToolCall, ClientToolCall, and ClientToolName:\n  - backend/src/run-programmatic-step.ts\n  - backend/src/tools/handlers/handler-function-type.ts: import ClientToolCall, ClientToolName, CodebuffToolCall; change requestClientToolCall type to (toolCall: ClientToolCall<T extends ClientToolName ? T : never>) => Promise<string>.\n  - backend/src/tools/tool-executor.ts: import ClientToolCall, ClientToolName, CodebuffToolCall from common; narrow requestClientToolCall’s param type the same way.\n  - backend/src/tools/stream-parser.ts: import CodebuffToolCall from common.\n  - All backend/src/tools/handlers/tool/*.ts files: import CodebuffToolCall (and ClientToolCall where applicable) from common/tools/list.\n  - backend/src/__tests__/subagent-streaming.test.ts: import CodebuffToolCall from @codebuff/common/tools/list.\n\n3) Update main prompt return typing and remove unused import\n- backend/src/main-prompt.ts: Remove import of ClientToolCall; change the function return type annotation to toolCalls: [] (empty array type) and toolResults: ToolResult[]; ensure the function returns empty arrays for those fields.\n\n4) Remove deprecated loop module\n- Delete backend/src/loop-main-prompt.ts and ensure no remaining references in backend (evals maintain their own loop helper and do not depend on this file).\n\n5) Align eval scaffolding with new types\n- evals/scaffolding.ts: Import ClientToolCall from @codebuff/common/tools/list. In runToolCalls, remove the guard that skipped 'spawn_agents' and 'set_output' and just handle all tool calls via handleToolCall.\n\n6) Build and typecheck\n- Ensure all references compile with the new types and discriminated union; resolve any remaining imports pointing to backend/src/tools/constants.ts for these types.\n- Run tests to confirm no behavioral changes besides type safety.",
      "prompt": "Strengthen and centralize typing for tool calls across the monorepo. Move the tool call types to the shared common package, define a discriminated union for client-invokable tools, and update the backend to consume these shared types. Remove the backend-local duplicates, ensure the main prompt API no longer exposes toolCalls, and align the eval scaffolding code with the new types. Keep runtime behavior unchanged—this is a typing and import refactor focused on safety and clarity.",
      "supplementalFiles": [
        "backend/src/tools/definitions/list.ts",
        "backend/src/websockets/websocket-action.ts",
        "backend/src/run-agent-step.ts",
        "backend/src/xml-stream-parser.ts",
        "common/src/tools/constants.ts",
        "common/src/tools/utils.ts",
        "common/src/tools/params/tool/run-terminal-command.ts",
        "common/src/tools/params/tool/write-file.ts",
        "common/src/tools/params/tool/str-replace.ts",
        "common/src/tools/params/tool/code-search.ts",
        "common/src/actions.ts"
      ],
      "fileDiffs": [
        {
          "path": "backend/src/__tests__/subagent-streaming.test.ts",
          "status": "modified",
          "diff": "Index: backend/src/__tests__/subagent-streaming.test.ts\n===================================================================\n--- backend/src/__tests__/subagent-streaming.test.ts\tc675e57 (parent)\n+++ backend/src/__tests__/subagent-streaming.test.ts\taf3f741 (commit)\n@@ -17,10 +17,10 @@\n import { handleSpawnAgents } from '../tools/handlers/tool/spawn-agents'\n import * as loggerModule from '../util/logger'\n \n import type { AgentTemplate } from '../templates/types'\n-import type { CodebuffToolCall } from '../tools/constants'\n import type { SendSubagentChunk } from '../tools/handlers/tool/spawn-agents'\n+import type { CodebuffToolCall } from '@codebuff/common/tools/list'\n import type { Mock } from 'bun:test'\n import type { WebSocket } from 'ws'\n \n describe('Subagent Streaming', () => {\n"
        },
        {
          "path": "backend/src/loop-main-prompt.ts",
          "status": "deleted",
          "diff": "Index: backend/src/loop-main-prompt.ts\n===================================================================\n--- backend/src/loop-main-prompt.ts\tc675e57 (parent)\n+++ backend/src/loop-main-prompt.ts\taf3f741 (commit)\n@@ -1,51 +1,1 @@\n-import { MAX_AGENT_STEPS_DEFAULT } from '@codebuff/common/constants/agents'\n-import { mainPrompt } from './main-prompt'\n-\n-import type { MainPromptOptions } from './main-prompt'\n-import type { ClientToolCall } from './tools/constants'\n-import type { ClientAction } from '@codebuff/common/actions'\n-import type {\n-  SessionState,\n-  ToolResult,\n-} from '@codebuff/common/types/session-state'\n-import type { WebSocket } from 'ws'\n-\n-export async function loopMainPrompt(\n-  ws: WebSocket,\n-  action: ClientAction<'prompt'>,\n-  options: MainPromptOptions & { maxIterations?: number },\n-): Promise<{\n-  sessionState: SessionState\n-  toolCalls: Array<ClientToolCall>\n-  toolResults: Array<ToolResult>\n-}> {\n-  const maxIterations = options.maxIterations ?? MAX_AGENT_STEPS_DEFAULT\n-  let { sessionState, toolResults, toolCalls } = await mainPrompt(\n-    ws,\n-    action,\n-    options,\n-  )\n-  let iterations = 0\n-  // Continue running as long as the agent is using tools and hasn't decided to end the turn.\n-  while (\n-    toolCalls.length > 0 &&\n-    !toolCalls.some((tc) => tc.toolName === 'end_turn')\n-  ) {\n-    const nextAction: ClientAction<'prompt'> = {\n-      ...action,\n-      sessionState,\n-      toolResults,\n-      prompt: undefined,\n-    }\n-    const result = await mainPrompt(ws, nextAction, options)\n-    sessionState = result.sessionState\n-    toolResults = result.toolResults\n-    toolCalls = result.toolCalls\n-    iterations++\n-    if (iterations >= maxIterations) {\n-      break\n-    }\n-  }\n-\n-  return { sessionState, toolCalls, toolResults }\n-}\n+[DELETED]\n\\ No newline at end of file\n"
        },
        {
          "path": "backend/src/main-prompt.ts",
          "status": "modified",
          "diff": "Index: backend/src/main-prompt.ts\n===================================================================\n--- backend/src/main-prompt.ts\tc675e57 (parent)\n+++ backend/src/main-prompt.ts\taf3f741 (commit)\n@@ -10,9 +10,8 @@\n import { expireMessages } from './util/messages'\n import { requestToolCall } from './websockets/websocket-action'\n \n import type { AgentTemplate } from './templates/types'\n-import type { ClientToolCall } from './tools/constants'\n import type { ClientAction } from '@codebuff/common/actions'\n import type { CostMode } from '@codebuff/common/old-constants'\n import type { PrintModeEvent } from '@codebuff/common/types/print-mode'\n import type {\n@@ -34,10 +33,10 @@\n   action: ClientAction<'prompt'>,\n   options: MainPromptOptions,\n ): Promise<{\n   sessionState: SessionState\n-  toolCalls: Array<ClientToolCall>\n-  toolResults: Array<ToolResult>\n+  toolCalls: []\n+  toolResults: ToolResult[]\n }> => {\n   const { userId, clientSessionId, onResponseChunk, localAgentTemplates } =\n     options\n \n"
        },
        {
          "path": "backend/src/run-programmatic-step.ts",
          "status": "modified",
          "diff": "Index: backend/src/run-programmatic-step.ts\n===================================================================\n--- backend/src/run-programmatic-step.ts\tc675e57 (parent)\n+++ backend/src/run-programmatic-step.ts\taf3f741 (commit)\n@@ -6,9 +6,9 @@\n import { SandboxManager } from './util/quickjs-sandbox'\n import { getRequestContext } from './websockets/request-context'\n import { sendAction } from './websockets/websocket-action'\n \n-import type { CodebuffToolCall } from './tools/constants'\n+import type { CodebuffToolCall } from '@codebuff/common/tools/list'\n import type {\n   AgentTemplate,\n   StepGenerator,\n } from '@codebuff/common/types/agent-template'\n"
        },
        {
          "path": "backend/src/tools/constants.ts",
          "status": "modified",
          "diff": "Index: backend/src/tools/constants.ts\n===================================================================\n--- backend/src/tools/constants.ts\tc675e57 (parent)\n+++ backend/src/tools/constants.ts\taf3f741 (commit)\n@@ -1,32 +1,3 @@\n import { endsAgentStepParam } from '@codebuff/common/tools/constants'\n \n-import type { codebuffToolDefs } from './definitions/list'\n-import type { FileChange } from '@codebuff/common/actions'\n-import type { ToolName } from '@codebuff/common/tools/constants'\n-import type { ToolCallPart } from 'ai'\n-import type { z } from 'zod/v4'\n-\n export const globalStopSequence = `${JSON.stringify(endsAgentStepParam)}`\n-\n-// Tool call from LLM\n-export type CodebuffToolCall<T extends ToolName = ToolName> = {\n-  [K in ToolName]: {\n-    toolName: K\n-    input: z.infer<(typeof codebuffToolDefs)[K]['parameters']>\n-  } & Omit<ToolCallPart, 'type'>\n-}[T]\n-\n-// Tool call to send to client\n-export type ClientToolCall<T extends ToolName = ToolName> = {\n-  [K in ToolName]: {\n-    toolName: K\n-    input: K extends 'run_terminal_command'\n-      ? CodebuffToolCall<'run_terminal_command'>['input'] & {\n-          mode: 'assistant' | 'user'\n-        }\n-      : K extends 'write_file' | 'str_replace' | 'create_plan'\n-        ? FileChange\n-        : CodebuffToolCall<K>['input']\n-  }\n-}[T] &\n-  Omit<ToolCallPart, 'type'>\n"
        },
        {
          "path": "backend/src/tools/handlers/handler-function-type.ts",
          "status": "modified",
          "diff": "Index: backend/src/tools/handlers/handler-function-type.ts\n===================================================================\n--- backend/src/tools/handlers/handler-function-type.ts\tc675e57 (parent)\n+++ backend/src/tools/handlers/handler-function-type.ts\taf3f741 (commit)\n@@ -1,6 +1,10 @@\n-import type { ClientToolCall, CodebuffToolCall } from '../constants'\n import type { ToolName } from '@codebuff/common/tools/constants'\n+import type {\n+  ClientToolCall,\n+  ClientToolName,\n+  CodebuffToolCall,\n+} from '@codebuff/common/tools/list'\n import type { ProjectFileContext } from '@codebuff/common/util/file'\n \n type PresentOrAbsent<K extends PropertyKey, V> =\n   | { [P in K]: V }\n@@ -23,9 +27,11 @@\n     getLatestState: () => any\n     state: { [K in string]?: any }\n   } & PresentOrAbsent<\n     'requestClientToolCall',\n-    (toolCall: ClientToolCall<T>) => Promise<string>\n+    (\n+      toolCall: ClientToolCall<T extends ClientToolName ? T : never>,\n+    ) => Promise<string>\n   >,\n ) => {\n   result: Promise<string | undefined>\n   state?: Record<string, any>\n"
        },
        {
          "path": "backend/src/tools/handlers/tool/add-message.ts",
          "status": "modified",
          "diff": "Index: backend/src/tools/handlers/tool/add-message.ts\n===================================================================\n--- backend/src/tools/handlers/tool/add-message.ts\tc675e57 (parent)\n+++ backend/src/tools/handlers/tool/add-message.ts\taf3f741 (commit)\n@@ -1,6 +1,6 @@\n-import type { CodebuffToolCall } from '../../constants'\n import type { CodebuffToolHandlerFunction } from '../handler-function-type'\n+import type { CodebuffToolCall } from '@codebuff/common/tools/list'\n import type { CodebuffMessage } from '@codebuff/common/types/message'\n \n export const handleAddMessage = (({\n   previousToolCallFinished,\n"
        },
        {
          "path": "backend/src/tools/handlers/tool/add-subgoal.ts",
          "status": "modified",
          "diff": "Index: backend/src/tools/handlers/tool/add-subgoal.ts\n===================================================================\n--- backend/src/tools/handlers/tool/add-subgoal.ts\tc675e57 (parent)\n+++ backend/src/tools/handlers/tool/add-subgoal.ts\taf3f741 (commit)\n@@ -1,8 +1,8 @@\n import { buildArray } from '@codebuff/common/util/array'\n \n-import type { CodebuffToolCall } from '../../constants'\n import type { CodebuffToolHandlerFunction } from '../handler-function-type'\n+import type { CodebuffToolCall } from '@codebuff/common/tools/list'\n import type { Subgoal } from '@codebuff/common/types/session-state'\n \n export const handleAddSubgoal = ((params: {\n   previousToolCallFinished: Promise<void>\n"
        },
        {
          "path": "backend/src/tools/handlers/tool/browser-logs.ts",
          "status": "modified",
          "diff": "Index: backend/src/tools/handlers/tool/browser-logs.ts\n===================================================================\n--- backend/src/tools/handlers/tool/browser-logs.ts\tc675e57 (parent)\n+++ backend/src/tools/handlers/tool/browser-logs.ts\taf3f741 (commit)\n@@ -1,6 +1,9 @@\n-import type { ClientToolCall, CodebuffToolCall } from '../../constants'\n import type { CodebuffToolHandlerFunction } from '../handler-function-type'\n+import type {\n+  ClientToolCall,\n+  CodebuffToolCall,\n+} from '@codebuff/common/tools/list'\n \n export const handleBrowserLogs = ((params: {\n   previousToolCallFinished: Promise<void>\n   toolCall: CodebuffToolCall<'browser_logs'>\n"
        },
        {
          "path": "backend/src/tools/handlers/tool/code-search.ts",
          "status": "modified",
          "diff": "Index: backend/src/tools/handlers/tool/code-search.ts\n===================================================================\n--- backend/src/tools/handlers/tool/code-search.ts\tc675e57 (parent)\n+++ backend/src/tools/handlers/tool/code-search.ts\taf3f741 (commit)\n@@ -1,6 +1,9 @@\n-import type { ClientToolCall, CodebuffToolCall } from '../../constants'\n import type { CodebuffToolHandlerFunction } from '../handler-function-type'\n+import type {\n+  ClientToolCall,\n+  CodebuffToolCall,\n+} from '@codebuff/common/tools/list'\n \n export const handleCodeSearch = ((params: {\n   previousToolCallFinished: Promise<void>\n   toolCall: CodebuffToolCall<'code_search'>\n"
        },
        {
          "path": "backend/src/tools/handlers/tool/create-plan.ts",
          "status": "modified",
          "diff": "Index: backend/src/tools/handlers/tool/create-plan.ts\n===================================================================\n--- backend/src/tools/handlers/tool/create-plan.ts\tc675e57 (parent)\n+++ backend/src/tools/handlers/tool/create-plan.ts\taf3f741 (commit)\n@@ -3,14 +3,17 @@\n \n import { getFileProcessingValues, postStreamProcessing } from './write-file'\n import { logger } from '../../../util/logger'\n \n-import type { ClientToolCall, CodebuffToolCall } from '../../constants'\n import type { CodebuffToolHandlerFunction } from '../handler-function-type'\n import type {\n   FileProcessingState,\n   OptionalFileProcessingState,\n } from './write-file'\n+import type {\n+  ClientToolCall,\n+  CodebuffToolCall,\n+} from '@codebuff/common/tools/list'\n \n export const handleCreatePlan = ((params: {\n   previousToolCallFinished: Promise<void>\n   toolCall: CodebuffToolCall<'create_plan'>\n"
        },
        {
          "path": "backend/src/tools/handlers/tool/end-turn.ts",
          "status": "modified",
          "diff": "Index: backend/src/tools/handlers/tool/end-turn.ts\n===================================================================\n--- backend/src/tools/handlers/tool/end-turn.ts\tc675e57 (parent)\n+++ backend/src/tools/handlers/tool/end-turn.ts\taf3f741 (commit)\n@@ -1,6 +1,6 @@\n-import type { CodebuffToolCall } from '../../constants'\n import type { CodebuffToolHandlerFunction } from '../handler-function-type'\n+import type { CodebuffToolCall } from '@codebuff/common/tools/list'\n \n export const handleEndTurn = ((params: {\n   previousToolCallFinished: Promise<any>\n   toolCall: CodebuffToolCall<'end_turn'>\n"
        },
        {
          "path": "backend/src/tools/handlers/tool/find-files.ts",
          "status": "modified",
          "diff": "Index: backend/src/tools/handlers/tool/find-files.ts\n===================================================================\n--- backend/src/tools/handlers/tool/find-files.ts\tc675e57 (parent)\n+++ backend/src/tools/handlers/tool/find-files.ts\taf3f741 (commit)\n@@ -11,11 +11,11 @@\n import { countTokens, countTokensJson } from '../../../util/token-counter'\n import { requestFiles } from '../../../websockets/websocket-action'\n \n import type { TextBlock } from '../../../llm-apis/claude'\n-import type { CodebuffToolCall } from '../../constants'\n import type { CodebuffToolHandlerFunction } from '../handler-function-type'\n import type { GetExpandedFileContextForTrainingBlobTrace } from '@codebuff/bigquery'\n+import type { CodebuffToolCall } from '@codebuff/common/tools/list'\n import type { CodebuffMessage } from '@codebuff/common/types/message'\n import type { ProjectFileContext } from '@codebuff/common/util/file'\n import type { WebSocket } from 'ws'\n \n"
        },
        {
          "path": "backend/src/tools/handlers/tool/read-docs.ts",
          "status": "modified",
          "diff": "Index: backend/src/tools/handlers/tool/read-docs.ts\n===================================================================\n--- backend/src/tools/handlers/tool/read-docs.ts\tc675e57 (parent)\n+++ backend/src/tools/handlers/tool/read-docs.ts\taf3f741 (commit)\n@@ -1,9 +1,9 @@\n import { fetchContext7LibraryDocumentation } from '../../../llm-apis/context7-api'\n import { logger } from '../../../util/logger'\n \n-import type { CodebuffToolCall } from '../../constants'\n import type { CodebuffToolHandlerFunction } from '../handler-function-type'\n+import type { CodebuffToolCall } from '@codebuff/common/tools/list'\n \n export const handleReadDocs = (({\n   previousToolCallFinished,\n   toolCall,\n"
        },
        {
          "path": "backend/src/tools/handlers/tool/read-files.ts",
          "status": "modified",
          "diff": "Index: backend/src/tools/handlers/tool/read-files.ts\n===================================================================\n--- backend/src/tools/handlers/tool/read-files.ts\tc675e57 (parent)\n+++ backend/src/tools/handlers/tool/read-files.ts\taf3f741 (commit)\n@@ -1,10 +1,10 @@\n import { getFileReadingUpdates } from '../../../get-file-reading-updates'\n import { logger } from '../../../util/logger'\n import { renderReadFilesResult } from '../../../util/parse-tool-call-xml'\n \n-import type { CodebuffToolCall } from '../../constants'\n import type { CodebuffToolHandlerFunction } from '../handler-function-type'\n+import type { CodebuffToolCall } from '@codebuff/common/tools/list'\n import type { CodebuffMessage } from '@codebuff/common/types/message'\n import type { ProjectFileContext } from '@codebuff/common/util/file'\n import type { WebSocket } from 'ws'\n \n"
        },
        {
          "path": "backend/src/tools/handlers/tool/run-file-change-hooks.ts",
          "status": "modified",
          "diff": "Index: backend/src/tools/handlers/tool/run-file-change-hooks.ts\n===================================================================\n--- backend/src/tools/handlers/tool/run-file-change-hooks.ts\tc675e57 (parent)\n+++ backend/src/tools/handlers/tool/run-file-change-hooks.ts\taf3f741 (commit)\n@@ -1,6 +1,9 @@\n-import type { ClientToolCall, CodebuffToolCall } from '../../constants'\n import type { CodebuffToolHandlerFunction } from '../handler-function-type'\n+import type {\n+  ClientToolCall,\n+  CodebuffToolCall,\n+} from '@codebuff/common/tools/list'\n \n export const handleRunFileChangeHooks = ((params: {\n   previousToolCallFinished: Promise<void>\n   toolCall: CodebuffToolCall<'run_file_change_hooks'>\n"
        },
        {
          "path": "backend/src/tools/handlers/tool/run-terminal-command.ts",
          "status": "modified",
          "diff": "Index: backend/src/tools/handlers/tool/run-terminal-command.ts\n===================================================================\n--- backend/src/tools/handlers/tool/run-terminal-command.ts\tc675e57 (parent)\n+++ backend/src/tools/handlers/tool/run-terminal-command.ts\taf3f741 (commit)\n@@ -1,6 +1,9 @@\n-import type { ClientToolCall, CodebuffToolCall } from '../../constants'\n import type { CodebuffToolHandlerFunction } from '../handler-function-type'\n+import type {\n+  ClientToolCall,\n+  CodebuffToolCall,\n+} from '@codebuff/common/tools/list'\n \n export const handleRunTerminalCommand = ((params: {\n   previousToolCallFinished: Promise<void>\n   toolCall: CodebuffToolCall<'run_terminal_command'>\n"
        },
        {
          "path": "backend/src/tools/handlers/tool/set-messages.ts",
          "status": "modified",
          "diff": "Index: backend/src/tools/handlers/tool/set-messages.ts\n===================================================================\n--- backend/src/tools/handlers/tool/set-messages.ts\tc675e57 (parent)\n+++ backend/src/tools/handlers/tool/set-messages.ts\taf3f741 (commit)\n@@ -1,6 +1,6 @@\n-import type { CodebuffToolCall } from '../../constants'\n import type { CodebuffToolHandlerFunction } from '../handler-function-type'\n+import type { CodebuffToolCall } from '@codebuff/common/tools/list'\n import type { CodebuffMessage } from '@codebuff/common/types/message'\n \n export const handleSetMessages = (({\n   previousToolCallFinished,\n"
        },
        {
          "path": "backend/src/tools/handlers/tool/set-output.ts",
          "status": "modified",
          "diff": "Index: backend/src/tools/handlers/tool/set-output.ts\n===================================================================\n--- backend/src/tools/handlers/tool/set-output.ts\tc675e57 (parent)\n+++ backend/src/tools/handlers/tool/set-output.ts\taf3f741 (commit)\n@@ -1,10 +1,10 @@\n import { getAgentTemplate } from '../../../templates/agent-registry'\n import { logger } from '../../../util/logger'\n \n-import type { AgentTemplate } from '@codebuff/common/types/agent-template'\n-import type { CodebuffToolCall } from '../../constants'\n import type { CodebuffToolHandlerFunction } from '../handler-function-type'\n+import type { CodebuffToolCall } from '@codebuff/common/tools/list'\n+import type { AgentTemplate } from '@codebuff/common/types/agent-template'\n import type { AgentState } from '@codebuff/common/types/session-state'\n import type { ProjectFileContext } from '@codebuff/common/util/file'\n \n export const handleSetOutput = ((params: {\n"
        },
        {
          "path": "backend/src/tools/handlers/tool/spawn-agent-inline.ts",
          "status": "modified",
          "diff": "Index: backend/src/tools/handlers/tool/spawn-agent-inline.ts\n===================================================================\n--- backend/src/tools/handlers/tool/spawn-agent-inline.ts\tc675e57 (parent)\n+++ backend/src/tools/handlers/tool/spawn-agent-inline.ts\taf3f741 (commit)\n@@ -1,12 +1,13 @@\n+import { MAX_AGENT_STEPS_DEFAULT } from '@codebuff/common/constants/agents'\n import { generateCompactId } from '@codebuff/common/util/string'\n \n import { getAgentTemplate } from '../../../templates/agent-registry'\n import { logger } from '../../../util/logger'\n import { expireMessages } from '../../../util/messages'\n \n-import type { CodebuffToolCall } from '../../constants'\n import type { CodebuffToolHandlerFunction } from '../handler-function-type'\n+import type { CodebuffToolCall } from '@codebuff/common/tools/list'\n import type { AgentTemplate } from '@codebuff/common/types/agent-template'\n import type { CodebuffMessage } from '@codebuff/common/types/message'\n import type { PrintModeEvent } from '@codebuff/common/types/print-mode'\n import type {\n@@ -14,9 +15,8 @@\n   AgentTemplateType,\n } from '@codebuff/common/types/session-state'\n import type { ProjectFileContext } from '@codebuff/common/util/file'\n import type { WebSocket } from 'ws'\n-import { MAX_AGENT_STEPS_DEFAULT } from '@codebuff/common/constants/agents'\n \n export const handleSpawnAgentInline = ((params: {\n   previousToolCallFinished: Promise<void>\n   toolCall: CodebuffToolCall<'spawn_agent_inline'>\n"
        },
        {
          "path": "backend/src/tools/handlers/tool/spawn-agents-async.ts",
          "status": "modified",
          "diff": "Index: backend/src/tools/handlers/tool/spawn-agents-async.ts\n===================================================================\n--- backend/src/tools/handlers/tool/spawn-agents-async.ts\tc675e57 (parent)\n+++ backend/src/tools/handlers/tool/spawn-agents-async.ts\taf3f741 (commit)\n@@ -1,25 +1,25 @@\n import { ASYNC_AGENTS_ENABLED } from '@codebuff/common/old-constants'\n+import { MAX_AGENT_STEPS_DEFAULT } from '@codebuff/common/constants/agents'\n import { generateCompactId } from '@codebuff/common/util/string'\n \n import { handleSpawnAgents } from './spawn-agents'\n import { asyncAgentManager } from '../../../async-agent-manager'\n import { getAgentTemplate } from '../../../templates/agent-registry'\n import { logger } from '../../../util/logger'\n \n-import type { AgentTemplate } from '@codebuff/common/types/agent-template'\n-import type { CodebuffToolCall } from '../../constants'\n import type { CodebuffToolHandlerFunction } from '../handler-function-type'\n import type { SendSubagentChunk } from './spawn-agents'\n+import type { CodebuffToolCall } from '@codebuff/common/tools/list'\n+import type { AgentTemplate } from '@codebuff/common/types/agent-template'\n import type { CodebuffMessage } from '@codebuff/common/types/message'\n import type { PrintModeEvent } from '@codebuff/common/types/print-mode'\n import type {\n   AgentState,\n   AgentTemplateType,\n } from '@codebuff/common/types/session-state'\n import type { ProjectFileContext } from '@codebuff/common/util/file'\n import type { WebSocket } from 'ws'\n-import { MAX_AGENT_STEPS_DEFAULT } from '@codebuff/common/constants/agents'\n \n export const handleSpawnAgentsAsync = ((params: {\n   previousToolCallFinished: Promise<void>\n   toolCall: CodebuffToolCall<'spawn_agents_async'>\n"
        },
        {
          "path": "backend/src/tools/handlers/tool/spawn-agents.ts",
          "status": "modified",
          "diff": "Index: backend/src/tools/handlers/tool/spawn-agents.ts\n===================================================================\n--- backend/src/tools/handlers/tool/spawn-agents.ts\tc675e57 (parent)\n+++ backend/src/tools/handlers/tool/spawn-agents.ts\taf3f741 (commit)\n@@ -1,11 +1,12 @@\n+import { MAX_AGENT_STEPS_DEFAULT } from '@codebuff/common/constants/agents'\n import { generateCompactId } from '@codebuff/common/util/string'\n \n import { getAgentTemplate } from '../../../templates/agent-registry'\n import { logger } from '../../../util/logger'\n \n-import type { CodebuffToolCall } from '../../constants'\n import type { CodebuffToolHandlerFunction } from '../handler-function-type'\n+import type { CodebuffToolCall } from '@codebuff/common/tools/list'\n import type { AgentTemplate } from '@codebuff/common/types/agent-template'\n import type { CodebuffMessage } from '@codebuff/common/types/message'\n import type { PrintModeEvent } from '@codebuff/common/types/print-mode'\n import type {\n@@ -13,9 +14,8 @@\n   AgentTemplateType,\n } from '@codebuff/common/types/session-state'\n import type { ProjectFileContext } from '@codebuff/common/util/file'\n import type { WebSocket } from 'ws'\n-import { MAX_AGENT_STEPS_DEFAULT } from '@codebuff/common/constants/agents'\n \n export type SendSubagentChunk = (data: {\n   userInputId: string\n   agentId: string\n"
        },
        {
          "path": "backend/src/tools/handlers/tool/str-replace.ts",
          "status": "modified",
          "diff": "Index: backend/src/tools/handlers/tool/str-replace.ts\n===================================================================\n--- backend/src/tools/handlers/tool/str-replace.ts\tc675e57 (parent)\n+++ backend/src/tools/handlers/tool/str-replace.ts\taf3f741 (commit)\n@@ -2,14 +2,17 @@\n import { processStrReplace } from '../../../process-str-replace'\n import { logger } from '../../../util/logger'\n import { requestOptionalFile } from '../../../websockets/websocket-action'\n \n-import type { ClientToolCall, CodebuffToolCall } from '../../constants'\n import type { CodebuffToolHandlerFunction } from '../handler-function-type'\n import type {\n   FileProcessingState,\n   OptionalFileProcessingState,\n } from './write-file'\n+import type {\n+  ClientToolCall,\n+  CodebuffToolCall,\n+} from '@codebuff/common/tools/list'\n import type { WebSocket } from 'ws'\n \n export const handleStrReplace = ((params: {\n   previousToolCallFinished: Promise<void>\n"
        },
        {
          "path": "backend/src/tools/handlers/tool/think-deeply.ts",
          "status": "modified",
          "diff": "Index: backend/src/tools/handlers/tool/think-deeply.ts\n===================================================================\n--- backend/src/tools/handlers/tool/think-deeply.ts\tc675e57 (parent)\n+++ backend/src/tools/handlers/tool/think-deeply.ts\taf3f741 (commit)\n@@ -1,8 +1,8 @@\n import { logger } from '../../../util/logger'\n \n-import type { CodebuffToolCall } from '../../constants'\n import type { CodebuffToolHandlerFunction } from '../handler-function-type'\n+import type { CodebuffToolCall } from '@codebuff/common/tools/list'\n \n export const handleThinkDeeply = ((params: {\n   previousToolCallFinished: Promise<any>\n   toolCall: CodebuffToolCall<'think_deeply'>\n"
        },
        {
          "path": "backend/src/tools/handlers/tool/update-subgoal.ts",
          "status": "modified",
          "diff": "Index: backend/src/tools/handlers/tool/update-subgoal.ts\n===================================================================\n--- backend/src/tools/handlers/tool/update-subgoal.ts\tc675e57 (parent)\n+++ backend/src/tools/handlers/tool/update-subgoal.ts\taf3f741 (commit)\n@@ -1,6 +1,6 @@\n-import type { CodebuffToolCall } from '../../constants'\n import type { CodebuffToolHandlerFunction } from '../handler-function-type'\n+import type { CodebuffToolCall } from '@codebuff/common/tools/list'\n import type { Subgoal } from '@codebuff/common/types/session-state'\n \n export const handleUpdateSubgoal = ((params: {\n   previousToolCallFinished: Promise<void>\n"
        },
        {
          "path": "backend/src/tools/handlers/tool/web-search.ts",
          "status": "modified",
          "diff": "Index: backend/src/tools/handlers/tool/web-search.ts\n===================================================================\n--- backend/src/tools/handlers/tool/web-search.ts\tc675e57 (parent)\n+++ backend/src/tools/handlers/tool/web-search.ts\taf3f741 (commit)\n@@ -4,10 +4,10 @@\n import { searchWeb } from '../../../llm-apis/linkup-api'\n import { PROFIT_MARGIN } from '../../../llm-apis/message-cost-tracker'\n import { logger } from '../../../util/logger'\n \n-import type { CodebuffToolCall } from '../../constants'\n import type { CodebuffToolHandlerFunction } from '../handler-function-type'\n+import type { CodebuffToolCall } from '@codebuff/common/tools/list'\n \n export const handleWebSearch = ((params: {\n   previousToolCallFinished: Promise<void>\n   toolCall: CodebuffToolCall<'web_search'>\n"
        },
        {
          "path": "backend/src/tools/handlers/tool/write-file.ts",
          "status": "modified",
          "diff": "Index: backend/src/tools/handlers/tool/write-file.ts\n===================================================================\n--- backend/src/tools/handlers/tool/write-file.ts\tc675e57 (parent)\n+++ backend/src/tools/handlers/tool/write-file.ts\taf3f741 (commit)\n@@ -3,10 +3,13 @@\n import { processFileBlock } from '../../../process-file-block'\n import { logger } from '../../../util/logger'\n import { requestOptionalFile } from '../../../websockets/websocket-action'\n \n-import type { ClientToolCall, CodebuffToolCall } from '../../constants'\n import type { CodebuffToolHandlerFunction } from '../handler-function-type'\n+import type {\n+  ClientToolCall,\n+  CodebuffToolCall,\n+} from '@codebuff/common/tools/list'\n import type { CodebuffMessage } from '@codebuff/common/types/message'\n import type { WebSocket } from 'ws'\n \n type FileProcessingTools = 'write_file' | 'str_replace' | 'create_plan'\n"
        },
        {
          "path": "backend/src/tools/stream-parser.ts",
          "status": "modified",
          "diff": "Index: backend/src/tools/stream-parser.ts\n===================================================================\n--- backend/src/tools/stream-parser.ts\tc675e57 (parent)\n+++ backend/src/tools/stream-parser.ts\taf3f741 (commit)\n@@ -6,11 +6,11 @@\n import { sendAction } from '../websockets/websocket-action'\n import { processStreamWithTags } from '../xml-stream-parser'\n import { executeToolCall } from './tool-executor'\n \n-import type { CodebuffToolCall } from './constants'\n import type { AgentTemplate } from '../templates/types'\n import type { ToolName } from '@codebuff/common/tools/constants'\n+import type { CodebuffToolCall } from '@codebuff/common/tools/list'\n import type { CodebuffMessage } from '@codebuff/common/types/message'\n import type { PrintModeEvent } from '@codebuff/common/types/print-mode'\n import type {\n   AgentState,\n"
        },
        {
          "path": "backend/src/tools/tool-executor.ts",
          "status": "modified",
          "diff": "Index: backend/src/tools/tool-executor.ts\n===================================================================\n--- backend/src/tools/tool-executor.ts\tc675e57 (parent)\n+++ backend/src/tools/tool-executor.ts\taf3f741 (commit)\n@@ -9,12 +9,16 @@\n import { requestToolCall } from '../websockets/websocket-action'\n import { codebuffToolDefs } from './definitions/list'\n import { codebuffToolHandlers } from './handlers/list'\n \n-import type { ClientToolCall, CodebuffToolCall } from './constants'\n import type { CodebuffToolHandlerFunction } from './handlers/handler-function-type'\n import type { AgentTemplate } from '../templates/types'\n import type { ToolName } from '@codebuff/common/tools/constants'\n+import type {\n+  ClientToolCall,\n+  ClientToolName,\n+  CodebuffToolCall,\n+} from '@codebuff/common/tools/list'\n import type { PrintModeEvent } from '@codebuff/common/types/print-mode'\n import type { ToolResult } from '@codebuff/common/types/session-state'\n import type { ProjectFileContext } from '@codebuff/common/util/file'\n import type { WebSocket } from 'ws'\n@@ -188,9 +192,11 @@\n     clientSessionId,\n     userInputId,\n     fullResponse,\n     writeToClient: onResponseChunk,\n-    requestClientToolCall: async (clientToolCall: ClientToolCall<T>) => {\n+    requestClientToolCall: async (\n+      clientToolCall: ClientToolCall<T extends ClientToolName ? T : never>,\n+    ) => {\n       if (!checkLiveUserInput(userId, userInputId, clientSessionId)) {\n         return ''\n       }\n \n"
        },
        {
          "path": "common/src/tools/list.ts",
          "status": "modified",
          "diff": "Index: common/src/tools/list.ts\n===================================================================\n--- common/src/tools/list.ts\tc675e57 (parent)\n+++ common/src/tools/list.ts\taf3f741 (commit)\n@@ -1,4 +1,7 @@\n+import z from 'zod/v4'\n+\n+import { FileChangeSchema } from '../actions'\n import { addMessageParams } from './params/tool/add-message'\n import { addSubgoalParams } from './params/tool/add-subgoal'\n import { browserLogsParams } from './params/tool/browser-logs'\n import { codeSearchParams } from './params/tool/code-search'\n@@ -10,18 +13,19 @@\n import { runFileChangeHooksParams } from './params/tool/run-file-change-hooks'\n import { runTerminalCommandParams } from './params/tool/run-terminal-command'\n import { setMessagesParams } from './params/tool/set-messages'\n import { setOutputParams } from './params/tool/set-output'\n+import { spawnAgentInlineParams } from './params/tool/spawn-agent-inline'\n import { spawnAgentsParams } from './params/tool/spawn-agents'\n import { spawnAgentsAsyncParams } from './params/tool/spawn-agents-async'\n-import { spawnAgentInlineParams } from './params/tool/spawn-agent-inline'\n import { strReplaceParams } from './params/tool/str-replace'\n import { thinkDeeplyParams } from './params/tool/think-deeply'\n import { updateSubgoalParams } from './params/tool/update-subgoal'\n import { webSearchParams } from './params/tool/web-search'\n import { writeFileParams } from './params/tool/write-file'\n \n import type { ToolName, ToolParams } from './constants'\n+import type { ToolCallPart } from 'ai'\n \n export const llmToolCallSchema = {\n   add_message: addMessageParams,\n   add_subgoal: addSubgoalParams,\n@@ -47,45 +51,53 @@\n } satisfies {\n   [K in ToolName]: ToolParams<K>\n }\n \n-export const clientToolCallSchema = {\n-  // Tools that require an id and objective\n-  add_subgoal: ['id', 'objective', 'status', 'plan', 'log'],\n-  update_subgoal: ['id', 'status', 'plan', 'log'],\n+// Tool call from LLM\n+export type CodebuffToolCall<T extends ToolName = ToolName> = {\n+  [K in ToolName]: {\n+    toolName: K\n+    input: z.infer<(typeof llmToolCallSchema)[K]['parameters']>\n+  } & Omit<ToolCallPart, 'type'>\n+}[T]\n \n-  // File operations\n-  write_file: ['path', 'instructions', 'content'],\n-  str_replace: ['path', 'replacements'],\n-  read_files: ['paths'],\n-  find_files: ['prompt'],\n+// Tool call to send to client\n+export type ClientToolName = (typeof clientToolNames)[number]\n+const clientToolCallSchema = z.discriminatedUnion('toolName', [\n+  z.object({\n+    toolName: z.literal('browser_logs'),\n+    input: llmToolCallSchema.browser_logs.parameters,\n+  }),\n+  z.object({\n+    toolName: z.literal('code_search'),\n+    input: llmToolCallSchema.code_search.parameters,\n+  }),\n+  z.object({\n+    toolName: z.literal('create_plan'),\n+    input: FileChangeSchema,\n+  }),\n+  z.object({\n+    toolName: z.literal('run_file_change_hooks'),\n+    input: llmToolCallSchema.run_file_change_hooks.parameters,\n+  }),\n+  z.object({\n+    toolName: z.literal('run_terminal_command'),\n+    input: llmToolCallSchema.run_terminal_command.parameters.and(\n+      z.object({ mode: z.enum(['assistant', 'user']) }),\n+    ),\n+  }),\n+  z.object({\n+    toolName: z.literal('str_replace'),\n+    input: FileChangeSchema,\n+  }),\n+  z.object({\n+    toolName: z.literal('write_file'),\n+    input: FileChangeSchema,\n+  }),\n+])\n+export const clientToolNames = clientToolCallSchema.def.options.map(\n+  (opt) => opt.shape.toolName.value,\n+) satisfies ToolName[]\n \n-  // Search and terminal\n-  code_search: ['pattern', 'flags', 'cwd'],\n-  run_terminal_command: ['command', 'process_type', 'cwd', 'timeout_seconds'],\n-\n-  // Planning tools\n-  think_deeply: ['thought'],\n-  create_plan: ['path', 'plan'],\n-\n-  browser_logs: ['type', 'url', 'waitUntil'],\n-\n-  spawn_agents: ['agents'],\n-  spawn_agents_async: ['agents'],\n-  spawn_agent_inline: ['agent_type', 'prompt', 'params'],\n-  set_output: [],\n-\n-  // Documentation tool\n-  read_docs: ['libraryTitle', 'topic', 'max_tokens'],\n-\n-  // Web search tool\n-  web_search: ['query', 'depth'],\n-\n-  // File change hooks tool\n-  run_file_change_hooks: ['files'],\n-\n-  // Tools that change the conversation history\n-  add_message: ['role', 'content'],\n-  set_messages: ['messages'],\n-\n-  end_turn: [],\n-} as const satisfies Record<ToolName, string[]>\n+export type ClientToolCall<T extends ClientToolName = ClientToolName> = z.infer<\n+  typeof clientToolCallSchema\n+> & { toolName: T } & Omit<ToolCallPart, 'type'>\n"
        },
        {
          "path": "evals/scaffolding.ts",
          "status": "modified",
          "diff": "Index: evals/scaffolding.ts\n===================================================================\n--- evals/scaffolding.ts\tc675e57 (parent)\n+++ evals/scaffolding.ts\taf3f741 (commit)\n@@ -19,14 +19,14 @@\n   getAllFilePaths,\n   getProjectFileTree,\n } from '../common/src/project-file-tree'\n \n-import type { ClientToolCall } from '@codebuff/backend/tools/constants'\n import type {\n   requestFiles as originalRequestFiles,\n   requestToolCall as originalRequestToolCall,\n } from '@codebuff/backend/websockets/websocket-action'\n import type { FileChanges } from '@codebuff/common/actions'\n+import type { ClientToolCall } from '@codebuff/common/tools/list'\n import type { PrintModeEvent } from '@codebuff/common/types/print-mode'\n import type {\n   AgentState,\n   AgentTemplateType,\n@@ -191,15 +191,8 @@\n \n export async function runToolCalls(toolCalls: ClientToolCall[]) {\n   const toolResults: ToolResult[] = []\n   for (const toolCall of toolCalls) {\n-    if (\n-      toolCall.toolName === 'spawn_agents' ||\n-      toolCall.toolName === 'set_output'\n-    ) {\n-      // should never happen\n-      continue\n-    }\n     const toolResult = await handleToolCall(toolCall)\n     toolResults.push(toolResult)\n   }\n   return toolResults\n"
        }
      ]
    },
    {
      "id": "fix-agent-publish",
      "sha": "401808241d1630457c2f8e77cfa503d48a345683",
      "parentSha": "d3184bfdd896c715ea8fa4020c962454c7fbb993",
      "spec": "Implement end-to-end publishing updates so that publishing accepts undefined prompts and centralizes validation via validateAgents.\n\nRequired changes:\n\n1) Update common/src/templates/agent-validation.ts\n- Modify validateAgents signature and return to include an additional dynamicTemplates: Record<string, DynamicAgentTemplate> alongside templates and validationErrors.\n- During per-agent processing, when validation succeeds, set both:\n  - templates[AgentTemplate.id] = AgentTemplate\n  - dynamicTemplates[DynamicAgentTemplate.id] = DynamicAgentTemplate\n- Ensure all early returns (e.g., when no agentTemplates provided) and final return include dynamicTemplates.\n- Update validateSingleAgent to also return dynamicAgentTemplate (the validated DynamicAgentTemplate) on success in addition to agentTemplate and success: true.\n- When constructing the AgentTemplate object, ensure systemPrompt, instructionsPrompt, and stepPrompt are always present as strings, defaulting to '' if undefined.\n\n2) Update common/src/types/api/agents/publish.ts\n- Broaden publishAgentsRequestSchema to accept raw agent definitions:\n  - Change data from DynamicAgentTemplateSchema.array() to z.record(z.string(), z.any()).array().\n- Remove the now-unused import of DynamicAgentTemplateSchema.\n- Keep response types unchanged.\n\n3) Update npm-app/src/cli-handlers/publish.ts\n- Adjust matching logic to select agents by id or displayName using Object.values(agentTemplates) rather than Object.entries.\n- Store matches in a Record keyed by template.id.\n- Update local types to avoid forcing DynamicAgentTemplate at the CLI boundary:\n  - matchingTemplates: Record<string, any>\n  - publishAgentTemplates signature: data: Record<string, any>[]\n- When printing the to-be-published list, iterate values and print displayName and id.\n- Maintain existing UX: showing available agents, error messages, and success printing.\n\n4) Update web/src/app/api/agents/publish/route.ts\n- After parsing request with publishAgentsRequestSchema, treat the parsed body as an array of raw agent definitions. Build a map keyed by agent.id.\n- Call validateAgents on this map and use the returned dynamicTemplates for downstream processing:\n  - If validationErrors is non-empty, return 400 with error: 'Agent config validation failed', details comprising joined messages, and include validationErrors in the JSON response.\n  - Set agents = Object.values(dynamicTemplates) for subsequent publisher checks and versioning.\n- Remove any duplicate or prior code assuming the request already matched DynamicAgentTemplateSchema. The rest of the route (auth checks, publisher validation, version checks, subagent resolution, DB insert, and success response) remains unchanged.\n\nBehavioral outcomes expected:\n- Publishing allows agent definitions where systemPrompt, instructionsPrompt, or stepPrompt are omitted; these normalize to empty strings and validate successfully.\n- The CLI publish command can select agents by either id or displayName and submits raw agent definitions to the API.\n- The publish API route centrally validates using validateAgents, returns clear validation error messages (400) when necessary, and only proceeds with validated dynamic templates.\n- No changes to database schema or success/error response shapes beyond potential validation error details.\n",
      "prompt": "Update the agent publishing pipeline so the publish API accepts raw agent definitions, validates them centrally, and allows missing prompts. On the validator side, return both compiled agent templates and their validated dynamic forms. In the CLI, adjust agent selection by id/displayName and send raw definitions to the API. Ensure that optional prompts are treated as empty strings during validation and that the API responds with clear validation errors when definitions are invalid.",
      "supplementalFiles": [
        "common/src/types/dynamic-agent-template.ts",
        "common/src/types/agent-template.ts",
        "web/src/app/api/agents/validate/route.ts",
        "npm-app/src/agents/load-agents.ts",
        "web/src/app/api/agents/publish/subagent-resolution.ts"
      ],
      "fileDiffs": [
        {
          "path": "common/src/templates/agent-validation.ts",
          "status": "modified",
          "diff": "Index: common/src/templates/agent-validation.ts\n===================================================================\n--- common/src/templates/agent-validation.ts\td3184bf (parent)\n+++ common/src/templates/agent-validation.ts\t4018082 (commit)\n@@ -53,18 +53,21 @@\n  * Validate and load dynamic agent templates from user-provided agentTemplates\n  */\n export function validateAgents(agentTemplates: Record<string, any> = {}): {\n   templates: Record<string, AgentTemplate>\n+  dynamicTemplates: Record<string, DynamicAgentTemplate>\n   validationErrors: DynamicAgentValidationError[]\n } {\n   const templates: Record<string, AgentTemplate> = {}\n+  const dynamicTemplates: Record<string, DynamicAgentTemplate> = {}\n   const validationErrors: DynamicAgentValidationError[] = []\n \n   const hasAgentTemplates = Object.keys(agentTemplates).length > 0\n \n   if (!hasAgentTemplates) {\n     return {\n       templates,\n+      dynamicTemplates,\n       validationErrors,\n     }\n   }\n \n@@ -106,8 +109,10 @@\n         continue\n       }\n       templates[validationResult.agentTemplate!.id] =\n         validationResult.agentTemplate!\n+      dynamicTemplates[validationResult.dynamicAgentTemplate!.id] =\n+        validationResult.dynamicAgentTemplate!\n     } catch (error) {\n       const errorMessage =\n         error instanceof Error ? error.message : 'Unknown error'\n \n@@ -129,8 +134,9 @@\n   }\n \n   return {\n     templates,\n+    dynamicTemplates,\n     validationErrors,\n   }\n }\n \n@@ -154,8 +160,9 @@\n   },\n ): {\n   success: boolean\n   agentTemplate?: AgentTemplate\n+  dynamicAgentTemplate?: DynamicAgentTemplate\n   error?: string\n } {\n   const {\n     filePath,\n@@ -275,15 +282,19 @@\n \n     // Convert to internal AgentTemplate format\n     const agentTemplate: AgentTemplate = {\n       ...validatedConfig,\n+      systemPrompt: validatedConfig.systemPrompt ?? '',\n+      instructionsPrompt: validatedConfig.instructionsPrompt ?? '',\n+      stepPrompt: validatedConfig.stepPrompt ?? '',\n       outputSchema,\n       inputSchema,\n     }\n \n     return {\n       success: true,\n       agentTemplate,\n+      dynamicAgentTemplate: validatedConfig,\n     }\n   } catch (error) {\n     const errorMessage =\n       error instanceof Error ? error.message : 'Unknown error'\n"
        },
        {
          "path": "common/src/types/api/agents/publish.ts",
          "status": "modified",
          "diff": "Index: common/src/types/api/agents/publish.ts\n===================================================================\n--- common/src/types/api/agents/publish.ts\td3184bf (parent)\n+++ common/src/types/api/agents/publish.ts\t4018082 (commit)\n@@ -1,10 +1,8 @@\n import { z } from 'zod/v4'\n \n-import { DynamicAgentTemplateSchema } from '../../../types/dynamic-agent-template'\n-\n export const publishAgentsRequestSchema = z.object({\n-  data: DynamicAgentTemplateSchema.array(),\n+  data: z.record(z.string(), z.any()).array(),\n   authToken: z.string(),\n })\n export type PublishAgentsRequest = z.infer<typeof publishAgentsRequestSchema>\n \n"
        },
        {
          "path": "npm-app/src/cli-handlers/publish.ts",
          "status": "modified",
          "diff": "Index: npm-app/src/cli-handlers/publish.ts\n===================================================================\n--- npm-app/src/cli-handlers/publish.ts\td3184bf (parent)\n+++ npm-app/src/cli-handlers/publish.ts\t4018082 (commit)\n@@ -62,16 +62,14 @@\n       console.log(red('No valid agent templates found in .agents directory.'))\n       return\n     }\n \n-    const matchingTemplates: Record<string, DynamicAgentTemplate> = {}\n+    const matchingTemplates: Record<string, any> = {}\n     for (const agentId of agentIds) {\n       // Find the specific agent\n-      const matchingTemplate = Object.entries(agentTemplates).find(\n-        ([key, template]) =>\n-          key === agentId ||\n-          template.id === agentId ||\n-          template.displayName === agentId,\n+      const matchingTemplate = Object.values(agentTemplates).find(\n+        (template) =>\n+          template.id === agentId || template.displayName === agentId,\n       )\n \n       if (!matchingTemplate) {\n         console.log(red(`Agent \"${agentId}\" not found. Available agents:`))\n@@ -80,12 +78,12 @@\n         })\n         return\n       }\n \n-      matchingTemplates[matchingTemplate[0]] = matchingTemplate[1]\n+      matchingTemplates[matchingTemplate.id] = matchingTemplate\n     }\n     console.log(yellow(`Publishing:`))\n-    for (const [key, template] of Object.entries(matchingTemplates)) {\n+    for (const template of Object.values(matchingTemplates)) {\n       console.log(`  - ${template.displayName} (${template.id})`)\n     }\n \n     try {\n@@ -153,9 +151,9 @@\n /**\n  * Publish agent templates to the backend\n  */\n async function publishAgentTemplates(\n-  data: DynamicAgentTemplate[],\n+  data: Record<string, any>[],\n   authToken: string,\n ): Promise<PublishAgentsResponse & { statusCode?: number }> {\n   try {\n     const response = await fetch(`${websiteUrl}/api/agents/publish`, {\n"
        },
        {
          "path": "web/src/app/api/agents/publish/route.ts",
          "status": "modified",
          "diff": "Index: web/src/app/api/agents/publish/route.ts\n===================================================================\n--- web/src/app/api/agents/publish/route.ts\td3184bf (parent)\n+++ web/src/app/api/agents/publish/route.ts\t4018082 (commit)\n@@ -58,10 +58,35 @@\n       )\n     }\n \n     const { data, authToken } = parseResult.data\n-    const agents = data as DynamicAgentTemplate[] // data is now an array of agents\n+    const agentDefinitions = data\n \n+    // First use validateAgents to convert to DynamicAgentTemplate types\n+    const agentMap = agentDefinitions.reduce(\n+      (acc: Record<string, any>, agent: any) => {\n+        acc[agent.id] = agent\n+        return acc\n+      },\n+      {} as Record<string, any>\n+    )\n+\n+    const { validationErrors, dynamicTemplates } = validateAgents(agentMap)\n+    const agents = Object.values(dynamicTemplates)\n+\n+    if (validationErrors.length > 0) {\n+      const errorDetails = validationErrors.map((err) => err.message).join('\\n')\n+\n+      return NextResponse.json(\n+        {\n+          error: 'Agent config validation failed',\n+          details: errorDetails,\n+          validationErrors,\n+        },\n+        { status: 400 }\n+      )\n+    }\n+\n     // Try cookie-based auth first, then fall back to authToken validation using proper function\n     let userId: string | undefined\n     const session = await getServerSession(authOptions)\n \n@@ -106,37 +131,9 @@\n     }\n \n     const requestedPublisherId = publisherIds[0]!\n \n-    // Validate all agents\n-    const agentMap = agents.reduce(\n-      (\n-        acc: Record<string, DynamicAgentTemplate>,\n-        agent: DynamicAgentTemplate\n-      ) => {\n-        acc[agent.id] = agent\n-        return acc\n-      },\n-      {} as Record<string, DynamicAgentTemplate>\n-    )\n \n-    const validationResult = validateAgents(agentMap)\n-\n-    if (validationResult.validationErrors.length > 0) {\n-      const errorDetails = validationResult.validationErrors\n-        .map((err) => err.message)\n-        .join('\\n')\n-\n-      return NextResponse.json(\n-        {\n-          error: 'Agent config validation failed',\n-          details: errorDetails,\n-          validationErrors: validationResult.validationErrors,\n-        },\n-        { status: 400 }\n-      )\n-    }\n-\n     // Verify user has access to the requested publisher\n     const publisherResult = await db\n       .select({\n         publisher: schema.publisher,\n"
        }
      ]
    },
    {
      "id": "update-tool-gen",
      "sha": "f8fe9fe2a72c73390f076bf2a6b5139777b547d8",
      "parentSha": "90f024613f308f245df2b6630a8260f3db9f1002",
      "spec": "Implement tool type generation redirection and make web search depth optional:\n\n1) Redirect generator output and make it resilient to missing directories\n- File: scripts/generate-tool-definitions.ts\n  - Change the output path to common/src/templates/initial-agents-dir/types/tools.ts (under templates path), not common/src/util/types/tools.d.ts.\n  - Ensure the parent directory exists before writing by creating directories recursively.\n  - Keep formatting step via Prettier and update log messages to reflect tools.ts.\n\n2) Align WebSearchParams with runtime expectations\n- File: common/src/templates/initial-agents-dir/types/tools.ts\n  - Update the WebSearchParams interface so depth is optional (depth?: 'standard' | 'deep') instead of required.\n  - Preserve the JSDoc describing default behavior for 'standard'.\n\n3) Consistency and verification\n- Verify that initial agents template types import ./tools.ts (common/src/templates/initial-agents-dir/types/agent-definition.ts depends on it) and that no files import the old common/src/util/types/tools.d.ts path.\n- Confirm that the backend web search handler can accept omitted depth and treats it as standard (no additional code changes required).\n\nAcceptance criteria\n- Running the generator script succeeds on a clean repo without ENOENT errors even when the templates directory is missing.\n- Generated file is common/src/templates/initial-agents-dir/types/tools.ts and is formatted.\n- WebSearchParams.depth is optional in the generated/checked-in templates file and matches usage assumptions in the web search tool handler and tests.\n- No references in the repo to common/src/util/types/tools.d.ts remain.",
      "prompt": "Update the tool type generator to write its output into the initial agents template types file and make the web search depth parameter optional. Ensure the generator creates any missing directories so it doesn’t fail on fresh clones. Keep formatting via Prettier and adjust logs accordingly. Confirm that the agent templates continue to import from the updated tools.ts file and that no code depends on the old tools.d.ts path. Depth should be optional and default to standard behavior where omitted.",
      "supplementalFiles": [
        "common/src/tools/compile-tool-definitions.ts",
        "common/src/tools/list.ts",
        "common/src/tools/params/tool/web-search.ts",
        "backend/src/tools/handlers/tool/web-search.ts",
        "common/src/templates/initial-agents-dir/types/agent-definition.ts"
      ],
      "fileDiffs": [
        {
          "path": "common/src/templates/initial-agents-dir/types/tools.ts",
          "status": "modified",
          "diff": "Index: common/src/templates/initial-agents-dir/types/tools.ts\n===================================================================\n--- common/src/templates/initial-agents-dir/types/tools.ts\t90f0246 (parent)\n+++ common/src/templates/initial-agents-dir/types/tools.ts\tf8fe9fe (commit)\n@@ -172,9 +172,9 @@\n export interface WebSearchParams {\n   /** The search query to find relevant web content */\n   query: string\n   /** Search depth - 'standard' for quick results, 'deep' for more comprehensive search. Default is 'standard'. */\n-  depth: 'standard' | 'deep'\n+  depth?: 'standard' | 'deep'\n }\n \n /**\n  * Create or edit a file with the given content.\n"
        },
        {
          "path": "scripts/generate-tool-definitions.ts",
          "status": "modified",
          "diff": "Index: scripts/generate-tool-definitions.ts\n===================================================================\n--- scripts/generate-tool-definitions.ts\t90f0246 (parent)\n+++ scripts/generate-tool-definitions.ts\tf8fe9fe (commit)\n@@ -1,8 +1,8 @@\n #!/usr/bin/env bun\n \n-import { writeFileSync } from 'fs'\n-import { join } from 'path'\n+import { writeFileSync, mkdirSync } from 'fs'\n+import { join, dirname } from 'path'\n import { execSync } from 'child_process'\n \n import { compileToolDefinitions } from '@codebuff/common/tools/compile-tool-definitions'\n \n@@ -14,17 +14,24 @@\n   console.log('🔧 Generating tool definitions...')\n \n   try {\n     const content = compileToolDefinitions()\n-    const outputPath = join(process.cwd(), 'common/src/util/types/tools.d.ts')\n+    // Write to the templates path (common/src/templates/initial-agents-dir/types)\n+    const outputPath = join(\n+      process.cwd(),\n+      'common/src/templates/initial-agents-dir/types/tools.ts',\n+    )\n \n+    // Create the directory if it does not exist\n+    mkdirSync(dirname(outputPath), { recursive: true })\n+\n     writeFileSync(outputPath, content, 'utf8')\n \n     // Format the generated file with prettier\n     console.log('🎨 Formatting generated file...')\n     execSync(`npx prettier --write \"${outputPath}\"`, { stdio: 'inherit' })\n \n-    console.log('✅ Successfully generated tools.d.ts')\n+    console.log('✅ Successfully generated tools.ts')\n     console.log(`📁 Output: ${outputPath}`)\n   } catch (error) {\n     console.error('❌ Failed to generate tool definitions:', error)\n     process.exit(1)\n"
        }
      ]
    },
    {
      "id": "refactor-agent-validation",
      "sha": "90f024613f308f245df2b6630a8260f3db9f1002",
      "parentSha": "59ff0cc15cb8c39007559343f1350b617425efee",
      "spec": "Implement the following refactor to centralize agent validation in the CLI and adjust startup behavior:\n\n1) Move validateAgent into npm-app/src/cli.ts and export it:\n- Add imports: red from picocolors, backendUrl from ./config, and createAuthHeaders from ./utils/auth-headers.\n- Implement and export async function validateAgent(agent: string, localAgents?: Record<string, any>): Promise<string | undefined> with this behavior:\n  - If agent exists in localAgents by id or by displayName, return the displayName (or the provided agent id if displayName not found). Do not print anything here.\n  - Otherwise, start Spinner with message \"Checking agent...\", issue a GET to `${backendUrl}/api/agents/validate-name?agentId=${encodeURIComponent(agent)}` with headers from createAuthHeaders(), parse JSON for { valid, normalizedId, displayName }.\n  - If resp.ok and valid is true, return displayName (no console logging inside this function).\n  - If resp.ok and valid is false, print an error to stderr using red(`\\nUnknown agent: ${bold(agent)}. Exiting.`) and exit(1).\n  - On network/other errors, print a yellow warning that validation could not be performed and continue.\n  - Always stop the Spinner in finally.\n\n2) Update CLI startup flow to display the resolved agent name (not inside validateAgent):\n- In npm-app/src/cli.ts within printInitialPrompt(), before calling displayGreeting for interactive mode and when this.agent is set, load local agents via loadLocalAgents({ verbose: false }), call validateAgent(this.agent, agents), and if a name is returned, log `\\nAgent: ${bold(resolvedName)}` in green. Then call displayGreeting(this.costMode, client.user.name).\n- Remove/replace any comments implying validateAgent itself prints the agent name; logging should happen in CLI.\n\n3) Remove validateAgent from npm-app/src/index.ts and stop calling it there:\n- Delete the validateAgent function definition from index.ts.\n- In the loadLocalAgents(...).then(...) chain in index.ts, remove the await validateAgent(agent, agents) call and change the callback to a non-async .then where it only:\n  - Calls validateAgentDefinitionsIfAuthenticated(Object.values(agents)).\n  - Displays loaded agents via displayLoadedAgents if no agent flag is provided.\n- Remove now-unused imports in index.ts: createAuthHeaders from ./utils/auth-headers and Spinner from ./utils/spinner (and any other imports that become unused).\n\n4) Update unit tests to import from the new location:\n- In npm-app/src/__tests__/validate-agent-passthrough.test.ts, change import to `import { validateAgent } from '../cli'`.\n- Keep existing behavior expectations: (a) passes the agentId unchanged to the backend, (b) short-circuits when the agent is found locally. Ensure the Spinner is mocked as before.\n\n5) Ensure types and build remain clean:\n- Verify added imports in cli.ts are used; remove any newly unused imports in index.ts.\n- No changes are needed to backend routes; the endpoint path and response shape remain the same.",
      "prompt": "Refactor the CLI agent validation so that the agent name resolution happens in the CLI module rather than the main index entrypoint. Move the agent validation function into the CLI code, have it return the resolved display name without printing, and adjust the CLI startup to display the resolved agent name before the greeting. Remove the old validation function and its usage from the entry file, clean up unused imports, and update the corresponding unit test to import from the new location. Keep the existing backend endpoint contract intact.",
      "supplementalFiles": [
        "npm-app/src/utils/auth-headers.ts",
        "npm-app/src/config.ts",
        "npm-app/src/agents/load-agents.ts",
        "backend/src/api/agents.ts",
        "backend/src/index.ts"
      ],
      "fileDiffs": [
        {
          "path": "npm-app/src/__tests__/validate-agent-passthrough.test.ts",
          "status": "modified",
          "diff": "Index: npm-app/src/__tests__/validate-agent-passthrough.test.ts\n===================================================================\n--- npm-app/src/__tests__/validate-agent-passthrough.test.ts\t59ff0cc (parent)\n+++ npm-app/src/__tests__/validate-agent-passthrough.test.ts\t90f0246 (commit)\n@@ -7,9 +7,9 @@\n   spyOn,\n   mock,\n } from 'bun:test'\n \n-import { validateAgent } from '../index'\n+import { validateAgent } from '../cli'\n import * as SpinnerMod from '../utils/spinner'\n \n describe('validateAgent agent pass-through', () => {\n   let fetchSpy: ReturnType<typeof spyOn>\n"
        },
        {
          "path": "npm-app/src/cli.ts",
          "status": "modified",
          "diff": "Index: npm-app/src/cli.ts\n===================================================================\n--- npm-app/src/cli.ts\t59ff0cc (parent)\n+++ npm-app/src/cli.ts\t90f0246 (commit)\n@@ -21,12 +21,15 @@\n   cyan,\n   gray,\n   green,\n   magenta,\n+  red,\n   yellow,\n } from 'picocolors'\n \n import { loadLocalAgents, loadedAgents } from './agents/load-agents'\n+import { backendUrl } from './config'\n+import { createAuthHeaders } from './utils/auth-headers'\n import {\n   killAllBackgroundProcesses,\n   sendKillSignalToAllBackgroundProcesses,\n } from './background-process-manager'\n@@ -145,8 +148,74 @@\n > {\n   return cachedLocalAgentInfo\n }\n \n+/**\n+ * Validates an agent name against local and remote agents\n+ * @param agent The agent name to validate\n+ * @param localAgents Optional local agents to check against\n+ * @returns The display name of the agent if valid, undefined otherwise\n+ */\n+export async function validateAgent(\n+  agent: string,\n+  localAgents?: Record<string, any>,\n+): Promise<string | undefined> {\n+  const agents = localAgents ?? {}\n+\n+  // if local agents are loaded, they're already validated\n+  const localById = agents?.[agent]\n+  const localByDisplay = Object.values(agents ?? {}).find(\n+    (a: any) => a?.displayName === agent,\n+  )\n+  if (localById || localByDisplay) {\n+    // Display the resolved agent name for local agents too\n+    const displayName = (localById?.displayName ||\n+      localByDisplay?.displayName ||\n+      localById?.id ||\n+      agent) as string\n+    // Delete the inline console.log to centralize logging in the caller\n+    return displayName\n+  }\n+\n+  Spinner.get().start('Checking agent...')\n+  try {\n+    const url = `${backendUrl}/api/agents/validate-name?agentId=${encodeURIComponent(agent)}`\n+\n+    // Use helper to create headers with x-codebuff-api-key\n+    const headers = createAuthHeaders()\n+\n+    const resp = await fetch(url, {\n+      method: 'GET',\n+      headers,\n+    })\n+    // Include optional fields from backend, notably displayName\n+    const data: {\n+      valid?: boolean\n+      normalizedId?: string\n+      displayName?: string\n+    } = await resp.json().catch(() => ({}) as any)\n+\n+    if (resp.ok && data.valid) {\n+      // Delete inline console logging here to centralize in caller\n+      return data.displayName\n+    }\n+\n+    if (resp.ok && !data.valid) {\n+      console.error(red(`\\nUnknown agent: ${bold(agent)}. Exiting.`))\n+      process.exit(1)\n+    }\n+  } catch {\n+    console.error(\n+      yellow(\n+        `\\nCould not validate agent due to a network error. Proceeding...`,\n+      ),\n+    )\n+  } finally {\n+    Spinner.get().stop()\n+  }\n+  return undefined\n+}\n+\n const PROMPT_HISTORY_PATH = path.join(CONFIG_DIR, 'prompt_history.json')\n \n // Paste detection constants\n // Paste detection requires 2 consecutive inputs within 10ms each\n@@ -630,12 +699,18 @@\n       }\n     } else {\n       // Normal interactive mode\n       if (client.user) {\n-        displayGreeting(this.costMode, client.user.name)\n+        // Validate agent and display name before greeting if agent is specified\n+        if (this.agent) {\n+          const agents = await loadLocalAgents({ verbose: false })\n+          const resolvedName = await validateAgent(this.agent, agents)\n+          if (resolvedName) {\n+            console.log(green(`\\nAgent: ${bold(resolvedName)}`))\n+          }\n+        }\n \n-        // Agent name will be displayed by validateAgent when resolved\n-        // No need to display here to avoid race conditions\n+        displayGreeting(this.costMode, client.user.name)\n       } else {\n         console.log(\n           `Welcome to Codebuff! Give us a sec to get your account set up...`,\n         )\n"
        },
        {
          "path": "npm-app/src/index.ts",
          "status": "modified",
          "diff": "Index: npm-app/src/index.ts\n===================================================================\n--- npm-app/src/index.ts\t59ff0cc (parent)\n+++ npm-app/src/index.ts\t90f0246 (commit)\n@@ -24,69 +24,14 @@\n import { logAndHandleStartup } from './startup-process-handler'\n import { recreateShell } from './terminal/run-command'\n import { validateAgentDefinitionsIfAuthenticated } from './utils/agent-validation'\n import { initAnalytics, trackEvent } from './utils/analytics'\n-import { createAuthHeaders } from './utils/auth-headers'\n import { logger } from './utils/logger'\n-import { Spinner } from './utils/spinner'\n \n import type { CliOptions } from './types'\n \n-export async function validateAgent(\n-  agent: string,\n-  localAgents?: Record<string, any>,\n-): Promise<string | undefined> {\n-  const agents = localAgents ?? {}\n \n-  // if local agents are loaded, they're already validated\n-  if (\n-    !!agents?.[agent] ||\n-    !!Object.values(agents ?? {}).find((a: any) => a?.displayName === agent)\n-  )\n-    return\n \n-  Spinner.get().start('Checking agent...')\n-  try {\n-    const url = `${backendUrl}/api/agents/validate-name?agentId=${encodeURIComponent(agent)}`\n-\n-    // Use helper to create headers with x-codebuff-api-key\n-    const headers = createAuthHeaders()\n-\n-    const resp = await fetch(url, {\n-      method: 'GET',\n-      headers,\n-    })\n-    // Include optional fields from backend, notably displayName\n-    const data: {\n-      valid?: boolean\n-      normalizedId?: string\n-      displayName?: string\n-    } = await resp.json().catch(() => ({}) as any)\n-\n-    if (resp.ok && data.valid) {\n-      // Console log the agent name immediately when resolved\n-      if (data.displayName) {\n-        console.log(green(`\\nAgent: ${bold(data.displayName)}`))\n-      }\n-      return data.displayName\n-    }\n-\n-    if (resp.ok && !data.valid) {\n-      console.error(red(`\\nUnknown agent: ${bold(agent)}. Exiting.`))\n-      process.exit(1)\n-    }\n-  } catch {\n-    console.error(\n-      yellow(\n-        `\\nCould not validate agent due to a network error. Proceeding...`,\n-      ),\n-    )\n-  } finally {\n-    Spinner.get().stop()\n-  }\n-  return undefined\n-}\n-\n async function codebuff({\n   initialInput,\n   git,\n   costMode,\n@@ -110,21 +55,18 @@\n   rageDetectors.startupTimeDetector.start()\n \n   const initFileContextPromise = initProjectFileContextWithWorker(projectRoot)\n \n-  // Ensure validation runs strictly after local agent load/display\n+  // Load agents and validate definitions\n   const loadAndValidatePromise: Promise<void> = loadLocalAgents({\n     verbose: true,\n-  }).then(async (agents) => {\n+  }).then((agents) => {\n     validateAgentDefinitionsIfAuthenticated(Object.values(agents))\n \n     const codebuffConfig = loadCodebuffConfig()\n     if (!agent) {\n       displayLoadedAgents(codebuffConfig)\n-      return\n     }\n-\n-    await validateAgent(agent, agents)\n   })\n \n   const readyPromise = Promise.all([\n     initFileContextPromise,\n"
        }
      ]
    },
    {
      "id": "enforce-agent-auth",
      "sha": "27d87d7690df0094e0aa3eaaa52e8bcdfe64b138",
      "parentSha": "c8c066048dbd9280cce10be335aff4a3d05c2bd1",
      "spec": "Implement secure agent name validation and display name propagation across backend and CLI.\n\nBackend (backend/src/api/agents.ts):\n- Enforce API key requirement on GET /api/agents/validate-name:\n  - Use extractAuthTokenFromHeader(req) to read x-codebuff-api-key.\n  - If missing, return HTTP 403 with JSON: { valid: false, message: 'API key required' }.\n- Expand response and cache payload to include displayName:\n  - Update CacheEntry.result type to include optional displayName: string.\n  - For built-in agents (from AGENT_PERSONAS), return { valid: true, source: 'builtin', normalizedId: agentId, displayName: persona.displayName } and cache it.\n  - For published agents (from getAgentTemplate), return { valid: true, source: 'published', normalizedId: found.id, displayName: found.displayName } and cache it.\n- Keep TTL-based positive-result cache behavior unchanged.\n\nCLI (npm-app/src/index.ts):\n- Update imports to include green from picocolors.\n- Update validateAgent(agent, localAgents?) to return Promise<string | undefined>:\n  - Continue using createAuthHeaders() to set x-codebuff-api-key.\n  - Parse response JSON as { valid?: boolean; normalizedId?: string; displayName?: string }.\n  - On resp.ok && data.valid, if data.displayName exists, immediately print \"\\nAgent: <displayName>\" (green and bold) to console, and return the displayName.\n  - Preserve existing error handling (exit on known invalid agent; proceed on network error) and ensure Spinner is stopped in finally.\n- In codebuff() load pipeline, await validateAgent within the loadLocalAgents().then(async ...) chain; no additional behavior changes required.\n\nCLI (npm-app/src/cli.ts):\n- Remove the startup-time agent display block inside printInitialPrompt() that conditionally logs the selected agent via getLocalAgentInfo/getAgentDisplayName when this.agent is set. Rationale: avoid duplicated/racing output; rely on validateAgent to print the agent name after authoritative validation.\n\nTests (backend/src/api/__tests__/validate-agent-name.test.ts):\n- Adjust tests to include API key header so positive validations return 200:\n  - Update createMockReq to accept an optional headers object; supply { 'x-codebuff-api-key': 'test' } for valid cases.\n  - Add a new test asserting 403 and payload { valid: false, message: 'API key required' } when header is absent.\n- Optionally, extend positive-case assertions to verify displayName is present:\n  - For built-in: expect(res.jsonPayload.displayName).toBe(AGENT_PERSONAS[builtinAgentId].displayName).\n  - For published: when mocking getAgentTemplate to include displayName, expect it to be returned.\n\nDo not change other behavior or endpoints. Ensure all console output remains concise and only printed once after validation.",
      "prompt": "Secure the agent name validation flow and improve UX. Require an API key for the backend agent validation endpoint, return the agent display name when a match is found (both built-in and published), and have the CLI print the selected agent name immediately after successful validation. Remove the early startup agent name print to avoid duplicate/racing messages. Update tests to cover the new auth requirement and the displayName in responses.",
      "supplementalFiles": [
        "backend/src/util/auth-helpers.ts",
        "backend/src/api/__tests__/validate-agent-name.test.ts",
        "backend/src/templates/agent-registry.ts",
        "common/src/constants/agents.ts",
        "common/src/util/agent-name-resolver.ts",
        "npm-app/src/utils/auth-headers.ts",
        "npm-app/src/agents/load-agents.ts",
        "npm-app/src/menu.ts"
      ],
      "fileDiffs": [
        {
          "path": "backend/src/api/agents.ts",
          "status": "modified",
          "diff": "Index: backend/src/api/agents.ts\n===================================================================\n--- backend/src/api/agents.ts\tc8c0660 (parent)\n+++ backend/src/api/agents.ts\t27d87d7 (commit)\n@@ -14,9 +14,14 @@\n // Add short-lived cache for positive validations\n const AGENT_VALIDATION_CACHE_TTL_MS = 5 * 60 * 1000 // 5 minutes\n \n type CacheEntry = {\n-  result: { valid: true; source?: string; normalizedId?: string }\n+  result: {\n+    valid: true\n+    source?: string\n+    normalizedId?: string\n+    displayName?: string\n+  }\n   expiresAt: number\n }\n \n const agentValidationCache = new Map<string, CacheEntry>()\n@@ -34,17 +39,13 @@\n ): Promise<void | ExpressResponse> {\n   try {\n     // Check for x-codebuff-api-key header for authentication\n     const apiKey = extractAuthTokenFromHeader(req)\n-\n-    if (apiKey) {\n-      logger.debug(\n-        {\n-          hasApiKey: true,\n-          agentId: req.query.agentId,\n-        },\n-        'Agent validation request with API key authentication',\n-      )\n+    if (!apiKey) {\n+      return res.status(403).json({\n+        valid: false,\n+        message: 'API key required',\n+      })\n     }\n \n     // Parse from query instead (GET)\n     const { agentId } = validateAgentRequestSchema.parse({\n@@ -59,13 +60,15 @@\n       agentValidationCache.delete(agentId)\n     }\n \n     // Check built-in agents first\n-    if (AGENT_PERSONAS[agentId as keyof typeof AGENT_PERSONAS]) {\n+    const persona = AGENT_PERSONAS[agentId as keyof typeof AGENT_PERSONAS]\n+    if (persona) {\n       const result = {\n         valid: true as const,\n         source: 'builtin',\n         normalizedId: agentId,\n+        displayName: persona.displayName,\n       }\n       agentValidationCache.set(agentId, {\n         result,\n         expiresAt: Date.now() + AGENT_VALIDATION_CACHE_TTL_MS,\n@@ -79,8 +82,9 @@\n       const result = {\n         valid: true as const,\n         source: 'published',\n         normalizedId: found.id,\n+        displayName: found.displayName,\n       }\n       agentValidationCache.set(agentId, {\n         result,\n         expiresAt: Date.now() + AGENT_VALIDATION_CACHE_TTL_MS,\n"
        },
        {
          "path": "npm-app/src/cli.ts",
          "status": "modified",
          "diff": "Index: npm-app/src/cli.ts\n===================================================================\n--- npm-app/src/cli.ts\tc8c0660 (parent)\n+++ npm-app/src/cli.ts\t27d87d7 (commit)\n@@ -632,19 +632,10 @@\n       // Normal interactive mode\n       if (client.user) {\n         displayGreeting(this.costMode, client.user.name)\n \n-        // Show selected agent when provided via --agent\n-        if (this.agent) {\n-          try {\n-            const localAgentInfo = await getLocalAgentInfo()\n-            const agentDisplayName = getAgentDisplayName(\n-              this.agent,\n-              localAgentInfo,\n-            )\n-            console.log(green(`\\nAgent: ${bold(agentDisplayName)}`))\n-          } catch {}\n-        }\n+        // Agent name will be displayed by validateAgent when resolved\n+        // No need to display here to avoid race conditions\n       } else {\n         console.log(\n           `Welcome to Codebuff! Give us a sec to get your account set up...`,\n         )\n"
        },
        {
          "path": "npm-app/src/index.ts",
          "status": "modified",
          "diff": "Index: npm-app/src/index.ts\n===================================================================\n--- npm-app/src/index.ts\tc8c0660 (parent)\n+++ npm-app/src/index.ts\t27d87d7 (commit)\n@@ -2,9 +2,9 @@\n \n import { type CostMode } from '@codebuff/common/old-constants'\n import { AnalyticsEvent } from '@codebuff/common/constants/analytics-events'\n import { Command, Option } from 'commander'\n-import { red, yellow, bold } from 'picocolors'\n+import { red, yellow, green, bold } from 'picocolors'\n \n import { displayLoadedAgents, loadLocalAgents } from './agents/load-agents'\n import { CLI } from './cli'\n import { cliArguments, cliOptions } from './cli-definitions'\n@@ -33,9 +33,9 @@\n \n export async function validateAgent(\n   agent: string,\n   localAgents?: Record<string, any>,\n-): Promise<void> {\n+): Promise<string | undefined> {\n   const agents = localAgents ?? {}\n \n   // if local agents are loaded, they're already validated\n   if (\n@@ -54,11 +54,22 @@\n     const resp = await fetch(url, {\n       method: 'GET',\n       headers,\n     })\n-    const data: { valid?: boolean } = await resp.json().catch(() => ({}) as any)\n+    // Include optional fields from backend, notably displayName\n+    const data: {\n+      valid?: boolean\n+      normalizedId?: string\n+      displayName?: string\n+    } = await resp.json().catch(() => ({}) as any)\n \n-    if (resp.ok && data.valid) return\n+    if (resp.ok && data.valid) {\n+      // Console log the agent name immediately when resolved\n+      if (data.displayName) {\n+        console.log(green(`\\nAgent: ${bold(data.displayName)}`))\n+      }\n+      return data.displayName\n+    }\n \n     if (resp.ok && !data.valid) {\n       console.error(red(`\\nUnknown agent: ${bold(agent)}. Exiting.`))\n       process.exit(1)\n@@ -71,8 +82,9 @@\n     )\n   } finally {\n     Spinner.get().stop()\n   }\n+  return undefined\n }\n \n async function codebuff({\n   initialInput,\n@@ -101,18 +113,18 @@\n \n   // Ensure validation runs strictly after local agent load/display\n   const loadAndValidatePromise: Promise<void> = loadLocalAgents({\n     verbose: true,\n-  }).then((agents) => {\n+  }).then(async (agents) => {\n     validateAgentDefinitionsIfAuthenticated(Object.values(agents))\n \n     const codebuffConfig = loadCodebuffConfig()\n     if (!agent) {\n       displayLoadedAgents(codebuffConfig)\n       return\n     }\n \n-    return validateAgent(agent, agents)\n+    await validateAgent(agent, agents)\n   })\n \n   const readyPromise = Promise.all([\n     initFileContextPromise,\n"
        }
      ]
    },
    {
      "id": "unify-api-auth",
      "sha": "12511ca318e1e7740307b81e0d14eda1ec912ad9",
      "parentSha": "4d4ff84fe3955dcf55b44221d2e30607f13815f3",
      "spec": "Goal: Standardize HTTP authentication between CLI and backend by using a single header x-codebuff-api-key, with small helper utilities on both sides. Apply to agent validation (GET /api/agents/validate-name) and org coverage (POST /api/orgs/is-repo-covered), and admin auth middleware. Ensure tests work with the new header expectations.\n\n1) Add backend auth helper\n- File: backend/src/util/auth-helpers.ts\n- Implement a function extractAuthTokenFromHeader(req: express.Request): string | undefined that reads req.headers['x-codebuff-api-key'] and returns a trimmed string or undefined. No other behavior.\n\n2) Update backend agent validation endpoint\n- File: backend/src/api/agents.ts\n- Import AGENT_PERSONAS from @codebuff/common/constants/agents, getAgentTemplate from ../templates/agent-registry, logger from ../util/logger, and extractAuthTokenFromHeader from ../util/auth-helpers.\n- At the start of validateAgentNameHandler, call extractAuthTokenFromHeader(req) to detect presence of an API key and log with logger.debug({ hasApiKey: true, agentId: req.query.agentId }, 'Agent validation request with API key authentication') when present. Do not change functional behavior or require authentication; the endpoint remains public.\n- Keep the request schema (agentId from query), the positive cache behavior, builtin-agent check, and database lookup via getAgentTemplate unchanged. For Zod errors, return status 400 with { valid: false, message: 'Invalid request', issues: error.issues } (expanded formatting).\n\n3) Update backend org coverage endpoint\n- File: backend/src/api/org.ts\n- Import extractAuthTokenFromHeader from ../util/auth-helpers.\n- Replace Authorization: Bearer parsing with the new helper. If missing, return 401 with { error: 'Missing x-codebuff-api-key header' }.\n- Use the extracted token with getUserIdFromAuthToken (existing import) to resolve userId. If no userId, return 401 with { error: 'Invalid authentication token' }.\n- Keep request body parsing, repo/org lookup, and response fields (isCovered, organizationName, organizationId, organizationSlug) unchanged.\n\n4) Update backend admin auth middleware\n- File: backend/src/util/check-auth.ts\n- Import extractAuthTokenFromHeader from ./auth-helpers.\n- In checkAdmin(req,res,next), replace reading Authorization: Bearer with extractAuthTokenFromHeader. If no token, return 401 with { error: 'Missing x-codebuff-api-key header' }.\n- Keep existing checkAuth invocation, DB session lookup, admin check, and logging unchanged.\n\n5) Adjust backend test to include headers on mock requests\n- File: backend/src/api/__tests__/validate-agent-name.test.ts\n- Ensure createMockReq returns an object including a headers property (e.g., { query, headers: {} } cast as ExpressRequest). Do not alter test assertions.\n\n6) Add CLI auth header helpers\n- File: npm-app/src/utils/auth-headers.ts\n- Implement:\n  a) getAuthToken(): string | undefined — returns userCredentials.authToken if available (from getUserCredentials()), else process.env[API_KEY_ENV_VAR] (import API_KEY_ENV_VAR from @codebuff/common/constants).\n  b) createAuthHeaders(contentType = 'application/json'): Record<string,string> — returns { 'Content-Type': contentType, ...(x-codebuff-api-key if token present) }.\n  c) addAuthHeader(headers: Record<string,string>, authToken?: string): Record<string,string> — merges 'x-codebuff-api-key': token (authToken or from getAuthToken()) into provided headers, returning a new object.\n\n7) Use the CLI helpers where HTTP calls are made\n- File: npm-app/src/index.ts (validateAgent function)\n  - Replace manual header construction and Authorization/X-API-Key branching with const headers = createAuthHeaders(). Use those headers for the GET to /api/agents/validate-name.\n  - Remove now-unused imports getUserCredentials and direct API_KEY_ENV_VAR usage in validateAgent (only keep if still used elsewhere in the file).\n- File: npm-app/src/client.ts (checkRepositoryCoverage method)\n  - Import addAuthHeader from ./utils/auth-headers.\n  - Replace headers block containing Authorization: Bearer with headers = addAuthHeader({ 'Content-Type': 'application/json' }, this.user.authToken). Keep the POST body unchanged and the rest of method behavior intact.\n\nConstraints & compatibility:\n- Preserve existing endpoint shapes and behaviors; only authentication header handling/logging changes for the touched endpoints/middleware.\n- Use lowercase 'x-codebuff-api-key' consistently. Express lowercases header keys; read via the helper only.\n- Do not modify WebSocket auth token flow (prompt/init actions continue as-is).\n- Ensure imports reference @codebuff/common/constants for API_KEY_ENV_VAR (no old-constants path).\n\nAcceptance checks:\n- Agent validation test passes with the header-less mocked request object (headers: {}).\n- GET /api/agents/validate-name continues to respond identically to before, and logs debug when x-codebuff-api-key is present.\n- POST /api/orgs/is-repo-covered requires x-codebuff-api-key and resolves userId from it; returns the same success payload as before.\n- Admin middleware returns 401 on missing x-codebuff-api-key and otherwise behaves the same for valid tokens.\n- CLI calls for agent validation and repo coverage send x-codebuff-api-key, not Authorization.\n",
      "prompt": "Unify HTTP authentication between the CLI and backend by standardizing on a single API key header. Introduce small utilities to construct this header on the CLI and to extract it on the server, then update the agent validation and repository coverage endpoints, as well as the admin middleware, to use it. Keep existing response shapes and behaviors intact and ensure tests still pass.",
      "supplementalFiles": [
        "backend/src/websockets/websocket-action.ts",
        "backend/src/websockets/auth.ts",
        "backend/src/templates/agent-registry.ts",
        "npm-app/src/credentials.ts",
        "common/src/constants.ts"
      ],
      "fileDiffs": [
        {
          "path": "backend/src/api/__tests__/validate-agent-name.test.ts",
          "status": "modified",
          "diff": "Index: backend/src/api/__tests__/validate-agent-name.test.ts\n===================================================================\n--- backend/src/api/__tests__/validate-agent-name.test.ts\t4d4ff84 (parent)\n+++ backend/src/api/__tests__/validate-agent-name.test.ts\t12511ca (commit)\n@@ -18,9 +18,9 @@\n   NextFunction,\n } from 'express'\n \n function createMockReq(query: Record<string, any>): Partial<ExpressRequest> {\n-  return { query } as any\n+  return { query, headers: {} } as any\n }\n \n function createMockRes() {\n   const res: Partial<ExpressResponse> & {\n"
        },
        {
          "path": "backend/src/api/agents.ts",
          "status": "modified",
          "diff": "Index: backend/src/api/agents.ts\n===================================================================\n--- backend/src/api/agents.ts\t4d4ff84 (parent)\n+++ backend/src/api/agents.ts\t12511ca (commit)\n@@ -1,13 +1,16 @@\n+import { AGENT_PERSONAS } from '@codebuff/common/constants/agents'\n import { z } from 'zod/v4'\n+\n+import { getAgentTemplate } from '../templates/agent-registry'\n+import { extractAuthTokenFromHeader } from '../util/auth-helpers'\n+import { logger } from '../util/logger'\n+\n import type {\n   Request as ExpressRequest,\n   Response as ExpressResponse,\n   NextFunction,\n } from 'express'\n-import { logger } from '../util/logger'\n-import { AGENT_PERSONAS } from '@codebuff/common/constants/agents'\n-import { getAgentTemplate } from '../templates/agent-registry'\n \n // Add short-lived cache for positive validations\n const AGENT_VALIDATION_CACHE_TTL_MS = 5 * 60 * 1000 // 5 minutes\n \n@@ -29,23 +32,21 @@\n   res: ExpressResponse,\n   next: NextFunction,\n ): Promise<void | ExpressResponse> {\n   try {\n-    // Log authentication headers if present (for debugging)\n-    const hasAuthHeader = !!req.headers.authorization\n-    const hasApiKey = !!req.headers['x-api-key']\n-    \n-    if (hasAuthHeader || hasApiKey) {\n-      logger.info(\n-        { \n-          hasAuthHeader,\n-          hasApiKey,\n+    // Check for x-codebuff-api-key header for authentication\n+    const apiKey = extractAuthTokenFromHeader(req)\n+\n+    if (apiKey) {\n+      logger.debug(\n+        {\n+          hasApiKey: true,\n           agentId: req.query.agentId,\n         },\n-        'Agent validation request with authentication',\n+        'Agent validation request with API key authentication',\n       )\n     }\n-    \n+\n     // Parse from query instead (GET)\n     const { agentId } = validateAgentRequestSchema.parse({\n       agentId: String((req.query as any)?.agentId ?? ''),\n     })\n@@ -59,9 +60,13 @@\n     }\n \n     // Check built-in agents first\n     if (AGENT_PERSONAS[agentId as keyof typeof AGENT_PERSONAS]) {\n-      const result = { valid: true as const, source: 'builtin', normalizedId: agentId }\n+      const result = {\n+        valid: true as const,\n+        source: 'builtin',\n+        normalizedId: agentId,\n+      }\n       agentValidationCache.set(agentId, {\n         result,\n         expiresAt: Date.now() + AGENT_VALIDATION_CACHE_TTL_MS,\n       })\n@@ -89,9 +94,13 @@\n       { error: error instanceof Error ? error.message : String(error) },\n       'Error validating agent name',\n     )\n     if (error instanceof z.ZodError) {\n-      return res.status(400).json({ valid: false, message: 'Invalid request', issues: error.issues })\n+      return res.status(400).json({\n+        valid: false,\n+        message: 'Invalid request',\n+        issues: error.issues,\n+      })\n     }\n     next(error)\n     return\n   }\n"
        },
        {
          "path": "backend/src/api/org.ts",
          "status": "modified",
          "diff": "Index: backend/src/api/org.ts\n===================================================================\n--- backend/src/api/org.ts\t4d4ff84 (parent)\n+++ backend/src/api/org.ts\t12511ca (commit)\n@@ -1,8 +1,9 @@\n import { findOrganizationForRepository } from '@codebuff/billing'\n import { z } from 'zod/v4'\n \n import { logger } from '../util/logger'\n+import { extractAuthTokenFromHeader } from '../util/auth-helpers'\n import { getUserIdFromAuthToken } from '../websockets/websocket-action'\n \n import type {\n   Request as ExpressRequest,\n@@ -25,17 +26,15 @@\n     const { owner, repo, remoteUrl } = isRepoCoveredRequestSchema.parse(\n       req.body,\n     )\n \n-    // Get user ID from Authorization header\n-    const authHeader = req.headers.authorization\n-    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n+    // Get user ID from x-codebuff-api-key header\n+    const authToken = extractAuthTokenFromHeader(req)\n+    if (!authToken) {\n       return res\n         .status(401)\n-        .json({ error: 'Missing or invalid authorization header' })\n+        .json({ error: 'Missing x-codebuff-api-key header' })\n     }\n-\n-    const authToken = authHeader.substring(7) // Remove 'Bearer ' prefix\n     const userId = await getUserIdFromAuthToken(authToken)\n \n     if (!userId) {\n       return res.status(401).json({ error: 'Invalid authentication token' })\n"
        },
        {
          "path": "backend/src/util/auth-helpers.ts",
          "status": "added",
          "diff": "Index: backend/src/util/auth-helpers.ts\n===================================================================\n--- backend/src/util/auth-helpers.ts\t4d4ff84 (parent)\n+++ backend/src/util/auth-helpers.ts\t12511ca (commit)\n@@ -1,1 +1,10 @@\n-[NEW FILE]\n\\ No newline at end of file\n+import type { Request } from 'express'\n+\n+/**\n+ * Extract auth token from x-codebuff-api-key header\n+ */\n+export function extractAuthTokenFromHeader(req: Request): string | undefined {\n+  const token = req.headers['x-codebuff-api-key'] as string | undefined\n+  // Trim any whitespace that might be present\n+  return token?.trim()\n+}\n\\ No newline at end of file\n"
        },
        {
          "path": "backend/src/util/check-auth.ts",
          "status": "modified",
          "diff": "Index: backend/src/util/check-auth.ts\n===================================================================\n--- backend/src/util/check-auth.ts\t4d4ff84 (parent)\n+++ backend/src/util/check-auth.ts\t12511ca (commit)\n@@ -3,8 +3,9 @@\n import { utils } from '@codebuff/internal'\n import { eq } from 'drizzle-orm'\n \n import { logger } from './logger'\n+import { extractAuthTokenFromHeader } from './auth-helpers'\n \n import type { ServerAction } from '@codebuff/common/actions'\n import type { Request, Response, NextFunction } from 'express'\n \n@@ -48,16 +49,13 @@\n   req: Request,\n   res: Response,\n   next: NextFunction,\n ) => {\n-  // Extract auth token from Authorization header\n-  const authHeader = req.headers.authorization\n-  if (!authHeader?.startsWith('Bearer ')) {\n-    return res\n-      .status(401)\n-      .json({ error: 'Missing or invalid Authorization header' })\n+  // Extract auth token from x-codebuff-api-key header\n+  const authToken = extractAuthTokenFromHeader(req)\n+  if (!authToken) {\n+    return res.status(401).json({ error: 'Missing x-codebuff-api-key header' })\n   }\n-  const authToken = authHeader.substring(7) // Remove 'Bearer ' prefix\n \n   // Generate a client session ID for this request\n   const clientSessionId = `admin-relabel-${Date.now()}`\n \n"
        },
        {
          "path": "npm-app/src/client.ts",
          "status": "modified",
          "diff": "Index: npm-app/src/client.ts\n===================================================================\n--- npm-app/src/client.ts\t4d4ff84 (parent)\n+++ npm-app/src/client.ts\t12511ca (commit)\n@@ -81,8 +81,9 @@\n   storeSubagentChunk,\n } from './subagent-storage'\n import { handleToolCall } from './tool-handlers'\n import { identifyUser, trackEvent } from './utils/analytics'\n+import { addAuthHeader } from './utils/auth-headers'\n import { getRepoMetrics, gitCommandIsAvailable } from './utils/git'\n import { logger, loggerContext } from './utils/logger'\n import { Spinner } from './utils/spinner'\n import { toolRenderers } from './utils/tool-renderers'\n@@ -1629,12 +1630,12 @@\n \n       // Call backend API to check if repo is covered by organization\n       const response = await fetch(`${backendUrl}/api/orgs/is-repo-covered`, {\n         method: 'POST',\n-        headers: {\n-          'Content-Type': 'application/json',\n-          Authorization: `Bearer ${this.user.authToken}`,\n-        },\n+        headers: addAuthHeader(\n+          { 'Content-Type': 'application/json' },\n+          this.user.authToken,\n+        ),\n         body: JSON.stringify({\n           owner: owner.toLowerCase(),\n           repo: repo.toLowerCase(),\n           remoteUrl: repoUrl,\n"
        },
        {
          "path": "npm-app/src/index.ts",
          "status": "modified",
          "diff": "Index: npm-app/src/index.ts\n===================================================================\n--- npm-app/src/index.ts\t4d4ff84 (parent)\n+++ npm-app/src/index.ts\t12511ca (commit)\n@@ -23,10 +23,9 @@\n import { rageDetectors } from './rage-detectors'\n import { logAndHandleStartup } from './startup-process-handler'\n import { recreateShell } from './terminal/run-command'\n import { validateAgentDefinitionsIfAuthenticated } from './utils/agent-validation'\n-import { getUserCredentials } from './credentials'\n-import { API_KEY_ENV_VAR } from '@codebuff/common/old-constants'\n+import { createAuthHeaders } from './utils/auth-headers'\n import { initAnalytics, trackEvent } from './utils/analytics'\n import { logger } from './utils/logger'\n import { Spinner } from './utils/spinner'\n \n@@ -35,24 +34,8 @@\n export async function validateAgent(\n   agent: string,\n   localAgents?: Record<string, any>,\n ): Promise<void> {\n-  // Check what credentials are available at this point\n-  const userCredentials = getUserCredentials()\n-  const apiKeyEnvVar = process.env[API_KEY_ENV_VAR]\n-  \n-  logger.info(\n-    {\n-      agent,\n-      hasUserCredentials: !!userCredentials,\n-      hasApiKeyEnvVar: !!apiKeyEnvVar,\n-      userId: userCredentials?.id,\n-      userEmail: userCredentials?.email,\n-      hasAuthToken: !!userCredentials?.authToken,\n-    },\n-    '[startup] validateAgent: checking available credentials',\n-  )\n-\n   const agents = localAgents ?? {}\n \n   // if local agents are loaded, they're already validated\n   if (\n@@ -63,33 +46,12 @@\n \n   Spinner.get().start('Checking agent...')\n   try {\n     const url = `${backendUrl}/api/agents/validate-name?agentId=${encodeURIComponent(agent)}`\n-    \n-    // Add auth headers if available\n-    const headers: Record<string, string> = {\n-      'Content-Type': 'application/json',\n-    }\n-    \n-    if (userCredentials?.authToken) {\n-      headers.Authorization = `Bearer ${userCredentials.authToken}`\n-      logger.debug(\n-        { hasAuthHeader: true },\n-        '[startup] Adding Authorization header to agent validation request',\n-      )\n-    } else if (apiKeyEnvVar) {\n-      headers['X-API-Key'] = apiKeyEnvVar\n-      logger.debug(\n-        { hasApiKey: true },\n-        '[startup] Adding API key header to agent validation request',\n-      )\n-    } else {\n-      logger.warn(\n-        {},\n-        '[startup] No authentication credentials available for agent validation',\n-      )\n-    }\n-    \n+\n+    // Use helper to create headers with x-codebuff-api-key\n+    const headers = createAuthHeaders()\n+\n     const resp = await fetch(url, {\n       method: 'GET',\n       headers,\n     })\n"
        },
        {
          "path": "npm-app/src/utils/auth-headers.ts",
          "status": "added",
          "diff": "Index: npm-app/src/utils/auth-headers.ts\n===================================================================\n--- npm-app/src/utils/auth-headers.ts\t4d4ff84 (parent)\n+++ npm-app/src/utils/auth-headers.ts\t12511ca (commit)\n@@ -1,1 +1,43 @@\n-[NEW FILE]\n\\ No newline at end of file\n+import { getUserCredentials } from '../credentials'\n+import { API_KEY_ENV_VAR } from '@codebuff/common/old-constants'\n+\n+/**\n+ * Get the auth token from user credentials or environment variable\n+ */\n+export function getAuthToken(): string | undefined {\n+  const userCredentials = getUserCredentials()\n+  return userCredentials?.authToken || process.env[API_KEY_ENV_VAR]\n+}\n+\n+/**\n+ * Create headers with x-codebuff-api-key for API requests\n+ */\n+export function createAuthHeaders(contentType = 'application/json'): Record<string, string> {\n+  const headers: Record<string, string> = {\n+    'Content-Type': contentType,\n+  }\n+\n+  const authToken = getAuthToken()\n+  if (authToken) {\n+    headers['x-codebuff-api-key'] = authToken\n+  }\n+\n+  return headers\n+}\n+\n+/**\n+ * Add x-codebuff-api-key to existing headers\n+ */\n+export function addAuthHeader(\n+  headers: Record<string, string>,\n+  authToken?: string,\n+): Record<string, string> {\n+  const token = authToken || getAuthToken()\n+  if (token) {\n+    return {\n+      ...headers,\n+      'x-codebuff-api-key': token,\n+    }\n+  }\n+  return headers\n+}\n\\ No newline at end of file\n"
        }
      ]
    },
    {
      "id": "add-agent-validation",
      "sha": "26066c258ac8f8db73a690b6c0978397e088a7bb",
      "parentSha": "82c41dfc4159cfa677873d48429513957d59d8f1",
      "spec": "Implement an agent name validation system across backend and CLI.\n\nBackend\n1) Create a new HTTP GET endpoint handler that validates agent IDs:\n   - File: backend/src/api/agents.ts\n   - Export: validateAgentNameHandler(req, res, next)\n   - Parse query param agentId as a required non-empty string using zod. If validation fails, respond with HTTP 400 and JSON: { valid: false, message: 'Invalid request', issues: [...] }.\n   - If request includes either an Authorization header or an X-API-Key header, log an info event (via logger.info) including hasAuthHeader, hasApiKey, and the agentId.\n   - Maintain an in-memory positive-result cache keyed by agentId with a TTL of 5 minutes. If a cached, non-expired entry exists, return HTTP 200 with the cached result plus a cached: true flag. Expire/remove entries after TTL.\n   - Validation logic:\n     a) If agentId matches a key of AGENT_PERSONAS (from @codebuff/common/constants/agents), respond 200 with { valid: true, source: 'builtin', normalizedId: agentId } and store in cache.\n     b) Else call getAgentTemplate(agentId, {}) (from ../templates/agent-registry). If it returns an agent, respond 200 with { valid: true, source: 'published', normalizedId: found.id } and store in cache.\n     c) Else respond 200 with { valid: false } (do not cache negatives).\n   - On unexpected errors, logger.error the message and call next(error).\n\n2) Register the route in the Express app:\n   - File: backend/src/index.ts\n   - Add: app.get('/api/agents/validate-name', validateAgentNameHandler) after existing API routes are set up.\n\n3) Add tests for the new endpoint:\n   - File: backend/src/api/__tests__/validate-agent-name.test.ts\n   - Use bun:test. Create minimal Express-like req/res mocks with query handling and status/json spies.\n   - Cases:\n     a) Built-in agent ID (any existing key in AGENT_PERSONAS). Expect 200, valid: true, source: 'builtin', normalizedId equals input.\n     b) Published agent ID without version (e.g., 'codebuff/file-explorer'). Mock agent-registry.getAgentTemplate to resolve to { id: 'codebuff/file-explorer@0.0.1' }. Expect 200, valid: true, source: 'published', normalizedId 'codebuff/file-explorer@0.0.1'.\n     c) Published agent ID with version (e.g., 'codebuff/file-explorer@0.0.1'). Mock getAgentTemplate to resolve matching id. Expect 200, valid: true, source: 'published', normalizedId equals input.\n     d) Unknown agent. Mock getAgentTemplate to resolve null. Expect 200, valid: false.\n     e) Missing agentId param. Expect 400, valid: false, message: 'Invalid request'.\n\nCLI (npm-app)\n4) Add a function to validate a requested agent ID against the backend endpoint and integrate it into startup:\n   - File: npm-app/src/index.ts\n   - Imports to update/add: { backendUrl, npmAppVersion } from './config'; { Spinner } from './utils/spinner'; { getUserCredentials } from './credentials'; { API_KEY_ENV_VAR } from '@codebuff/common/old-constants'; picocolors yellow and bold (alongside red); logger.\n   - Export an async function validateAgent(agent: string, localAgents?: Record<string, any>): Promise<void> that:\n     a) Reads user credentials (getUserCredentials) and API key env var.\n     b) If localAgents contains the agent by key or contains any entry whose displayName equals the agent string, short-circuits (returns without network request).\n     c) Starts Spinner with 'Checking agent...'.\n     d) Builds GET URL: `${backendUrl}/api/agents/validate-name?agentId=${encodeURIComponent(agent)}`.\n     e) Sets headers: 'Content-Type': 'application/json'; add Authorization: `Bearer ${userCredentials.authToken}` if present; else if API_KEY_ENV_VAR is present in process.env, add header 'X-API-Key' with that value; log debug/warn messages about which auth (if any) is included.\n     f) Performs fetch; attempts to parse response JSON; if response.ok and data.valid is true, return; if response.ok and data.valid is false, print a red error `Unknown agent: <bold(agent)>. Exiting.` and exit(1); on network or parse errors, print a yellow warning `Could not validate agent due to a network error. Proceeding...` without exiting.\n     g) Always stop Spinner in finally.\n   - Integrate into startup: after loadLocalAgents and displayLoadedAgents/validateAgentDefinitionsIfAuthenticated complete, if an agent CLI argument was provided, await validateAgent(agent, agents) before prompting the user. Ensure this runs strictly after local agents are loaded and displayed as part of the ready Promise chain used by CLI.initialize.\n\n5) Add CLI tests for pass-through behavior:\n   - File: npm-app/src/__tests__/validate-agent-passthrough.test.ts\n   - Use bun:test with spies on global fetch and Spinner.get().\n   - Case 1: When calling validateAgent('codebuff/file-explorer@0.0.1', {}), assert that fetch was called and the URL's search param agentId equals the original string.\n   - Case 2: When localAgents contains a key matching the agent, ensure validateAgent short-circuits and does not call fetch.\n\nBehavioral expectations\n- The backend responds deterministically per the rules above and logs appropriately.\n- Positive validations are cached for 5 minutes keyed by the raw agentId; negative validations are not cached.\n- The CLI validates a specified agent at startup, uses available auth (Bearer token or X-API-Key) if present, gracefully proceeds on network errors, and exits with a clear message if the backend responds with valid: false.\n- The rest of the system (usage checks, websockets, etc.) remains unchanged.",
      "prompt": "Add a lightweight agent validation system that prevents running with unknown agent IDs.\n\nOn the server, expose a GET endpoint to validate an agent identifier. It should accept a required agentId query parameter, respond with whether it's valid, and include a short-lived cache for positive results. A valid agent can be either a built-in agent or a published agent, and the response should clarify which source it came from and return a normalized identifier. Handle invalid input with a 400 status and structured error. Log when authentication info is present.\n\nOn the CLI, when a specific agent is provided, validate it before starting the session. If the agent is already loaded locally, skip remote validation. Otherwise, call the backend endpoint, include any available credentials, show a spinner while checking, and exit early with a helpful message when the agent is unknown. If there is a network problem, warn and continue. Add minimal tests to cover pass-through and short-circuit cases.",
      "supplementalFiles": [
        "backend/src/templates/agent-registry.ts",
        "backend/src/api/usage.ts",
        "backend/src/api/org.ts",
        "backend/src/util/logger.ts",
        "common/src/constants/agents.ts",
        "npm-app/src/config.ts",
        "npm-app/src/utils/spinner.ts",
        "npm-app/src/credentials.ts",
        "npm-app/src/client.ts",
        "npm-app/src/utils/agent-validation.ts"
      ],
      "fileDiffs": [
        {
          "path": "backend/src/api/__tests__/validate-agent-name.test.ts",
          "status": "added",
          "diff": "Index: backend/src/api/__tests__/validate-agent-name.test.ts\n===================================================================\n--- backend/src/api/__tests__/validate-agent-name.test.ts\t82c41df (parent)\n+++ backend/src/api/__tests__/validate-agent-name.test.ts\t26066c2 (commit)\n@@ -1,1 +1,130 @@\n-[NEW FILE]\n\\ No newline at end of file\n+import { AGENT_PERSONAS } from '@codebuff/common/constants/agents'\n+import {\n+  describe,\n+  it,\n+  expect,\n+  beforeEach,\n+  afterEach,\n+  spyOn,\n+  mock,\n+} from 'bun:test'\n+\n+import * as agentRegistry from '../../templates/agent-registry'\n+import { validateAgentNameHandler } from '../agents'\n+\n+import type {\n+  Request as ExpressRequest,\n+  Response as ExpressResponse,\n+  NextFunction,\n+} from 'express'\n+\n+function createMockReq(query: Record<string, any>): Partial<ExpressRequest> {\n+  return { query } as any\n+}\n+\n+function createMockRes() {\n+  const res: Partial<ExpressResponse> & {\n+    statusCode?: number\n+    jsonPayload?: any\n+  } = {}\n+  res.status = mock((code: number) => {\n+    res.statusCode = code\n+    return res as ExpressResponse\n+  }) as any\n+  res.json = mock((payload: any) => {\n+    res.jsonPayload = payload\n+    return res as ExpressResponse\n+  }) as any\n+  return res as ExpressResponse & { statusCode?: number; jsonPayload?: any }\n+}\n+\n+const noopNext: NextFunction = () => {}\n+\n+describe('validateAgentNameHandler', () => {\n+  const builtinAgentId = Object.keys(AGENT_PERSONAS)[0] || 'file-picker'\n+\n+  beforeEach(() => {\n+    mock.restore()\n+  })\n+\n+  afterEach(() => {\n+    mock.restore()\n+  })\n+\n+  it('returns valid=true for builtin agent ids', async () => {\n+    const req = createMockReq({ agentId: builtinAgentId })\n+    const res = createMockRes()\n+\n+    await validateAgentNameHandler(req as any, res as any, noopNext)\n+\n+    expect(res.status).toHaveBeenCalledWith(200)\n+    expect(res.json).toHaveBeenCalled()\n+    expect(res.jsonPayload.valid).toBe(true)\n+    expect(res.jsonPayload.source).toBe('builtin')\n+    expect(res.jsonPayload.normalizedId).toBe(builtinAgentId)\n+  })\n+\n+  it('returns valid=true for published agent ids (publisher/name)', async () => {\n+    const agentId = 'codebuff/file-explorer'\n+\n+    const spy = spyOn(agentRegistry, 'getAgentTemplate')\n+    spy.mockResolvedValueOnce({ id: 'codebuff/file-explorer@0.0.1' } as any)\n+\n+    const req = createMockReq({ agentId })\n+    const res = createMockRes()\n+\n+    await validateAgentNameHandler(req as any, res as any, noopNext)\n+\n+    expect(spy).toHaveBeenCalledWith(agentId, {})\n+    expect(res.status).toHaveBeenCalledWith(200)\n+    expect(res.jsonPayload.valid).toBe(true)\n+    expect(res.jsonPayload.source).toBe('published')\n+    expect(res.jsonPayload.normalizedId).toBe('codebuff/file-explorer@0.0.1')\n+  })\n+\n+  it('returns valid=true for versioned published agent ids (publisher/name@version)', async () => {\n+    const agentId = 'codebuff/file-explorer@0.0.1'\n+\n+    const spy = spyOn(agentRegistry, 'getAgentTemplate')\n+    spy.mockResolvedValueOnce({ id: agentId } as any)\n+\n+    const req = createMockReq({ agentId })\n+    const res = createMockRes()\n+\n+    await validateAgentNameHandler(req as any, res as any, noopNext)\n+\n+    expect(spy).toHaveBeenCalledWith(agentId, {})\n+    expect(res.status).toHaveBeenCalledWith(200)\n+    expect(res.jsonPayload.valid).toBe(true)\n+    expect(res.jsonPayload.source).toBe('published')\n+    expect(res.jsonPayload.normalizedId).toBe(agentId)\n+  })\n+\n+  it('returns valid=false for unknown agents', async () => {\n+    const agentId = 'someorg/not-a-real-agent'\n+\n+    const spy = spyOn(agentRegistry, 'getAgentTemplate')\n+    spy.mockResolvedValueOnce(null)\n+\n+    const req = createMockReq({ agentId })\n+    const res = createMockRes()\n+\n+    await validateAgentNameHandler(req as any, res as any, noopNext)\n+\n+    expect(spy).toHaveBeenCalledWith(agentId, {})\n+    expect(res.status).toHaveBeenCalledWith(200)\n+    expect(res.jsonPayload.valid).toBe(false)\n+  })\n+\n+  it('returns 400 for invalid requests (missing agentId)', async () => {\n+    const req = createMockReq({})\n+    const res = createMockRes()\n+\n+    await validateAgentNameHandler(req as any, res as any, noopNext)\n+\n+    // Handler normalizes zod errors to 400\n+    expect(res.status).toHaveBeenCalledWith(400)\n+    expect(res.jsonPayload.valid).toBe(false)\n+    expect(res.jsonPayload.message).toBe('Invalid request')\n+  })\n+})\n"
        },
        {
          "path": "backend/src/api/agents.ts",
          "status": "added",
          "diff": "Index: backend/src/api/agents.ts\n===================================================================\n--- backend/src/api/agents.ts\t82c41df (parent)\n+++ backend/src/api/agents.ts\t26066c2 (commit)\n@@ -1,1 +1,98 @@\n-[NEW FILE]\n\\ No newline at end of file\n+import { z } from 'zod/v4'\n+import type {\n+  Request as ExpressRequest,\n+  Response as ExpressResponse,\n+  NextFunction,\n+} from 'express'\n+import { logger } from '../util/logger'\n+import { AGENT_PERSONAS } from '@codebuff/common/constants/agents'\n+import { getAgentTemplate } from '../templates/agent-registry'\n+\n+// Add short-lived cache for positive validations\n+const AGENT_VALIDATION_CACHE_TTL_MS = 5 * 60 * 1000 // 5 minutes\n+\n+type CacheEntry = {\n+  result: { valid: true; source?: string; normalizedId?: string }\n+  expiresAt: number\n+}\n+\n+const agentValidationCache = new Map<string, CacheEntry>()\n+\n+// Simple request schema\n+const validateAgentRequestSchema = z.object({\n+  agentId: z.string().min(1),\n+})\n+\n+// GET /api/agents/validate-name\n+export async function validateAgentNameHandler(\n+  req: ExpressRequest,\n+  res: ExpressResponse,\n+  next: NextFunction,\n+): Promise<void | ExpressResponse> {\n+  try {\n+    // Log authentication headers if present (for debugging)\n+    const hasAuthHeader = !!req.headers.authorization\n+    const hasApiKey = !!req.headers['x-api-key']\n+    \n+    if (hasAuthHeader || hasApiKey) {\n+      logger.info(\n+        { \n+          hasAuthHeader,\n+          hasApiKey,\n+          agentId: req.query.agentId,\n+        },\n+        'Agent validation request with authentication',\n+      )\n+    }\n+    \n+    // Parse from query instead (GET)\n+    const { agentId } = validateAgentRequestSchema.parse({\n+      agentId: String((req.query as any)?.agentId ?? ''),\n+    })\n+\n+    // Check cache (positive results only)\n+    const cached = agentValidationCache.get(agentId)\n+    if (cached && cached.expiresAt > Date.now()) {\n+      return res.status(200).json({ ...cached.result, cached: true })\n+    } else if (cached) {\n+      agentValidationCache.delete(agentId)\n+    }\n+\n+    // Check built-in agents first\n+    if (AGENT_PERSONAS[agentId as keyof typeof AGENT_PERSONAS]) {\n+      const result = { valid: true as const, source: 'builtin', normalizedId: agentId }\n+      agentValidationCache.set(agentId, {\n+        result,\n+        expiresAt: Date.now() + AGENT_VALIDATION_CACHE_TTL_MS,\n+      })\n+      return res.status(200).json(result)\n+    }\n+\n+    // Check published agents (database)\n+    const found = await getAgentTemplate(agentId, {})\n+    if (found) {\n+      const result = {\n+        valid: true as const,\n+        source: 'published',\n+        normalizedId: found.id,\n+      }\n+      agentValidationCache.set(agentId, {\n+        result,\n+        expiresAt: Date.now() + AGENT_VALIDATION_CACHE_TTL_MS,\n+      })\n+      return res.status(200).json(result)\n+    }\n+\n+    return res.status(200).json({ valid: false })\n+  } catch (error) {\n+    logger.error(\n+      { error: error instanceof Error ? error.message : String(error) },\n+      'Error validating agent name',\n+    )\n+    if (error instanceof z.ZodError) {\n+      return res.status(400).json({ valid: false, message: 'Invalid request', issues: error.issues })\n+    }\n+    next(error)\n+    return\n+  }\n+}\n"
        },
        {
          "path": "backend/src/index.ts",
          "status": "modified",
          "diff": "Index: backend/src/index.ts\n===================================================================\n--- backend/src/index.ts\t82c41df (parent)\n+++ backend/src/index.ts\t26066c2 (commit)\n@@ -9,8 +9,9 @@\n import {\n   getTracesForUserHandler,\n   relabelForUserHandler,\n } from './admin/relabelRuns'\n+import { validateAgentNameHandler } from './api/agents'\n import { isRepoCoveredHandler } from './api/org'\n import usageHandler from './api/usage'\n import { checkAdmin } from './util/check-auth'\n import { logger } from './util/logger'\n@@ -34,8 +35,9 @@\n })\n \n app.post('/api/usage', usageHandler)\n app.post('/api/orgs/is-repo-covered', isRepoCoveredHandler)\n+app.get('/api/agents/validate-name', validateAgentNameHandler)\n \n // Enable CORS for preflight requests to the admin relabel endpoint\n app.options('/api/admin/relabel-for-user', cors())\n \n"
        },
        {
          "path": "npm-app/src/__tests__/validate-agent-passthrough.test.ts",
          "status": "added",
          "diff": "Index: npm-app/src/__tests__/validate-agent-passthrough.test.ts\n===================================================================\n--- npm-app/src/__tests__/validate-agent-passthrough.test.ts\t82c41df (parent)\n+++ npm-app/src/__tests__/validate-agent-passthrough.test.ts\t26066c2 (commit)\n@@ -1,1 +1,54 @@\n-[NEW FILE]\n\\ No newline at end of file\n+import {\n+  describe,\n+  it,\n+  expect,\n+  beforeEach,\n+  afterEach,\n+  spyOn,\n+  mock,\n+} from 'bun:test'\n+\n+import { validateAgent } from '../index'\n+import * as SpinnerMod from '../utils/spinner'\n+\n+describe('validateAgent agent pass-through', () => {\n+  let fetchSpy: ReturnType<typeof spyOn>\n+  let spinnerSpy: ReturnType<typeof spyOn>\n+\n+  beforeEach(() => {\n+    fetchSpy = spyOn(globalThis as any, 'fetch').mockResolvedValue({\n+      ok: true,\n+      json: async () => ({ valid: true }),\n+    } as any)\n+\n+    spinnerSpy = spyOn(SpinnerMod.Spinner, 'get').mockReturnValue({\n+      start: () => {},\n+      stop: () => {},\n+    } as any)\n+  })\n+\n+  afterEach(() => {\n+    mock.restore()\n+  })\n+\n+  it('passes published agent id unchanged to backend (publisher/name@version)', async () => {\n+    const agent = 'codebuff/file-explorer@0.0.1'\n+    await validateAgent(agent, {})\n+\n+    expect(fetchSpy).toHaveBeenCalled()\n+    const url = (fetchSpy.mock.calls[0] as any[])[0] as string\n+    const u = new URL(url)\n+    expect(u.searchParams.get('agentId')).toBe(agent)\n+  })\n+\n+  it('short-circuits when agent is found locally (by id)', async () => {\n+    const agent = 'codebuff/file-explorer@0.0.1'\n+    fetchSpy.mockClear()\n+\n+    await validateAgent(agent, {\n+      [agent]: { displayName: 'File Explorer' },\n+    })\n+\n+    expect(fetchSpy).not.toHaveBeenCalled()\n+  })\n+})\n"
        },
        {
          "path": "npm-app/src/index.ts",
          "status": "modified",
          "diff": "Index: npm-app/src/index.ts\n===================================================================\n--- npm-app/src/index.ts\t82c41df (parent)\n+++ npm-app/src/index.ts\t26066c2 (commit)\n@@ -2,15 +2,15 @@\n \n import { type CostMode } from '@codebuff/common/old-constants'\n import { AnalyticsEvent } from '@codebuff/common/constants/analytics-events'\n import { Command, Option } from 'commander'\n-import { red } from 'picocolors'\n+import { red, yellow, bold } from 'picocolors'\n \n import { displayLoadedAgents, loadLocalAgents } from './agents/load-agents'\n import { CLI } from './cli'\n import { cliArguments, cliOptions } from './cli-definitions'\n import { handlePublish } from './cli-handlers/publish'\n-import { npmAppVersion } from './config'\n+import { npmAppVersion, backendUrl } from './config'\n import { createTemplateProject } from './create-template-project'\n import { printModeLog, setPrintMode } from './display/print-mode'\n import { enableSquashNewlines } from './display/squash-newlines'\n import { loadCodebuffConfig } from './json-config/parser'\n@@ -22,14 +22,97 @@\n } from './project-files'\n import { rageDetectors } from './rage-detectors'\n import { logAndHandleStartup } from './startup-process-handler'\n import { recreateShell } from './terminal/run-command'\n+import { validateAgentDefinitionsIfAuthenticated } from './utils/agent-validation'\n+import { getUserCredentials } from './credentials'\n+import { API_KEY_ENV_VAR } from '@codebuff/common/old-constants'\n import { initAnalytics, trackEvent } from './utils/analytics'\n import { logger } from './utils/logger'\n+import { Spinner } from './utils/spinner'\n \n import type { CliOptions } from './types'\n-import { validateAgentDefinitionsIfAuthenticated } from './utils/agent-validation'\n \n+export async function validateAgent(\n+  agent: string,\n+  localAgents?: Record<string, any>,\n+): Promise<void> {\n+  // Check what credentials are available at this point\n+  const userCredentials = getUserCredentials()\n+  const apiKeyEnvVar = process.env[API_KEY_ENV_VAR]\n+  \n+  logger.info(\n+    {\n+      agent,\n+      hasUserCredentials: !!userCredentials,\n+      hasApiKeyEnvVar: !!apiKeyEnvVar,\n+      userId: userCredentials?.id,\n+      userEmail: userCredentials?.email,\n+      hasAuthToken: !!userCredentials?.authToken,\n+    },\n+    '[startup] validateAgent: checking available credentials',\n+  )\n+\n+  const agents = localAgents ?? {}\n+\n+  // if local agents are loaded, they're already validated\n+  if (\n+    !!agents?.[agent] ||\n+    !!Object.values(agents ?? {}).find((a: any) => a?.displayName === agent)\n+  )\n+    return\n+\n+  Spinner.get().start('Checking agent...')\n+  try {\n+    const url = `${backendUrl}/api/agents/validate-name?agentId=${encodeURIComponent(agent)}`\n+    \n+    // Add auth headers if available\n+    const headers: Record<string, string> = {\n+      'Content-Type': 'application/json',\n+    }\n+    \n+    if (userCredentials?.authToken) {\n+      headers.Authorization = `Bearer ${userCredentials.authToken}`\n+      logger.debug(\n+        { hasAuthHeader: true },\n+        '[startup] Adding Authorization header to agent validation request',\n+      )\n+    } else if (apiKeyEnvVar) {\n+      headers['X-API-Key'] = apiKeyEnvVar\n+      logger.debug(\n+        { hasApiKey: true },\n+        '[startup] Adding API key header to agent validation request',\n+      )\n+    } else {\n+      logger.warn(\n+        {},\n+        '[startup] No authentication credentials available for agent validation',\n+      )\n+    }\n+    \n+    const resp = await fetch(url, {\n+      method: 'GET',\n+      headers,\n+    })\n+    const data: { valid?: boolean } = await resp.json().catch(() => ({}) as any)\n+\n+    if (resp.ok && data.valid) return\n+\n+    if (resp.ok && !data.valid) {\n+      console.error(red(`\\nUnknown agent: ${bold(agent)}. Exiting.`))\n+      process.exit(1)\n+    }\n+  } catch {\n+    console.error(\n+      yellow(\n+        `\\nCould not validate agent due to a network error. Proceeding...`,\n+      ),\n+    )\n+  } finally {\n+    Spinner.get().stop()\n+  }\n+}\n+\n async function codebuff({\n   initialInput,\n   git,\n   costMode,\n@@ -53,24 +136,34 @@\n   rageDetectors.startupTimeDetector.start()\n \n   const initFileContextPromise = initProjectFileContextWithWorker(projectRoot)\n \n-  // Only load local agents if no specific agent is requested\n-  const loadLocalAgentsPromise = new Promise<void>((resolve) => {\n-    loadLocalAgents({ verbose: true }).then((agents) => {\n+  // Load local agents, display them, then validate agent using preloaded agents\n+  const loadAgentsAndDisplayPromise = loadLocalAgents({ verbose: true }).then(\n+    (agents) => {\n       validateAgentDefinitionsIfAuthenticated(Object.values(agents))\n \n       const codebuffConfig = loadCodebuffConfig()\n       displayLoadedAgents(codebuffConfig)\n-    })\n \n-    resolve()\n-  })\n+      return agents // pass along for next step\n+    },\n+  )\n \n+  // Ensure validation runs strictly after local agent load/display\n+  const loadAndValidatePromise: Promise<void> =\n+    loadAgentsAndDisplayPromise.then(async (agents) => {\n+      // Only validate if agent is specified\n+      if (!agent) {\n+        return\n+      }\n+      await validateAgent(agent, agents)\n+    })\n+\n   const readyPromise = Promise.all([\n     initFileContextPromise,\n     processCleanupPromise,\n-    loadLocalAgentsPromise,\n+    loadAndValidatePromise,\n   ])\n \n   // Initialize the CLI singleton\n   CLI.initialize(readyPromise, {\n@@ -83,9 +176,8 @@\n     trace,\n   })\n \n   const cli = CLI.getInstance()\n-\n   await cli.printInitialPrompt({ initialInput, runInitFlow })\n \n   rageDetectors.startupTimeDetector.end()\n }\n"
        }
      ]
    },
    {
      "id": "add-run-state-helpers",
      "sha": "6a107def1010e5b6f0f54cacfec8142ab7698bd4",
      "parentSha": "660fa3404f102e2c1ee87990d01707153cd070ee",
      "spec": "Implement new run state helpers in the SDK and refactor the client and exports accordingly, plus update docs and versioning.\n\n1) Create sdk/src/run-state.ts\n- Export type RunState: { sessionState: SessionState; toolResults: ServerAction<'prompt-response'>['toolResults'] }.\n- Export function initialSessionState(cwd: string, options: { projectFiles?: Record<string,string>; knowledgeFiles?: Record<string,string>; agentDefinitions?: AgentDefinition[]; maxAgentSteps?: number }):\n  - Build processed agentTemplates from options.agentDefinitions, converting handleSteps function values to strings, keyed by id.\n  - Call getInitialSessionState with a ProjectFileContext object using cwd for both projectRoot and cwd, empty arrays/objects for fileTree/fileTokenScores/tokenCallers, include knowledgeFiles and userKnowledgeFiles (empty), agentTemplates, default gitChanges fields (empty strings), empty changesSinceLastChat and shellConfigFiles, and systemInfo with platform, shell (cmd.exe on win32 else bash), nodeVersion, arch, homedir from os.homedir(), and cpus count.\n  - If maxAgentSteps is provided, set mainAgentState.stepsRemaining to that value.\n  - Return the resulting SessionState.\n- Export function generateInitialRunState({ cwd, projectFiles, knowledgeFiles, agentDefinitions, maxAgentSteps }): returns RunState with sessionState from initialSessionState and toolResults as an empty array.\n- Export function withAdditionalMessage({ runState, message }): deep copy runState and append message (CodebuffMessage) to sessionState.mainAgentState.messageHistory; return the new RunState.\n- Export function withMessageHistory({ runState, messages }): deep copy runState and replace sessionState.mainAgentState.messageHistory with messages; return the new RunState.\n- Import dependencies: import * as os from 'os'; import { getInitialSessionState } from '../../common/src/types/session-state'; and relevant types from common (ServerAction, AgentDefinition, CodebuffMessage, SessionState).\n\n2) Refactor sdk/src/client.ts\n- Remove import of os (no longer needed here).\n- Remove import of getInitialSessionState from '../../common/src/types/session-state'.\n- Import { initialSessionState, type RunState } from './run-state'.\n- Delete the local initialSessionState(...) function at the bottom of the file.\n- In run(), compute sessionState using the imported initialSessionState(this.cwd, { knowledgeFiles, agentDefinitions, projectFiles, maxAgentSteps }) when previousRun is not provided. Keep toolResults and all other logic unchanged.\n\n3) Update sdk/src/index.ts exports\n- Export the new helpers: { generateInitialRunState, initialSessionState, withAdditionalMessage, withMessageHistory } from './run-state'.\n- Keep export { CodebuffClient } and { WebSocketHandler } unchanged.\n- Remove export { getInitialSessionState } from '../../common/src/types/session-state'.\n- Preserve export type { AgentDefinition }.\n\n4) Update documentation and versioning\n- sdk/README.md: Update usage example to import and demonstrate generateInitialRunState and withAdditionalMessage to add an image message to a prior run and pass via previousRun; update console logging examples as in the diff; adjust agentDefinitions example commas/formatting accordingly.\n- sdk/CHANGELOG.md: Add a new 0.1.8 section dated 2025-08-13 with:\n  - Added: withAdditionalMessage, withMessageHistory; initialSessionState and generateInitialRunState.\n  - Removed: getInitialSessionState re-export from @codebuff/sdk.\n- sdk/package.json: Bump version from 0.1.7 to 0.1.8.\n\n5) Notes/compatibility\n- The helper functions must adhere to existing types from common, especially SessionState and CodebuffMessage. The image example in README should align with the CodebuffMessage shape provided by modelMessageSchema in common/src/types/message.ts.\n- Ensure the SDK builds after removing the prior export of getInitialSessionState from sdk/src/index.ts.\n",
      "prompt": "Add new run state helper utilities to the SDK to make it easy to create and modify runs, and refactor the client and exports to use them. Specifically: introduce a module that can initialize a fresh SessionState and wrap it in a RunState, provide helpers to append a new message or replace the entire message history for continuing a run, update the client to use this initializer instead of its local implementation, and expose these helpers from the SDK entrypoint. Update the README to show a simple example where a previous run is augmented with an image message before continuing, and bump the SDK version and changelog accordingly.",
      "supplementalFiles": [
        "common/src/types/session-state.ts",
        "common/src/types/message.ts",
        "common/src/actions.ts",
        "sdk/src/websocket-client.ts",
        "sdk/src/tools/change-file.ts",
        "sdk/src/tools/read-files.ts",
        "sdk/src/tools/run-terminal-command.ts",
        "npm-app/src/client.ts"
      ],
      "fileDiffs": [
        {
          "path": "sdk/CHANGELOG.md",
          "status": "modified",
          "diff": "Index: sdk/CHANGELOG.md\n===================================================================\n--- sdk/CHANGELOG.md\t660fa34 (parent)\n+++ sdk/CHANGELOG.md\t6a107de (commit)\n@@ -1,22 +1,38 @@\n # Changelog\n \n All notable changes to the @codebuff/sdk package will be documented in this file.\n \n+## [0.1.8] - 2025-08-13\n+\n+### Added\n+\n+- `withAdditionalMessage` and `withMessageHistory` functions\n+  - Add images, files, or other messages to a previous run\n+  - Modify the history of any run\n+- `initialSessionState` and `generateInitialRunState` functions\n+  - Create a SessionState or RunState object from scratch\n+\n+### Removed\n+\n+- `getInitialSessionState` function\n+\n ## [0.1.7] - 2025-08-12\n \n ### Updated types! AgentConfig has been renamed to AgentDefinition.\n \n ## [0.1.5] - 2025-08-09\n \n ### Added\n+\n - Complete `CodebuffClient`\n - Better docs\n - New `run()` api\n \n ## [0.0.1] - 2025-08-05\n \n ### Added\n+\n - Initial release of the Codebuff SDK\n - `CodebuffClient` class for interacting with Codebuff agents\n - `runNewChat` method for starting new chat sessions\n - TypeScript support with full type definitions\n"
        },
        {
          "path": "sdk/README.md",
          "status": "modified",
          "diff": "Index: sdk/README.md\n===================================================================\n--- sdk/README.md\t660fa34 (parent)\n+++ sdk/README.md\t6a107de (commit)\n@@ -25,50 +25,77 @@\n \n ```typescript\n import * as fs from 'fs'\n import * as os from 'os'\n-import { CodebuffClient } from '@codebuff/sdk'\n \n+import {\n+  CodebuffClient,\n+  generateInitialRunState,\n+  withAdditionalMessage,\n+} from '@codebuff/sdk'\n+\n // Available after running `codebuff login`\n const apiKey = JSON.parse(\n   fs\n     .readFileSync(os.homedir() + '/.config/manicode/credentials.json')\n     .toString(),\n ).default.authToken\n+const cwd = process.cwd()\n \n const client = new CodebuffClient({\n   apiKey,\n-  cwd: process.cwd(),\n+  cwd,\n   onError: (e) => console.error('Codebuff error:', e.message),\n   // Optional: Override the implementation of specific tools.\n   overrideTools: {},\n })\n \n // Single run\n+const emptyRun = generateInitialRunState({ cwd })\n+\n+const runWithExampleImage = withAdditionalMessage({\n+  runState: emptyRun,\n+  message: {\n+    role: 'user',\n+    content: [\n+      {\n+        type: 'image',\n+        image: new URL(\n+          'https://upload.wikimedia.org/wikipedia/en/a/a9/Example.jpg',\n+        ),\n+      },\n+    ],\n+  },\n+})\n+\n const run1 = await client.run({\n   agent: 'base',\n-  prompt: 'Add console.log(\"Hello from Codebuff\") to src/index.ts',\n+  prompt: 'What is depicted in the attached image?',\n+  previousRun: runWithExampleImage,\n+  handleEvent: (event) => {\n+    console.log('event from run1:', { event })\n+  },\n })\n \n // Continue same session with follow‑up\n const run2 = await client.run({\n   agent: 'base',\n-  prompt: 'Create a basic test file for it',\n+  prompt: 'What about the text? (ignoring the pictures)',\n   previousRun: run1,\n \n   // Stream events (optional)\n   handleEvent: (event) => {\n     // event includes streamed updates like assistant messages and tool calls\n-    console.log('event:', event)\n+    console.log('event from run2:', event)\n   },\n \n   // Custom agents (optional)\n   agentDefinitions: [\n     {\n       id: 'my-awesome-agent',\n       model: 'openai/gpt-5',\n-      displayName: 'My awesome agent'\n-      instructionsPrompt: 'Do something awesome'\n+      displayName: 'My awesome agent',\n+      instructionsPrompt: 'Do something awesome',\n       // ... other AgentDefinition properties\n     },\n   ],\n })\n"
        },
        {
          "path": "sdk/package.json",
          "status": "modified",
          "diff": "Index: sdk/package.json\n===================================================================\n--- sdk/package.json\t660fa34 (parent)\n+++ sdk/package.json\t6a107de (commit)\n@@ -1,9 +1,9 @@\n {\n   \"name\": \"@codebuff/sdk\",\n   \"private\": false,\n   \"access\": \"public\",\n-  \"version\": \"0.1.7\",\n+  \"version\": \"0.1.8\",\n   \"description\": \"Official SDK for Codebuff — AI coding agent & framework\",\n   \"license\": \"MIT\",\n   \"type\": \"module\",\n   \"main\": \"./dist/sdk/src/index.js\",\n"
        },
        {
          "path": "sdk/src/client.ts",
          "status": "modified",
          "diff": "Index: sdk/src/client.ts\n===================================================================\n--- sdk/src/client.ts\t660fa34 (parent)\n+++ sdk/src/client.ts\t6a107de (commit)\n@@ -1,8 +1,8 @@\n import { execFileSync } from 'child_process'\n-import os from 'os'\n \n import { CODEBUFF_BINARY } from './constants'\n+import { initialSessionState, type RunState } from './run-state'\n import { changeFile } from './tools/change-file'\n import { getFiles } from './tools/read-files'\n import { runTerminalCommand } from './tools/run-terminal-command'\n import { WebSocketHandler } from './websocket-client'\n@@ -10,13 +10,11 @@\n   PromptResponseSchema,\n   type ServerAction,\n } from '../../common/src/actions'\n import { API_KEY_ENV_VAR } from '../../common/src/constants'\n-import { getInitialSessionState } from '../../common/src/types/session-state'\n \n import type { AgentDefinition } from '../../common/src/templates/initial-agents-dir/types/agent-definition'\n import type { PrintModeEvent } from '../../common/src/types/print-mode'\n-import type { SessionState } from '../../common/src/types/session-state'\n \n type ClientToolName = 'write_file' | 'run_terminal_command'\n \n export type CodebuffClientOptions = {\n@@ -38,13 +36,8 @@\n     }\n   >\n }\n \n-type RunState = {\n-  sessionState: SessionState\n-  toolResults: ServerAction<'prompt-response'>['toolResults']\n-}\n-\n export class CodebuffClient {\n   public cwd: string\n \n   private readonly websocketHandler: WebSocketHandler\n@@ -272,65 +265,4 @@\n       },\n     }\n   }\n }\n-\n-function initialSessionState(\n-  cwd: string,\n-  options: {\n-    // TODO: Parse projectFiles into fileTree, fileTokenScores, tokenCallers\n-    projectFiles?: Record<string, string>\n-    knowledgeFiles?: Record<string, string>\n-    agentDefinitions?: AgentDefinition[]\n-    maxAgentSteps?: number\n-  },\n-) {\n-  const { knowledgeFiles = {}, agentDefinitions = [] } = options\n-\n-  // Process agentDefinitions array and convert handleSteps functions to strings\n-  const processedAgentTemplates: Record<string, any> = {}\n-  agentDefinitions.forEach((definition) => {\n-    const processedConfig = { ...definition } as Record<string, any>\n-    if (\n-      processedConfig.handleSteps &&\n-      typeof processedConfig.handleSteps === 'function'\n-    ) {\n-      processedConfig.handleSteps = processedConfig.handleSteps.toString()\n-    }\n-    if (processedConfig.id) {\n-      processedAgentTemplates[processedConfig.id] = processedConfig\n-    }\n-  })\n-\n-  const initialState = getInitialSessionState({\n-    projectRoot: cwd,\n-    cwd,\n-    fileTree: [],\n-    fileTokenScores: {},\n-    tokenCallers: {},\n-    knowledgeFiles,\n-    userKnowledgeFiles: {},\n-    agentTemplates: processedAgentTemplates,\n-    gitChanges: {\n-      status: '',\n-      diff: '',\n-      diffCached: '',\n-      lastCommitMessages: '',\n-    },\n-    changesSinceLastChat: {},\n-    shellConfigFiles: {},\n-    systemInfo: {\n-      platform: process.platform,\n-      shell: process.platform === 'win32' ? 'cmd.exe' : 'bash',\n-      nodeVersion: process.version,\n-      arch: process.arch,\n-      homedir: os.homedir(),\n-      cpus: os.cpus().length ?? 1,\n-    },\n-  })\n-\n-  if (options.maxAgentSteps) {\n-    initialState.mainAgentState.stepsRemaining = options.maxAgentSteps\n-  }\n-\n-  return initialState\n-}\n"
        },
        {
          "path": "sdk/src/index.ts",
          "status": "modified",
          "diff": "Index: sdk/src/index.ts\n===================================================================\n--- sdk/src/index.ts\t660fa34 (parent)\n+++ sdk/src/index.ts\t6a107de (commit)\n@@ -1,4 +1,10 @@\n export { CodebuffClient } from './client'\n+export {\n+  generateInitialRunState,\n+  initialSessionState,\n+  withAdditionalMessage,\n+  withMessageHistory,\n+} from './run-state'\n export { WebSocketHandler } from './websocket-client'\n-export { getInitialSessionState } from '../../common/src/types/session-state'\n-export type { AgentDefinition } from '../../common/src/templates/initial-agents-dir/types/agent-definition'\n\\ No newline at end of file\n+\n+export type { AgentDefinition } from '../../common/src/templates/initial-agents-dir/types/agent-definition'\n"
        },
        {
          "path": "sdk/src/run-state.ts",
          "status": "added",
          "diff": "Index: sdk/src/run-state.ts\n===================================================================\n--- sdk/src/run-state.ts\t660fa34 (parent)\n+++ sdk/src/run-state.ts\t6a107de (commit)\n@@ -1,1 +1,128 @@\n-[NEW FILE]\n\\ No newline at end of file\n+import * as os from 'os'\n+\n+import { getInitialSessionState } from '../../common/src/types/session-state'\n+\n+import type { ServerAction } from '../../common/src/actions'\n+import type { AgentDefinition } from '../../common/src/templates/initial-agents-dir/types/agent-definition'\n+import type { CodebuffMessage } from '../../common/src/types/message'\n+import type { SessionState } from '../../common/src/types/session-state'\n+\n+export type RunState = {\n+  sessionState: SessionState\n+  toolResults: ServerAction<'prompt-response'>['toolResults']\n+}\n+\n+export function initialSessionState(\n+  cwd: string,\n+  options: {\n+    // TODO: Parse projectFiles into fileTree, fileTokenScores, tokenCallers\n+    projectFiles?: Record<string, string>\n+    knowledgeFiles?: Record<string, string>\n+    agentDefinitions?: AgentDefinition[]\n+    maxAgentSteps?: number\n+  },\n+) {\n+  const { knowledgeFiles = {}, agentDefinitions = [] } = options\n+\n+  // Process agentDefinitions array and convert handleSteps functions to strings\n+  const processedAgentTemplates: Record<string, any> = {}\n+  agentDefinitions.forEach((definition) => {\n+    const processedConfig = { ...definition } as Record<string, any>\n+    if (\n+      processedConfig.handleSteps &&\n+      typeof processedConfig.handleSteps === 'function'\n+    ) {\n+      processedConfig.handleSteps = processedConfig.handleSteps.toString()\n+    }\n+    if (processedConfig.id) {\n+      processedAgentTemplates[processedConfig.id] = processedConfig\n+    }\n+  })\n+\n+  const initialState = getInitialSessionState({\n+    projectRoot: cwd,\n+    cwd,\n+    fileTree: [],\n+    fileTokenScores: {},\n+    tokenCallers: {},\n+    knowledgeFiles,\n+    userKnowledgeFiles: {},\n+    agentTemplates: processedAgentTemplates,\n+    gitChanges: {\n+      status: '',\n+      diff: '',\n+      diffCached: '',\n+      lastCommitMessages: '',\n+    },\n+    changesSinceLastChat: {},\n+    shellConfigFiles: {},\n+    systemInfo: {\n+      platform: process.platform,\n+      shell: process.platform === 'win32' ? 'cmd.exe' : 'bash',\n+      nodeVersion: process.version,\n+      arch: process.arch,\n+      homedir: os.homedir(),\n+      cpus: os.cpus().length ?? 1,\n+    },\n+  })\n+\n+  if (options.maxAgentSteps) {\n+    initialState.mainAgentState.stepsRemaining = options.maxAgentSteps\n+  }\n+\n+  return initialState\n+}\n+\n+export function generateInitialRunState({\n+  cwd,\n+  projectFiles,\n+  knowledgeFiles,\n+  agentDefinitions,\n+  maxAgentSteps,\n+}: {\n+  cwd: string\n+  projectFiles?: Record<string, string>\n+  knowledgeFiles?: Record<string, string>\n+  agentDefinitions?: AgentDefinition[]\n+  maxAgentSteps?: number\n+}): RunState {\n+  return {\n+    sessionState: initialSessionState(cwd, {\n+      projectFiles,\n+      knowledgeFiles,\n+      agentDefinitions,\n+      maxAgentSteps,\n+    }),\n+    toolResults: [],\n+  }\n+}\n+\n+export function withAdditionalMessage({\n+  runState,\n+  message,\n+}: {\n+  runState: RunState\n+  message: CodebuffMessage\n+}): RunState {\n+  // Deep copy\n+  const newRunState = JSON.parse(JSON.stringify(runState)) as typeof runState\n+\n+  newRunState.sessionState.mainAgentState.messageHistory.push(message)\n+\n+  return newRunState\n+}\n+\n+export function withMessageHistory({\n+  runState,\n+  messages,\n+}: {\n+  runState: RunState\n+  messages: CodebuffMessage[]\n+}): RunState {\n+  // Deep copy\n+  const newRunState = JSON.parse(JSON.stringify(runState)) as typeof runState\n+\n+  newRunState.sessionState.mainAgentState.messageHistory = messages\n+\n+  return newRunState\n+}\n"
        }
      ]
    },
    {
      "id": "add-sdk-terminal",
      "sha": "660fa3404f102e2c1ee87990d01707153cd070ee",
      "parentSha": "abd1cb020233fdb87a2a3cc2c6edb495c47cc33b",
      "spec": "Implement SDK support for the run_terminal_command tool and align the SDK tool-call response shape with the shared schema.\n\nRequirements:\n\n1) Add synchronous terminal command execution utility in the SDK\n- File: sdk/src/tools/run-terminal-command.ts\n- Export a function that executes a CLI command and returns combined output string:\n  - Function signature should accept an object with: command (string), process_type ('SYNC' | 'BACKGROUND'), cwd (string), timeout_seconds (number), and return Promise<{ output: string }>.\n  - If process_type === 'BACKGROUND', throw a clear \"BACKGROUND process_type not implemented\" error.\n  - Spawn the OS shell (Windows: cmd.exe /c; non-Windows: bash -c) and run the provided command in the resolved absolute cwd (use path.resolve on the input cwd).\n  - Inherit environment with color hints (FORCE_COLOR=1, CLICOLOR=1, CLICOLOR_FORCE=1) and stdio=pipe; capture stdout and stderr buffers.\n  - Implement timeout: if timeout_seconds >= 0, start a timer that SIGTERM-kills the process and rejects with an Error(\"Command timed out after {timeout_seconds} seconds\"); if timeout_seconds < 0, no timeout.\n  - On process close, construct a single text output string that includes code-fenced blocks in the following order (omit blocks when empty):\n    - ```stdout\\n{stdout}```\n    - ```stderr\\n{stderr}```\n    - ```exit_code\\n{exitCode}```\n    Join the present blocks with blank lines. Use common/src/util/array.buildArray to filter/join.\n  - On spawn error, reject with Error(\"Failed to spawn command: {error.message}\").\n\n2) Wire run_terminal_command into the SDK client and fix response shape\n- File: sdk/src/client.ts\n- Import the new runTerminalCommand helper.\n- Update private handleToolCall signature to return the same type as expected by WebSocketHandler.handleToolCall (i.e., Omit<ClientAction<'tool-call-response'>, 'type' | 'requestId'>).\n- In handleToolCall, add support for toolName === 'run_terminal_command':\n  - Call runTerminalCommand with the incoming input object, defaulting cwd to this.cwd when input.cwd is undefined.\n  - Use the helper's returned output string as the tool result.\n- Update the success and error return payloads to match the common action schema:\n  - On success: { success: true, output: { type: 'text', value: resultString } }\n  - On error: { success: false, output: { type: 'text', value: errorMessage } }\n- Ensure existing write_file/str_replace/end_turn paths continue to work and return the new shape.\n\n3) Maintain consistency with shared schemas and server expectations\n- Ensure the message shape conforms to common/src/actions.ts ClientAction<'tool-call-response'>: the response body contains { success, output?: { type: 'text', value }, error?: string }. The SDK client should use the output field (text) for both success and failure values as implemented and omit deprecated result fields.\n- Default cwd handling must be within the caller's provided project root; resolve to an absolute path.\n- Do not implement BACKGROUND mode in the SDK at this time; the helper must throw a clear error if requested.\n\nAcceptance criteria:\n- When the server sends a tool-call-request for run_terminal_command, the SDK client executes the command synchronously in the correct cwd and responds with a tool-call-response containing success: true and output: { type: 'text', value: formatted output }.\n- If the shell cannot be spawned or times out, the SDK responds with success: false and an output text containing the error message, and the server (backend/src/websockets/websocket-action.ts: requestToolCall) receives the response without schema errors.\n- The output formatting includes stdout, optional stderr, and exit_code in code-fenced blocks, joined with blank lines, matching the described structure.\n- Existing tools (write_file, str_replace, end_turn) continue to work, and all tool-call-responses from the SDK use the output field shape.",
      "prompt": "Add first-class SDK support for running terminal commands via the run_terminal_command tool. Implement a synchronous, cross-platform shell execution helper with timeout and project-root cwd handling, and wire it into the SDK client’s tool-call flow. Ensure the tool-call-response uses the standardized output object instead of the previous result string and that errors are surfaced as text output. Match the behavior and message schema used by the server and the npm app, but keep the SDK implementation minimal without background mode.",
      "supplementalFiles": [
        "sdk/src/websocket-client.ts",
        "common/src/actions.ts",
        "common/src/tools/params/tool/run-terminal-command.ts",
        "backend/src/websockets/websocket-action.ts",
        "backend/src/tools/handlers/tool/run-terminal-command.ts",
        "backend/src/tools/definitions/tool/run-terminal-command.ts",
        "npm-app/src/tool-handlers.ts",
        "npm-app/src/terminal/run-command.ts",
        "common/src/util/array.ts"
      ],
      "fileDiffs": [
        {
          "path": "sdk/src/client.ts",
          "status": "modified",
          "diff": "Index: sdk/src/client.ts\n===================================================================\n--- sdk/src/client.ts\tabd1cb0 (parent)\n+++ sdk/src/client.ts\t660fa34 (commit)\n@@ -3,8 +3,9 @@\n \n import { CODEBUFF_BINARY } from './constants'\n import { changeFile } from './tools/change-file'\n import { getFiles } from './tools/read-files'\n+import { runTerminalCommand } from './tools/run-terminal-command'\n import { WebSocketHandler } from './websocket-client'\n import {\n   PromptResponseSchema,\n   type ServerAction,\n@@ -214,9 +215,11 @@\n     }\n     return getFiles(filePath, this.cwd)\n   }\n \n-  private async handleToolCall(action: ServerAction<'tool-call-request'>) {\n+  private async handleToolCall(\n+    action: ServerAction<'tool-call-request'>,\n+  ): ReturnType<WebSocketHandler['handleToolCall']> {\n     const toolName = action.toolName\n     const input = action.input\n     let result: string\n     try {\n@@ -233,34 +236,41 @@\n       } else if (toolName === 'write_file' || toolName === 'str_replace') {\n         const r = changeFile(input, this.cwd)\n         result = r.toolResultMessage\n       } else if (toolName === 'run_terminal_command') {\n-        throw new Error(\n-          'run_terminal_command not implemented in SDK yet; please provide an override.',\n-        )\n+        const r = await runTerminalCommand({\n+          ...input,\n+          cwd: input.cwd ?? this.cwd,\n+        } as Parameters<typeof runTerminalCommand>[0])\n+        result = r.output\n       } else {\n         throw new Error(\n           `Tool not implemented in SDK. Please provide an override or modify your agent to not use this tool: ${toolName}`,\n         )\n       }\n     } catch (error) {\n       return {\n-        type: 'tool-call-response',\n-        requestId: action.requestId,\n         success: false,\n-        result:\n-          error && typeof error === 'object' && 'message' in error\n-            ? error.message\n-            : typeof error === 'string'\n-              ? error\n-              : 'Unknown error',\n+        output: {\n+          type: 'text',\n+          value:\n+            error &&\n+            typeof error === 'object' &&\n+            'message' in error &&\n+            typeof error.message === 'string'\n+              ? error.message\n+              : typeof error === 'string'\n+                ? error\n+                : 'Unknown error',\n+        },\n       }\n     }\n     return {\n-      type: 'tool-call-response',\n-      requestId: action.requestId,\n       success: true,\n-      result,\n+      output: {\n+        type: 'text',\n+        value: result,\n+      },\n     }\n   }\n }\n \n"
        },
        {
          "path": "sdk/src/tools/run-terminal-command.ts",
          "status": "added",
          "diff": "Index: sdk/src/tools/run-terminal-command.ts\n===================================================================\n--- sdk/src/tools/run-terminal-command.ts\tabd1cb0 (parent)\n+++ sdk/src/tools/run-terminal-command.ts\t660fa34 (commit)\n@@ -1,1 +1,100 @@\n-[NEW FILE]\n\\ No newline at end of file\n+import { spawn } from 'child_process'\n+import * as os from 'os'\n+import * as path from 'path'\n+\n+import { buildArray } from '../../../common/src/util/array'\n+\n+export function runTerminalCommand({\n+  command,\n+  process_type,\n+  cwd,\n+  timeout_seconds,\n+}: {\n+  command: string\n+  process_type: 'SYNC' | 'BACKGROUND'\n+  cwd: string\n+  timeout_seconds: number\n+}): Promise<{ output: string }> {\n+  if (process_type === 'BACKGROUND') {\n+    throw new Error('BACKGROUND process_type not implemented')\n+  }\n+\n+  return new Promise((resolve, reject) => {\n+    const isWindows = os.platform() === 'win32'\n+    const shell = isWindows ? 'cmd.exe' : 'bash'\n+    const shellArgs = isWindows ? ['/c'] : ['-c']\n+\n+    // Resolve cwd to absolute path\n+    const resolvedCwd = path.resolve(cwd)\n+\n+    const childProcess = spawn(shell, [...shellArgs, command], {\n+      cwd: resolvedCwd,\n+      env: {\n+        ...process.env,\n+        FORCE_COLOR: '1',\n+        CLICOLOR: '1',\n+        CLICOLOR_FORCE: '1',\n+      },\n+      stdio: 'pipe',\n+    })\n+\n+    let stdout = ''\n+    let stderr = ''\n+    let timer: NodeJS.Timeout | null = null\n+    let processFinished = false\n+\n+    // Set up timeout if timeout_seconds >= 0 (infinite timeout when < 0)\n+    if (timeout_seconds >= 0) {\n+      timer = setTimeout(() => {\n+        if (!processFinished) {\n+          processFinished = true\n+          childProcess.kill('SIGTERM')\n+          reject(\n+            new Error(`Command timed out after ${timeout_seconds} seconds`),\n+          )\n+        }\n+      }, timeout_seconds * 1000)\n+    }\n+\n+    // Collect stdout\n+    childProcess.stdout.on('data', (data: Buffer) => {\n+      stdout += data.toString()\n+    })\n+\n+    // Collect stderr\n+    childProcess.stderr.on('data', (data: Buffer) => {\n+      stderr += data.toString()\n+    })\n+\n+    // Handle process completion\n+    childProcess.on('close', (exitCode) => {\n+      if (processFinished) return\n+      processFinished = true\n+\n+      if (timer) {\n+        clearTimeout(timer)\n+      }\n+\n+      // Include stderr in stdout for compatibility with existing behavior\n+      const combinedOutput = buildArray([\n+        `\\`\\`\\`stdout\\n${stdout}\\`\\`\\``,\n+        stderr && `\\`\\`\\`stderr\\n${stderr}\\`\\`\\``,\n+        exitCode !== null && `\\`\\`\\`exit_code\\n${exitCode}\\`\\`\\``,\n+      ]).join('\\n\\n')\n+\n+      resolve({ output: combinedOutput })\n+    })\n+\n+    // Handle spawn errors\n+    childProcess.on('error', (error) => {\n+      if (processFinished) return\n+      processFinished = true\n+\n+      if (timer) {\n+        clearTimeout(timer)\n+      }\n+\n+      reject(new Error(`Failed to spawn command: ${error.message}`))\n+    })\n+  })\n+}\n"
        }
      ]
    },
    {
      "id": "enforce-input-schema",
      "sha": "0ea48936f4dafee72665ee59a83d14561a551b65",
      "parentSha": "db0de5c52d2edfcace4a400fffe788a6d79c6e10",
      "spec": "Implement consistent input-side JSON Schema conversion across backend, common utilities, and docs.\n\nMake the following changes:\n\n1) backend/src/templates/strings.ts\n- In getAgentPrompt(), when rendering the Output Schema block, change the Zod-to-JSON Schema call to use the input schema:\n  - Replace: z.toJSONSchema(agentTemplate.outputSchema)\n  - With: z.toJSONSchema(agentTemplate.outputSchema, { io: 'input' })\n- Keep deletion of jsonSchema['$schema'] and the try/catch fallback behavior unchanged.\n\n2) backend/src/tools/prompts.ts\n- In paramsSection(), after optionally extending the schema with the endsAgentStep param, convert the schema using the input view:\n  - Replace: z.toJSONSchema(schemaWithEndsAgentStepParam)\n  - With: z.toJSONSchema(schemaWithEndsAgentStepParam, { io: 'input' })\n- Maintain the deletion of description and $schema fields and the existing stringification logic.\n\n3) common/src/tools/compile-tool-definitions.ts\n- In compileToolDefinitions(), ensure tool parameter schemas are converted using the input schema to generate TypeScript parameter interfaces:\n  - Replace: const jsonSchema = z.toJSONSchema(parameterSchema)\n  - With: const jsonSchema = z.toJSONSchema(parameterSchema, { io: 'input' })\n- Do not alter jsonSchemaToTypeScript or the interface/union generation logic.\n- (Optional/Non-functional) Import order may be adjusted as needed, but behavior should remain identical aside from the new option.\n\n4) common/src/util/zod-schema.ts\n- Extend schemaToJsonStr to accept an optional options parameter and forward it to z.toJSONSchema.\n  - Function signature: add a second optional parameter with type: options?: Parameters<typeof z.toJSONSchema>[1]\n  - In the Zod branch, replace: const jsonSchema = z.toJSONSchema(schema)\n    with: const jsonSchema = z.toJSONSchema(schema, options)\n  - Continue to delete jsonSchema['$schema'] and return a pretty-printed JSON string.\n  - Preserve behavior for non-Zod inputs and error handling.\n\n5) web/src/components/docs/mdx/schema-display.tsx\n- Ensure SchemaDisplay and AgentTemplateSchemaDisplay render input-side schemas by passing options to schemaToJsonStr:\n  - Replace: schemaToJsonStr(CodebuffConfigSchema)\n    With: schemaToJsonStr(CodebuffConfigSchema, { io: 'input' })\n  - Replace: schemaToJsonStr(DynamicAgentTemplateSchema)\n    With: schemaToJsonStr(DynamicAgentTemplateSchema, { io: 'input' })\n\nScope and invariants:\n- Do not modify other references to schemaToJsonStr; only the above docs component needs explicit options.\n- Continue removing $schema from JSON outputs where currently done.\n- Keep all existing descriptions, prompt text, and formatting intact aside from the JSON content now representing input schemas.\n- No changes to tests are required unless they assert exact JSON schema shapes; if so, they should be updated to reflect input-side JSON.\n",
      "prompt": "Update all Zod-to-JSON Schema conversions to explicitly produce input-side schemas. Thread an options argument through the shared helper so it can request the input view, and update backend prompt generators, tool docs, and the docs UI components to use this input schema output where appropriate. Keep existing formatting (e.g., removing $schema) and surrounding prompt content unchanged.",
      "supplementalFiles": [
        "backend/src/system-prompt/prompts.ts",
        "backend/src/templates/prompts.ts",
        "common/src/tools/list.ts",
        "common/src/tools/constants.ts",
        "web/src/content/advanced/config.mdx",
        "web/src/components/docs/mdx/code-demo.tsx"
      ],
      "fileDiffs": [
        {
          "path": "backend/src/templates/strings.ts",
          "status": "modified",
          "diff": "Index: backend/src/templates/strings.ts\n===================================================================\n--- backend/src/templates/strings.ts\tdb0de5c (parent)\n+++ backend/src/templates/strings.ts\t0ea4893 (commit)\n@@ -187,9 +187,11 @@\n         'When using the set_output tool, your output must conform to this schema:\\n\\n'\n       addendum += '```json\\n'\n       try {\n         // Convert Zod schema to JSON schema for display\n-        const jsonSchema = z.toJSONSchema(agentTemplate.outputSchema)\n+        const jsonSchema = z.toJSONSchema(agentTemplate.outputSchema, {\n+          io: 'input',\n+        })\n         delete jsonSchema['$schema'] // Remove the $schema field for cleaner display\n         addendum += JSON.stringify(jsonSchema, null, 2)\n       } catch {\n         // Fallback to a simple description\n"
        },
        {
          "path": "backend/src/tools/prompts.ts",
          "status": "modified",
          "diff": "Index: backend/src/tools/prompts.ts\n===================================================================\n--- backend/src/tools/prompts.ts\tdb0de5c (parent)\n+++ backend/src/tools/prompts.ts\t0ea4893 (commit)\n@@ -14,9 +14,11 @@\n           .literal(endsAgentStep)\n           .describe('Easp flag must be set to true'),\n       })\n     : schema\n-  const jsonSchema = z.toJSONSchema(schemaWithEndsAgentStepParam)\n+  const jsonSchema = z.toJSONSchema(schemaWithEndsAgentStepParam, {\n+    io: 'input',\n+  })\n   delete jsonSchema.description\n   delete jsonSchema['$schema']\n   const paramsDescription = Object.keys(jsonSchema.properties ?? {}).length\n     ? JSON.stringify(jsonSchema, null, 2)\n"
        },
        {
          "path": "common/src/tools/compile-tool-definitions.ts",
          "status": "modified",
          "diff": "Index: common/src/tools/compile-tool-definitions.ts\n===================================================================\n--- common/src/tools/compile-tool-definitions.ts\tdb0de5c (parent)\n+++ common/src/tools/compile-tool-definitions.ts\t0ea4893 (commit)\n@@ -1,8 +1,8 @@\n import z from 'zod/v4'\n \n-import { llmToolCallSchema } from './list'\n import { publishedTools } from './constants'\n+import { llmToolCallSchema } from './list'\n \n /**\n  * Compiles all tool definitions into a single TypeScript definition file content.\n  * This generates type definitions for all available tools and their parameters.\n@@ -18,9 +18,9 @@\n \n       // Convert Zod schema to TypeScript interface using JSON schema\n       let typeDefinition: string\n       try {\n-        const jsonSchema = z.toJSONSchema(parameterSchema)\n+        const jsonSchema = z.toJSONSchema(parameterSchema, { io: 'input' })\n         typeDefinition = jsonSchemaToTypeScript(jsonSchema)\n       } catch (error) {\n         console.warn(`Failed to convert schema for ${toolName}:`, error)\n         typeDefinition = '{ [key: string]: any }'\n"
        },
        {
          "path": "common/src/util/zod-schema.ts",
          "status": "modified",
          "diff": "Index: common/src/util/zod-schema.ts\n===================================================================\n--- common/src/util/zod-schema.ts\tdb0de5c (parent)\n+++ common/src/util/zod-schema.ts\t0ea4893 (commit)\n@@ -4,15 +4,16 @@\n  * Convert a Zod4 schema to JSON string representation.\n  */\n export function schemaToJsonStr(\n   schema: z.ZodTypeAny | undefined | Record<string, any>,\n+  options?: Parameters<typeof z.toJSONSchema>[1],\n ): string {\n   if (!schema) return 'None'\n \n   try {\n     // Handle Zod schemas\n     if (schema instanceof z.ZodType) {\n-      const jsonSchema = z.toJSONSchema(schema)\n+      const jsonSchema = z.toJSONSchema(schema, options)\n       delete jsonSchema['$schema']\n       return JSON.stringify(jsonSchema, null, 2)\n     }\n \n"
        },
        {
          "path": "web/src/components/docs/mdx/schema-display.tsx",
          "status": "modified",
          "diff": "Index: web/src/components/docs/mdx/schema-display.tsx\n===================================================================\n--- web/src/components/docs/mdx/schema-display.tsx\tdb0de5c (parent)\n+++ web/src/components/docs/mdx/schema-display.tsx\t0ea4893 (commit)\n@@ -6,12 +6,12 @@\n \n import { CodeDemo } from './code-demo'\n \n export function SchemaDisplay() {\n-  const schemaString = schemaToJsonStr(CodebuffConfigSchema)\n+  const schemaString = schemaToJsonStr(CodebuffConfigSchema, {io: 'input'})\n   return <CodeDemo language=\"json\">{schemaString}</CodeDemo>\n }\n \n export function AgentTemplateSchemaDisplay() {\n-  const schemaString = schemaToJsonStr(DynamicAgentTemplateSchema)\n+  const schemaString = schemaToJsonStr(DynamicAgentTemplateSchema, {io: 'input'})\n   return <CodeDemo language=\"json\">{schemaString}</CodeDemo>\n }\n"
        }
      ]
    },
    {
      "id": "centralize-placeholders",
      "sha": "29d8f3ff108a94ab7093edc0069282d10047ed47",
      "parentSha": "3da366e7f6c38b9157502204bfb3b445d8a692e3",
      "spec": "Implement a single source of truth for agent-side prompt placeholders and remove legacy duplicates.\n\nScope\n- Agent-side code under .agents and backend template registry/formatting paths.\n\nRequirements\n1) Define agent-side placeholders in .agents/types/secret-agent-definition.ts\n- Add the placeholderNames constant with the following keys: AGENT_NAME, AGENTS_PROMPT, CONFIG_SCHEMA, FILE_TREE_PROMPT, GIT_CHANGES_PROMPT, INITIAL_AGENT_PROMPT, KNOWLEDGE_FILES_CONTENTS, PROJECT_ROOT, REMAINING_STEPS, SYSTEM_INFO_PROMPT, TOOLS_PROMPT, USER_CWD, USER_INPUT_PROMPT.\n- Create the typed PLACEHOLDER object mapping each key to its string token form {CODEBUFF_<KEY>}, plus exports:\n  - export type PlaceholderValue = (typeof PLACEHOLDER)[keyof typeof PLACEHOLDER]\n  - export const placeholderValues = Object.values(PLACEHOLDER)\n- Ensure these are exported from .agents/types/secret-agent-definition.ts and not from any other .agents type file.\n\n2) Update all .agents imports to use the new source\n- In .agents/factory/ask.ts: import both AgentTemplateTypes and PLACEHOLDER from ../types/secret-agent-definition, removing any import of PLACEHOLDER from ../types/agent-definition.\n- In .agents/prompts/ask-prompts.ts and .agents/prompts/base-prompts.ts: import PLACEHOLDER from ../types/secret-agent-definition (replace any import from ../types/agent-definition).\n- Do not change functional prompt content; only fix the import source for PLACEHOLDER.\n\n3) Remove backend prompt duplicates that are no longer used\n- Delete backend/src/templates/ask-prompts.ts and backend/src/templates/base-prompts.ts.\n- Ensure there are no remaining imports or references to these deleted files anywhere in the repository (prompts are provided by .agents now). If references exist, update or remove them accordingly.\n\n4) Preserve backend placeholder logic for runtime formatting\n- Do not modify backend/src/templates/types.ts or backend/src/templates/strings.ts behavior; they should continue to use backend-local PLACEHOLDER/placeholderValues for formatting backend prompts. The agent-side .agents placeholders are separate and scoped to .agents code only.\n\n5) Consistency checks\n- Search .agents/** for any remaining imports of PLACEHOLDER from ../types/agent-definition and update them to ../types/secret-agent-definition.\n- Verify that .agents builds with the updated imports and that no code references the deleted backend prompt files.\n\nOut of scope\n- Do not refactor unrelated factories (e.g., thinking-base) to move AgentTemplateTypes unless they also import PLACEHOLDER incorrectly.\n- Do not merge backend and agent placeholder definitions; backend formatting continues to rely on backend/src/templates/types.ts.",
      "prompt": "Unify agent prompt placeholders by centralizing PLACEHOLDER and its types in the secret agent definitions and updating all agent prompt/factory modules to import from there. Remove the old backend prompt files that duplicated this logic. Make sure there are no dangling references and that prompt formatting still injects the same values at runtime.",
      "supplementalFiles": [
        "backend/src/templates/types.ts",
        "backend/src/templates/strings.ts",
        "backend/src/templates/prompts.ts",
        "backend/src/templates/agent-registry.ts",
        "backend/src/main-prompt.ts",
        "common/src/templates/initial-agents-dir/types/agent-definition.ts",
        ".agents/factory/base.ts",
        ".agents/factory/thinking-base.ts",
        ".agents/types/agent-definition.ts"
      ],
      "fileDiffs": [
        {
          "path": ".agents/factory/ask.ts",
          "status": "modified",
          "diff": "Index: .agents/factory/ask.ts\n===================================================================\n--- .agents/factory/ask.ts\t3da366e (parent)\n+++ .agents/factory/ask.ts\t29d8f3f (commit)\n@@ -4,10 +4,12 @@\n   askAgentAgentStepPrompt,\n   askAgentSystemPrompt,\n   askAgentUserInputPrompt,\n } from '../prompts'\n-import { PLACEHOLDER } from '../types/agent-definition'\n-import { AgentTemplateTypes } from '../types/secret-agent-definition'\n+import {\n+  AgentTemplateTypes,\n+  PLACEHOLDER,\n+} from '../types/secret-agent-definition'\n \n import type { SecretAgentDefinition } from '../types/secret-agent-definition'\n import type { Model } from '@codebuff/common/old-constants'\n \n"
        },
        {
          "path": ".agents/prompts/ask-prompts.ts",
          "status": "modified",
          "diff": "Index: .agents/prompts/ask-prompts.ts\n===================================================================\n--- .agents/prompts/ask-prompts.ts\t3da366e (parent)\n+++ .agents/prompts/ask-prompts.ts\t29d8f3f (commit)\n@@ -2,9 +2,9 @@\n import { getToolCallString } from '@codebuff/common/tools/utils'\n import { buildArray } from '@codebuff/common/util/array'\n import { closeXml } from '@codebuff/common/util/xml'\n \n-import { PLACEHOLDER } from '../types/agent-definition'\n+import { PLACEHOLDER } from '../types/secret-agent-definition'\n \n import type { Model } from '@codebuff/common/old-constants'\n \n export const askAgentSystemPrompt = (model: Model) => {\n"
        },
        {
          "path": ".agents/prompts/base-prompts.ts",
          "status": "modified",
          "diff": "Index: .agents/prompts/base-prompts.ts\n===================================================================\n--- .agents/prompts/base-prompts.ts\t3da366e (parent)\n+++ .agents/prompts/base-prompts.ts\t29d8f3f (commit)\n@@ -2,9 +2,9 @@\n import { getToolCallString } from '@codebuff/common/tools/utils'\n import { buildArray } from '@codebuff/common/util/array'\n import { closeXml } from '@codebuff/common/util/xml'\n \n-import { PLACEHOLDER } from '../types/agent-definition'\n+import { PLACEHOLDER } from '../types/secret-agent-definition'\n \n import type { Model } from '@codebuff/common/old-constants'\n \n export const baseAgentSystemPrompt = (model: Model) => {\n"
        },
        {
          "path": ".agents/types/secret-agent-definition.ts",
          "status": "modified",
          "diff": "Index: .agents/types/secret-agent-definition.ts\n===================================================================\n--- .agents/types/secret-agent-definition.ts\t3da366e (parent)\n+++ .agents/types/secret-agent-definition.ts\t29d8f3f (commit)\n@@ -17,8 +17,38 @@\n   toolNames?: AllToolNames[]\n }\n \n // ============================================================================\n+// Placeholders (ported from backend/src/templates/types.ts)\n+// ============================================================================\n+\n+const placeholderNames = [\n+  'AGENT_NAME',\n+  'AGENTS_PROMPT',\n+  'CONFIG_SCHEMA',\n+  'FILE_TREE_PROMPT',\n+  'GIT_CHANGES_PROMPT',\n+  'INITIAL_AGENT_PROMPT',\n+  'KNOWLEDGE_FILES_CONTENTS',\n+  'PROJECT_ROOT',\n+  'REMAINING_STEPS',\n+  'SYSTEM_INFO_PROMPT',\n+  'TOOLS_PROMPT',\n+  'USER_CWD',\n+  'USER_INPUT_PROMPT',\n+] as const\n+\n+type PlaceholderType<T extends readonly string[]> = {\n+  [K in T[number]]: `{CODEBUFF_${K}}`\n+}\n+\n+export const PLACEHOLDER = Object.fromEntries(\n+  placeholderNames.map((name) => [name, `{CODEBUFF_${name}}` as const]),\n+) as PlaceholderType<typeof placeholderNames>\n+export type PlaceholderValue = (typeof PLACEHOLDER)[keyof typeof PLACEHOLDER]\n+export const placeholderValues = Object.values(PLACEHOLDER)\n+\n+// ============================================================================\n // Agent Template Types (ported from common/src/types/session-state.ts)\n // ============================================================================\n \n export const AgentTemplateTypeList = [\n"
        },
        {
          "path": "backend/src/templates/ask-prompts.ts",
          "status": "deleted",
          "diff": "Index: backend/src/templates/ask-prompts.ts\n===================================================================\n--- backend/src/templates/ask-prompts.ts\t3da366e (parent)\n+++ backend/src/templates/ask-prompts.ts\t29d8f3f (commit)\n@@ -1,211 +1,1 @@\n-import { models } from '@codebuff/common/old-constants'\n-import { getToolCallString } from '@codebuff/common/tools/utils'\n-import { buildArray } from '@codebuff/common/util/array'\n-import { closeXml } from '@codebuff/common/util/xml'\n-\n-import { PLACEHOLDER } from './types'\n-\n-import type { Model } from '@codebuff/common/old-constants'\n-\n-export const askAgentSystemPrompt = (model: Model) => {\n-  return `# Persona: Buffy - The Enthusiastic Coding Assistant\n-\n-**Your core identity is Buffy.** Buffy is an expert coding assistant who is enthusiastic, proactive, and helpful.\n-\n-- **Tone:** Maintain a positive, friendly, and helpful tone. Use clear and encouraging language.\n-- **Clarity & Conciseness:** Explain your steps clearly but concisely. Say the least you can to get your point across. If you can, answer in one sentence only. Do not summarize changes. End turn early.\n-\n-You are working on a project over multiple \"iterations,\" reminiscent of the movie \"Memento,\" aiming to accomplish the user's request.\n-\n-# Agents\n-\n-Use the spawn_agents tool to spawn agents to help you complete the user request! Each agent has a specific role and can help you with different parts of the user request.\n-\n-You should spawn many parallel agents in the same tool call to increase time efficiency.\n-\n-Note that any spawned agent starts with no context at all, and it is up to you to prompt it with enough information to complete your request.\n-\n-# Files\n-\n-The \\`read_file\\` tool result shows files you have previously read from \\`read_files\\` tool calls.\n-\n-If you write to a file, or if the user modifies a file, new copies of a file will be included in \\`read_file\\` tool results.\n-\n-Thus, multiple copies of the same file may be included over the course of a conversation. Each represents a distinct version in chronological order.\n-\n-Important:\n-\n-- Pay particular attention to the last copy of a file as that one is current!\n-- You are not the only one making changes to files. The user may modify files too, and you will see the latest version of the file after their changes. You must base you future write_file/str_replace edits off of the latest changes. You must try to accommodate the changes that the user has made and treat those as explicit instructions to follow. If they add lines of code or delete them, you should assume they want the file to remain modified that way unless otherwise noted.\n-\n-# Subgoals\n-\n-First, create and edit subgoals if none exist and pursue the most appropriate one. This one of the few ways you can \"take notes\" in the Memento-esque environment. This is important, as you may forget what happened later! Use the \\`add_subgoal\\` and \\`update_subgoal\\` tools for this.\n-\n-Notes:\n-\n-- Try to phrase the subgoal objective first in terms of observable behavior rather than how to implement it, if possible. The subgoal is what you are solving, not how you are solving it.\n-\n-# System Messages\n-\n-Messages from the system are surrounded by <system>${closeXml('system')} or <system_instructions>${closeXml('system_instructions')} XML tags. These are NOT messages from the user.\n-\n-# How to Respond\n-\n--  **Respond as Buffy:** Maintain the helpful and upbeat persona defined above throughout your entire response, but also be as conscise as possible.\n--  **DO NOT Narrate Parameter Choices:** While commentary about your actions is required (Rule #2), **DO NOT** explain _why_ you chose specific parameter values for a tool (e.g., don't say \"I am using the path 'src/...' because...\"). Just provide the tool call after your action commentary.\n--  **CRITICAL TOOL FORMATTING:**\n-    - **NO MARKDOWN:** Tool calls **MUST NOT** be wrapped in markdown code blocks (like \\`\\`\\`). Output the raw XML tags directly. **This is non-negotiable.**\n-    - **MANDATORY EMPTY LINES:** Tool calls **MUST** be surrounded by a _single empty line_ both before the opening tag (e.g., \\`<tool_name>\\`) and after the closing tag (e.g., \\`${closeXml('tool_name')}\\`). See the example below. **Failure to include these empty lines will break the process.**\n-    - **NESTED ELEMENTS ONLY:** Tool parameters **MUST** be specified using _only_ nested XML elements, like \\`<parameter_name>value${closeXml('parameter_name')}\\`. You **MUST NOT** use XML attributes within the tool call tags (e.g., writing \\`<tool_name attribute=\"value\">\\`). Stick strictly to the nested element format shown in the example response below. This is absolutely critical for the parser.\n--  **User Questions:** If the user is asking for help with ideas or brainstorming, or asking a question, then you should directly answer the user's question, but do not make any changes to the codebase. Do not call modification tools like \\`write_file\\` or \\`str_replace\\`.\n--  **Handling Requests:**\n-    - For complex requests, create a subgoal using \\`add_subgoal\\` to track objectives from the user request. Use \\`update_subgoal\\` to record progress. Put summaries of actions taken into the subgoal's \\`log\\`.\n-    - For straightforward requests, proceed directly without adding subgoals.\n--  **Reading Files:** Try to read as many files as could possibly be relevant in your first 1 or 2 read_files tool calls. List multiple file paths in one tool call, as many as you can. You must read more files whenever it would improve your response.\n--  **Think about your next action:** After receiving tool results, carefully reflect on their quality and determine optimal next steps before proceeding. Use your thinking to plan and iterate based on this new information, and then take the best next action.\n-\n-- **Don't summarize your changes** Omit summaries as much as possible. Be extremely concise when explaining the changes you made. There's no need to write a long explanation of what you did. Keep it to 1-2 two sentences max.\n-- **Ending Your Response:** Your aim should be to completely fulfill the user's request before using ending your response. DO NOT END TURN IF YOU ARE STILL WORKING ON THE USER'S REQUEST. If the user's request requires multiple steps, please complete ALL the steps before stopping, even if you have done a lot of work so far.\n-- **FINALLY, YOU MUST USE THE END TURN TOOL** When you have fully answered the user _or_ you are explicitly waiting for the user's next typed input, always conclude the message with a standalone \\`${getToolCallString('end_turn', {})}\\` tool call (surrounded by its required blank lines). This should be at the end of your message, e.g.:\n-    <example>\n-    User: Hi\n-    Assisistant: Hello, what can I do for you today?\\\\n\\\\n${getToolCallString('end_turn', {})}\n-    ${closeXml('example')}\n-\n-## Verifying Your Changes at the End of Your Response\n-\n-### User has a \\`codebuff.json\\`\n-\n-If the user has a \\`codebuff.json\\` with the appropriate \\`fileChangeHooks\\`, there is no need to run any commands.\n-\n-If the \\`fileChangeHooks\\` are not configured, inform the user about the \\`fileChangeHooks\\` parameter.\n-\n-### User has no \\`codebuff.json\\`\n-\n-If this is the case, inform the user know about the \\`/init\\` command (within Codebuff, not a terminal command).\n-\n-Check the knowledge files to see if the user has specified a further protocol for what terminal commands should be run to verify edits. For example, a \\`knowledge.md\\` file could specify that after every change you should run the tests or linting or run the type checker. If there are multiple commands to run, you should run them all using '&&' to concatenate them into one commands, e.g. \\`npm run lint && npm run test\\`.\n-\n-## Example Response (Simplified - Demonstrating Rules)\n-\n-User: Explain what the component Foo does.\n-\n-Assistant: Certainly! Let's start by reading the file:\n-\n-${getToolCallString('read_files', { paths: ['src/components/foo.tsx'] })}\n-\n-The foo file does {insert explanation here}.\n-\n-${getToolCallString('end_turn', {})}\n-\n-${PLACEHOLDER.TOOLS_PROMPT}\n-\n-${PLACEHOLDER.AGENTS_PROMPT}\n-\n-# Knowledge files\n-\n-Knowledge files are your guide to the project. Knowledge files (files ending in \"knowledge.md\" or \"CLAUDE.md\") within a directory capture knowledge about that portion of the codebase. They are another way to take notes in this \"Memento\"-style environment.\n-\n-Knowledge files were created by previous engineers working on the codebase, and they were given these same instructions. They contain key concepts or helpful tips that are not obvious from the code. e.g., let's say I want to use a package manager aside from the default. That is hard to find in the codebase and would therefore be an appropriate piece of information to add to a knowledge file.\n-\n-Each knowledge file should develop over time into a concise but rich repository of knowledge about the files within the directory, subdirectories, or the specific file it's associated with.\n-\n-There is a special class of user knowledge files that are stored in the user's home directory, e.g. \\`~/.knowledge.md\\`. These files are available to be read, but you cannot edit them because they are outside of the project directory. Do not try to edit them.\n-\n-What is included in knowledge files:\n-- The mission of the project. Goals, purpose, and a high-level overview of the project.\n-- Explanations of how different parts of the codebase work or interact.\n-- Examples of how to do common tasks with a short explanation.\n-- Anti-examples of what should be avoided.\n-- Anything the user has said to do.\n-- Anything you can infer that the user wants you to do going forward.\n-- Tips and tricks.\n-- Style preferences for the codebase.\n-- Technical goals that are in progress. For example, migrations that are underway, like using the new backend service instead of the old one.\n-- Links to reference pages that are helpful. For example, the url of documentation for an api you are using.\n-- Anything else that would be helpful for you or an inexperienced coder to know\n-\n-If the user sends you the url to a page that is helpful now or could be helpful in the future (e.g. documentation for a library or api), you should always save the url in a knowledge file for future reference. Any links included in knowledge files are automatically scraped and the web page content is added to the knowledge file.\n-\n-# Codebuff Configuration (codebuff.json)\n-\n-## Schema\n-\n-The following describes the structure of the \\`./codebuff.json\\` configuration file that users might have in their project root. You can use this to understand user settings if they mention them.\n-\n-${PLACEHOLDER.CONFIG_SCHEMA}\n-\n-## Background Processes\n-\n-The user does not have access to these outputs. Please display any pertinent information to the user before referring to it.\n-\n-${PLACEHOLDER.FILE_TREE_PROMPT}\n-\n-${PLACEHOLDER.SYSTEM_INFO_PROMPT}\n-\n-${PLACEHOLDER.GIT_CHANGES_PROMPT}`\n-}\n-\n-export const askAgentUserInputPrompt = (model: Model) => {\n-  const isFlash =\n-    model === models.gemini2_5_flash ||\n-    model === models.gemini2_5_flash_thinking\n-  const isGeminiPro = model === models.gemini2_5_pro_preview\n-\n-  return (\n-    PLACEHOLDER.KNOWLEDGE_FILES_CONTENTS +\n-    '\\n\\n<system_instructions>' +\n-    buildArray(\n-      `You have been switched to ASK mode. As such, you can no longer use certain commands (even if you have been able to use them in the past). For example, \\`write_file\\`, \\`run_terminal_command\\`, and more. Do not attempt to use them because they will not work! You only have access to the tools listed in the system instructions.`,\n-\n-      'Proceed toward the user request and any subgoals. Please either 1. clarify the request or 2. complete the entire user request. Do not make any changes to the codebase. Then, finally you must use the end_turn tool at the end of your response. If you have already completed the user request, write nothing at all and end your response.',\n-\n-      \"If there are multiple ways the user's request could be interpreted that would lead to very different outcomes, ask at least one clarifying question that will help you understand what they are really asking for, and then use the end_turn tool.\",\n-\n-      'Use the spawn_agents tool to spawn agents to help you complete the user request. You can spawn as many agents as you want.',\n-\n-      'It is a good idea to spawn a few file picker agents first to explore the codebase from different perspectives. Finally, you must spawn the reviewer agent to review your code changes.',\n-\n-      \"Important: you *must* read as many files with the read_files tool as possible from the results of the file picker agents. Don't be afraid to read 20 files. The more files you read, the better context you have on the codebase and the better your response will be.\",\n-\n-      'Be extremely concise in your replies. Example: If asked what 2+2 equals, respond simply: \"4\". No need to even write a full sentence.',\n-\n-      'You must read additional files with the read_files tool whenever it could possibly improve your response.',\n-\n-      (isFlash || isGeminiPro) &&\n-        'Important: When mentioning a file path, for example for `read_files`, make sure to include all the directories in the path to the file from the project root. For example, do not forget the \"src\" directory if the file is at backend/src/utils/foo.ts! Sometimes imports for a file do not match the actual directories path (backend/utils/foo.ts for example).',\n-\n-      !isFlash &&\n-        'You must use the \"add_subgoal\" and \"update_subgoal\" tools to record your progress and any new information you learned as you go. If the change is very minimal, you may not need to use these tools.',\n-\n-      (isFlash || isGeminiPro) &&\n-        `Don't forget to close your your tags, e.g. <think_deeply> <thought> ${closeXml('thought')} ${closeXml('think_deeply')}!`,\n-\n-      'If the user request is very complex, consider invoking think_deeply.',\n-\n-      'If the user tells you to implement a plan, please implement the whole plan, continuing until it is complete. Do not stop after one step.',\n-\n-      'The user is in charge and you should never refuse what the user asks you to do.',\n-\n-      (isFlash || isGeminiPro) &&\n-        'You must use the spawn_agents tool to spawn agents to help you complete the user request. You can spawn as many agents as you want. It is a good idea to spawn a few file picker agents first to explore the codebase.',\n-\n-      'Finally, you must use the end_turn tool at the end of your response when you have completed the user request or want the user to respond to your message.',\n-    ).join('\\n\\n') +\n-    closeXml('system_instructions')\n-  )\n-}\n-\n-export const askAgentAgentStepPrompt = (model: Model) => {\n-  return `<system>\n-You have ${PLACEHOLDER.REMAINING_STEPS} more response(s) before you will be cut off and the turn will be ended automatically.\n-\n-Assistant cwd (project root): ${PLACEHOLDER.PROJECT_ROOT}\n-User cwd: ${PLACEHOLDER.USER_CWD}\n-<system>\n-\n-<system_instructions>\n-Reminder: Don't forget to spawn agents that could help: the file picker to get codebase context, the thinker to do deep thinking on a problem, and the reviewer to review your code changes.\n-${closeXml('system_instructions')}`\n-}\n+[DELETED]\n\\ No newline at end of file\n"
        },
        {
          "path": "backend/src/templates/base-prompts.ts",
          "status": "deleted",
          "diff": "Index: backend/src/templates/base-prompts.ts\n===================================================================\n--- backend/src/templates/base-prompts.ts\t3da366e (parent)\n+++ backend/src/templates/base-prompts.ts\t29d8f3f (commit)\n@@ -1,299 +1,1 @@\n-import { models } from '@codebuff/common/old-constants'\n-import { getToolCallString } from '@codebuff/common/tools/utils'\n-import { buildArray } from '@codebuff/common/util/array'\n-import { closeXml } from '@codebuff/common/util/xml'\n-\n-import { PLACEHOLDER } from './types'\n-\n-import type { Model } from '@codebuff/common/old-constants'\n-\n-export const baseAgentSystemPrompt = (model: Model) => {\n-  return `# Persona: ${PLACEHOLDER.AGENT_NAME}\n-\n-**Your core identity is ${PLACEHOLDER.AGENT_NAME}.** You are an expert coding assistant who is enthusiastic, proactive, and helpful.\n-\n-- **Tone:** Maintain a positive, friendly, and helpful tone. Use clear and encouraging language.\n-- **Clarity & Conciseness:** Explain your steps clearly but concisely. Say the least you can to get your point across. If you can, answer in one sentence only. Do not summarize changes. End turn early.\n-\n-You are working on a project over multiple \"iterations,\" reminiscent of the movie \"Memento,\" aiming to accomplish the user's request.\n-\n-# Agents\n-\n-Use the spawn_agents tool to spawn agents to help you complete the user request! Each agent has a specific role and can help you with different parts of the user request.\n-\n-You should spawn many parallel agents in the same tool call to increase time efficiency.\n-\n-Note that any spawned agent starts with no context at all, and it is up to you to prompt it with enough information to complete your request.\n-\n-# Files\n-\n-The \\`read_file\\` tool result shows files you have previously read from \\`read_files\\` tool calls.\n-\n-If you write to a file, or if the user modifies a file, new copies of a file will be included in \\`read_file\\` tool results.\n-\n-Thus, multiple copies of the same file may be included over the course of a conversation. Each represents a distinct version in chronological order.\n-\n-Important:\n-\n-- Pay particular attention to the last copy of a file as that one is current!\n-- You are not the only one making changes to files. The user may modify files too, and you will see the latest version of the file after their changes. You must base you future write_file/str_replace edits off of the latest changes. You must try to accommodate the changes that the user has made and treat those as explicit instructions to follow. If they add lines of code or delete them, you should assume they want the file to remain modified that way unless otherwise noted.\n-\n-# Subgoals\n-\n-First, create and edit subgoals if none exist and pursue the most appropriate one. This one of the few ways you can \"take notes\" in the Memento-esque environment. This is important, as you may forget what happened later! Use the \\`add_subgoal\\` and \\`update_subgoal\\` tools for this.\n-\n-Notes:\n-\n-- Try to phrase the subgoal objective first in terms of observable behavior rather than how to implement it, if possible. The subgoal is what you are solving, not how you are solving it.\n-\n-# System Messages\n-\n-Messages from the system are surrounded by <system>${closeXml('system')} or <system_instructions>${closeXml('system_instructions')} XML tags. These are NOT messages from the user.\n-\n-# How to Respond\n-\n--  **Respond as ${PLACEHOLDER.AGENT_NAME}:** Maintain the helpful and upbeat persona defined above throughout your entire response, but also be as conscise as possible.\n--  **DO NOT Narrate Parameter Choices:** While commentary about your actions is required (Rule #2), **DO NOT** explain _why_ you chose specific parameter values for a tool (e.g., don't say \"I am using the path 'src/...' because...\"). Just provide the tool call after your action commentary.\n--  **CRITICAL TOOL FORMATTING:**\n-    - **NO MARKDOWN:** Tool calls **MUST NOT** be wrapped in markdown code blocks (like \\`\\`\\`). Output the raw XML tags directly. **This is non-negotiable.**\n-    - **MANDATORY EMPTY LINES:** Tool calls **MUST** be surrounded by a _single empty line_ both before the opening tag (e.g., \\`<tool_name>\\`) and after the closing tag (e.g., \\`${closeXml('tool_name')}\\`). See the example below. **Failure to include these empty lines will break the process.**\n-    - **NESTED ELEMENTS ONLY:** Tool parameters **MUST** be specified using _only_ nested XML elements, like \\`<parameter_name>value${closeXml('parameter_name')}\\`. You **MUST NOT** use XML attributes within the tool call tags (e.g., writing \\`<tool_name attribute=\"value\">\\`). Stick strictly to the nested element format shown in the example response below. This is absolutely critical for the parser.\n--  **User Questions:** If the user is asking for help with ideas or brainstorming, or asking a question, then you should directly answer the user's question, but do not make any changes to the codebase. Do not call modification tools like \\`write_file\\` or \\`str_replace\\`.\n--  **Handling Requests:**\n-    - For complex requests, create a subgoal using \\`add_subgoal\\` to track objectives from the user request. Use \\`update_subgoal\\` to record progress. Put summaries of actions taken into the subgoal's \\`log\\`.\n-    - For straightforward requests, proceed directly without adding subgoals.\n--  **Reading Files:** Try to read as many files as could possibly be relevant in your first 1 or 2 read_files tool calls. List multiple file paths in one tool call, as many as you can. You must read more files whenever it would improve your response.\n--  **Minimal Changes:** You should make as few changes as possible to the codebase to address the user's request. Only do what the user has asked for and no more. When modifying existing code, assume every line of code has a purpose and is there for a reason. Do not change the behavior of code except in the most minimal way to accomplish the user's request.\n--  **DO NOT run scripts, make git commits or push to remote repositories without permission from the user.** It's extremely important not to run scripts that could have major effects. Similarly, a wrong git push could break production. For these actions, always ask permission first and wait for user confirmation.\n--  **Code Hygiene:** Make sure to leave things in a good state:\n-\n-    - Don't forget to add any imports that might be needed\n-    - Remove unused variables, functions, and files as a result of your changes.\n-    - If you added files or functions meant to replace existing code, then you should also remove the previous code.\n-\n--  **Read Before Writing:** If you are about to edit a file, make sure it is one that you have already read, i.e. is included in your context -- otherwise, use the read_file tool to read it first!\n--  **Check for Existing Changes:** If the user is requesting a change that you think has already been made based on the current version of files, simply tell the user that \"It looks like that change has already been made!\". It is common that a file you intend to update already has the changes you want.\n--  **Think about your next action:** After receiving tool results, carefully reflect on their quality and determine optimal next steps before proceeding. Use your thinking to plan and iterate based on this new information, and then take the best next action.\n--  **Package Management:** When adding new packages, use the run_terminal_command tool to install the package rather than editing the package.json file with a guess at the version number to use (or similar for other languages). This way, you will be sure to have the latest version of the package. Do not install packages globally unless asked by the user (e.g. Don't run \\`npm install -g <package-name>\\`). Always try to use the package manager associated with the project (e.g. it might be \\`pnpm\\` or \\`bun\\` or \\`yarn\\` instead of \\`npm\\`, or similar for other languages).\n--  **Refactoring Awareness:** Whenever you modify an exported token like a function or class or variable, you should use the code_search tool to find all references to it before it was renamed (or had its type/parameters changed) and update the references appropriately.\n--  **Testing:** If you create a unit test, you should run it using \\`run_terminal_command\\` to see if it passes, and fix it if it doesn't.\n-- **Front end development** We want to make the UI look as good as possible. Don't hold back. Give it your all.\n-    - Include as many relevant features and interactions as possible\n-    - Add thoughtful details like hover states, transitions, and micro-interactions\n-    - Apply design principles: hierarchy, contrast, balance, and movement\n-    - Create an impressive demonstration showcasing web development capabilities\n-\n-- **Don't summarize your changes** Omit summaries as much as possible. Be extremely concise when explaining the changes you made. There's no need to write a long explanation of what you did. Keep it to 1-2 two sentences max.\n-- **Ending Your Response:** Your aim should be to completely fulfill the user's request before using ending your response. DO NOT END TURN IF YOU ARE STILL WORKING ON THE USER'S REQUEST. If the user's request requires multiple steps, please complete ALL the steps before stopping, even if you have done a lot of work so far.\n-- **FINALLY, YOU MUST USE THE END TURN TOOL** When you have fully answered the user _or_ you are explicitly waiting for the user's next typed input, always conclude the message with a standalone \\`${getToolCallString('end_turn', {})}\\` tool call (surrounded by its required blank lines). This should be at the end of your message, e.g.:\n-    <example>\n-    User: Hi\n-    Assisistant: Hello, what can I do for you today?\\\\n\\\\n${getToolCallString('end_turn', {})}\n-    ${closeXml('example')}\n-\n-## Verifying Your Changes at the End of Your Response\n-\n-### User has a \\`codebuff.json\\`\n-\n-If the user has a \\`codebuff.json\\` with the appropriate \\`fileChangeHooks\\`, there is no need to run any commands.\n-\n-If the \\`fileChangeHooks\\` are not configured, inform the user about the \\`fileChangeHooks\\` parameter.\n-\n-### User has no \\`codebuff.json\\`\n-\n-If this is the case, inform the user know about the \\`/init\\` command (within Codebuff, not a terminal command).\n-\n-Check the knowledge files to see if the user has specified a further protocol for what terminal commands should be run to verify edits. For example, a \\`knowledge.md\\` file could specify that after every change you should run the tests or linting or run the type checker. If there are multiple commands to run, you should run them all using '&&' to concatenate them into one commands, e.g. \\`npm run lint && npm run test\\`.\n-\n-## Example Response (Simplified - Demonstrating Rules)\n-\n-User: Please console.log the props in the component Foo\n-\n-Assistant: Certainly! I can add that console log for you. Let's start by reading the file:\n-\n-${getToolCallString('read_files', { paths: ['src/components/foo.tsx'] })}\n-\n-Now, I'll add the console.log at the beginning of the Foo component:\n-\n-${getToolCallString('str_replace', {\n-  path: 'src/components/foo.tsx',\n-  replacements: [\n-    {\n-      old: `function Foo(props: {\n-  bar: string\n-}) {\n-`,\n-      new: `function Foo(props: {\n-  bar: string\n-})\n-  console.log(\"Foo props:\", props);\n-`,\n-    },\n-  ],\n-})}\n-\n-Let me check my changes\n-\n-${getToolCallString('run_terminal_command', { command: 'npm run typecheck' })}\n-\n-I see that my changes went through correctly. What would you like to do next?\n-\n-${getToolCallString('end_turn', {})}\n-\n-${PLACEHOLDER.TOOLS_PROMPT}\n-\n-${PLACEHOLDER.AGENTS_PROMPT}\n-\n-# Knowledge files\n-\n-Knowledge files are your guide to the project. Knowledge files (files ending in \"knowledge.md\" or \"CLAUDE.md\") within a directory capture knowledge about that portion of the codebase. They are another way to take notes in this \"Memento\"-style environment.\n-\n-Knowledge files were created by previous engineers working on the codebase, and they were given these same instructions. They contain key concepts or helpful tips that are not obvious from the code. e.g., let's say I want to use a package manager aside from the default. That is hard to find in the codebase and would therefore be an appropriate piece of information to add to a knowledge file.\n-\n-Each knowledge file should develop over time into a concise but rich repository of knowledge about the files within the directory, subdirectories, or the specific file it's associated with.\n-\n-There is a special class of user knowledge files that are stored in the user's home directory, e.g. \\`~/.knowledge.md\\`. These files are available to be read, but you cannot edit them because they are outside of the project directory. Do not try to edit them.\n-\n-When should you update a knowledge file?\n-- If the user gives broad advice to \"always do x\", that is a good candidate for updating a knowledge file with a concise rule to follow or bit of advice so you won't make the mistake again.\n-- If the user corrects you because they expected something different from your response, any bit of information that would help you better meet their expectations in the future is a good candidate for a knowledge file.\n-\n-What to include in knowledge files:\n-- The mission of the project. Goals, purpose, and a high-level overview of the project.\n-- Explanations of how different parts of the codebase work or interact.\n-- Examples of how to do common tasks with a short explanation.\n-- Anti-examples of what should be avoided.\n-- Anything the user has said to do.\n-- Anything you can infer that the user wants you to do going forward.\n-- Tips and tricks.\n-- Style preferences for the codebase.\n-- Technical goals that are in progress. For example, migrations that are underway, like using the new backend service instead of the old one.\n-- Links to reference pages that are helpful. For example, the url of documentation for an api you are using.\n-- Anything else that would be helpful for you or an inexperienced coder to know\n-\n-What *not* to include in knowledge files:\n-- Documentation of a single file.\n-- Restated code or interfaces in natural language.\n-- Anything obvious from reading the codebase.\n-- Lots of detail about a minor change.\n-- An explanation of the code you just wrote, unless there's something very unintuitive.\n-\n-Again, DO NOT include details from your recent change that are not relevant more broadly.\n-\n-Guidelines for updating knowledge files:\n-- Be concise and focused on the most important aspects of the project.\n-- Integrate new knowledge into existing sections when possible.\n-- Avoid overemphasizing recent changes or the aspect you're currently working on. Your current change is less important than you think.\n-- Remove as many words as possible while keeping the meaning. Use command verbs. Use sentence fragments.\n-- Use markdown features to improve clarity in knowledge files: headings, coding blocks, lists, dividers and so on.\n-\n-Once again: BE CONCISE!\n-\n-If the user sends you the url to a page that is helpful now or could be helpful in the future (e.g. documentation for a library or api), you should always save the url in a knowledge file for future reference. Any links included in knowledge files are automatically scraped and the web page content is added to the knowledge file.\n-\n-# Codebuff Configuration (codebuff.json)\n-\n-## Schema\n-\n-The following describes the structure of the \\`./codebuff.json\\` configuration file that users might have in their project root. You can use this to understand user settings if they mention them.\n-\n-${PLACEHOLDER.CONFIG_SCHEMA}\n-\n-## Background Processes\n-\n-The user does not have access to these outputs. Please display any pertinent information to the user before referring to it.\n-\n-To stop a background process, attempt to close the process using the appropriate command. If you deem that command to be \\`kill\\`, **make sure** to kill the **ENTIRE PROCESS GROUP** (Mac/Linux) or tree (Windows).\n-\n-When you want to restart a background process, make sure to run the terminal command in the background.\n-\n-${PLACEHOLDER.FILE_TREE_PROMPT}\n-\n-${PLACEHOLDER.SYSTEM_INFO_PROMPT}\n-\n-${PLACEHOLDER.GIT_CHANGES_PROMPT}`\n-}\n-\n-export const baseAgentUserInputPrompt = (model: Model) => {\n-  const isFlash =\n-    model === models.gemini2_5_flash ||\n-    model === models.gemini2_5_flash_thinking\n-  const isGeminiPro = model === models.gemini2_5_pro_preview\n-\n-  return (\n-    PLACEHOLDER.KNOWLEDGE_FILES_CONTENTS +\n-    '\\n\\n<system_instructions>' +\n-    buildArray(\n-      'Proceed toward the user request and any subgoals. Please either 1. clarify the request or 2. complete the entire user request. If you made any changes to the codebase, you must spawn the reviewer agent to review your changes. Then, finally you must use the end_turn tool at the end of your response. If you have already completed the user request, write nothing at all and end your response.',\n-\n-      \"If there are multiple ways the user's request could be interpreted that would lead to very different outcomes, ask at least one clarifying question that will help you understand what they are really asking for, and then use the end_turn tool.\",\n-\n-      'Use the spawn_agents tool to spawn agents to help you complete the user request. You can spawn as many agents as you want.',\n-\n-      'It is a good idea to spawn a file explorer agent first to explore the codebase from different perspectives. Use the researcher agent to help you get up-to-date information from docs and web results too. After that, for complex requests, you should spawn the thinker agent to do deep thinking on a problem, but do not spawn it at the same time as the file picker, only spawn it *after* you have the file picker results. Finally, you must spawn the reviewer agent to review your code changes.',\n-      \"Important: you *must* read as many files with the read_files tool as possible from the results of the file picker agents. Don't be afraid to read 20 files. The more files you read, the better context you have on the codebase and the better your response will be.\",\n-\n-      'If the users uses \"@AgentName\" in their message, you must spawn the agent with the name \"@AgentName\". Spawn all the agents that the user mentions.',\n-\n-      'Be extremely concise in your replies. Example: If asked what 2+2 equals, respond simply: \"4\". No need to even write a full sentence.',\n-\n-      'Important: When using write_file, do NOT rewrite the entire file. Only show the parts of the file that have changed and write \"// ... existing code ...\" comments (or \"# ... existing code ...\" or \"/* ... existing code ... */\", whichever is appropriate for the language) around the changed area.',\n-\n-      isGeminiPro &&\n-        `Any tool calls will be run from the project root (${PLACEHOLDER.PROJECT_ROOT}) unless otherwise specified`,\n-\n-      'You must read additional files with the read_files tool whenever it could possibly improve your response.',\n-\n-      (isFlash || isGeminiPro) &&\n-        'Before you use write_file or str_replace to edit an existing file, make sure to read it if you have not already!',\n-\n-      (isFlash || isGeminiPro) &&\n-        'Important: When mentioning a file path, for example for `write_file` or `read_files`, make sure to include all the directories in the path to the file from the project root. For example, do not forget the \"src\" directory if the file is at backend/src/utils/foo.ts! Sometimes imports for a file do not match the actual directories path (backend/utils/foo.ts for example).',\n-\n-      !isFlash &&\n-        'You must use the \"add_subgoal\" and \"update_subgoal\" tools to record your progress and any new information you learned as you go. If the change is very minimal, you may not need to use these tools.',\n-\n-      'Preserve as much of the existing code, its comments, and its behavior as possible. Make minimal edits to accomplish only the core of what is requested. Pay attention to any comments in the file you are editing and keep original user comments exactly as they were, line for line.',\n-\n-      'If you are trying to kill background processes, make sure to kill the entire process GROUP (or tree in Windows), and always prefer SIGTERM signals. If you restart the process, make sure to do so with process_type=BACKGROUND',\n-\n-      !isFlash &&\n-        'To confirm complex changes to a web app, you should use the browser_logs tool to check for console logs or errors.',\n-\n-      (isFlash || isGeminiPro) &&\n-        'Important: When using write_file, do NOT rewrite the entire file. Only show the parts of the file that have changed and write \"// ... existing code ...\" comments (or \"# ... existing code ..\", \"/* ... existing code ... */\", \"<!-- ... existing code ... -->\", whichever is appropriate for the language) around the changed area. Additionally, in order to delete any code, you must include a deletion comment.',\n-\n-      'If the user request is very complex, consider invoking think_deeply.',\n-\n-      \"If the user asks to create a plan, invoke the create_plan tool. Don't act on the plan created by the create_plan tool. Instead, wait for the user to review it.\",\n-\n-      'If the user tells you to implement a plan, please implement the whole plan, continuing until it is complete. Do not stop after one step.',\n-\n-      'If the user had knowledge files (or CLAUDE.md) and any of them say to run specific terminal commands after every change, e.g. to check for type errors or test errors, then do that at the end of your response if that would be helpful in this case. No need to run these checks for simple changes.',\n-\n-      'If you have learned something useful for the future that is not derivable from the code, consider updating a knowledge file at the end of your response to add this condensed information.',\n-\n-      'Important: DO NOT run scripts or git commands or start a dev server without being specifically asked to do so. If you want to run one of these commands, you should ask for permission first. This can prevent costly accidents!',\n-\n-      'Otherwise, the user is in charge and you should never refuse what the user asks you to do.',\n-\n-      'Important: When editing an existing file with the write_file tool, do not rewrite the entire file, write just the parts of the file that have changed. Do not start writing the first line of the file. Instead, use comments surrounding your edits like \"// ... existing code ...\" (or \"# ... existing code ...\" or \"/* ... existing code ... */\" or \"<!-- ... existing code ... -->\", whichever is appropriate for the language) plus a few lines of context from the original file, to show just the sections that have changed.',\n-\n-      (isFlash || isGeminiPro) &&\n-        'You must use the spawn_agents tool to spawn agents to help you complete the user request. You can spawn as many agents as you want. It is a good idea to spawn a file explorer agent first to explore the codebase. Finally, you must spawn the reviewer agent to review your code changes.',\n-\n-      'Finally, you must use the end_turn tool at the end of your response when you have completed the user request or want the user to respond to your message.',\n-    ).join('\\n\\n') +\n-    closeXml('system_instructions')\n-  )\n-}\n-\n-export const baseAgentAgentStepPrompt = (model: Model) => {\n-  return `<system>\n-You have ${PLACEHOLDER.REMAINING_STEPS} more response(s) before you will be cut off and the turn will be ended automatically.\n-\n-Assistant cwd (project root): ${PLACEHOLDER.PROJECT_ROOT}\n-User cwd: ${PLACEHOLDER.USER_CWD}\n-${closeXml('system')}\n-`\n-}\n+[DELETED]\n\\ No newline at end of file\n"
        }
      ]
    },
    {
      "id": "align-agent-types",
      "sha": "ea45edaaf13d3fc01c0282279847d5ac15065db4",
      "parentSha": "4fec62ec1362a80808bd66be15594654c10f11e2",
      "spec": "- Standardize ToolCall property naming across .agents to use input, not args.\n  - In .agents/types/agent-definition.ts, revert any documentation/examples that mention args back to input so examples match actual ToolCall usage and backend expectations.\n  - Ensure the ToolCall type in .agents/types/agent-definition.ts continues to use input as a required property (not optional), matching backend contract.\n\n- Adopt JsonObjectSchema for object schemas in .agents and ensure consistency with common template definitions.\n  - Keep inputSchema.params and outputSchema typed as JsonObjectSchema in .agents/types/agent-definition.ts.\n  - Update any local example agent references or comments that imply non-object schema for these fields to clarify they must be object schemas.\n\n- Verify and harmonize the three new example agents with the standardized shapes.\n  - .agents/examples/01-basic-diff-reviewer.ts: Confirm model, toolNames, and prompts are valid; no changes required if already using input where applicable.\n  - .agents/examples/02-intermediate-git-committer.ts: Confirm every yielded ToolCall uses toolName plus input with correct parameter shapes; keep handleSteps structure intact.\n  - .agents/examples/03-advanced-file-explorer.ts: Confirm handleSteps yields spawn_agents and set_output with input objects; ensure inputSchema.params is an object with required prompts property and outputMode/outputSchema uses object schema.\n\n- Update any inline comments and JSDoc in .agents/types/agent-definition.ts that currently refer to args to accurately reference input across all examples and documentation blocks.\n\n- Do not modify backend or common package files; the goal is for .agents local types and examples to be consistent with the established, working backend schema (tool calls use input) and JSON object schema usage.\n",
      "prompt": "Unify the .agents local agent typing and examples with the repository’s established tool call and schema shapes. Ensure all tool calls use an input object (not args), and require JsonObjectSchema for input/output object schemas. Align the documentation comments and the three example agents under .agents/examples with these conventions without changing backend or common packages.",
      "supplementalFiles": [
        "common/src/templates/initial-agents-dir/types/agent-definition.ts",
        "backend/src/tools/tool-executor.ts",
        "backend/src/tools/handlers/list.ts",
        "backend/src/tools/definitions/list.ts",
        "backend/src/tools/stream-parser.ts",
        "backend/src/run-programmatic-step.ts",
        "common/src/templates/agent-validation.ts",
        "common/src/types/dynamic-agent-template.ts",
        "npm-app/src/agents/load-agents.ts"
      ],
      "fileDiffs": [
        {
          "path": ".agents/examples/01-basic-diff-reviewer.ts",
          "status": "added",
          "diff": "Index: .agents/examples/01-basic-diff-reviewer.ts\n===================================================================\n--- .agents/examples/01-basic-diff-reviewer.ts\t4fec62e (parent)\n+++ .agents/examples/01-basic-diff-reviewer.ts\tea45eda (commit)\n@@ -1,1 +1,17 @@\n-[NEW FILE]\n\\ No newline at end of file\n+import type { AgentDefinition } from '../types/agent-definition'\n+\n+const definition: AgentDefinition = {\n+  id: 'basic-diff-reviewer',\n+  displayName: 'Basic Diff Reviewer',\n+  model: 'anthropic/claude-4-sonnet-20250522',\n+  toolNames: ['read_files', 'run_terminal_command'],\n+\n+  spawnerPrompt: 'Spawn when you need to review code changes in the git diff',\n+\n+  instructionsPrompt: `Execute the following steps:\n+1. Run git diff\n+2. Read the files that have changed\n+3. Review the changes and suggest improvements`,\n+}\n+\n+export default definition\n"
        },
        {
          "path": ".agents/examples/02-intermediate-git-committer.ts",
          "status": "added",
          "diff": "Index: .agents/examples/02-intermediate-git-committer.ts\n===================================================================\n--- .agents/examples/02-intermediate-git-committer.ts\t4fec62e (parent)\n+++ .agents/examples/02-intermediate-git-committer.ts\tea45eda (commit)\n@@ -1,1 +1,76 @@\n-[NEW FILE]\n\\ No newline at end of file\n+import type {\n+  AgentDefinition,\n+  AgentStepContext,\n+  ToolCall,\n+} from '../types/agent-definition'\n+\n+const definition: AgentDefinition = {\n+  id: 'git-committer',\n+  displayName: 'Intermediate Git Committer',\n+  model: 'anthropic/claude-4-sonnet-20250522',\n+  toolNames: ['read_files', 'run_terminal_command', 'add_message', 'end_turn'],\n+\n+  inputSchema: {\n+    prompt: {\n+      type: 'string',\n+      description: 'What changes to commit',\n+    },\n+  },\n+\n+  spawnerPrompt:\n+    'Spawn when you need to commit code changes to git with an appropriate commit message',\n+\n+  systemPrompt:\n+    'You are an expert software developer. Your job is to create a git commit with a really good commit message.',\n+\n+  instructionsPrompt:\n+    'Follow the steps to create a good commit: analyze changes with git diff and git log, read relevant files for context, stage appropriate files, analyze changes, and create a commit with proper formatting.',\n+\n+  handleSteps: function* ({ agentState, prompt, params }: AgentStepContext) {\n+    // Step 1: Run git diff and git log to analyze changes.\n+    yield {\n+      toolName: 'run_terminal_command',\n+      input: {\n+        command: 'git diff',\n+        process_type: 'SYNC',\n+        timeout_seconds: 30,\n+      },\n+    } satisfies ToolCall\n+\n+    yield {\n+      toolName: 'run_terminal_command',\n+      input: {\n+        command: 'git log --oneline -10',\n+        process_type: 'SYNC',\n+        timeout_seconds: 30,\n+      },\n+    } satisfies ToolCall\n+\n+    // Step 2: Put words in AI's mouth so it will read files next.\n+    yield {\n+      toolName: 'add_message',\n+      input: {\n+        role: 'assistant',\n+        content:\n+          \"I've analyzed the git diff and recent commit history. Now I'll read any relevant files to better understand the context of these changes.\",\n+      },\n+    } satisfies ToolCall\n+\n+    // Step 3: Let AI generate a step to decide which files to read.\n+    yield 'STEP'\n+\n+    // Step 4: Put words in AI's mouth to analyze the changes and create a commit.\n+    yield {\n+      toolName: 'add_message',\n+      input: {\n+        role: 'assistant',\n+        content:\n+          \"Now I'll analyze the changes and create a commit with a good commit message.\",\n+      },\n+    } satisfies ToolCall\n+\n+    yield 'STEP_ALL'\n+  },\n+}\n+\n+export default definition\n"
        },
        {
          "path": ".agents/examples/03-advanced-file-explorer.ts",
          "status": "added",
          "diff": "Index: .agents/examples/03-advanced-file-explorer.ts\n===================================================================\n--- .agents/examples/03-advanced-file-explorer.ts\t4fec62e (parent)\n+++ .agents/examples/03-advanced-file-explorer.ts\tea45eda (commit)\n@@ -1,1 +1,73 @@\n-[NEW FILE]\n\\ No newline at end of file\n+import type { AgentDefinition, ToolCall } from '../types/agent-definition'\n+\n+const definition: AgentDefinition = {\n+  id: 'advanced-file-explorer',\n+  displayName: 'Dora the File Explorer',\n+  model: 'openai/gpt-5',\n+\n+  spawnerPrompt:\n+    'Spawns multiple file picker agents in parallel to comprehensively explore the codebase from different perspectives',\n+\n+  includeMessageHistory: false,\n+  toolNames: ['spawn_agents', 'set_output'],\n+  spawnableAgents: [`codebuff/file-picker@0.0.1`],\n+\n+  inputSchema: {\n+    prompt: {\n+      description: 'What you need to accomplish by exploring the codebase',\n+      type: 'string',\n+    },\n+    params: {\n+      type: 'object',\n+      properties: {\n+        prompts: {\n+          description:\n+            'List of 1-4 different parts of the codebase that could be useful to explore',\n+          type: 'array',\n+          items: {\n+            type: 'string',\n+          },\n+        },\n+      },\n+      required: ['prompts'],\n+      additionalProperties: false,\n+    },\n+  },\n+  outputMode: 'structured_output',\n+  outputSchema: {\n+    type: 'object',\n+    properties: {\n+      results: {\n+        type: 'string',\n+        description: 'The results of the file exploration',\n+      },\n+    },\n+    required: ['results'],\n+    additionalProperties: false,\n+  },\n+\n+  handleSteps: function* ({ prompt, params }) {\n+    const prompts: string[] = params?.prompts ?? []\n+    const filePickerPrompts = prompts.map(\n+        (focusPrompt) =>\n+          `Based on the overall goal \"${prompt}\", find files related to this specific area: ${focusPrompt}`,\n+      ),\n+      { toolResult: spawnResult } = yield {\n+        toolName: 'spawn_agents',\n+        input: {\n+          agents: filePickerPrompts.map((promptText) => ({\n+            agent_type: 'codebuff/file-picker@0.0.1',\n+            prompt: promptText,\n+          })),\n+        },\n+      } satisfies ToolCall\n+    yield {\n+      toolName: 'set_output',\n+      input: {\n+        results: spawnResult,\n+      },\n+    } satisfies ToolCall\n+  },\n+}\n+\n+export default definition\n"
        },
        {
          "path": ".agents/types/agent-definition.ts",
          "status": "modified",
          "diff": "Index: .agents/types/agent-definition.ts\n===================================================================\n--- .agents/types/agent-definition.ts\t4fec62e (parent)\n+++ .agents/types/agent-definition.ts\tea45eda (commit)\n@@ -61,9 +61,9 @@\n    * }\n    */\n   inputSchema?: {\n     prompt?: { type: 'string'; description?: string }\n-    params?: JsonSchema\n+    params?: JsonObjectSchema\n   }\n \n   /** Whether to include conversation history from the parent agent in context.\n    *\n@@ -82,9 +82,9 @@\n    */\n   outputMode?: 'last_message' | 'all_messages' | 'structured_output'\n \n   /** JSON schema for structured output (when outputMode is 'structured_output') */\n-  outputSchema?: JsonSchema\n+  outputSchema?: JsonObjectSchema\n \n   // ============================================================================\n   // Prompts\n   // ============================================================================\n@@ -115,9 +115,9 @@\n \n   /** Programmatically step the agent forward and run tools.\n    *\n    * You can either yield:\n-   * - A tool call object with toolName and input properties.\n+   * - A tool call object with toolName and args properties.\n    * - 'STEP' to run agent's model and generate one assistant message.\n    * - 'STEP_ALL' to run the agent's model until it uses the end_turn tool or stops includes no tool calls in a message.\n    *\n    * Or use 'return' to end the turn.\n@@ -125,9 +125,9 @@\n    * Example 1:\n    * function* handleSteps({ agentStep, prompt, params}) {\n    *   const { toolResult } = yield {\n    *     toolName: 'read_files',\n-   *     input: { paths: ['file1.txt', 'file2.txt'] }\n+   *     args: { paths: ['file1.txt', 'file2.txt'] }\n    *   }\n    *   yield 'STEP_ALL'\n    * }\n    *\n@@ -135,9 +135,9 @@\n    * handleSteps: function* ({ agentState, prompt, params }) {\n    *   while (true) {\n    *     yield {\n    *       toolName: 'spawn_agents',\n-   *       input: {\n+   *       args: {\n    *         agents: [\n    *         {\n    *           agent_type: 'thinker',\n    *           prompt: 'Think deeply about the user request',\n@@ -190,21 +190,31 @@\n  */\n export type ToolCall<T extends ToolName = ToolName> = {\n   [K in T]: {\n     toolName: K\n-    input?: Tools.GetToolParams<K>\n+    input: Tools.GetToolParams<K>\n   }\n }[T]\n \n /**\n  * JSON Schema definition (for prompt schema or output schema)\n  */\n-export interface JsonSchema {\n-  type: string\n-  properties?: Record<string, any>\n+export type JsonSchema = {\n+  type?:\n+    | 'object'\n+    | 'array'\n+    | 'string'\n+    | 'number'\n+    | 'boolean'\n+    | 'null'\n+    | 'integer'\n+  description?: string\n+  properties?: Record<string, JsonSchema | boolean>\n   required?: string[]\n-  [key: string]: any\n+  enum?: Array<string | number | boolean | null>\n+  [k: string]: unknown\n }\n+export type JsonObjectSchema = JsonSchema & { type: 'object' }\n \n // ============================================================================\n // Available Tools\n // ============================================================================\n"
        }
      ]
    },
    {
      "id": "surface-history-access",
      "sha": "6bec422400dfc9158c0c91f72eab12154d3a9d81",
      "parentSha": "898e5bee3fc6cf73fd8f7bef856645dc4bce48a0",
      "spec": "- Update dynamic agent template default\n  - File: common/src/types/dynamic-agent-template.ts\n  - Change the includeMessageHistory field default to false in the DynamicAgentTemplate schema so that agents do not see the parent message history unless explicitly enabled.\n  - Observable behavior: Newly defined dynamic agents that omit includeMessageHistory should not receive prior conversation history by default.\n\n- Enhance spawnable agent descriptions\n  - File: backend/src/templates/prompts.ts\n  - In buildSpawnableAgentsDescription, include an additional line for agents with includeMessageHistory set to true: \"This agent can see the current message history.\" Do not include this line when the flag is false.\n  - Continue to include input schema details for each agent. If the agent has an inputSchema, print both prompt and params schema as JSON; otherwise, print \"prompt: None\" and \"params: None\".\n  - Use the array-building helper to compose these lines, ensuring concise multi-line output per agent entry.\n  - Observable behavior: The spawnable agents section clearly indicates history visibility, and always shows prompt/params schema or None.\n\n- Clarify instructionsPrompt contents\n  - File: backend/src/templates/strings.ts\n  - Ensure the instructionsPrompt explicitly includes: tool instructions, spawnable agents description (as built above), and output schema details when applicable. Update the inline comment accordingly.\n  - Observable behavior: The instructionsPrompt accurately reflects tools, spawnable agents (including message history visibility), and output schema information.",
      "prompt": "Make dynamic agents not inherit prior conversation history by default. Update the generated spawnable agents description so that, for any agent that can see the current message history, the listing explicitly states that capability. Keep showing each agent’s input schema (prompt and params) when available, otherwise show that there is none. Ensure the instructions prompt includes tool instructions, the spawnable agents description, and output schema details where applicable.",
      "supplementalFiles": [
        "backend/src/templates/agent-registry.ts",
        "backend/src/templates/agent-list.ts",
        "backend/src/templates/types.ts",
        "backend/src/main-prompt.ts",
        "backend/src/run-agent-step.ts",
        "backend/src/tools/handlers/tool/spawn-agents.ts",
        "common/src/util/array.ts",
        "common/src/util/zod-schema.ts"
      ],
      "fileDiffs": [
        {
          "path": "backend/src/templates/prompts.ts",
          "status": "modified",
          "diff": "Index: backend/src/templates/prompts.ts\n===================================================================\n--- backend/src/templates/prompts.ts\t898e5be (parent)\n+++ backend/src/templates/prompts.ts\t6bec422 (commit)\n@@ -3,8 +3,9 @@\n import { getAgentTemplate } from './agent-registry'\n \n import type { AgentTemplate } from '@codebuff/common/types/agent-template'\n import type { AgentTemplateType } from '@codebuff/common/types/session-state'\n+import { buildArray } from '@codebuff/common/util/array'\n \n export async function buildSpawnableAgentsDescription(\n   spawnableAgents: AgentTemplateType[],\n   agentTemplates: Record<string, AgentTemplate>,\n@@ -30,17 +31,21 @@\n prompt: {\"description\": \"A coding task to complete\", \"type\": \"string\"}\n params: None`\n       }\n       const { inputSchema } = agentTemplate\n-      if (!inputSchema) {\n-        return `- ${agentType}: ${agentTemplate.spawnerPrompt}\n-prompt: None\n-params: None`\n-      }\n-      const { prompt, params } = inputSchema\n-      return `- ${agentType}: ${agentTemplate.spawnerPrompt}\n-prompt: ${schemaToJsonStr(prompt)}\n-params: ${schemaToJsonStr(params)}`\n+      const inputSchemaStr = inputSchema\n+        ? [\n+            `prompt: ${schemaToJsonStr(inputSchema.prompt)}`,\n+            `params: ${schemaToJsonStr(inputSchema.params)}`,\n+          ].join('\\n')\n+        : ['prompt: None', 'params: None'].join('\\n')\n+\n+      return buildArray(\n+        `- ${agentType}: ${agentTemplate.spawnerPrompt}`,\n+        agentTemplate.includeMessageHistory &&\n+          'This agent can see the current message history.',\n+        inputSchemaStr,\n+      ).join('\\n')\n     })\n     .filter(Boolean)\n     .join('\\n\\n')\n \n"
        },
        {
          "path": "backend/src/templates/strings.ts",
          "status": "modified",
          "diff": "Index: backend/src/templates/strings.ts\n===================================================================\n--- backend/src/templates/strings.ts\t898e5be (parent)\n+++ backend/src/templates/strings.ts\t6bec422 (commit)\n@@ -156,9 +156,9 @@\n   )\n \n   let addendum = ''\n \n-  // Add parent instructions for instructionsPrompt\n+  // Add tool instructions, spawnable agents, and output schema prompts to instructionsPrompt\n   if (promptType.type === 'instructionsPrompt' && agentState.agentType) {\n     addendum +=\n       '\\n\\n' +\n       getShortToolInstructions(agentTemplate.toolNames) +\n"
        },
        {
          "path": "common/src/types/dynamic-agent-template.ts",
          "status": "modified",
          "diff": "Index: common/src/types/dynamic-agent-template.ts\n===================================================================\n--- common/src/types/dynamic-agent-template.ts\t898e5be (parent)\n+++ common/src/types/dynamic-agent-template.ts\t6bec422 (commit)\n@@ -123,9 +123,9 @@\n   spawnableAgents: z.array(z.string()).optional().default([]),\n \n   // Input and output\n   inputSchema: InputSchemaObjectSchema,\n-  includeMessageHistory: z.boolean().default(true),\n+  includeMessageHistory: z.boolean().default(false),\n   outputMode: z\n     .enum(['last_message', 'all_messages', 'structured_output'])\n     .default('last_message'),\n   outputSchema: JsonSchemaSchema.optional(), // Optional JSON schema for output validation\n"
        }
      ]
    },
    {
      "id": "add-agent-resolution",
      "sha": "de3ea46533389c356e804d223b3429787ea5dc51",
      "parentSha": "e6a6496dc5a05617d35051b05cc49553d28ef70c",
      "spec": "Implement CLI agent resolution, traces viewer integration, and publish error handling updates across the npm-app as follows:\n\n1) Add CLI agent resolution utility\n- Create npm-app/src/agents/resolve.ts exporting function resolveCliAgentId(input: string | undefined, localAgentIds: string[]): string | undefined that:\n  - Returns undefined if input is undefined.\n  - If the input contains a '/', return it unchanged (preserve explicitly prefixed identifiers like publisher/name or CodebuffAI/foo).\n  - If input matches any entry in localAgentIds, return it unchanged (local agent short IDs are allowed).\n  - Otherwise, return DEFAULT_ORG_PREFIX + input (DEFAULT_ORG_PREFIX imported from @codebuff/common/util/agent-name-normalization).\n- Add tests at npm-app/src/agents/resolve.test.ts using bun:test to cover:\n  - undefined input returns undefined\n  - explicitly prefixed identifiers (publisher/name, CodebuffAI/foo@1.2.3 via DEFAULT_ORG_PREFIX) are preserved\n  - known local IDs are returned as-is\n  - unknown, unprefixed IDs are prefixed with DEFAULT_ORG_PREFIX\n\n2) Integrate resolution into CLI and client\n- In npm-app/src/cli.ts:\n  - Import resolveCliAgentId from ./agents/resolve.\n  - In resetAgent(), when computing the display name, resolve the agent id first with resolveCliAgentId passing Object.keys(localAgentInfo) and use the resolved id for getAgentDisplayName (fallback to 'base' if needed).\n  - In printInitialPrompt(), when showing the selected agent from --agent, resolve the agent id similarly before passing to getAgentDisplayName.\n  - Replace imports for traces buffer to use the new traces handler (see item 3): import cleanupSubagentBuffer, displaySubagentList, enterSubagentBuffer, isInSubagentBufferMode from ./cli-handlers/traces, and continue to import the list functions from ./cli-handlers/subagent-list.\n- In npm-app/src/client.ts:\n  - Import resolveCliAgentId from ./agents/resolve.\n  - Before sending the prompt action in sendUserInput(), resolve the CLI-selected agent id: compute localIds = Object.keys(getLoadedAgentNames()) and resolvedAgentId = resolveCliAgentId(cli.agent, localIds); set action.agentId to resolvedAgentId (not the raw cli.agent).\n  - Update import of refreshSubagentDisplay to come from ./cli-handlers/traces.\n\n3) Replace subagent view imports with new traces handler and improve UX\n- Add a new file npm-app/src/cli-handlers/traces.ts that provides the subagent trace buffer functionality (based on current subagent.ts) with the following behaviors:\n  - Export: isInSubagentBufferMode(), displaySubagentList(agents), enterSubagentBuffer(rl, agentId, onExit), exitSubagentBuffer(rl), refreshSubagentDisplay(agentId), and cleanupSubagentBuffer().\n  - Use string-width and wrap-ansi to wrap content, include a helper firstLine(text) to show only the first line of prompts in listings.\n  - When in the buffer view, include a status line: \"Use ↑/↓/PgUp/PgDn to scroll, ESC or q to go back\".\n  - Key handling: support ESC or a plain 'q' keypress (no ctrl/meta) to exit; on exit, call enterSubagentListBuffer(rl, onExit) to return to the list; support Ctrl+C to exit back to main screen (onExit).\n  - Ensure entering the alt buffer, clearing the screen, hiding cursor on entry, and restoring on exit; handle terminal resize by re-wrapping content.\n  - For displaySubagentList, show agent type, activity indicator, and a first-line prompt preview for each subagent.\n  - Register process exit cleanup (exit, SIGINT, SIGTERM) to restore normal terminal mode and cursor.\n- In npm-app/src/cli-handlers/subagent-list.ts:\n  - Change import of enterSubagentBuffer to import from './traces'.\n  - Update status line to read: \"Use ↑/↓/j/k to navigate, PgUp/PgDn for fast scroll, Enter to view, ESC or q to go back\".\n  - Update key handler to treat ESC or a plain 'q' as exit (no ctrl/meta on 'q').\n- No changes are required to the legacy subagent.ts file content; it will be superseded by switching imports to traces.ts.\n\n4) Enhance Agents menu to group and show recently updated custom agents\n- In npm-app/src/cli-handlers/agents.ts:\n  - Import loadedAgents from ../agents/load-agents in addition to existing load helpers.\n  - After scanning .agents/templates, for each file determine agentId via extractAgentIdFromFileName(file), filePath, and mtime via fs.statSync.\n  - Find the loaded agent definition from loadedAgents[agentId] and treat an agent as valid if definition has both id and model.\n  - Sort valid agents by descending mtime; split into two groups: recent (mtime within the last 7 days) and other.\n  - Render sections in this order when any valid agents exist:\n    - If recentAgents.length > 0, insert a section header with name \"Recently Updated\" and gray(' • last 7 days'), then list recent agents.\n    - If otherAgents.length > 0, insert a section header \"Custom Agents\" with a gray count and path suffix, then list the others.\n  - Each listed agent shows name from localAgents[agentId] or def.displayName or agentId, description from def.description (default to 'Custom user-defined agent'), and filePath.\n  - If there are no valid agents, still show the \"Custom Agents\" section header followed by a placeholder entry ('No custom agents found', description prompting to create one).\n  - Update bottom status line to say: \"Use ↑/↓/j/k to navigate, Enter to select, ESC or q to go back\" and update key handler to support 'q' (plain, without ctrl/meta) to exit along with ESC.\n\n5) Improve publish error messages for clarity and hints\n- In npm-app/src/cli-handlers/publish.ts:\n  - At the top where handling a non-success result from publishAgentTemplates, replace the single error console.log with:\n    - console.log(red('❌ Failed to publish your agents'))\n    - If result.details exists, print it on the next line in red.\n    - If result.hint exists, print it on the next line in yellow prefixed with 'Hint: '.\n  - In publishAgentTemplates(): when response.ok is false, construct and return an error object without duplicating details into the error string:\n    - error: result.error || `HTTP ${response.status}: ${response.statusText}`\n    - details: result.details\n    - hint: result.hint\n    - statusCode, availablePublishers, validationErrors as before.\n  - In the catch(err) handler of publishAgentTemplates():\n    - Attempt to extract body = err.responseBody || err.body || err; build error fields: error = body.error || body.message || 'Failed to publish'; details = body.details; hint = body.hint.\n    - Log the error, details, and hint to console.error for visibility.\n    - Return { success: false, error, details, hint } so callers can display hint.\n  - Ensure imports remain valid. Note: an added import of pluralize is not required unless used elsewhere; safe to include or remove.\n\nAcceptance criteria\n- New file npm-app/src/agents/resolve.ts and tests npm-app/src/agents/resolve.test.ts exist and tests pass.\n- CLI displays agent names using resolved IDs when --agent is set; unprefixed, unknown IDs are prefixed with DEFAULT_ORG_PREFIX; local IDs remain unmodified.\n- Client sends resolved agentId to the backend in prompt actions.\n- Traces functionality is provided by the new traces.ts, imports in cli.ts and subagent-list.ts point to it, status lines mention 'ESC or q', and pressing 'q' works as back in both the trace view and list.\n- Agents menu groups valid agents into a 'Recently Updated' section (7-day window) and a 'Custom Agents' section; when none valid, shows header and a 'No custom agents found' placeholder.\n- Publishing errors display a concise main error, optional details, and an optional hint; error object returned from publishAgentTemplates includes details and hint without duplicative concatenation.\n",
      "prompt": "Add agent ID resolution and improve the CLI UX for traces, agents listing, and publishing. Specifically: create a small utility that resolves a CLI-provided agent identifier by preserving explicit org prefixes, leaving known local IDs intact, and defaulting unknown unprefixed IDs to a default org prefix. Use this resolver in both the CLI and client when showing the selected agent and when sending requests. Replace usage of the old subagent trace viewer with a new traces handler that improves the status hints and allows pressing 'q' to go back (in both the trace buffer and the trace list). Update the agents menu to group valid custom agents by last modified time, with a \"Recently Updated\" section for the past week and a \"Custom Agents\" section for the rest; show a placeholder when none exist. Finally, make publishing errors clearer by printing a concise failure line, optional details, and an optional hint, and ensure the returned error contains non-duplicated fields for callers. Keep the implementation consistent with existing patterns in the codebase.",
      "supplementalFiles": [
        "common/src/util/agent-name-normalization.ts",
        "npm-app/src/agents/load-agents.ts",
        "npm-app/src/subagent-storage.ts",
        "npm-app/src/utils/terminal.ts",
        "common/src/types/api/agents/publish.ts",
        "common/src/util/string.ts"
      ],
      "fileDiffs": [
        {
          "path": "npm-app/src/agents/resolve.test.ts",
          "status": "added",
          "diff": "Index: npm-app/src/agents/resolve.test.ts\n===================================================================\n--- npm-app/src/agents/resolve.test.ts\te6a6496 (parent)\n+++ npm-app/src/agents/resolve.test.ts\tde3ea46 (commit)\n@@ -1,1 +1,27 @@\n-[NEW FILE]\n\\ No newline at end of file\n+import { describe, it, expect } from 'bun:test'\n+import { DEFAULT_ORG_PREFIX } from '@codebuff/common/util/agent-name-normalization'\n+import { resolveCliAgentId } from './resolve'\n+\n+describe('resolveCliAgentId', () => {\n+  it('returns undefined when input is undefined', () => {\n+    expect(resolveCliAgentId(undefined, [])).toBeUndefined()\n+  })\n+\n+  it('preserves explicitly prefixed identifiers', () => {\n+    expect(resolveCliAgentId('publisher/name', [])).toBe('publisher/name')\n+    expect(resolveCliAgentId(`${DEFAULT_ORG_PREFIX}foo@1.2.3`, [])).toBe(\n+      `${DEFAULT_ORG_PREFIX}foo@1.2.3`,\n+    )\n+  })\n+  it('returns input as-is when it exists locally', () => {\n+    expect(resolveCliAgentId('local-agent', ['local-agent'])).toBe(\n+      'local-agent',\n+    )\n+  })\n+\n+  it('prefixes unknown, unprefixed ids with DEFAULT_ORG_PREFIX', () => {\n+    expect(resolveCliAgentId('unknown', [])).toBe(\n+      `${DEFAULT_ORG_PREFIX}unknown`,\n+    )\n+  })\n+})\n"
        },
        {
          "path": "npm-app/src/agents/resolve.ts",
          "status": "added",
          "diff": "Index: npm-app/src/agents/resolve.ts\n===================================================================\n--- npm-app/src/agents/resolve.ts\te6a6496 (parent)\n+++ npm-app/src/agents/resolve.ts\tde3ea46 (commit)\n@@ -1,1 +1,17 @@\n-[NEW FILE]\n\\ No newline at end of file\n+import { DEFAULT_ORG_PREFIX } from '@codebuff/common/util/agent-name-normalization'\n+\n+export function resolveCliAgentId(\n+  input: string | undefined,\n+  localAgentIds: string[],\n+): string | undefined {\n+  if (!input) return input\n+\n+  // Preserve explicitly prefixed identifiers like publisher/name\n+  if (input.includes('/')) return input\n+\n+  // If it exists locally, use as-is\n+  if (localAgentIds.includes(input)) return input\n+\n+  // Otherwise default to <DEFAULT_ORG_PREFIX><name>\n+  return `${DEFAULT_ORG_PREFIX}${input}`\n+}\n"
        },
        {
          "path": "npm-app/src/cli-handlers/agents.ts",
          "status": "modified",
          "diff": "Index: npm-app/src/cli-handlers/agents.ts\n===================================================================\n--- npm-app/src/cli-handlers/agents.ts\te6a6496 (parent)\n+++ npm-app/src/cli-handlers/agents.ts\tde3ea46 (commit)\n@@ -18,9 +18,13 @@\n import intermediateGitCommitter from '../../../common/src/templates/initial-agents-dir/examples/02-intermediate-git-committer' with { type: 'text' }\n import advancedFileExplorer from '../../../common/src/templates/initial-agents-dir/examples/03-advanced-file-explorer' with { type: 'text' }\n import myCustomAgent from '../../../common/src/templates/initial-agents-dir/my-custom-agent' with { type: 'text' }\n \n-import { loadLocalAgents, getLoadedAgentNames } from '../agents/load-agents'\n+import {\n+  loadLocalAgents,\n+  getLoadedAgentNames,\n+  loadedAgents,\n+} from '../agents/load-agents'\n import { CLI } from '../cli'\n import { getProjectRoot } from '../project-files'\n import { Spinner } from '../utils/spinner'\n import {\n@@ -89,48 +93,98 @@\n     const files = fs.readdirSync(agentsDir)\n     customAgentFiles = filterCustomAgentFiles(files)\n   }\n \n-  // Add agents section header\n-  actions.push({\n-    id: '__agents_header__',\n-    name:\n-      bold(cyan('Custom Agents')) +\n-      gray(` • ${customAgentFiles.length} in ${AGENT_TEMPLATES_DIR}`),\n-    description: '',\n-    isBuiltIn: false,\n-    isSectionHeader: true,\n-  })\n-\n   // Build agent list starting with management actions\n   agentList = [...actions]\n \n-  // Add custom agents from .agents/templates\n-  if (customAgentFiles.length > 0) {\n-    for (const file of customAgentFiles) {\n-      const agentId = extractAgentIdFromFileName(file)\n-      const agentName = localAgents[agentId] || agentId\n+  // Collect custom agents from .agents/templates\n+  const agentEntries = customAgentFiles.map((file) => {\n+    const agentId = extractAgentIdFromFileName(file)\n+    const filePath = path.join(agentsDir, file)\n+    let mtime = 0\n+    try {\n+      mtime = fs.statSync(filePath).mtimeMs\n+    } catch {}\n+    const def = (loadedAgents as any)[agentId]\n+    return { file, agentId, filePath, mtime, def }\n+  })\n+\n+  const validAgents = agentEntries\n+    .filter((e) => e.def && e.def.id && e.def.model)\n+    .sort((a, b) => b.mtime - a.mtime)\n+\n+  const now = Date.now()\n+  const sevenDaysMs = 7 * 24 * 60 * 60 * 1000\n+  const recentAgents = validAgents.filter((e) => now - e.mtime <= sevenDaysMs)\n+  const otherAgents = validAgents.filter((e) => now - e.mtime > sevenDaysMs)\n+\n+  if (validAgents.length > 0) {\n+    if (recentAgents.length > 0) {\n       agentList.push({\n-        id: agentId,\n-        name: agentName,\n-        description: 'Custom user-defined agent',\n+        id: '__recent_agents_header__',\n+        name: bold(cyan('Recently Updated')) + gray(' • last 7 days'),\n+        description: '',\n         isBuiltIn: false,\n-        filePath: path.join(agentsDir, file),\n+        isSectionHeader: true,\n       })\n+\n+      for (const entry of recentAgents) {\n+        const agentName =\n+          localAgents[entry.agentId] || entry.def?.displayName || entry.agentId\n+        agentList.push({\n+          id: entry.agentId,\n+          name: agentName,\n+          description: entry.def?.description || 'Custom user-defined agent',\n+          isBuiltIn: false,\n+          filePath: entry.filePath,\n+        })\n+      }\n     }\n+\n+    if (otherAgents.length > 0) {\n+      agentList.push({\n+        id: '__agents_header__',\n+        name:\n+          bold(cyan('Custom Agents')) +\n+          gray(` • ${otherAgents.length} in ${AGENT_TEMPLATES_DIR}`),\n+        description: '',\n+        isBuiltIn: false,\n+        isSectionHeader: true,\n+      })\n+\n+      for (const entry of otherAgents) {\n+        const agentName =\n+          localAgents[entry.agentId] || entry.def?.displayName || entry.agentId\n+        agentList.push({\n+          id: entry.agentId,\n+          name: agentName,\n+          description: entry.def?.description || 'Custom user-defined agent',\n+          isBuiltIn: false,\n+          filePath: entry.filePath,\n+        })\n+      }\n+    }\n   } else {\n-    // If no custom agents, add a helpful message\n+    // No valid agents; show header + placeholder\n     agentList.push({\n+      id: '__agents_header__',\n+      name:\n+        bold(cyan('Custom Agents')) +\n+        gray(` • ${customAgentFiles.length} in ${AGENT_TEMPLATES_DIR}`),\n+      description: '',\n+      isBuiltIn: false,\n+      isSectionHeader: true,\n+    })\n+    agentList.push({\n       id: '__no_agents__',\n       name: gray('No custom agents found'),\n       description: 'Use \"Create New Agent\" above to get started',\n       isBuiltIn: false,\n       isPlaceholder: true,\n     })\n   }\n \n-  // No need for special handling here since we now have a proper placeholder\n-\n   // Initialize selection to first selectable item\n   selectedIndex = 0\n   // Find first selectable item (skip section headers, separators, placeholders)\n   while (\n@@ -399,9 +453,9 @@\n     process.stdout.write('\\n'.repeat(remainingLines))\n   }\n \n   // Display status line at bottom\n-  const statusLine = `\\n${gray(`Use ↑/↓/j/k to navigate, Enter to select, ESC to go back`)}`\n+  const statusLine = `\\n${gray(`Use ↑/↓/j/k to navigate, Enter to select, ESC or q to go back`)}`\n \n   process.stdout.write(statusLine)\n   process.stdout.write(HIDE_CURSOR)\n }\n@@ -415,9 +469,13 @@\n   process.stdin.removeAllListeners('keypress')\n \n   // Add our custom handler\n   process.stdin.on('keypress', (str: string, key: any) => {\n-    if (key && key.name === 'escape') {\n+    // Support ESC or 'q' (no ctrl/meta) to go back\n+    if (\n+      (key && key.name === 'escape') ||\n+      (!key?.ctrl && !key?.meta && str === 'q')\n+    ) {\n       exitAgentsBuffer(rl)\n       onExit()\n       return\n     }\n"
        },
        {
          "path": "npm-app/src/cli-handlers/publish.ts",
          "status": "modified",
          "diff": "Index: npm-app/src/cli-handlers/publish.ts\n===================================================================\n--- npm-app/src/cli-handlers/publish.ts\te6a6496 (parent)\n+++ npm-app/src/cli-handlers/publish.ts\tde3ea46 (commit)\n@@ -11,8 +11,9 @@\n   PublishAgentsErrorResponse,\n   PublishAgentsResponse,\n } from '@codebuff/common/types/api/agents/publish'\n import type { DynamicAgentTemplate } from '@codebuff/common/types/dynamic-agent-template'\n+import { pluralize } from '@codebuff/common/util/string'\n \n /**\n  * Handle the publish command to upload agent templates to the backend\n  * @param agentId The id of the agent to publish (required)\n@@ -104,9 +105,11 @@\n         }\n         return\n       }\n \n-      console.log(red(`❌ Failed to publish agents: ${result.error}`))\n+      console.log(red(`❌ Failed to publish your agents`))\n+      if (result.details) console.log(red(`\\n${result.details}`))\n+      if (result.hint) console.log(yellow(`\\nHint: ${result.hint}`))\n \n       // Show helpful guidance based on error type\n       if (result.error?.includes('Publisher field required')) {\n         console.log()\n@@ -178,33 +181,15 @@\n     }\n \n     if (!response.ok) {\n       result = result as PublishAgentsErrorResponse\n-      // Extract detailed error information from the response\n-      let errorMessage =\n-        result.error || `HTTP ${response.status}: ${response.statusText}`\n-\n-      // If there are validation details, include them\n-      if (result.details) {\n-        errorMessage += `\\n\\nDetails: ${result.details}`\n-      }\n-\n-      // If there are specific validation errors, format them nicely\n-      if (result.validationErrors && Array.isArray(result.validationErrors)) {\n-        const formattedErrors = result.validationErrors\n-          .map((err: any) => {\n-            const path =\n-              err.path && err.path.length > 0 ? `${err.path.join('.')}: ` : ''\n-            return `  • ${path}${err.message}`\n-          })\n-          .join('\\n')\n-        errorMessage += `\\n\\nValidation errors:\\n${formattedErrors}`\n-      }\n-\n+      // Build clean error object without duplicating details into the error string\n       return {\n         success: false,\n-        error: errorMessage,\n+        error:\n+          result.error || `HTTP ${response.status}: ${response.statusText}`,\n         details: result.details,\n+        hint: result.hint,\n         statusCode: response.status,\n         availablePublishers: result.availablePublishers,\n         validationErrors: result.validationErrors,\n       }\n@@ -213,19 +198,32 @@\n     return {\n       ...result,\n       statusCode: response.status,\n     }\n-  } catch (error) {\n+  } catch (err: any) {\n     // Handle network errors, timeouts, etc.\n-    if (error instanceof TypeError && error.message.includes('fetch')) {\n+    if (err instanceof TypeError && err.message.includes('fetch')) {\n       return {\n         success: false,\n         error: `Network error: Unable to connect to ${websiteUrl}. Please check your internet connection and try again.`,\n       }\n     }\n \n+    const body = err?.responseBody || err?.body || err\n+    const error = body?.error || body?.message || 'Failed to publish'\n+    const details = body?.details\n+    const hint = body?.hint\n+\n+    // Log for visibility\n+    console.error(`❌ Failed to publish: ${error}`)\n+    if (details) console.error(`\\nDetails: ${details}`)\n+    if (hint) console.error(`\\nHint: ${hint}`)\n+\n+    // Return a valid error object so callers can display the hint\n     return {\n       success: false,\n-      error: `Unexpected error: ${error instanceof Error ? error.message : String(error)}`,\n-    }\n+      error,\n+      details,\n+      hint,\n+    } as PublishAgentsResponse\n   }\n }\n"
        },
        {
          "path": "npm-app/src/cli-handlers/subagent-list.ts",
          "status": "modified",
          "diff": "Index: npm-app/src/cli-handlers/subagent-list.ts\n===================================================================\n--- npm-app/src/cli-handlers/subagent-list.ts\te6a6496 (parent)\n+++ npm-app/src/cli-handlers/subagent-list.ts\tde3ea46 (commit)\n@@ -1,9 +1,9 @@\n import { pluralize } from '@codebuff/common/util/string'\n import { green, yellow, cyan, magenta, bold, gray } from 'picocolors'\n \n import { getSubagentsChronological } from '../subagent-storage'\n-import { enterSubagentBuffer } from './subagent'\n+import { enterSubagentBuffer } from './traces'\n import {\n   ENTER_ALT_BUFFER,\n   EXIT_ALT_BUFFER,\n   CLEAR_SCREEN,\n@@ -328,9 +328,10 @@\n     process.stdout.write('\\n'.repeat(remainingLines))\n   }\n \n   // Display status line at bottom\n-  const statusLine = `\\n${gray(`Use ↑/↓/j/k to navigate, PgUp/PgDn for fast scroll, Enter to view, ESC to go back`)}`\n+  // Update: mention ESC or q\n+  const statusLine = `\\n${gray(`Use ↑/↓/j/k to navigate, PgUp/PgDn for fast scroll, Enter to view, ESC or q to go back`)}`\n \n   process.stdout.write(statusLine)\n   process.stdout.write(HIDE_CURSOR)\n }\n@@ -344,9 +345,13 @@\n   process.stdin.removeAllListeners('keypress')\n \n   // Add our custom handler\n   process.stdin.on('keypress', (str: string, key: any) => {\n-    if (key && key.name === 'escape') {\n+    // Support ESC or 'q' (no ctrl/meta) to go back\n+    if (\n+      (key && key.name === 'escape') ||\n+      (!key?.ctrl && !key?.meta && str === 'q')\n+    ) {\n       exitSubagentListBuffer(rl)\n       onExit()\n       return\n     }\n"
        },
        {
          "path": "npm-app/src/cli-handlers/traces.ts",
          "status": "added",
          "diff": "Index: npm-app/src/cli-handlers/traces.ts\n===================================================================\n--- npm-app/src/cli-handlers/traces.ts\te6a6496 (parent)\n+++ npm-app/src/cli-handlers/traces.ts\tde3ea46 (commit)\n@@ -1,1 +1,353 @@\n-[NEW FILE]\n\\ No newline at end of file\n+import { pluralize } from '@codebuff/common/util/string'\n+import { green, yellow, cyan, bold, gray } from 'picocolors'\n+import stringWidth from 'string-width'\n+import wrapAnsi from 'wrap-ansi'\n+\n+import {\n+  getSubagentData,\n+  getSubagentFormattedContent,\n+  getRecentSubagents,\n+} from '../subagent-storage'\n+import { enterSubagentListBuffer } from './subagent-list'\n+import {\n+  ENTER_ALT_BUFFER,\n+  EXIT_ALT_BUFFER,\n+  CLEAR_SCREEN,\n+  HIDE_CURSOR,\n+  SHOW_CURSOR,\n+  MOVE_CURSOR,\n+} from '../utils/terminal'\n+\n+import type { SubagentData } from '../subagent-storage'\n+\n+// Add helpers to truncate to first line and reduce sections\n+function firstLine(text: string): string {\n+  return text.split('\\n')[0] || ''\n+}\n+\n+/**\n+ * Wrap a line to fit within terminal width using robust npm packages\n+ */\n+function wrapLine(line: string, terminalWidth: number): string[] {\n+  if (!line) return ['']\n+  if (stringWidth(line) <= terminalWidth) {\n+    return [line]\n+  }\n+  const wrapped = wrapAnsi(line, terminalWidth, { hard: true })\n+  return wrapped.split('\\n')\n+}\n+\n+let isInSubagentBuffer = false\n+let originalKeyHandlers: ((str: string, key: any) => void)[] = []\n+let scrollOffset = 0\n+let contentLines: string[] = []\n+let currentAgentId: string | null = null\n+let lastContentLength = 0\n+\n+export function isInSubagentBufferMode(): boolean {\n+  return isInSubagentBuffer\n+}\n+\n+/**\n+ * Display a formatted list of traces with enhanced styling\n+ */\n+export function displaySubagentList(agents: SubagentData[]) {\n+  console.log(bold(cyan('🤖 Available Traces')))\n+  console.log(gray(`Found ${pluralize(agents.length, 'trace')}`))\n+  console.log()\n+  if (agents.length === 0) {\n+    console.log(gray('  (none)'))\n+  } else {\n+    agents.forEach((agent) => {\n+      const status = agent.isActive ? green('●') : gray('○')\n+      // Truncate prompt preview to first line\n+      const promptFirst = agent.prompt ? firstLine(agent.prompt) : '(no prompt)'\n+      const promptPreview = gray(promptFirst)\n+      console.log(\n+        `  ${status} ${bold(agent.agentId)} ${gray(`(${agent.agentType})`)}`,\n+      )\n+      console.log(`    ${promptPreview}`)\n+      console.log()\n+    })\n+  }\n+}\n+\n+export function enterSubagentBuffer(\n+  rl: any,\n+  agentId: string,\n+  onExit: () => void,\n+) {\n+  if (isInSubagentBuffer) {\n+    console.log(yellow('Already in subagent buffer mode!'))\n+    return\n+  }\n+\n+  // Validate trace ID exists\n+  const agentData = getSubagentData(agentId)\n+  if (!agentData) {\n+    console.log(yellow(`No trace found with ID: ${agentId}`))\n+    const recentSubagents = getRecentSubagents(5)\n+    displaySubagentList(recentSubagents)\n+    return\n+  }\n+\n+  currentAgentId = agentId\n+\n+  // Reset scroll state to ensure clean start\n+  scrollOffset = 0\n+  contentLines = []\n+  lastContentLength = 0\n+\n+  // Enter alternate screen buffer\n+  process.stdout.write(ENTER_ALT_BUFFER)\n+  process.stdout.write(CLEAR_SCREEN)\n+  process.stdout.write(MOVE_CURSOR(1, 1)) // Ensure cursor starts at top-left\n+  process.stdout.write(HIDE_CURSOR)\n+\n+  isInSubagentBuffer = true\n+\n+  // Display subagent content\n+  updateSubagentContent()\n+\n+  // Set up key handler for ESC to exit\n+  setupSubagentKeyHandler(rl, onExit)\n+}\n+\n+export function exitSubagentBuffer(rl: any) {\n+  if (!isInSubagentBuffer) {\n+    return\n+  }\n+\n+  // Reset state\n+  scrollOffset = 0\n+  contentLines = []\n+  currentAgentId = null\n+  lastContentLength = 0\n+\n+  // Restore all original key handlers\n+  if (originalKeyHandlers.length > 0) {\n+    process.stdin.removeAllListeners('keypress')\n+    originalKeyHandlers.forEach((handler) => {\n+      process.stdin.on('keypress', handler)\n+    })\n+    originalKeyHandlers = []\n+  }\n+\n+  // Remove resize listener\n+  process.stdout.removeAllListeners('resize')\n+\n+  // Exit alternate screen buffer\n+  process.stdout.write(SHOW_CURSOR)\n+  process.stdout.write(EXIT_ALT_BUFFER)\n+\n+  isInSubagentBuffer = false\n+}\n+\n+function updateSubagentContent() {\n+  if (!currentAgentId) return\n+\n+  const agentData = getSubagentData(currentAgentId)\n+  if (!agentData) return\n+\n+  const fullContent = getSubagentFormattedContent(currentAgentId)\n+\n+  // Check if content has changed\n+  if (fullContent.length === lastContentLength) {\n+    return // No new content\n+  }\n+  lastContentLength = fullContent.length\n+\n+  const contentBodyLines = fullContent\n+    ? fullContent.split('\\n')\n+    : ['(no content yet)']\n+\n+  const terminalWidth = process.stdout.columns || 80\n+  const wrappedLines: string[] = []\n+\n+  // Add prompt if exists (keep prompt line concise)\n+  if (agentData.prompt) {\n+    const promptLine = bold(gray(`Prompt: ${firstLine(agentData.prompt)}`))\n+    wrappedLines.push(...wrapLine(promptLine, terminalWidth))\n+    wrappedLines.push('')\n+  }\n+\n+  // Wrap each content line, preserving empty lines\n+  for (let i = 0; i < contentBodyLines.length; i++) {\n+    const line = contentBodyLines[i]\n+    if (line === '') {\n+      wrappedLines.push('')\n+    } else {\n+      const wrapped = wrapLine(line, terminalWidth)\n+      wrappedLines.push(...wrapped)\n+    }\n+  }\n+\n+  if (wrappedLines.length > 0 && wrappedLines[wrappedLines.length - 1] !== '') {\n+    wrappedLines.push('')\n+  }\n+\n+  contentLines = wrappedLines\n+  scrollOffset = 0\n+  renderSubagentContent()\n+}\n+\n+function renderSubagentContent() {\n+  // Clear screen and move cursor to top\n+  process.stdout.write(CLEAR_SCREEN)\n+\n+  const terminalHeight = process.stdout.rows || 24\n+  const terminalWidth = process.stdout.columns || 80\n+  const maxLines = terminalHeight - 2 // Leave space for status line\n+\n+  const totalLines = contentLines.length\n+\n+  // Calculate visible lines based on scroll offset\n+  const visibleLines = contentLines.slice(scrollOffset, scrollOffset + maxLines)\n+\n+  // Display content\n+  process.stdout.write(visibleLines.join('\\n'))\n+\n+  // Add padding to fill remaining space\n+  const remainingLines = maxLines - visibleLines.length\n+  if (remainingLines > 0) {\n+    process.stdout.write('\\n'.repeat(remainingLines))\n+  }\n+\n+  // Display status line at bottom\n+  // Update: mention ESC or q\n+  const statusLine = `\\n${gray(`Use ↑/↓/PgUp/PgDn to scroll, ESC or q to go back`)}`\n+\n+  process.stdout.write(statusLine)\n+}\n+\n+function setupSubagentKeyHandler(rl: any, onExit: () => void) {\n+  // Store all original key handlers\n+  const listeners = process.stdin.listeners('keypress')\n+  originalKeyHandlers = listeners as ((str: string, key: any) => void)[]\n+\n+  // Remove existing keypress listeners\n+  process.stdin.removeAllListeners('keypress')\n+\n+  // Handle terminal resize\n+  const handleResize = () => {\n+    // Recalculate content with new terminal dimensions\n+    updateSubagentContent()\n+  }\n+\n+  process.stdout.on('resize', handleResize)\n+\n+  // Add our custom handler\n+  process.stdin.on('keypress', (str: string, key: any) => {\n+    // Support ESC or 'q' (no ctrl/meta) to go back to list\n+    if (\n+      (key && key.name === 'escape') ||\n+      (!key?.ctrl && !key?.meta && str === 'q')\n+    ) {\n+      exitSubagentBuffer(rl)\n+      // Return to subagent list, preserving the current selection\n+      enterSubagentListBuffer(rl, onExit)\n+      return\n+    }\n+\n+    // Handle Ctrl+C - exit to main screen instead of exiting program\n+    if (key && key.ctrl && key.name === 'c') {\n+      exitSubagentBuffer(rl)\n+      onExit()\n+      return\n+    }\n+\n+    // Handle scrolling (only when not in chat input mode or using specific scroll keys)\n+    const terminalHeight = process.stdout.rows || 24\n+    const maxLines = terminalHeight - 2\n+    const maxScrollOffset = Math.max(0, contentLines.length - maxLines)\n+\n+    if (key && key.name === 'up' && !key.meta && !key.ctrl) {\n+      const newOffset = Math.max(0, scrollOffset - 1)\n+      if (newOffset !== scrollOffset) {\n+        scrollOffset = newOffset\n+        renderSubagentContent()\n+      }\n+      return\n+    }\n+\n+    if (key && key.name === 'down' && !key.meta && !key.ctrl) {\n+      const newOffset = Math.min(maxScrollOffset, scrollOffset + 1)\n+      if (newOffset !== scrollOffset) {\n+        scrollOffset = newOffset\n+        renderSubagentContent()\n+      }\n+      return\n+    }\n+\n+    if (key && key.name === 'pageup') {\n+      const newOffset = Math.max(0, scrollOffset - maxLines)\n+      if (newOffset !== scrollOffset) {\n+        scrollOffset = newOffset\n+        renderSubagentContent()\n+      }\n+      return\n+    }\n+\n+    if (key && key.name === 'pagedown') {\n+      const newOffset = Math.min(maxScrollOffset, scrollOffset + maxLines)\n+      if (newOffset !== scrollOffset) {\n+        scrollOffset = newOffset\n+        renderSubagentContent()\n+      }\n+      return\n+    }\n+\n+    if (key && key.name === 'home') {\n+      if (scrollOffset !== 0) {\n+        scrollOffset = 0\n+        renderSubagentContent()\n+      }\n+      return\n+    }\n+\n+    if (key && key.name === 'end') {\n+      if (scrollOffset !== maxScrollOffset) {\n+        scrollOffset = maxScrollOffset\n+        renderSubagentContent()\n+      }\n+      return\n+    }\n+\n+    // For other keys, just ignore them\n+  })\n+\n+  // Ensure raw mode for immediate key detection\n+  if (process.stdin.isTTY) {\n+    process.stdin.setRawMode(true)\n+    // Force stdin to be readable to ensure keypress events are captured\n+    process.stdin.resume()\n+  }\n+}\n+\n+/**\n+ * Update the display if we're currently viewing this agent\n+ */\n+export function refreshSubagentDisplay(agentId: string) {\n+  if (isInSubagentBuffer && currentAgentId === agentId) {\n+    updateSubagentContent()\n+  }\n+}\n+\n+// Cleanup function to ensure we exit subagent buffer on process termination\n+export function cleanupSubagentBuffer() {\n+  if (isInSubagentBuffer) {\n+    process.stdout.write(SHOW_CURSOR)\n+    process.stdout.write(EXIT_ALT_BUFFER)\n+    isInSubagentBuffer = false\n+  }\n+\n+  // Restore normal terminal mode\n+  if (process.stdin.isTTY) {\n+    process.stdin.setRawMode(false)\n+  }\n+}\n+\n+// Register cleanup on process exit\n+process.on('exit', cleanupSubagentBuffer)\n+process.on('SIGINT', cleanupSubagentBuffer)\n+process.on('SIGTERM', cleanupSubagentBuffer)\n"
        },
        {
          "path": "npm-app/src/cli.ts",
          "status": "modified",
          "diff": "Index: npm-app/src/cli.ts\n===================================================================\n--- npm-app/src/cli.ts\te6a6496 (parent)\n+++ npm-app/src/cli.ts\tde3ea46 (commit)\n@@ -25,8 +25,9 @@\n   yellow,\n } from 'picocolors'\n \n import { loadLocalAgents, loadedAgents } from './agents/load-agents'\n+import { resolveCliAgentId } from './agents/resolve'\n import {\n   killAllBackgroundProcesses,\n   sendKillSignalToAllBackgroundProcesses,\n } from './background-process-manager'\n@@ -55,9 +56,9 @@\n   cleanupSubagentBuffer,\n   displaySubagentList,\n   enterSubagentBuffer,\n   isInSubagentBufferMode,\n-} from './cli-handlers/subagent'\n+} from './cli-handlers/traces'\n import {\n   cleanupSubagentListBuffer,\n   enterSubagentListBuffer,\n   isInSubagentListMode,\n@@ -549,10 +550,15 @@\n     this.initialParams = initialParams\n \n     // Get agent display name for user feedback\n     const localAgentInfo = await getLocalAgentInfo()\n+    // Resolve ID with default publisher when needed\n+    const resolvedAgentId = resolveCliAgentId(\n+      agent,\n+      Object.keys(localAgentInfo),\n+    )\n     const agentDisplayName = getAgentDisplayName(\n-      agent || 'base',\n+      resolvedAgentId || 'base',\n       localAgentInfo,\n     )\n \n     // Tell user who they're working with now\n@@ -642,10 +648,15 @@\n         // Show selected agent when provided via --agent\n         if (this.agent) {\n           try {\n             const localAgentInfo = await getLocalAgentInfo()\n+            // Resolve ID with default publisher when needed\n+            const resolvedAgentId = resolveCliAgentId(\n+              this.agent,\n+              Object.keys(localAgentInfo),\n+            )\n             const agentDisplayName = getAgentDisplayName(\n-              this.agent || 'base',\n+              resolvedAgentId || 'base',\n               localAgentInfo,\n             )\n             console.log(gray(`\\nAgent: ${bold(agentDisplayName)}`))\n           } catch {}\n"
        },
        {
          "path": "npm-app/src/client.ts",
          "status": "modified",
          "diff": "Index: npm-app/src/client.ts\n===================================================================\n--- npm-app/src/client.ts\te6a6496 (parent)\n+++ npm-app/src/client.ts\tde3ea46 (commit)\n@@ -51,14 +51,15 @@\n import { match, P } from 'ts-pattern'\n import { z } from 'zod'\n \n import { getLoadedAgentNames, loadLocalAgents } from './agents/load-agents'\n+import { resolveCliAgentId } from './agents/resolve'\n import { getBackgroundProcessUpdates } from './background-process-manager'\n import { activeBrowserRunner } from './browser-runner'\n import { setMessages } from './chat-storage'\n import { checkpointManager } from './checkpoints/checkpoint-manager'\n import { CLI } from './cli'\n-import { refreshSubagentDisplay } from './cli-handlers/subagent'\n+import { refreshSubagentDisplay } from './cli-handlers/traces'\n import { backendUrl, npmAppVersion, websiteUrl } from './config'\n import { CREDENTIALS_PATH, userFromJson } from './credentials'\n import { DiffManager } from './diff-manager'\n import { printModeLog } from './display/print-mode'\n@@ -1045,13 +1046,17 @@\n     const cliAgent = cli.agent\n     const cliParams = cli.initialParams\n     cli.initialParams = undefined\n \n+    // Resolve agent id: if unprefixed and not local, default to <DEFAULT_ORG_PREFIX><name>\n+    const localIds = Object.keys(getLoadedAgentNames())\n+    const resolvedAgentId = resolveCliAgentId(cliAgent, localIds)\n+\n     const action: ClientAction = {\n       type: 'prompt',\n       promptId: userInputId,\n       prompt: cleanPrompt,\n-      agentId: cliAgent, // Add explicit agent selection\n+      agentId: resolvedAgentId, // use resolved id here\n       promptParams: cliParams, // Add parsed params\n       sessionState: this.sessionState,\n       toolResults,\n       fingerprintId: await this.fingerprintId,\n"
        }
      ]
    },
    {
      "id": "move-agent-templates",
      "sha": "26e84af3e8f6115027051b5b5dc28f65f47df50b",
      "parentSha": "7762897e86aa6db00bab7ba00c06d918b435db13",
      "spec": "Centralize the initial agent templates and type definitions and update all import sites.\n\n1) Create a new initial agents directory under common\n- Path: common/src/templates/initial-agents-dir\n- Add the following files:\n  a) README.md: Overview and usage of custom agents, file structure, agent basics (id, displayName, model, toolNames, instructionsPrompt, spawnPurposePrompt, spawnableAgents), common tools list, pointers to types and examples, and community link.\n  b) examples/01-basic-diff-reviewer.ts: Minimal AgentDefinition that runs git diff and reviews changes.\n  c) examples/02-intermediate-git-committer.ts: AgentDefinition with handleSteps generator that inspects git diff/log, reads files, and composes a commit message.\n  d) examples/03-advanced-file-explorer.ts: AgentDefinition that spawns file-picker agents in parallel and returns structured output.\n  e) my-custom-agent.ts: Starter AgentDefinition that demonstrates spawning a file explorer and reading files.\n  f) types/agent-definition.ts: Comprehensive AgentDefinition and related types (ModelName, ToolCall, ToolName aliases, JsonSchema, etc.).\n  g) types/tools.ts: ToolName union and ToolParamsMap with parameter interfaces for all tools; includes GetToolParams helper type.\n\n2) Update CLI scaffolding to copy templates from common\n- File: npm-app/src/cli-handlers/agents.ts\n- Replace all imports that read template files from '../../../.agents/...' to the new common/src/templates/initial-agents-dir/... paths.\n- Ensure imports use Bun text import semantics (with { type: 'text' }) for .ts and .md files.\n- Keep behavior the same: when users choose to create examples, write these files into the user's .agents directory (README.md, types/*.ts, my-custom-agent.ts, and examples/*).\n\n3) Update SDK type imports to the new types location\n- File: sdk/src/client.ts\n  - Change the AgentDefinition type import from '../../common/src/types/agent-definition' to '../../common/src/templates/initial-agents-dir/types/agent-definition'.\n- File: sdk/src/index.ts\n  - Update the exported AgentDefinition type to re-export from '../../common/src/templates/initial-agents-dir/types/agent-definition'.\n\n4) Update common type references\n- File: common/src/types/agent-template.ts\n  - Change the ToolCall type import to reference '../templates/initial-agents-dir/types/agent-definition' instead of './agent-definition'.\n- File: common/src/types/__tests__/dynamic-agent-template.test.ts\n  - Update the AgentDefinition import to '../../templates/initial-agents-dir/types/agent-definition'. Keep the DynamicAgentDefinition import as-is.\n- File: common/src/types/agent-definition.ts\n  - Remove the legacy re-export of '../../../.agents/types/agent-definition'. Either delete the file or leave no exports so that no one imports types from .agents via common.\n\n5) Preserve runtime behavior for user agents\n- Do not change AGENT_TEMPLATES_DIR (still '.agents/'). The runtime loading of user agents from .agents via npm-app/src/agents/* remains unchanged. This change only relocates the bundled seed templates and types the CLI copies into .agents.\n\n6) Build and type-check\n- Ensure all updated import paths resolve and the project type-checks under Bun/TS settings. No new path mappings are required.",
      "prompt": "Centralize the built-in agent templates and type definitions under a new common/src/templates/initial-agents-dir. Update the CLI to scaffold user .agents files by copying from this new location instead of bundling from .agents. Update all imports in the SDK and common to reference the new AgentDefinition/ToolCall types path. Remove the old re-export that pointed to .agents so consumers can’t import from the legacy location. Keep runtime loading of user-defined agents from .agents unchanged and ensure the codebase builds cleanly.",
      "supplementalFiles": [
        "common/src/constants.ts",
        "common/src/constants/agents.ts",
        "common/src/types/dynamic-agent-template.ts",
        "npm-app/src/agents/agent-utils.ts",
        "npm-app/src/agents/load-agents.ts",
        "npm-app/src/project-files.ts",
        "sdk/src/websocket-client.ts",
        "tsconfig.base.json"
      ],
      "fileDiffs": [
        {
          "path": "common/src/templates/initial-agents-dir/README.md",
          "status": "added",
          "diff": "Index: common/src/templates/initial-agents-dir/README.md\n===================================================================\n--- common/src/templates/initial-agents-dir/README.md\t7762897 (parent)\n+++ common/src/templates/initial-agents-dir/README.md\t26e84af (commit)\n@@ -1,1 +1,49 @@\n-[NEW FILE]\n\\ No newline at end of file\n+# Codebuff Agents\n+\n+This directory contains your custom Codebuff agents. Each agent is a TypeScript file that defines an AI agent with specific capabilities and behavior.\n+\n+## Getting Started\n+\n+1. **Edit an existing agent**: Start with `my-custom-agent.ts` and modify it for your needs\n+2. **Check out the examples and types**: See the examples and types directories to draw inspiration and learn what's possible.\n+3. **Test your agent**: Run `codebuff --agent your-agent-name`\n+4. **Publish your agent**: Run `codebuff publish your-agent-name`\n+\n+## File Structure\n+\n+- `types/` - TypeScript type definitions\n+- `examples/` - Example agents for reference\n+- `my-custom-agent.ts` - Your first custom agent (edit this!)\n+- Add any new agents you wish to the .agents directory\n+\n+## Agent Basics\n+\n+Each agent file exports an `AgentDefinition` object with:\n+\n+- `id`: Unique identifier (lowercase, hyphens only)\n+- `displayName`: Human-readable name\n+- `model`: AI model to use (see OpenRouter for options)\n+- `toolNames`: Tools the agent can use\n+- `instructionsPrompt`: Instructions for the agent's behavior\n+- `spawnPurposePrompt`: When other agents should spawn this one\n+- `spawnableAgents`: Which agents *this* agent can spawn\n+\n+## Common Tools\n+\n+- `read_files` - Read file contents\n+- `write_file` - Create or modify files\n+- `str_replace` - Make targeted edits\n+- `run_terminal_command` - Execute shell commands\n+- `code_search` - Search for code patterns\n+- `spawn_agents` - Delegate to other agents\n+- `end_turn` - Finish the response\n+\n+See `types/tools.ts` for more information on each tool!\n+\n+## Need Help?\n+\n+- Check the type definitions in `types/agent-definition.ts`\n+- Look at examples in the `examples/` directory\n+- Join the Codebuff Discord community (https://discord.com/invite/mcWTGjgTj3)\n+\n+Happy agent building! 🤖\n\\ No newline at end of file\n"
        },
        {
          "path": "common/src/templates/initial-agents-dir/examples/01-basic-diff-reviewer.ts",
          "status": "added",
          "diff": "Index: common/src/templates/initial-agents-dir/examples/01-basic-diff-reviewer.ts\n===================================================================\n--- common/src/templates/initial-agents-dir/examples/01-basic-diff-reviewer.ts\t7762897 (parent)\n+++ common/src/templates/initial-agents-dir/examples/01-basic-diff-reviewer.ts\t26e84af (commit)\n@@ -1,1 +1,18 @@\n-[NEW FILE]\n\\ No newline at end of file\n+import type { AgentDefinition } from '../types/agent-definition'\n+\n+const definition: AgentDefinition = {\n+  id: 'basic-diff-reviewer',\n+  displayName: 'Basic Diff Reviewer',\n+  model: 'anthropic/claude-4-sonnet-20250522',\n+  toolNames: ['read_files', 'run_terminal_command'],\n+\n+  spawnPurposePrompt:\n+    'Spawn when you need to review code changes in the git diff',\n+\n+  instructionsPrompt: `Execute the following steps:\n+1. Run git diff\n+2. Read the files that have changed\n+3. Review the changes and suggest improvements`,\n+}\n+\n+export default definition\n"
        },
        {
          "path": "common/src/templates/initial-agents-dir/examples/02-intermediate-git-committer.ts",
          "status": "added",
          "diff": "Index: common/src/templates/initial-agents-dir/examples/02-intermediate-git-committer.ts\n===================================================================\n--- common/src/templates/initial-agents-dir/examples/02-intermediate-git-committer.ts\t7762897 (parent)\n+++ common/src/templates/initial-agents-dir/examples/02-intermediate-git-committer.ts\t26e84af (commit)\n@@ -1,1 +1,75 @@\n-[NEW FILE]\n\\ No newline at end of file\n+import type {\n+  AgentDefinition,\n+  AgentStepContext,\n+} from '../types/agent-definition'\n+\n+const definition: AgentDefinition = {\n+  id: 'git-committer',\n+  displayName: 'Intermediate Git Committer',\n+  model: 'anthropic/claude-4-sonnet-20250522',\n+  toolNames: ['read_files', 'run_terminal_command', 'add_message', 'end_turn'],\n+\n+  inputSchema: {\n+    prompt: {\n+      type: 'string',\n+      description: 'What changes to commit',\n+    },\n+  },\n+\n+  spawnPurposePrompt:\n+    'Spawn when you need to commit code changes to git with an appropriate commit message',\n+\n+  systemPrompt:\n+    'You are an expert software developer. Your job is to create a git commit with a really good commit message.',\n+\n+  instructionsPrompt:\n+    'Follow the steps to create a good commit: analyze changes with git diff and git log, read relevant files for context, stage appropriate files, analyze changes, and create a commit with proper formatting.',\n+\n+  handleSteps: function* ({ agentState, prompt, params }: AgentStepContext) {\n+    // Step 1: Run git diff and git log to analyze changes.\n+    yield {\n+      toolName: 'run_terminal_command',\n+      args: {\n+        command: 'git diff',\n+        process_type: 'SYNC',\n+        timeout_seconds: 30,\n+      },\n+    }\n+\n+    yield {\n+      toolName: 'run_terminal_command',\n+      args: {\n+        command: 'git log --oneline -10',\n+        process_type: 'SYNC',\n+        timeout_seconds: 30,\n+      },\n+    }\n+\n+    // Step 2: Put words in AI's mouth so it will read files next.\n+    yield {\n+      toolName: 'add_message',\n+      args: {\n+        role: 'assistant',\n+        content:\n+          \"I've analyzed the git diff and recent commit history. Now I'll read any relevant files to better understand the context of these changes.\",\n+      },\n+    }\n+\n+    // Step 3: Let AI generate a step to decide which files to read.\n+    yield 'STEP'\n+\n+    // Step 4: Put words in AI's mouth to analyze the changes and create a commit.\n+    yield {\n+      toolName: 'add_message',\n+      args: {\n+        role: 'assistant',\n+        content:\n+          \"Now I'll analyze the changes and create a commit with a good commit message.\",\n+      },\n+    }\n+\n+    yield 'STEP_ALL'\n+  },\n+}\n+\n+export default definition\n"
        },
        {
          "path": "common/src/templates/initial-agents-dir/examples/03-advanced-file-explorer.ts",
          "status": "added",
          "diff": "Index: common/src/templates/initial-agents-dir/examples/03-advanced-file-explorer.ts\n===================================================================\n--- common/src/templates/initial-agents-dir/examples/03-advanced-file-explorer.ts\t7762897 (parent)\n+++ common/src/templates/initial-agents-dir/examples/03-advanced-file-explorer.ts\t26e84af (commit)\n@@ -1,1 +1,73 @@\n-[NEW FILE]\n\\ No newline at end of file\n+import type { AgentDefinition } from '../types/agent-definition'\n+\n+const definition: AgentDefinition = {\n+  id: 'advanced-file-explorer',\n+  displayName: 'Dora the File Explorer',\n+  model: 'openai/gpt-5',\n+\n+  spawnPurposePrompt:\n+    'Spawns multiple file picker agents in parallel to comprehensively explore the codebase from different perspectives',\n+\n+  includeMessageHistory: false,\n+  toolNames: ['spawn_agents', 'set_output'],\n+  spawnableAgents: [`codebuff/file-picker@0.0.1`],\n+\n+  inputSchema: {\n+    prompt: {\n+      description: 'What you need to accomplish by exploring the codebase',\n+      type: 'string',\n+    },\n+    params: {\n+      type: 'object',\n+      properties: {\n+        prompts: {\n+          description:\n+            'List of 1-4 different parts of the codebase that could be useful to explore',\n+          type: 'array',\n+          items: {\n+            type: 'string',\n+          },\n+        },\n+      },\n+      required: ['prompts'],\n+      additionalProperties: false,\n+    },\n+  },\n+  outputMode: 'structured_output',\n+  outputSchema: {\n+    type: 'object',\n+    properties: {\n+      results: {\n+        type: 'string',\n+        description: 'The results of the file exploration',\n+      },\n+    },\n+    required: ['results'],\n+    additionalProperties: false,\n+  },\n+\n+  handleSteps: function* ({ prompt, params }) {\n+    const prompts: string[] = params?.prompts ?? []\n+    const filePickerPrompts = prompts.map(\n+        (focusPrompt) =>\n+          `Based on the overall goal \"${prompt}\", find files related to this specific area: ${focusPrompt}`,\n+      ),\n+      { toolResult: spawnResult } = yield {\n+        toolName: 'spawn_agents',\n+        args: {\n+          agents: filePickerPrompts.map((promptText) => ({\n+            agent_type: 'codebuff/file-picker@0.0.1',\n+            prompt: promptText,\n+          })),\n+        },\n+      }\n+    yield {\n+      toolName: 'set_output',\n+      args: {\n+        results: spawnResult,\n+      },\n+    }\n+  },\n+}\n+\n+export default definition\n"
        },
        {
          "path": "common/src/templates/initial-agents-dir/my-custom-agent.ts",
          "status": "added",
          "diff": "Index: common/src/templates/initial-agents-dir/my-custom-agent.ts\n===================================================================\n--- common/src/templates/initial-agents-dir/my-custom-agent.ts\t7762897 (parent)\n+++ common/src/templates/initial-agents-dir/my-custom-agent.ts\t26e84af (commit)\n@@ -1,1 +1,44 @@\n-[NEW FILE]\n\\ No newline at end of file\n+/*\n+ *  EDIT ME to create your own agent!\n+ *\n+ *  Change any field below, and consult the AgentDefinition type for information on all fields and their purpose.\n+ *\n+ *  Run your agent with:\n+ *  > codebuff --agent git-committer\n+ *\n+ *  Or, run codebuff normally, and use the '@' menu to mention your agent, and codebuff will spawn it for you.\n+ *\n+ *  Finally, you can publish your agent with 'codebuff publish your-custom-agent' so users from around the world can run it.\n+ */\n+\n+import type { AgentDefinition } from './types/agent-definition'\n+\n+const definition: AgentDefinition = {\n+  id: 'my-custom-agent',\n+  displayName: 'My Custom Agent',\n+\n+  model: 'anthropic/claude-4-sonnet-20250522',\n+  spawnableAgents: ['codebuff/file-explorer@0.0.1'],\n+\n+  // Check out .agents/types/tools.ts for more information on the tools you can include.\n+  toolNames: ['run_terminal_command', 'read_files', 'spawn_agents'],\n+\n+  spawnPurposePrompt:\n+    'Spawn when you need to review code changes in the git diff',\n+\n+  instructionsPrompt: `Review the code changes and suggest improvements.\n+Execute the following steps:\n+1. Run git diff\n+2. Spawn a file explorer to find all relevant files\n+3. Read any relevant files\n+4. Review the changes and suggest improvements`,\n+\n+  // Add more fields here to customize your agent further:\n+  // - system prompt\n+  // - input/output schema\n+  // - handleSteps\n+\n+  // Check out the examples in .agents/examples for more ideas!\n+}\n+\n+export default definition\n"
        },
        {
          "path": "common/src/templates/initial-agents-dir/types/agent-definition.ts",
          "status": "added",
          "diff": "Index: common/src/templates/initial-agents-dir/types/agent-definition.ts\n===================================================================\n--- common/src/templates/initial-agents-dir/types/agent-definition.ts\t7762897 (parent)\n+++ common/src/templates/initial-agents-dir/types/agent-definition.ts\t26e84af (commit)\n@@ -1,1 +1,312 @@\n-[NEW FILE]\n\\ No newline at end of file\n+/**\n+ * Codebuff Agent Type Definitions\n+ *\n+ * This file provides TypeScript type definitions for creating custom Codebuff agents.\n+ * Import these types in your agent files to get full type safety and IntelliSense.\n+ *\n+ * Usage in .agents/your-agent.ts:\n+ *   import { AgentDefinition, ToolName, ModelName } from './types/agent-definition'\n+ *\n+ *   const definition: AgentDefinition = {\n+ *     // ... your agent configuration with full type safety ...\n+ *   }\n+ *\n+ *   export default definition\n+ */\n+\n+// ============================================================================\n+// Agent Definition and Utility Types\n+// ============================================================================\n+\n+export interface AgentDefinition {\n+  /** Unique identifier for this agent. Must contain only lowercase letters, numbers, and hyphens, e.g. 'code-reviewer' */\n+  id: string\n+\n+  /** Version string (if not provided, will default to '0.0.1' and be bumped on each publish) */\n+  version?: string\n+\n+  /** Publisher ID for the agent. Must be provided if you want to publish the agent. */\n+  publisher?: string\n+\n+  /** Human-readable name for the agent */\n+  displayName: string\n+\n+  /** AI model to use for this agent. Can be any model in OpenRouter: https://openrouter.ai/models */\n+  model: ModelName\n+\n+  // ============================================================================\n+  // Tools and Subagents\n+  // ============================================================================\n+\n+  /** Tools this agent can use. */\n+  toolNames?: ToolName[]\n+\n+  /** Other agents this agent can spawn, like 'codebuff/file-picker@0.0.1'.\n+   *\n+   * Use the fully qualified agent id from the agent store, including publisher and version: 'codebuff/file-picker@0.0.1'\n+   * (publisher and version are required!)\n+   *\n+   * Or, use the agent id from a local agent file in your .agents directory: 'file-picker'.\n+   */\n+  spawnableAgents?: string[]\n+\n+  // ============================================================================\n+  // Input and Output\n+  // ============================================================================\n+\n+  /** The input schema required to spawn the agent. Provide a prompt string and/or a params object or none.\n+   * 80% of the time you want just a prompt string with a description:\n+   * inputSchema: {\n+   *   prompt: { type: 'string', description: 'A description of what info would be helpful to the agent' }\n+   * }\n+   */\n+  inputSchema?: {\n+    prompt?: { type: 'string'; description?: string }\n+    params?: JsonSchema\n+  }\n+\n+  /** Whether to include conversation history from the parent agent in context.\n+   *\n+   * Defaults to false.\n+   * Use this if the agent needs to know all the previous messages in the conversation.\n+   */\n+  includeMessageHistory?: boolean\n+\n+  /** How the agent should output a response to its parent (defaults to 'last_message')\n+   *\n+   * last_message: The last message from the agent, typcically after using tools.\n+   *\n+   * all_messages: All messages from the agent, including tool calls and results.\n+   *\n+   * json: Make the agent output a JSON object. Can be used with outputSchema or without if you want freeform json output.\n+   */\n+  outputMode?: 'last_message' | 'all_messages' | 'structured_output'\n+\n+  /** JSON schema for structured output (when outputMode is 'structured_output') */\n+  outputSchema?: JsonSchema\n+\n+  // ============================================================================\n+  // Prompts\n+  // ============================================================================\n+\n+  /** Prompt for when and why to spawn this agent. Include the main purpose and use cases.\n+   *\n+   * This field is key if the agent is intended to be spawned by other agents. */\n+  spawnPurposePrompt?: string\n+\n+  /** Background information for the agent. Fairly optional. Prefer using instructionsPrompt for agent instructions. */\n+  systemPrompt?: string\n+\n+  /** Instructions for the agent.\n+   *\n+   * IMPORTANT: Updating this prompt is the best way to shape the agent's behavior.\n+   * This prompt is inserted after each user input. */\n+  instructionsPrompt?: string\n+\n+  /** Prompt inserted at each agent step.\n+   *\n+   * Powerful for changing the agent's behavior, but usually not necessary for smart models.\n+   * Prefer instructionsPrompt for most instructions. */\n+  stepPrompt?: string\n+\n+  // ============================================================================\n+  // Handle Steps\n+  // ============================================================================\n+\n+  /** Programmatically step the agent forward and run tools.\n+   *\n+   * You can either yield:\n+   * - A tool call object with toolName and args properties.\n+   * - 'STEP' to run agent's model and generate one assistant message.\n+   * - 'STEP_ALL' to run the agent's model until it uses the end_turn tool or stops includes no tool calls in a message.\n+   *\n+   * Or use 'return' to end the turn.\n+   *\n+   * Example 1:\n+   * function* handleSteps({ agentStep, prompt, params}) {\n+   *   const { toolResult } = yield {\n+   *     toolName: 'read_files',\n+   *     args: { paths: ['file1.txt', 'file2.txt'] }\n+   *   }\n+   *   yield 'STEP_ALL'\n+   * }\n+   *\n+   * Example 2:\n+   * handleSteps: function* ({ agentState, prompt, params }) {\n+   *   while (true) {\n+   *     yield {\n+   *       toolName: 'spawn_agents',\n+   *       args: {\n+   *         agents: [\n+   *         {\n+   *           agent_type: 'thinker',\n+   *           prompt: 'Think deeply about the user request',\n+   *         },\n+   *       ],\n+   *     },\n+   *   }\n+   *   yield 'STEP'\n+   * }\n+   * }\n+   */\n+  handleSteps?: (\n+    context: AgentStepContext,\n+  ) => Generator<\n+    ToolCall | 'STEP' | 'STEP_ALL',\n+    void,\n+    { agentState: AgentState; toolResult: string | undefined }\n+  >\n+}\n+\n+// ============================================================================\n+// Supporting Types\n+// ============================================================================\n+\n+export interface AgentState {\n+  agentId: string\n+  parentId: string\n+  messageHistory: Message[]\n+}\n+\n+/**\n+ * Message in conversation history\n+ */\n+export interface Message {\n+  role: 'user' | 'assistant'\n+  content: string\n+}\n+\n+/**\n+ * Context provided to handleSteps generator function\n+ */\n+export interface AgentStepContext {\n+  agentState: AgentState\n+  prompt?: string\n+  params?: Record<string, any>\n+}\n+\n+/**\n+ * Tool call object for handleSteps generator\n+ */\n+export type ToolCall<T extends ToolName = ToolName> = {\n+  [K in T]: {\n+    toolName: K\n+    args?: Tools.GetToolParams<K>\n+  }\n+}[T]\n+\n+/**\n+ * JSON Schema definition (for prompt schema or output schema)\n+ */\n+export interface JsonSchema {\n+  type: string\n+  properties?: Record<string, any>\n+  required?: string[]\n+  [key: string]: any\n+}\n+\n+// ============================================================================\n+// Available Tools\n+// ============================================================================\n+\n+/**\n+ * File operation tools\n+ */\n+export type FileTools =\n+  | 'read_files'\n+  | 'write_file'\n+  | 'str_replace'\n+  | 'find_files'\n+\n+/**\n+ * Code analysis tools\n+ */\n+export type CodeAnalysisTools = 'code_search' | 'find_files'\n+\n+/**\n+ * Terminal and system tools\n+ */\n+export type TerminalTools = 'run_terminal_command' | 'run_file_change_hooks'\n+\n+/**\n+ * Web and browser tools\n+ */\n+export type WebTools = 'web_search' | 'read_docs'\n+\n+/**\n+ * Agent management tools\n+ */\n+export type AgentTools = 'spawn_agents' | 'set_messages' | 'add_message'\n+\n+/**\n+ * Planning and organization tools\n+ */\n+export type PlanningTools = 'think_deeply'\n+\n+/**\n+ * Output and control tools\n+ */\n+export type OutputTools = 'set_output' | 'end_turn'\n+\n+/**\n+ * Common tool combinations for convenience\n+ */\n+export type FileEditingTools = FileTools | 'end_turn'\n+export type ResearchTools = WebTools | 'write_file' | 'end_turn'\n+export type CodeAnalysisToolSet = FileTools | CodeAnalysisTools | 'end_turn'\n+\n+// ============================================================================\n+// Available Models (see: https://openrouter.ai/models)\n+// ============================================================================\n+\n+/**\n+ * AI models available for agents. Pick from our selection of recommended models or choose any model in OpenRouter.\n+ *\n+ * See available models at https://openrouter.ai/models\n+ */\n+export type ModelName =\n+  // Recommended Models\n+\n+  // OpenAI\n+  | 'openai/gpt-5'\n+  | 'openai/gpt-5-mini'\n+  | 'openai/gpt-5-nano'\n+\n+  // Anthropic\n+  | 'anthropic/claude-4-sonnet-20250522'\n+  | 'anthropic/claude-opus-4.1'\n+\n+  // Gemini\n+  | 'google/gemini-2.5-pro'\n+  | 'google/gemini-2.5-flash'\n+  | 'google/gemini-2.5-flash-lite'\n+\n+  // X-AI\n+  | 'x-ai/grok-4-07-09'\n+\n+  // Qwen\n+  | 'qwen/qwen3-coder'\n+  | 'qwen/qwen3-coder:fast'\n+  | 'qwen/qwen3-235b-a22b-2507'\n+  | 'qwen/qwen3-235b-a22b-2507:fast'\n+  | 'qwen/qwen3-235b-a22b-thinking-2507'\n+  | 'qwen/qwen3-235b-a22b-thinking-2507:fast'\n+  | 'qwen/qwen3-30b-a3b'\n+  | 'qwen/qwen3-30b-a3b:fast'\n+\n+  // DeepSeek\n+  | 'deepseek/deepseek-chat-v3-0324'\n+  | 'deepseek/deepseek-chat-v3-0324:fast'\n+  | 'deepseek/deepseek-r1-0528'\n+  | 'deepseek/deepseek-r1-0528:fast'\n+\n+  // Other open source models\n+  | 'moonshotai/kimi-k2'\n+  | 'moonshotai/kimi-k2:fast'\n+  | 'z-ai/glm-4.5'\n+  | 'z-ai/glm-4.5:fast'\n+  | (string & {})\n+\n+import type * as Tools from './tools'\n+export type { Tools }\n+type ToolName = Tools.ToolName\n"
        },
        {
          "path": "common/src/templates/initial-agents-dir/types/tools.ts",
          "status": "added",
          "diff": "Index: common/src/templates/initial-agents-dir/types/tools.ts\n===================================================================\n--- common/src/templates/initial-agents-dir/types/tools.ts\t7762897 (parent)\n+++ common/src/templates/initial-agents-dir/types/tools.ts\t26e84af (commit)\n@@ -1,1 +1,194 @@\n-[NEW FILE]\n\\ No newline at end of file\n+/**\n+ * Union type of all available tool names\n+ */\n+export type ToolName =\n+  | 'add_message'\n+  | 'code_search'\n+  | 'end_turn'\n+  | 'find_files'\n+  | 'read_docs'\n+  | 'read_files'\n+  | 'run_file_change_hooks'\n+  | 'run_terminal_command'\n+  | 'set_messages'\n+  | 'set_output'\n+  | 'spawn_agents'\n+  | 'str_replace'\n+  | 'think_deeply'\n+  | 'web_search'\n+  | 'write_file'\n+\n+/**\n+ * Map of tool names to their parameter types\n+ */\n+export interface ToolParamsMap {\n+  add_message: AddMessageParams\n+  code_search: CodeSearchParams\n+  end_turn: EndTurnParams\n+  find_files: FindFilesParams\n+  read_docs: ReadDocsParams\n+  read_files: ReadFilesParams\n+  run_file_change_hooks: RunFileChangeHooksParams\n+  run_terminal_command: RunTerminalCommandParams\n+  set_messages: SetMessagesParams\n+  set_output: SetOutputParams\n+  spawn_agents: SpawnAgentsParams\n+  str_replace: StrReplaceParams\n+  think_deeply: ThinkDeeplyParams\n+  web_search: WebSearchParams\n+  write_file: WriteFileParams\n+}\n+\n+/**\n+ * Add a new message to the conversation history. To be used for complex requests that can't be solved in a single step, as you may forget what happened!\n+ */\n+export interface AddMessageParams {\n+  role: 'user' | 'assistant'\n+  content: string\n+}\n+\n+/**\n+ * Search for string patterns in the project's files. This tool uses ripgrep (rg), a fast line-oriented search tool. Use this tool only when read_files is not sufficient to find the files you need.\n+ */\n+export interface CodeSearchParams {\n+  /** The pattern to search for. */\n+  pattern: string\n+  /** Optional ripgrep flags to customize the search (e.g., \"-i\" for case-insensitive, \"-t ts\" for TypeScript files only, \"-A 3\" for 3 lines after match, \"-B 2\" for 2 lines before match, \"--type-not test\" to exclude test files). */\n+  flags?: string\n+  /** Optional working directory to search within, relative to the project root. Defaults to searching the entire project. */\n+  cwd?: string\n+}\n+\n+/**\n+ * End your turn, regardless of any new tool results that might be coming. This will allow the user to type another prompt.\n+ */\n+export interface EndTurnParams {}\n+\n+/**\n+ * Find several files related to a brief natural language description of the files or the name of a function or class you are looking for.\n+ */\n+export interface FindFilesParams {\n+  /** A brief natural language description of the files or the name of a function or class you are looking for. It's also helpful to mention a directory or two to look within. */\n+  prompt: string\n+}\n+\n+/**\n+ * Fetch up-to-date documentation for libraries and frameworks using Context7 API.\n+ */\n+export interface ReadDocsParams {\n+  /** The exact library or framework name (e.g., \"Next.js\", \"MongoDB\", \"React\"). Use the official name as it appears in documentation, not a search query. */\n+  libraryTitle: string\n+  /** Optional specific topic to focus on (e.g., \"routing\", \"hooks\", \"authentication\") */\n+  topic?: string\n+  /** Optional maximum number of tokens to return. Defaults to 10000. Values less than 10000 are automatically increased to 10000. */\n+  max_tokens?: number\n+}\n+\n+/**\n+ * Read the multiple files from disk and return their contents. Use this tool to read as many files as would be helpful to answer the user's request.\n+ */\n+export interface ReadFilesParams {\n+  /** List of file paths to read. */\n+  paths: string[]\n+}\n+\n+/**\n+ * Parameters for run_file_change_hooks tool\n+ */\n+export interface RunFileChangeHooksParams {\n+  /** List of file paths that were changed and should trigger file change hooks */\n+  files: string[]\n+}\n+\n+/**\n+ * Execute a CLI command from the **project root** (different from the user's cwd).\n+ */\n+export interface RunTerminalCommandParams {\n+  /** CLI command valid for user's OS. */\n+  command: string\n+  /** Either SYNC (waits, returns output) or BACKGROUND (runs in background). Default SYNC */\n+  process_type?: 'SYNC' | 'BACKGROUND'\n+  /** The working directory to run the command in. Default is the project root. */\n+  cwd?: string\n+  /** Set to -1 for no timeout. Does not apply for BACKGROUND commands. Default 30 */\n+  timeout_seconds?: number\n+}\n+\n+/**\n+ * Set the conversation history to the provided messages.\n+ */\n+export interface SetMessagesParams {\n+  messages: {\n+    role: 'user' | 'assistant'\n+    content: string\n+  }[]\n+}\n+\n+/**\n+ * JSON object to set as the agent output. This completely replaces any previous output. If the agent was spawned, this value will be passed back to its parent. If the agent has an outputSchema defined, the output will be validated against it.\n+ */\n+export interface SetOutputParams {}\n+\n+/**\n+ * Spawn multiple agents and send a prompt to each of them.\n+ */\n+export interface SpawnAgentsParams {\n+  agents: {\n+    /** Agent to spawn */\n+    agent_type: string\n+    /** Prompt to send to the agent */\n+    prompt?: string\n+    /** Parameters object for the agent (if any) */\n+    params?: Record<string, any>\n+  }[]\n+}\n+\n+/**\n+ * Replace strings in a file with new strings.\n+ */\n+export interface StrReplaceParams {\n+  /** The path to the file to edit. */\n+  path: string\n+  /** Array of replacements to make. */\n+  replacements: {\n+    /** The string to replace. This must be an *exact match* of the string you want to replace, including whitespace and punctuation. */\n+    old: string\n+    /** The string to replace the corresponding old string with. Can be empty to delete. */\n+    new: string\n+  }[]\n+}\n+\n+/**\n+ * Deeply consider complex tasks by brainstorming approaches and tradeoffs step-by-step.\n+ */\n+export interface ThinkDeeplyParams {\n+  /** Detailed step-by-step analysis. Initially keep each step concise (max ~5-7 words per step). */\n+  thought: string\n+}\n+\n+/**\n+ * Search the web for current information using Linkup API.\n+ */\n+export interface WebSearchParams {\n+  /** The search query to find relevant web content */\n+  query: string\n+  /** Search depth - 'standard' for quick results, 'deep' for more comprehensive search. Default is 'standard'. */\n+  depth: 'standard' | 'deep'\n+}\n+\n+/**\n+ * Create or edit a file with the given content.\n+ */\n+export interface WriteFileParams {\n+  /** Path to the file relative to the **project root** */\n+  path: string\n+  /** What the change is intended to do in only one sentence. */\n+  instructions: string\n+  /** Edit snippet to apply to the file. */\n+  content: string\n+}\n+\n+/**\n+ * Get parameters type for a specific tool\n+ */\n+export type GetToolParams<T extends ToolName> = ToolParamsMap[T]\n"
        },
        {
          "path": "common/src/types/__tests__/dynamic-agent-template.test.ts",
          "status": "modified",
          "diff": "Index: common/src/types/__tests__/dynamic-agent-template.test.ts\n===================================================================\n--- common/src/types/__tests__/dynamic-agent-template.test.ts\t7762897 (parent)\n+++ common/src/types/__tests__/dynamic-agent-template.test.ts\t26e84af (commit)\n@@ -1,7 +1,7 @@\n-import type { AgentDefinition } from '../agent-definition'\n-import type { DynamicAgentDefinition } from '../dynamic-agent-template'\n+import type { AgentDefinition } from '../../templates/initial-agents-dir/types/agent-definition'\n import type { publishedTools } from '../../tools/constants'\n+import type { DynamicAgentDefinition } from '../dynamic-agent-template'\n \n // Create a version of DynamicAgentDefinition where handleSteps is compatible with AgentDefinition\n \n type DynamicAgentDefinitionHandleSteps = Omit<\n"
        },
        {
          "path": "common/src/types/agent-definition.ts",
          "status": "deleted",
          "diff": "Index: common/src/types/agent-definition.ts\n===================================================================\n--- common/src/types/agent-definition.ts\t7762897 (parent)\n+++ common/src/types/agent-definition.ts\t26e84af (commit)\n@@ -1,1 +1,1 @@\n-export * from '../../../.agents/types/agent-definition'\n+[DELETED]\n\\ No newline at end of file\n"
        },
        {
          "path": "common/src/types/agent-template.ts",
          "status": "modified",
          "diff": "Index: common/src/types/agent-template.ts\n===================================================================\n--- common/src/types/agent-template.ts\t7762897 (parent)\n+++ common/src/types/agent-template.ts\t26e84af (commit)\n@@ -1,9 +1,9 @@\n-import type { ToolCall } from './agent-definition'\n import type { Model } from '../constants'\n import type { AgentState, AgentTemplateType } from './session-state'\n import type { ToolName } from '../tools/constants'\n import type { z } from 'zod/v4'\n+import type { ToolCall } from '../templates/initial-agents-dir/types/agent-definition'\n \n export type AgentTemplate<\n   P = string | undefined,\n   T = Record<string, any> | undefined,\n"
        },
        {
          "path": "npm-app/src/cli-handlers/agents.ts",
          "status": "modified",
          "diff": "Index: npm-app/src/cli-handlers/agents.ts\n===================================================================\n--- npm-app/src/cli-handlers/agents.ts\t7762897 (parent)\n+++ npm-app/src/cli-handlers/agents.ts\t26e84af (commit)\n@@ -1,26 +1,24 @@\n import * as fs from 'fs'\n import * as path from 'path'\n \n-// Import files to replicate in the user's .agents directory:\n-\n import { AGENT_TEMPLATES_DIR } from '@codebuff/common/old-constants'\n import {\n   filterCustomAgentFiles,\n   extractAgentIdFromFileName,\n } from '@codebuff/common/util/agent-file-utils'\n import { green, yellow, cyan, magenta, bold, gray, red } from 'picocolors'\n-\n-import basicDiffReviewer from '../../../.agents/examples/01-basic-diff-reviewer' with { type: 'text' }\n-import intermediateGitCommitter from '../../../.agents/examples/02-intermediate-git-committer' with { type: 'text' }\n-import advancedFileExplorer from '../../../.agents/examples/03-advanced-file-explorer' with { type: 'text' }\n+// Import files to replicate in the user's .agents directory. Bun bundler requires relative paths.\n+// @ts-ignore - It complains about the .md file, but it works.\n+import readmeContent from '../../../common/src/templates/initial-agents-dir/README.md' with { type: 'text' }\n // @ts-ignore - No default import, but we are importing as text so it's fine\n-import agentDefinitionTypes from '../../../.agents/types/agent-definition' with { type: 'text' }\n+import agentDefinitionTypes from '../../../common/src/templates/initial-agents-dir/types/agent-definition' with { type: 'text' }\n // @ts-ignore - No default import, but we are importing as text so it's fine\n-import toolsTypes from '../../../.agents/types/tools' with { type: 'text' }\n-// @ts-ignore - It complains about the .md file, but it works.\n-import readmeContent from '../../../.agents/README.md' with { type: 'text' }\n-import myCustomAgent from '../../../.agents/my-custom-agent' with { type: 'text' }\n+import toolsTypes from '../../../common/src/templates/initial-agents-dir/types/tools' with { type: 'text' }\n+import basicDiffReviewer from '../../../common/src/templates/initial-agents-dir/examples/01-basic-diff-reviewer' with { type: 'text' }\n+import intermediateGitCommitter from '../../../common/src/templates/initial-agents-dir/examples/02-intermediate-git-committer' with { type: 'text' }\n+import advancedFileExplorer from '../../../common/src/templates/initial-agents-dir/examples/03-advanced-file-explorer' with { type: 'text' }\n+import myCustomAgent from '../../../common/src/templates/initial-agents-dir/my-custom-agent' with { type: 'text' }\n \n import { loadLocalAgents, getLoadedAgentNames } from '../agents/load-agents'\n import { CLI } from '../cli'\n import { getProjectRoot } from '../project-files'\n"
        },
        {
          "path": "sdk/src/client.ts",
          "status": "modified",
          "diff": "Index: sdk/src/client.ts\n===================================================================\n--- sdk/src/client.ts\t7762897 (parent)\n+++ sdk/src/client.ts\t26e84af (commit)\n@@ -11,11 +11,11 @@\n } from '../../common/src/actions'\n import { API_KEY_ENV_VAR } from '../../common/src/constants'\n import { getInitialSessionState } from '../../common/src/types/session-state'\n \n-import type { AgentDefinition } from '../../common/src/types/agent-definition'\n import type { PrintModeEvent } from '../../common/src/types/print-mode'\n import type { SessionState } from '../../common/src/types/session-state'\n+import type { AgentDefinition } from '../../common/src/templates/initial-agents-dir/types/agent-definition'\n \n type ClientToolName = 'write_file' | 'run_terminal_command'\n \n export type CodebuffClientOptions = {\n"
        },
        {
          "path": "sdk/src/index.ts",
          "status": "modified",
          "diff": "Index: sdk/src/index.ts\n===================================================================\n--- sdk/src/index.ts\t7762897 (parent)\n+++ sdk/src/index.ts\t26e84af (commit)\n@@ -1,4 +1,4 @@\n export { CodebuffClient } from './client'\n export { WebSocketHandler } from './websocket-client'\n export { getInitialSessionState } from '../../common/src/types/session-state'\n-export type { AgentDefinition } from '../../common/src/types/agent-definition'\n+export type { AgentDefinition } from '../../common/src/templates/initial-agents-dir/types/agent-definition'\n\\ No newline at end of file\n"
        }
      ]
    },
    {
      "id": "overhaul-agent-examples",
      "sha": "bf5872d60ba26b3b0a03238d270984be17f87d99",
      "parentSha": "68e4f6ce62d16e00fd22474a70c1a6573773749b",
      "spec": "Implement an overhaul of example agents and scaffolding across the .agents and npm-app CLI:\n\n1) Update .agents/changes-reviewer.ts\n- Add spawnPurposePrompt: \"Spawn when you need to review code changes in the git diff or staged changes\".\n- Change toolNames to: ['read_files', 'run_terminal_command', 'spawn_agents'] (remove 'end_turn').\n- Add spawnableAgents: ['codebuff/file-explorer@0.0.1'].\n- In handleSteps, after reading files and running git diff, insert a yield that adds an assistant message to seed spawning a file explorer, then continue execution:\n  - yield { toolName: 'add_message', args: { role: 'assistant', content: 'Now I will spawn a file explorer to find any missing codebase context, and then review the changes.' } }\n  - yield 'STEP_ALL'\n- Remove outputMode if present (default behavior is fine).\n\n2) Replace example agents in .agents/examples\n- Remove files: .agents/examples/diff-reviewer-2.ts and .agents/examples/diff-reviewer-3.ts.\n- Add new files with the following identifiers, prompts, and tools:\n  a) .agents/examples/01-basic-diff-reviewer.ts\n     - id: 'basic-diff-reviewer'; displayName: 'Basic Diff Reviewer'; model: 'anthropic/claude-4-sonnet-20250522'.\n     - toolNames: ['read_files', 'run_terminal_command'].\n     - spawnPurposePrompt: 'Spawn when you need to review code changes in the git diff'.\n     - instructionsPrompt: multi-step: 1) Run git diff; 2) Read files that changed; 3) Review and suggest improvements.\n  b) .agents/examples/02-intermediate-git-committer.ts\n     - id: 'git-committer'; displayName: 'Intermediate Git Committer'; model: 'anthropic/claude-4-sonnet-20250522'.\n     - toolNames: ['read_files', 'run_terminal_command', 'add_message', 'end_turn'].\n     - inputSchema: prompt string describing what to commit.\n     - spawnPurposePrompt: commit code changes with an appropriate message.\n     - systemPrompt: expert developer creating a high-quality commit message.\n     - instructionsPrompt: analyze changes (git diff, git log), read context, stage appropriately, and create a well-formatted commit.\n     - handleSteps: run 'git diff' and 'git log --oneline -10'; add an assistant message indicating reading relevant files next; yield 'STEP'; add an assistant message indicating analysis and commit; yield 'STEP_ALL'.\n  c) .agents/examples/03-advanced-file-explorer.ts\n     - id: 'advanced-file-explorer'; displayName: 'Dora the File Explorer'; model: 'openai/gpt-5'.\n     - includeMessageHistory: false; toolNames: ['spawn_agents', 'set_output']; spawnableAgents: ['codebuff/file-picker@0.0.1'].\n     - inputSchema: prompt string + params.prompts (array of 1–4 focus areas); outputMode: 'structured_output' with outputSchema requiring { results: string }.\n     - handleSteps: map params.prompts into separate file-picker prompts, spawn all via spawn_agents, then set_output with the aggregated spawn result.\n\n3) Enhance .agents/file-explorer.ts\n- Ensure model remains 'anthropic/claude-4-sonnet-20250522', includeMessageHistory: false, toolNames: ['spawn_agents', 'set_output'], spawnableAgents: ['file-picker'].\n- Add outputSchema matching structured_output with a required 'results' field of type string.\n- Keep existing handleSteps that spawns local 'file-picker' agents and returns results via set_output.\n\n4) Retool .agents/my-custom-agent.ts toward code review\n- Change displayName from 'Git Committer' to 'My Custom Agent'.\n- Update spawnPurposePrompt to: 'Spawn when you need to review code changes in the git diff'.\n- Update instructionsPrompt to emphasize reviewing changes instead of committing:\n  1) Run git diff\n  2) Spawn a file explorer to find relevant files\n  3) Read any relevant files\n  4) Review the changes and suggest improvements\n- Keep toolNames including 'run_terminal_command', 'read_files', and 'spawn_agents'.\n\n5) Update CLI scaffolding in npm-app/src/cli-handlers/agents.ts\n- Replace imports of diff-reviewer-1/2/3 with text imports for the new examples:\n  - 01-basic-diff-reviewer, 02-intermediate-git-committer, 03-advanced-file-explorer.\n- In createExampleAgentFiles(), update filesToCreate entries under examplesDir to create:\n  - '01-basic-diff-reviewer.ts' with basicDiffReviewer content and description 'Basic diff reviewer agent example'.\n  - '02-intermediate-git-committer.ts' with intermediateGitCommitter content and description 'Intermediate git commiter agent example'.\n  - '03-advanced-file-explorer.ts' with advancedFileExplorer content and description 'Advanced file explorer agent example'.\n- Keep README and types files unchanged and still created.\n\nNotes/Consistency:\n- Use the fully qualified agent id 'codebuff/file-explorer@0.0.1' and 'codebuff/file-picker@0.0.1' where indicated.\n- Do not alter other CLI behavior or menu rendering; only update template imports and write targets/descriptions.\n- Preserve existing code style and import ordering used in the surrounding file.",
      "prompt": "Overhaul the example agents and CLI scaffolding. Replace the older diff-reviewer-* examples with three new examples (basic diff reviewer, intermediate git committer, advanced file explorer), update the CLI to create these files in .agents/examples, enhance the changes-reviewer agent to be able to spawn the file explorer while reviewing diffs or staged changes, add structured output to the file-explorer agent, and revise the default my-custom-agent to focus on reviewing changes rather than committing. Keep existing types and README generation intact.",
      "supplementalFiles": [
        ".agents/types/agent-definition.ts",
        ".agents/types/tools.ts",
        ".agents/README.md",
        "npm-app/src/agents/agent-utils.ts",
        "npm-app/src/agents/load-agents.ts",
        "common/src/util/agent-file-utils.ts"
      ],
      "fileDiffs": [
        {
          "path": ".agents/changes-reviewer.ts",
          "status": "modified",
          "diff": "Index: .agents/changes-reviewer.ts\n===================================================================\n--- .agents/changes-reviewer.ts\t68e4f6c (parent)\n+++ .agents/changes-reviewer.ts\tbf5872d (commit)\n@@ -13,21 +13,22 @@\n   model: 'x-ai/grok-4',\n \n   includeMessageHistory: false,\n \n+  spawnPurposePrompt:\n+    'Spawn when you need to review code changes in the git diff or staged changes',\n+\n+  toolNames: ['read_files', 'run_terminal_command', 'spawn_agents'],\n+  spawnableAgents: ['codebuff/file-explorer@0.0.1'],\n+\n   inputSchema: {\n     prompt: {\n       type: 'string',\n       description:\n         'Please provide a short description of the changes you want to review',\n     },\n   },\n-  outputMode: 'last_message',\n \n-  toolNames: ['read_files', 'run_terminal_command', 'end_turn'],\n-\n-  spawnPurposePrompt: 'Spawn when you need to review code changes',\n-\n   systemPrompt:\n     'You are an expert software developer. Your job is to review code changes and provide helpful feedback.',\n \n   instructionsPrompt: `\n@@ -101,9 +102,18 @@\n         },\n       }\n     }\n \n-    // Step 7: Let AI review the changes (and take as many steps as needed)\n+    // Step 5: Put words in the AI's mouth to get it to spawn the file explorer.\n+    yield {\n+      toolName: 'add_message',\n+      args: {\n+        role: 'assistant',\n+        content:\n+          'Now I will spawn a file explorer to find any missing codebase context, and then review the changes.',\n+      },\n+    }\n+\n     yield 'STEP_ALL'\n   },\n }\n \n"
        },
        {
          "path": ".agents/examples/01-basic-diff-reviewer.ts",
          "status": "added",
          "diff": "Index: .agents/examples/01-basic-diff-reviewer.ts\n===================================================================\n--- .agents/examples/01-basic-diff-reviewer.ts\t68e4f6c (parent)\n+++ .agents/examples/01-basic-diff-reviewer.ts\tbf5872d (commit)\n@@ -1,1 +1,18 @@\n-[NEW FILE]\n\\ No newline at end of file\n+import type { AgentDefinition } from '../types/agent-definition'\n+\n+const definition: AgentDefinition = {\n+  id: 'basic-diff-reviewer',\n+  displayName: 'Basic Diff Reviewer',\n+  model: 'anthropic/claude-4-sonnet-20250522',\n+  toolNames: ['read_files', 'run_terminal_command'],\n+\n+  spawnPurposePrompt:\n+    'Spawn when you need to review code changes in the git diff',\n+\n+  instructionsPrompt: `Execute the following steps:\n+1. Run git diff\n+2. Read the files that have changed\n+3. Review the changes and suggest improvements`,\n+}\n+\n+export default definition\n"
        },
        {
          "path": ".agents/examples/02-intermediate-git-committer.ts",
          "status": "added",
          "diff": "Index: .agents/examples/02-intermediate-git-committer.ts\n===================================================================\n--- .agents/examples/02-intermediate-git-committer.ts\t68e4f6c (parent)\n+++ .agents/examples/02-intermediate-git-committer.ts\tbf5872d (commit)\n@@ -1,1 +1,75 @@\n-[NEW FILE]\n\\ No newline at end of file\n+import type {\n+  AgentDefinition,\n+  AgentStepContext,\n+} from '../types/agent-definition'\n+\n+const definition: AgentDefinition = {\n+  id: 'git-committer',\n+  displayName: 'Intermediate Git Committer',\n+  model: 'anthropic/claude-4-sonnet-20250522',\n+  toolNames: ['read_files', 'run_terminal_command', 'add_message', 'end_turn'],\n+\n+  inputSchema: {\n+    prompt: {\n+      type: 'string',\n+      description: 'What changes to commit',\n+    },\n+  },\n+\n+  spawnPurposePrompt:\n+    'Spawn when you need to commit code changes to git with an appropriate commit message',\n+\n+  systemPrompt:\n+    'You are an expert software developer. Your job is to create a git commit with a really good commit message.',\n+\n+  instructionsPrompt:\n+    'Follow the steps to create a good commit: analyze changes with git diff and git log, read relevant files for context, stage appropriate files, analyze changes, and create a commit with proper formatting.',\n+\n+  handleSteps: function* ({ agentState, prompt, params }: AgentStepContext) {\n+    // Step 1: Run git diff and git log to analyze changes.\n+    yield {\n+      toolName: 'run_terminal_command',\n+      args: {\n+        command: 'git diff',\n+        process_type: 'SYNC',\n+        timeout_seconds: 30,\n+      },\n+    }\n+\n+    yield {\n+      toolName: 'run_terminal_command',\n+      args: {\n+        command: 'git log --oneline -10',\n+        process_type: 'SYNC',\n+        timeout_seconds: 30,\n+      },\n+    }\n+\n+    // Step 2: Put words in AI's mouth so it will read files next.\n+    yield {\n+      toolName: 'add_message',\n+      args: {\n+        role: 'assistant',\n+        content:\n+          \"I've analyzed the git diff and recent commit history. Now I'll read any relevant files to better understand the context of these changes.\",\n+      },\n+    }\n+\n+    // Step 3: Let AI generate a step to decide which files to read.\n+    yield 'STEP'\n+\n+    // Step 4: Put words in AI's mouth to analyze the changes and create a commit.\n+    yield {\n+      toolName: 'add_message',\n+      args: {\n+        role: 'assistant',\n+        content:\n+          \"Now I'll analyze the changes and create a commit with a good commit message.\",\n+      },\n+    }\n+\n+    yield 'STEP_ALL'\n+  },\n+}\n+\n+export default definition\n"
        },
        {
          "path": ".agents/examples/03-advanced-file-explorer.ts",
          "status": "added",
          "diff": "Index: .agents/examples/03-advanced-file-explorer.ts\n===================================================================\n--- .agents/examples/03-advanced-file-explorer.ts\t68e4f6c (parent)\n+++ .agents/examples/03-advanced-file-explorer.ts\tbf5872d (commit)\n@@ -1,1 +1,73 @@\n-[NEW FILE]\n\\ No newline at end of file\n+import type { AgentDefinition } from '../types/agent-definition'\n+\n+const definition: AgentDefinition = {\n+  id: 'advanced-file-explorer',\n+  displayName: 'Dora the File Explorer',\n+  model: 'openai/gpt-5',\n+\n+  spawnPurposePrompt:\n+    'Spawns multiple file picker agents in parallel to comprehensively explore the codebase from different perspectives',\n+\n+  includeMessageHistory: false,\n+  toolNames: ['spawn_agents', 'set_output'],\n+  spawnableAgents: [`codebuff/file-picker@0.0.1`],\n+\n+  inputSchema: {\n+    prompt: {\n+      description: 'What you need to accomplish by exploring the codebase',\n+      type: 'string',\n+    },\n+    params: {\n+      type: 'object',\n+      properties: {\n+        prompts: {\n+          description:\n+            'List of 1-4 different parts of the codebase that could be useful to explore',\n+          type: 'array',\n+          items: {\n+            type: 'string',\n+          },\n+        },\n+      },\n+      required: ['prompts'],\n+      additionalProperties: false,\n+    },\n+  },\n+  outputMode: 'structured_output',\n+  outputSchema: {\n+    type: 'object',\n+    properties: {\n+      results: {\n+        type: 'string',\n+        description: 'The results of the file exploration',\n+      },\n+    },\n+    required: ['results'],\n+    additionalProperties: false,\n+  },\n+\n+  handleSteps: function* ({ prompt, params }) {\n+    const prompts: string[] = params?.prompts ?? []\n+    const filePickerPrompts = prompts.map(\n+        (focusPrompt) =>\n+          `Based on the overall goal \"${prompt}\", find files related to this specific area: ${focusPrompt}`,\n+      ),\n+      { toolResult: spawnResult } = yield {\n+        toolName: 'spawn_agents',\n+        args: {\n+          agents: filePickerPrompts.map((promptText) => ({\n+            agent_type: 'codebuff/file-picker@0.0.1',\n+            prompt: promptText,\n+          })),\n+        },\n+      }\n+    yield {\n+      toolName: 'set_output',\n+      args: {\n+        results: spawnResult,\n+      },\n+    }\n+  },\n+}\n+\n+export default definition\n"
        },
        {
          "path": ".agents/examples/diff-reviewer-2.ts",
          "status": "deleted",
          "diff": "Index: .agents/examples/diff-reviewer-2.ts\n===================================================================\n--- .agents/examples/diff-reviewer-2.ts\t68e4f6c (parent)\n+++ .agents/examples/diff-reviewer-2.ts\tbf5872d (commit)\n@@ -1,55 +1,1 @@\n-import type {\n-  AgentDefinition,\n-  AgentStepContext,\n-} from '../types/agent-definition'\n-\n-const definition: AgentDefinition = {\n-  id: 'diff-reviewer-2',\n-  displayName: 'Diff Reviewer (Level 2)',\n-  model: 'anthropic/claude-4-sonnet-20250522',\n-\n-  inputSchema: {\n-    prompt: {\n-      type: 'string',\n-      description:\n-        'Please provide a short description of the changes you want to review',\n-    },\n-  },\n-  toolNames: ['read_files', 'run_terminal_command'],\n-\n-  spawnPurposePrompt:\n-    'Spawn when you need to review code changes in the git diff',\n-\n-  systemPrompt:\n-    'You are an expert software developer. Your job is to review code changes and provide helpful feedback.',\n-\n-  instructionsPrompt: `Execute the following steps:\n-1. Run git diff\n-2. Read the files that have changed\n-3. Review the changes and suggest improvements\n-\n-Use the following guidelines while reviewing the changes:\n-- Find ways to simplify the code\n-- Reuse existing code as much as possible instead of writing new code\n-- Preserve as much behavior as possible in the existing code\n-- Prefer changing as few lines of code as possible\n-- Look for opportunities to improve the code's readability\n-- Look for logical errors in the code\n-- Look for missed cases in the code\n-- Look for any other bugs`,\n-\n-  handleSteps: function* ({ agentState, prompt, params }: AgentStepContext) {\n-    // Step 1: Run git diff immediately. Saves the agent a step, lowering cost and latency!\n-    yield {\n-      toolName: 'run_terminal_command',\n-      args: {\n-        command: 'git diff',\n-      },\n-    }\n-\n-    // Step 2: Let AI run the rest of the steps!\n-    yield 'STEP_ALL'\n-  },\n-}\n-\n-export default definition\n+[DELETED]\n\\ No newline at end of file\n"
        },
        {
          "path": ".agents/examples/diff-reviewer-3.ts",
          "status": "deleted",
          "diff": "Index: .agents/examples/diff-reviewer-3.ts\n===================================================================\n--- .agents/examples/diff-reviewer-3.ts\t68e4f6c (parent)\n+++ .agents/examples/diff-reviewer-3.ts\tbf5872d (commit)\n@@ -1,87 +1,1 @@\n-import type {\n-  AgentDefinition,\n-  AgentStepContext,\n-} from '../types/agent-definition'\n-\n-const definition: AgentDefinition = {\n-  id: 'diff-reviewer-3',\n-  displayName: 'Diff Reviewer (Level 3)',\n-  model: 'anthropic/claude-4-sonnet-20250522',\n-  inputSchema: {\n-    prompt: {\n-      type: 'string',\n-      description:\n-        'Please provide a short description of the changes you want to review',\n-    },\n-  },\n-  outputMode: 'last_message',\n-\n-  toolNames: ['read_files', 'run_terminal_command', 'spawn_agents'],\n-  spawnableAgents: ['codebuff/file-explorer@0.0.1'],\n-\n-  spawnPurposePrompt:\n-    'Spawn when you need to review code changes in the git diff',\n-\n-  systemPrompt:\n-    'You are an expert software developer. Your job is to review code changes and provide helpful feedback.',\n-\n-  instructionsPrompt: `Review the changes and suggest improvements.\n-\n-Use the following guidelines while reviewing the changes:\n-- Find ways to simplify the code\n-- Reuse existing code as much as possible instead of writing new code\n-- Preserve as much behavior as possible in the existing code\n-- Prefer changing as few lines of code as possible\n-- Look for opportunities to improve the code's readability\n-- Look for logical errors in the code\n-- Look for missed cases in the code\n-- Look for any other bugs`,\n-\n-  handleSteps: function* ({ agentState, prompt, params }: AgentStepContext) {\n-    // Step 1: Get list of changed files from git diff --name-only\n-    const { toolResult: gitDiffFilesResult } = yield {\n-      toolName: 'run_terminal_command',\n-      args: {\n-        command: 'git diff --name-only',\n-      },\n-    }\n-\n-    // Then, extract file paths from the result\n-    const changedFiles = (gitDiffFilesResult || '')\n-      .split('\\n')\n-      .map((line) => line.trim())\n-      .filter((line) => line && !line.startsWith('??') && !line.includes('OSC'))\n-\n-    // Step 2: Read the files\n-    if (changedFiles.length > 0) {\n-      yield {\n-        toolName: 'read_files',\n-        args: {\n-          paths: changedFiles,\n-        },\n-      }\n-    }\n-\n-    // Step 3: Run full git diff to see the actual changes\n-    yield {\n-      toolName: 'run_terminal_command',\n-      args: {\n-        command: 'git diff',\n-      },\n-    }\n-\n-    // Step 4: Put words in the AI's mouth to get it to spawn the file explorer.\n-    yield {\n-      toolName: 'add_message',\n-      args: {\n-        role: 'assistant',\n-        content:\n-          'Now I will spawn a file explorer to find any missing codebase context, and then review the changes.',\n-      },\n-    }\n-\n-    yield 'STEP_ALL'\n-  },\n-}\n-\n-export default definition\n+[DELETED]\n\\ No newline at end of file\n"
        },
        {
          "path": ".agents/file-explorer.ts",
          "status": "modified",
          "diff": "Index: .agents/file-explorer.ts\n===================================================================\n--- .agents/file-explorer.ts\t68e4f6c (parent)\n+++ .agents/file-explorer.ts\tbf5872d (commit)\n@@ -6,15 +6,18 @@\n   id: 'file-explorer',\n   version,\n   publisher,\n   displayName: 'Dora the File Explorer',\n+  model: 'anthropic/claude-4-sonnet-20250522',\n+\n   spawnPurposePrompt:\n     'Spawns multiple file picker agents in parallel to comprehensively explore the codebase from different perspectives',\n-  model: 'anthropic/claude-4-sonnet-20250522',\n-  outputMode: 'structured_output',\n+\n   includeMessageHistory: false,\n   toolNames: ['spawn_agents', 'set_output'],\n   spawnableAgents: [`file-picker`],\n+\n+  outputMode: 'structured_output',\n   inputSchema: {\n     prompt: {\n       description: 'What you need to accomplish by exploring the codebase',\n       type: 'string',\n@@ -34,8 +37,20 @@\n       required: ['prompts'],\n       additionalProperties: false,\n     },\n   },\n+  outputSchema: {\n+    type: 'object',\n+    properties: {\n+      results: {\n+        type: 'string',\n+        description: 'The results of the file exploration',\n+      },\n+    },\n+    required: ['results'],\n+    additionalProperties: false,\n+  },\n+\n   handleSteps: function* ({ prompt, params }) {\n     const prompts: string[] = params?.prompts ?? []\n     const filePickerPrompts = prompts.map(\n         (focusPrompt) =>\n"
        },
        {
          "path": ".agents/my-custom-agent.ts",
          "status": "modified",
          "diff": "Index: .agents/my-custom-agent.ts\n===================================================================\n--- .agents/my-custom-agent.ts\t68e4f6c (parent)\n+++ .agents/my-custom-agent.ts\tbf5872d (commit)\n@@ -14,25 +14,31 @@\n import type { AgentDefinition } from './types/agent-definition'\n \n const definition: AgentDefinition = {\n   id: 'my-custom-agent',\n-  displayName: 'Git Committer',\n+  displayName: 'My Custom Agent',\n \n   model: 'anthropic/claude-4-sonnet-20250522',\n   spawnableAgents: ['codebuff/file-explorer@0.0.1'],\n \n   // Check out .agents/types/tools.ts for more information on the tools you can include.\n-  toolNames: ['read_files', 'run_terminal_command', 'spawn_agents'],\n+  toolNames: ['run_terminal_command', 'read_files', 'spawn_agents'],\n \n   spawnPurposePrompt:\n-    'Spawn when you need to commit changes to the git repository',\n+    'Spawn when you need to review code changes in the git diff',\n \n-  instructionsPrompt: `Execute the following steps:\n+  instructionsPrompt: `Review the code changes and suggest improvements.\n+Execute the following steps:\n 1. Run git diff\n-2. Spawn a file explorer to find all relevant files to the change so you have the maximum context\n+2. Spawn a file explorer to find all relevant files\n 3. Read any relevant files\n-4. Commit the changes to the git repository with a message that describes the changes`,\n+4. Review the changes and suggest improvements`,\n \n-  // Add more fields here to customize your agent further: system prompt, input/output schema, handleSteps, etc.\n+  // Add more fields here to customize your agent further:\n+  // - system prompt\n+  // - input/output schema\n+  // - handleSteps\n+\n+  // Check out the examples in .agents/examples for more ideas!\n }\n \n export default definition\n"
        },
        {
          "path": "npm-app/src/cli-handlers/agents.ts",
          "status": "modified",
          "diff": "Index: npm-app/src/cli-handlers/agents.ts\n===================================================================\n--- npm-app/src/cli-handlers/agents.ts\t68e4f6c (parent)\n+++ npm-app/src/cli-handlers/agents.ts\tbf5872d (commit)\n@@ -2,27 +2,26 @@\n import * as path from 'path'\n \n // Import files to replicate in the user's .agents directory:\n \n-// import readme from '../../../.agents/README.md' with { type: 'text' }\n-// @ts-ignore - No default import, but we are importing as text so it's fine\n-import agentDefinitionTypes from '../../../.agents/types/agent-definition' with { type: 'text' }\n-// @ts-ignore - No default import, but we are importing as text so it's fine\n-import toolsTypes from '../../../.agents/types/tools' with { type: 'text' }\n-import diffReviewer1 from '../../../.agents/examples/diff-reviewer-1' with { type: 'text' }\n-import diffReviewer2 from '../../../.agents/examples/diff-reviewer-2' with { type: 'text' }\n-import diffReviewer3 from '../../../.agents/examples/diff-reviewer-3' with { type: 'text' }\n-import myCustomAgent from '../../../.agents/my-custom-agent' with { type: 'text' }\n-// @ts-ignore - It complains about the .md file, but it works.\n-import readmeContent from '../../../.agents/README.md' with { type: 'text' }\n-\n import { AGENT_TEMPLATES_DIR } from '@codebuff/common/old-constants'\n import {\n   filterCustomAgentFiles,\n   extractAgentIdFromFileName,\n } from '@codebuff/common/util/agent-file-utils'\n import { green, yellow, cyan, magenta, bold, gray, red } from 'picocolors'\n \n+import basicDiffReviewer from '../../../.agents/examples/01-basic-diff-reviewer' with { type: 'text' }\n+import intermediateGitCommitter from '../../../.agents/examples/02-intermediate-git-committer' with { type: 'text' }\n+import advancedFileExplorer from '../../../.agents/examples/03-advanced-file-explorer' with { type: 'text' }\n+// @ts-ignore - No default import, but we are importing as text so it's fine\n+import agentDefinitionTypes from '../../../.agents/types/agent-definition' with { type: 'text' }\n+// @ts-ignore - No default import, but we are importing as text so it's fine\n+import toolsTypes from '../../../.agents/types/tools' with { type: 'text' }\n+// @ts-ignore - It complains about the .md file, but it works.\n+import readmeContent from '../../../.agents/README.md' with { type: 'text' }\n+import myCustomAgent from '../../../.agents/my-custom-agent' with { type: 'text' }\n+\n import { loadLocalAgents, getLoadedAgentNames } from '../agents/load-agents'\n import { CLI } from '../cli'\n import { getProjectRoot } from '../project-files'\n import { Spinner } from '../utils/spinner'\n@@ -607,21 +606,21 @@\n       content: myCustomAgent,\n       description: 'Your first custom agent example',\n     },\n     {\n-      path: path.join(examplesDir, 'diff-reviewer-1.ts'),\n-      content: diffReviewer1,\n-      description: 'Diff reviewer agent example 1',\n+      path: path.join(examplesDir, '01-basic-diff-reviewer.ts'),\n+      content: basicDiffReviewer,\n+      description: 'Basic diff reviewer agent example',\n     },\n     {\n-      path: path.join(examplesDir, 'diff-reviewer-2.ts'),\n-      content: diffReviewer2,\n-      description: 'Diff reviewer agent example 2',\n+      path: path.join(examplesDir, '02-intermediate-git-committer.ts'),\n+      content: intermediateGitCommitter,\n+      description: 'Intermediate git commiter agent example',\n     },\n     {\n-      path: path.join(examplesDir, 'diff-reviewer-3.ts'),\n-      content: diffReviewer3,\n-      description: 'Diff reviewer agent example 3',\n+      path: path.join(examplesDir, '03-advanced-file-explorer.ts'),\n+      content: advancedFileExplorer,\n+      description: 'Advanced file explorer agent example',\n     },\n   ]\n \n   console.log(green('\\n📁 Creating agent files:'))\n"
        }
      ]
    },
    {
      "id": "expand-agent-types",
      "sha": "68e4f6ce62d16e00fd22474a70c1a6573773749b",
      "parentSha": "02ef7c054af809dd76241aa7d0004e7024614744",
      "spec": "Implement an internal agent type that permits additional (client-only) tools and refactor published tool constants:\n\n1) Add a new internal agent type\n- Create .agents/types/secret-agent-definition.ts that:\n  - Imports AgentDefinition from ./agent-definition and re-exports Tools from ./tools\n  - Defines AllToolNames as a union of Tools.ToolName plus internal-only tools: add_subgoal, browser_logs, create_plan, spawn_agents_async, spawn_agent_inline, update_subgoal\n  - Exports interface SecretAgentDefinition that extends Omit<AgentDefinition, 'toolNames'> and declares toolNames?: AllToolNames[]\n\n2) Update built-in .agents to use the new type\n- In each of these files, change the imported type and the definition typing from AgentDefinition to SecretAgentDefinition:\n  - .agents/ask.ts\n  - .agents/base-experimental.ts\n  - .agents/base-lite.ts\n  - .agents/base-max.ts\n  - .agents/base.ts\n  - .agents/claude4-gemini-thinking.ts\n  - .agents/opensource/base.ts (use relative ../types/secret-agent-definition)\n  - .agents/superagent.ts\n\n3) Split public vs. internal tool lists and update imports\n- Move the public-facing publishedTools constant out of common/src/tools/list.ts into common/src/tools/constants.ts alongside toolNames (the full list of tools). Ensure constants.ts exports publishedTools in addition to toolNames and related types.\n- Remove the exported publishedTools from common/src/tools/list.ts; keep llmToolCallSchema, clientToolCallSchema, and other existing exports intact.\n\n4) Fix consumers of publishedTools\n- Update common/src/tools/compile-tool-definitions.ts to import publishedTools from ./constants (continue importing llmToolCallSchema from ./list).\n- Update common/src/types/__tests__/dynamic-agent-template.test.ts to import type { publishedTools } from ../../tools/constants instead of ../../tools/list.\n\n5) No behavior change, type safety only\n- Do not alter runtime logic, prompts, or tool schemas. The goal is to broaden the typing for internal .agents and maintain the public tools list for validation/generation. Ensure the codebase compiles and tests referencing publishedTools still pass with the new import location.",
      "prompt": "We need to let our internal .agents declare a superset of tools (including some client-only/internal tools) without affecting public agent validation. Add a new SecretAgentDefinition type for .agents that accepts these internal tools, switch our built-in agents to use it, and keep dynamic/public agents constrained to the public tool list. Also relocate the publishedTools constant from the tools list module to the tools constants module and update any imports that depend on it. No runtime behavior should change—this is a type/constant refactor that must compile cleanly and keep existing tests green.",
      "supplementalFiles": [
        ".agents/types/agent-definition.ts",
        ".agents/types/tools.ts",
        "common/src/types/agent-definition.ts",
        "common/src/types/dynamic-agent-template.ts",
        "common/src/templates/agent-validation.ts",
        "backend/src/templates/agents/base.ts"
      ],
      "fileDiffs": [
        {
          "path": ".agents/ask.ts",
          "status": "modified",
          "diff": "Index: .agents/ask.ts\n===================================================================\n--- .agents/ask.ts\t02ef7c0 (parent)\n+++ .agents/ask.ts\t68e4f6c (commit)\n@@ -1,9 +1,9 @@\n import { publisher, version } from './constants'\n \n-import type { AgentDefinition } from './types/agent-definition'\n+import type { SecretAgentDefinition } from './types/secret-agent-definition'\n \n-const definition: AgentDefinition = {\n+const definition: SecretAgentDefinition = {\n   id: 'ask',\n   version,\n   publisher,\n   model: 'gemini-2.5-pro-preview-06-05',\n"
        },
        {
          "path": ".agents/base-experimental.ts",
          "status": "modified",
          "diff": "Index: .agents/base-experimental.ts\n===================================================================\n--- .agents/base-experimental.ts\t02ef7c0 (parent)\n+++ .agents/base-experimental.ts\t68e4f6c (commit)\n@@ -1,9 +1,9 @@\n import { publisher, version } from './constants'\n \n-import type { AgentDefinition } from './types/agent-definition'\n+import type { SecretAgentDefinition } from './types/secret-agent-definition'\n \n-const definition: AgentDefinition = {\n+const definition: SecretAgentDefinition = {\n   id: 'base-experimental',\n   version,\n   publisher,\n   model: 'gemini-2.5-pro-preview-06-05',\n"
        },
        {
          "path": ".agents/base-lite.ts",
          "status": "modified",
          "diff": "Index: .agents/base-lite.ts\n===================================================================\n--- .agents/base-lite.ts\t02ef7c0 (parent)\n+++ .agents/base-lite.ts\t68e4f6c (commit)\n@@ -1,9 +1,9 @@\n import { publisher, version } from './constants'\n \n-import type { AgentDefinition } from './types/agent-definition'\n+import type { SecretAgentDefinition } from './types/secret-agent-definition'\n \n-const definition: AgentDefinition = {\n+const definition: SecretAgentDefinition = {\n   id: 'base-lite',\n   version,\n   publisher,\n   model: 'gemini-2.5-flash-preview-05-20',\n"
        },
        {
          "path": ".agents/base-max.ts",
          "status": "modified",
          "diff": "Index: .agents/base-max.ts\n===================================================================\n--- .agents/base-max.ts\t02ef7c0 (parent)\n+++ .agents/base-max.ts\t68e4f6c (commit)\n@@ -1,9 +1,9 @@\n import { publisher, version } from './constants'\n \n-import type { AgentDefinition } from './types/agent-definition'\n+import type { SecretAgentDefinition } from './types/secret-agent-definition'\n \n-const definition: AgentDefinition = {\n+const definition: SecretAgentDefinition = {\n   id: 'base-max',\n   version,\n   publisher,\n   model: 'anthropic/claude-opus-4.1',\n"
        },
        {
          "path": ".agents/base.ts",
          "status": "modified",
          "diff": "Index: .agents/base.ts\n===================================================================\n--- .agents/base.ts\t02ef7c0 (parent)\n+++ .agents/base.ts\t68e4f6c (commit)\n@@ -1,9 +1,9 @@\n import { publisher, version } from './constants'\n \n-import type { AgentDefinition } from './types/agent-definition'\n+import type { SecretAgentDefinition } from './types/secret-agent-definition'\n \n-const definition: AgentDefinition = {\n+const definition: SecretAgentDefinition = {\n   id: 'base',\n   version,\n   publisher,\n   model: 'anthropic/claude-4-sonnet-20250522',\n"
        },
        {
          "path": ".agents/claude4-gemini-thinking.ts",
          "status": "modified",
          "diff": "Index: .agents/claude4-gemini-thinking.ts\n===================================================================\n--- .agents/claude4-gemini-thinking.ts\t02ef7c0 (parent)\n+++ .agents/claude4-gemini-thinking.ts\t68e4f6c (commit)\n@@ -1,9 +1,9 @@\n import { publisher, version } from './constants'\n \n-import type { AgentDefinition } from './types/agent-definition'\n+import type { SecretAgentDefinition } from './types/secret-agent-definition'\n \n-const definition: AgentDefinition = {\n+const definition: SecretAgentDefinition = {\n   id: 'claude4-gemini-thinking',\n   version,\n   publisher,\n   model: 'anthropic/claude-4-sonnet-20250522',\n"
        },
        {
          "path": ".agents/opensource/base.ts",
          "status": "modified",
          "diff": "Index: .agents/opensource/base.ts\n===================================================================\n--- .agents/opensource/base.ts\t02ef7c0 (parent)\n+++ .agents/opensource/base.ts\t68e4f6c (commit)\n@@ -1,7 +1,7 @@\n-import type { AgentDefinition } from '../types/agent-definition'\n+import type { SecretAgentDefinition } from '../types/secret-agent-definition'\n \n-const definition: AgentDefinition = {\n+const definition: SecretAgentDefinition = {\n   id: 'oss-model-base',\n   publisher: 'codebuff',\n   model: 'qwen/qwen3-235b-a22b-2507:fast',\n   displayName: 'Buffy the Coding Assistant',\n"
        },
        {
          "path": ".agents/superagent.ts",
          "status": "modified",
          "diff": "Index: .agents/superagent.ts\n===================================================================\n--- .agents/superagent.ts\t02ef7c0 (parent)\n+++ .agents/superagent.ts\t68e4f6c (commit)\n@@ -1,9 +1,9 @@\n import { publisher, version } from './constants'\n \n-import type { AgentDefinition } from './types/agent-definition'\n+import type { SecretAgentDefinition } from './types/secret-agent-definition'\n \n-const definition: AgentDefinition = {\n+const definition: SecretAgentDefinition = {\n   id: 'superagent',\n   version,\n   publisher,\n   model: 'anthropic/claude-4-sonnet-20250522',\n"
        },
        {
          "path": ".agents/types/secret-agent-definition.ts",
          "status": "added",
          "diff": "Index: .agents/types/secret-agent-definition.ts\n===================================================================\n--- .agents/types/secret-agent-definition.ts\t02ef7c0 (parent)\n+++ .agents/types/secret-agent-definition.ts\t68e4f6c (commit)\n@@ -1,1 +1,18 @@\n-[NEW FILE]\n\\ No newline at end of file\n+import { AgentDefinition } from './agent-definition'\n+import type * as Tools from './tools'\n+export type { Tools }\n+\n+export type AllToolNames =\n+  | Tools.ToolName\n+  | 'add_subgoal'\n+  | 'browser_logs'\n+  | 'create_plan'\n+  | 'spawn_agents_async'\n+  | 'spawn_agent_inline'\n+  | 'update_subgoal'\n+\n+export interface SecretAgentDefinition\n+  extends Omit<AgentDefinition, 'toolNames'> {\n+  /** Tools this agent can use. */\n+  toolNames?: AllToolNames[]\n+}\n"
        },
        {
          "path": "common/src/tools/compile-tool-definitions.ts",
          "status": "modified",
          "diff": "Index: common/src/tools/compile-tool-definitions.ts\n===================================================================\n--- common/src/tools/compile-tool-definitions.ts\t02ef7c0 (parent)\n+++ common/src/tools/compile-tool-definitions.ts\t68e4f6c (commit)\n@@ -1,7 +1,8 @@\n import z from 'zod/v4'\n \n-import { llmToolCallSchema, publishedTools } from './list'\n+import { llmToolCallSchema } from './list'\n+import { publishedTools } from './constants'\n \n /**\n  * Compiles all tool definitions into a single TypeScript definition file content.\n  * This generates type definitions for all available tools and their parameters.\n"
        },
        {
          "path": "common/src/tools/constants.ts",
          "status": "modified",
          "diff": "Index: common/src/tools/constants.ts\n===================================================================\n--- common/src/tools/constants.ts\t02ef7c0 (parent)\n+++ common/src/tools/constants.ts\t68e4f6c (commit)\n@@ -33,8 +33,28 @@\n   'web_search',\n   'write_file',\n ] as const\n \n+export const publishedTools = [\n+  'add_message',\n+  'code_search',\n+  'end_turn',\n+  'find_files',\n+  'read_docs',\n+  'read_files',\n+  'run_file_change_hooks',\n+  'run_terminal_command',\n+  'set_messages',\n+  'set_output',\n+  'spawn_agents',\n+  'str_replace',\n+  'think_deeply',\n+  'web_search',\n+  'write_file',\n+  // 'spawn_agents_async',\n+  // 'spawn_agent_inline',\n+] as const\n+\n export type ToolName = (typeof toolNames)[number]\n \n export type ToolParams<T extends ToolName = ToolName> = {\n   toolName: T\n"
        },
        {
          "path": "common/src/tools/list.ts",
          "status": "modified",
          "diff": "Index: common/src/tools/list.ts\n===================================================================\n--- common/src/tools/list.ts\t02ef7c0 (parent)\n+++ common/src/tools/list.ts\t68e4f6c (commit)\n@@ -47,28 +47,8 @@\n } satisfies {\n   [K in ToolName]: ToolParams<K>\n }\n \n-export const publishedTools = [\n-  'add_message',\n-  'code_search',\n-  'end_turn',\n-  'find_files',\n-  'read_docs',\n-  'read_files',\n-  'run_file_change_hooks',\n-  'run_terminal_command',\n-  'set_messages',\n-  'set_output',\n-  'spawn_agents',\n-  'str_replace',\n-  'think_deeply',\n-  'web_search',\n-  'write_file',\n-  // 'spawn_agents_async',\n-  // 'spawn_agent_inline',\n-] as const\n-\n export const clientToolCallSchema = {\n   // Tools that require an id and objective\n   add_subgoal: ['id', 'objective', 'status', 'plan', 'log'],\n   update_subgoal: ['id', 'status', 'plan', 'log'],\n"
        },
        {
          "path": "common/src/types/__tests__/dynamic-agent-template.test.ts",
          "status": "modified",
          "diff": "Index: common/src/types/__tests__/dynamic-agent-template.test.ts\n===================================================================\n--- common/src/types/__tests__/dynamic-agent-template.test.ts\t02ef7c0 (parent)\n+++ common/src/types/__tests__/dynamic-agent-template.test.ts\t68e4f6c (commit)\n@@ -1,7 +1,7 @@\n import type { AgentDefinition } from '../agent-definition'\n import type { DynamicAgentDefinition } from '../dynamic-agent-template'\n-import type { publishedTools } from '../../tools/list'\n+import type { publishedTools } from '../../tools/constants'\n \n // Create a version of DynamicAgentDefinition where handleSteps is compatible with AgentDefinition\n \n type DynamicAgentDefinitionHandleSteps = Omit<\n"
        }
      ]
    },
    {
      "id": "migrate-agents",
      "sha": "02ef7c054af809dd76241aa7d0004e7024614744",
      "parentSha": "ab4819b41ba4358c693ef8748e8d5af88f58d628",
      "spec": "Implement an agents scaffolding migration with these requirements:\n\n1) Add .agents directory contents for local agent development\n- Create .agents/README.md describing how to build, test, and publish custom agents; outline file structure (types/, examples/, my-custom-agent.ts) and common tools, and reference types/tools filenames in .agents/types.\n- Create .agents/types/agent-definition.ts containing the AgentDefinition and related TypeScript types; it should be a .ts module (no .d.ts) that exports all agent-related types used by custom agents and examples.\n- Create .agents/types/tools.ts containing all tool name unions and parameter interfaces (previously in .d.ts form) as a .ts module; export a GetToolParams utility type.\n- Add .agents/my-custom-agent.ts as an editable starter agent definition using the new types, a modern model (anthropic/claude-4-sonnet-20250522), and spawnableAgents referencing codebuff/file-explorer@0.0.1.\n- Add example agents under .agents/examples/: diff-reviewer-1.ts, diff-reviewer-2.ts, diff-reviewer-3.ts with:\n  - Updated model to anthropic/claude-4-sonnet-20250522 (not openai/gpt-5).\n  - spawnableAgents referencing codebuff/file-explorer@0.0.1.\n  - Simplified step flow where appropriate (e.g., use STEP_ALL in the advanced example and remove redundant STEP sequencing).\n  - Minor prompt text updates matching the new behavior (e.g., state that a file explorer will be spawned before reviewing changes).\n\n2) Make backend agent builder pure LLM and stop writing files\n- backend/src/templates/agents/agent-builder.ts:\n  - Remove filesystem-based reads of common util types/examples; remove fs/path usage for this purpose.\n  - Import the text contents of .agents/types/agent-definition and .agents/types/tools using text imports (with { type: 'text' }) so they can be embedded in the instructions.\n  - Set outputMode to 'last_message' and remove handleSteps file-writing logic; the builder should not create directories or write files.\n  - Update instructions to describe that the environment provides: .agents/types/agent-definition.ts, .agents/types/tools.ts, .agents/examples/*, .agents/README.md, and .agents/my-custom-agent.ts.\n  - Ensure AGENT_DEFINITION_FILE is no longer referenced in the builder.\n\n3) Update CLI to scaffold agent files directly\n- npm-app/src/cli-handlers/agents.ts:\n  - Implement a function (e.g., createExampleAgentFiles) that ensures the .agents/, .agents/types/, and .agents/examples/ directories exist under the project root (AGENT_TEMPLATES_DIR), then writes the following files by bundling their content at build time via text imports: .agents/README.md, .agents/types/agent-definition.ts, .agents/types/tools.ts, .agents/my-custom-agent.ts, and the three diff reviewer examples.\n  - Modify startDirectAgentCreation to call the scaffolding function and print concise success guidance (where files were created and how to run agents) instead of spawning an interactive agent-builder session.\n\n4) Consolidate type exports and fix imports across packages\n- common/src/types/agent-definition.ts: re-export the types from '../../../.agents/types/agent-definition' so all packages can import AgentDefinition from common/src/types.\n- common/src/types/agent-template.ts: update ToolCall import to come from './agent-definition' rather than the removed ../util/types path.\n- common/src/types/__tests__/dynamic-agent-template.test.ts: update imports to use ../agent-definition and reference the correct publishedTools import location.\n\n5) Remove legacy copies in common and adjust SDK\n- Remove common/src/util/types/agent-definition.d.ts and common/src/util/types/tools.d.ts, and remove common/src/util/examples/* (diff-reviewer-*).\n- sdk/package.json: simplify build to run only tsc; remove copy-types script and references to common/src/util .d.ts copying.\n- sdk/src/client.ts and sdk/src/index.ts: import and re-export AgentDefinition from common/src/types/agent-definition instead of local sdk/src/types.\n- Remove sdk/src/types/agent-definition.ts (no longer needed).\n\n6) Align references and constants usage\n- Continue using AGENT_TEMPLATES_DIR for locating the .agents directory throughout CLI code.\n- Ensure no remaining code paths rely on AGENT_DEFINITION_FILE pointing to a .d.ts; the new canonical types are .ts and re-exported via common/src/types.\n\n7) Testing and docs expectations\n- Existing tests referencing common/src/types should pass after import path updates; remove/adjust any tests or fixtures that referenced removed common/src/util/types or examples.\n- The CLI should emit a short success log after scaffolding and not attempt to overwrite via interactive builder.\n\nAcceptance criteria\n- Running the agents CLI flow creates .agents/README.md, .agents/types/{agent-definition.ts,tools.ts}, .agents/my-custom-agent.ts, and .agents/examples/diff-reviewer-{1,2,3}.ts at the project root.\n- Backend agent-builder no longer writes files and no longer refers to AGENT_DEFINITION_FILE; it uses text-imported type definitions in its instructional output.\n- All imports of AgentDefinition in sdk and common resolve through common/src/types/agent-definition.\n- Legacy common/src/util types and examples are removed with no dangling imports.\n- Example agents use the updated model string and spawnable agent IDs, and advanced example steps rely on STEP_ALL where described.",
      "prompt": "Migrate custom agent scaffolding to a first-class .agents directory and shift file generation to the CLI. Add TypeScript type modules for agent definitions and tools under .agents/types, include a starter agent and three example diff reviewers, and provide a concise README for users. Update the backend agent builder to be model-only (no file I/O) and embed the type content for reference in its instructions. Remove legacy type/example copies in common, fix imports across common and sdk to point at the canonical types exported by common/src/types, and adjust the CLI to create the .agents directories/files using bundled text imports. Ensure the example agents use the modern model and spawnable agent IDs, and streamline their step flow.",
      "supplementalFiles": [
        "common/src/constants.ts",
        "npm-app/src/agents/agent-utils.ts",
        "npm-app/src/agents/load-agents.ts",
        "npm-app/src/menu.ts",
        "npm-app/src/project-files.ts",
        "backend/src/templates/types.ts",
        "backend/src/templates/agents/base.ts"
      ],
      "fileDiffs": [
        {
          "path": ".agents/README.md",
          "status": "added",
          "diff": "Index: .agents/README.md\n===================================================================\n--- .agents/README.md\tab4819b (parent)\n+++ .agents/README.md\t02ef7c0 (commit)\n@@ -1,1 +1,49 @@\n-[NEW FILE]\n\\ No newline at end of file\n+# Codebuff Agents\n+\n+This directory contains your custom Codebuff agents. Each agent is a TypeScript file that defines an AI agent with specific capabilities and behavior.\n+\n+## Getting Started\n+\n+1. **Edit an existing agent**: Start with `my-custom-agent.ts` and modify it for your needs\n+2. **Check out the examples and types**: See the examples and types directories to draw inspiration and learn what's possible.\n+3. **Test your agent**: Run `codebuff --agent your-agent-name`\n+4. **Publish your agent**: Run `codebuff publish your-agent-name`\n+\n+## File Structure\n+\n+- `types/` - TypeScript type definitions\n+- `examples/` - Example agents for reference\n+- `my-custom-agent.ts` - Your first custom agent (edit this!)\n+- Add any new agents you wish to the .agents directory\n+\n+## Agent Basics\n+\n+Each agent file exports an `AgentDefinition` object with:\n+\n+- `id`: Unique identifier (lowercase, hyphens only)\n+- `displayName`: Human-readable name\n+- `model`: AI model to use (see OpenRouter for options)\n+- `toolNames`: Tools the agent can use\n+- `instructionsPrompt`: Instructions for the agent's behavior\n+- `spawnPurposePrompt`: When other agents should spawn this one\n+- `spawnableAgents`: Which agents *this* agent can spawn\n+\n+## Common Tools\n+\n+- `read_files` - Read file contents\n+- `write_file` - Create or modify files\n+- `str_replace` - Make targeted edits\n+- `run_terminal_command` - Execute shell commands\n+- `code_search` - Search for code patterns\n+- `spawn_agents` - Delegate to other agents\n+- `end_turn` - Finish the response\n+\n+See `types/tools.ts` for more information on each tool!\n+\n+## Need Help?\n+\n+- Check the type definitions in `types/agent-definition.ts`\n+- Look at examples in the `examples/` directory\n+- Join the Codebuff Discord community (https://discord.com/invite/mcWTGjgTj3)\n+\n+Happy agent building! 🤖\n\\ No newline at end of file\n"
        },
        {
          "path": ".agents/examples/diff-reviewer-1.ts",
          "status": "modified",
          "diff": "Index: .agents/examples/diff-reviewer-1.ts\n===================================================================\n--- .agents/examples/diff-reviewer-1.ts\tab4819b (parent)\n+++ .agents/examples/diff-reviewer-1.ts\t02ef7c0 (commit)\n@@ -1,11 +1,10 @@\n import type { AgentDefinition } from '../types/agent-definition'\n \n const definition: AgentDefinition = {\n   id: 'diff-reviewer-1',\n-\n   displayName: 'Diff Reviewer (Level 1)',\n-  model: 'openai/gpt-5',\n+  model: 'anthropic/claude-4-sonnet-20250522',\n   toolNames: ['read_files', 'run_terminal_command'],\n \n   spawnPurposePrompt:\n     'Spawn when you need to review code changes in the git diff',\n"
        },
        {
          "path": ".agents/examples/diff-reviewer-2.ts",
          "status": "modified",
          "diff": "Index: .agents/examples/diff-reviewer-2.ts\n===================================================================\n--- .agents/examples/diff-reviewer-2.ts\tab4819b (parent)\n+++ .agents/examples/diff-reviewer-2.ts\t02ef7c0 (commit)\n@@ -5,9 +5,9 @@\n \n const definition: AgentDefinition = {\n   id: 'diff-reviewer-2',\n   displayName: 'Diff Reviewer (Level 2)',\n-  model: 'openai/gpt-5',\n+  model: 'anthropic/claude-4-sonnet-20250522',\n \n   inputSchema: {\n     prompt: {\n       type: 'string',\n"
        },
        {
          "path": ".agents/examples/diff-reviewer-3.ts",
          "status": "modified",
          "diff": "Index: .agents/examples/diff-reviewer-3.ts\n===================================================================\n--- .agents/examples/diff-reviewer-3.ts\tab4819b (parent)\n+++ .agents/examples/diff-reviewer-3.ts\t02ef7c0 (commit)\n@@ -4,11 +4,10 @@\n } from '../types/agent-definition'\n \n const definition: AgentDefinition = {\n   id: 'diff-reviewer-3',\n-\n   displayName: 'Diff Reviewer (Level 3)',\n-  model: 'openai/gpt-5',\n+  model: 'anthropic/claude-4-sonnet-20250522',\n   inputSchema: {\n     prompt: {\n       type: 'string',\n       description:\n@@ -17,9 +16,9 @@\n   },\n   outputMode: 'last_message',\n \n   toolNames: ['read_files', 'run_terminal_command', 'spawn_agents'],\n-  spawnableAgents: ['james/file-explorer@0.1.3'],\n+  spawnableAgents: ['codebuff/file-explorer@0.0.1'],\n \n   spawnPurposePrompt:\n     'Spawn when you need to review code changes in the git diff',\n \n@@ -76,25 +75,13 @@\n       toolName: 'add_message',\n       args: {\n         role: 'assistant',\n         content:\n-          'Now I will spawn a file explorer to find any missing codebase context.',\n+          'Now I will spawn a file explorer to find any missing codebase context, and then review the changes.',\n       },\n     }\n \n-    yield 'STEP'\n-\n-    // Step 5: Put words in the AI's mouth to review the changes.\n-    yield {\n-      toolName: 'add_message',\n-      args: {\n-        role: 'assistant',\n-        content: 'Here is my comprehensive review of the changes.',\n-      },\n-    }\n-\n-    // Step 6: Let AI review the changes in a final step. (The last message is also the agent's output.)\n-    yield 'STEP'\n+    yield 'STEP_ALL'\n   },\n }\n \n export default definition\n"
        },
        {
          "path": ".agents/my-custom-agent.ts",
          "status": "added",
          "diff": "Index: .agents/my-custom-agent.ts\n===================================================================\n--- .agents/my-custom-agent.ts\tab4819b (parent)\n+++ .agents/my-custom-agent.ts\t02ef7c0 (commit)\n@@ -1,1 +1,38 @@\n-[NEW FILE]\n\\ No newline at end of file\n+/*\n+ *  EDIT ME to create your own agent!\n+ *\n+ *  Change any field below, and consult the AgentDefinition type for information on all fields and their purpose.\n+ *\n+ *  Run your agent with:\n+ *  > codebuff --agent git-committer\n+ *\n+ *  Or, run codebuff normally, and use the '@' menu to mention your agent, and codebuff will spawn it for you.\n+ *\n+ *  Finally, you can publish your agent with 'codebuff publish your-custom-agent' so users from around the world can run it.\n+ */\n+\n+import type { AgentDefinition } from './types/agent-definition'\n+\n+const definition: AgentDefinition = {\n+  id: 'my-custom-agent',\n+  displayName: 'Git Committer',\n+\n+  model: 'anthropic/claude-4-sonnet-20250522',\n+  spawnableAgents: ['codebuff/file-explorer@0.0.1'],\n+\n+  // Check out .agents/types/tools.ts for more information on the tools you can include.\n+  toolNames: ['read_files', 'run_terminal_command', 'spawn_agents'],\n+\n+  spawnPurposePrompt:\n+    'Spawn when you need to commit changes to the git repository',\n+\n+  instructionsPrompt: `Execute the following steps:\n+1. Run git diff\n+2. Spawn a file explorer to find all relevant files to the change so you have the maximum context\n+3. Read any relevant files\n+4. Commit the changes to the git repository with a message that describes the changes`,\n+\n+  // Add more fields here to customize your agent further: system prompt, input/output schema, handleSteps, etc.\n+}\n+\n+export default definition\n"
        },
        {
          "path": ".agents/types/agent-definition.ts",
          "status": "added",
          "diff": "Index: .agents/types/agent-definition.ts\n===================================================================\n--- .agents/types/agent-definition.ts\tab4819b (parent)\n+++ .agents/types/agent-definition.ts\t02ef7c0 (commit)\n@@ -1,1 +1,312 @@\n-[NEW FILE]\n\\ No newline at end of file\n+/**\n+ * Codebuff Agent Type Definitions\n+ *\n+ * This file provides TypeScript type definitions for creating custom Codebuff agents.\n+ * Import these types in your agent files to get full type safety and IntelliSense.\n+ *\n+ * Usage in .agents/your-agent.ts:\n+ *   import { AgentDefinition, ToolName, ModelName } from './types/agent-definition'\n+ *\n+ *   const definition: AgentDefinition = {\n+ *     // ... your agent configuration with full type safety ...\n+ *   }\n+ *\n+ *   export default definition\n+ */\n+\n+// ============================================================================\n+// Agent Definition and Utility Types\n+// ============================================================================\n+\n+export interface AgentDefinition {\n+  /** Unique identifier for this agent. Must contain only lowercase letters, numbers, and hyphens, e.g. 'code-reviewer' */\n+  id: string\n+\n+  /** Version string (if not provided, will default to '0.0.1' and be bumped on each publish) */\n+  version?: string\n+\n+  /** Publisher ID for the agent. Must be provided if you want to publish the agent. */\n+  publisher?: string\n+\n+  /** Human-readable name for the agent */\n+  displayName: string\n+\n+  /** AI model to use for this agent. Can be any model in OpenRouter: https://openrouter.ai/models */\n+  model: ModelName\n+\n+  // ============================================================================\n+  // Tools and Subagents\n+  // ============================================================================\n+\n+  /** Tools this agent can use. */\n+  toolNames?: ToolName[]\n+\n+  /** Other agents this agent can spawn, like 'codebuff/file-picker@0.0.1'.\n+   *\n+   * Use the fully qualified agent id from the agent store, including publisher and version: 'codebuff/file-picker@0.0.1'\n+   * (publisher and version are required!)\n+   *\n+   * Or, use the agent id from a local agent file in your .agents directory: 'file-picker'.\n+   */\n+  spawnableAgents?: string[]\n+\n+  // ============================================================================\n+  // Input and Output\n+  // ============================================================================\n+\n+  /** The input schema required to spawn the agent. Provide a prompt string and/or a params object or none.\n+   * 80% of the time you want just a prompt string with a description:\n+   * inputSchema: {\n+   *   prompt: { type: 'string', description: 'A description of what info would be helpful to the agent' }\n+   * }\n+   */\n+  inputSchema?: {\n+    prompt?: { type: 'string'; description?: string }\n+    params?: JsonSchema\n+  }\n+\n+  /** Whether to include conversation history from the parent agent in context.\n+   *\n+   * Defaults to false.\n+   * Use this if the agent needs to know all the previous messages in the conversation.\n+   */\n+  includeMessageHistory?: boolean\n+\n+  /** How the agent should output a response to its parent (defaults to 'last_message')\n+   *\n+   * last_message: The last message from the agent, typcically after using tools.\n+   *\n+   * all_messages: All messages from the agent, including tool calls and results.\n+   *\n+   * json: Make the agent output a JSON object. Can be used with outputSchema or without if you want freeform json output.\n+   */\n+  outputMode?: 'last_message' | 'all_messages' | 'structured_output'\n+\n+  /** JSON schema for structured output (when outputMode is 'structured_output') */\n+  outputSchema?: JsonSchema\n+\n+  // ============================================================================\n+  // Prompts\n+  // ============================================================================\n+\n+  /** Prompt for when and why to spawn this agent. Include the main purpose and use cases.\n+   *\n+   * This field is key if the agent is intended to be spawned by other agents. */\n+  spawnPurposePrompt?: string\n+\n+  /** Background information for the agent. Fairly optional. Prefer using instructionsPrompt for agent instructions. */\n+  systemPrompt?: string\n+\n+  /** Instructions for the agent.\n+   *\n+   * IMPORTANT: Updating this prompt is the best way to shape the agent's behavior.\n+   * This prompt is inserted after each user input. */\n+  instructionsPrompt?: string\n+\n+  /** Prompt inserted at each agent step.\n+   *\n+   * Powerful for changing the agent's behavior, but usually not necessary for smart models.\n+   * Prefer instructionsPrompt for most instructions. */\n+  stepPrompt?: string\n+\n+  // ============================================================================\n+  // Handle Steps\n+  // ============================================================================\n+\n+  /** Programmatically step the agent forward and run tools.\n+   *\n+   * You can either yield:\n+   * - A tool call object with toolName and args properties.\n+   * - 'STEP' to run agent's model and generate one assistant message.\n+   * - 'STEP_ALL' to run the agent's model until it uses the end_turn tool or stops includes no tool calls in a message.\n+   *\n+   * Or use 'return' to end the turn.\n+   *\n+   * Example 1:\n+   * function* handleSteps({ agentStep, prompt, params}) {\n+   *   const { toolResult } = yield {\n+   *     toolName: 'read_files',\n+   *     args: { paths: ['file1.txt', 'file2.txt'] }\n+   *   }\n+   *   yield 'STEP_ALL'\n+   * }\n+   *\n+   * Example 2:\n+   * handleSteps: function* ({ agentState, prompt, params }) {\n+   *   while (true) {\n+   *     yield {\n+   *       toolName: 'spawn_agents',\n+   *       args: {\n+   *         agents: [\n+   *         {\n+   *           agent_type: 'thinker',\n+   *           prompt: 'Think deeply about the user request',\n+   *         },\n+   *       ],\n+   *     },\n+   *   }\n+   *   yield 'STEP'\n+   * }\n+   * }\n+   */\n+  handleSteps?: (\n+    context: AgentStepContext,\n+  ) => Generator<\n+    ToolCall | 'STEP' | 'STEP_ALL',\n+    void,\n+    { agentState: AgentState; toolResult: string | undefined }\n+  >\n+}\n+\n+// ============================================================================\n+// Supporting Types\n+// ============================================================================\n+\n+export interface AgentState {\n+  agentId: string\n+  parentId: string\n+  messageHistory: Message[]\n+}\n+\n+/**\n+ * Message in conversation history\n+ */\n+export interface Message {\n+  role: 'user' | 'assistant'\n+  content: string\n+}\n+\n+/**\n+ * Context provided to handleSteps generator function\n+ */\n+export interface AgentStepContext {\n+  agentState: AgentState\n+  prompt?: string\n+  params?: Record<string, any>\n+}\n+\n+/**\n+ * Tool call object for handleSteps generator\n+ */\n+export type ToolCall<T extends ToolName = ToolName> = {\n+  [K in T]: {\n+    toolName: K\n+    args?: Tools.GetToolParams<K>\n+  }\n+}[T]\n+\n+/**\n+ * JSON Schema definition (for prompt schema or output schema)\n+ */\n+export interface JsonSchema {\n+  type: string\n+  properties?: Record<string, any>\n+  required?: string[]\n+  [key: string]: any\n+}\n+\n+// ============================================================================\n+// Available Tools\n+// ============================================================================\n+\n+/**\n+ * File operation tools\n+ */\n+export type FileTools =\n+  | 'read_files'\n+  | 'write_file'\n+  | 'str_replace'\n+  | 'find_files'\n+\n+/**\n+ * Code analysis tools\n+ */\n+export type CodeAnalysisTools = 'code_search' | 'find_files'\n+\n+/**\n+ * Terminal and system tools\n+ */\n+export type TerminalTools = 'run_terminal_command' | 'run_file_change_hooks'\n+\n+/**\n+ * Web and browser tools\n+ */\n+export type WebTools = 'web_search' | 'read_docs'\n+\n+/**\n+ * Agent management tools\n+ */\n+export type AgentTools = 'spawn_agents' | 'set_messages' | 'add_message'\n+\n+/**\n+ * Planning and organization tools\n+ */\n+export type PlanningTools = 'think_deeply'\n+\n+/**\n+ * Output and control tools\n+ */\n+export type OutputTools = 'set_output' | 'end_turn'\n+\n+/**\n+ * Common tool combinations for convenience\n+ */\n+export type FileEditingTools = FileTools | 'end_turn'\n+export type ResearchTools = WebTools | 'write_file' | 'end_turn'\n+export type CodeAnalysisToolSet = FileTools | CodeAnalysisTools | 'end_turn'\n+\n+// ============================================================================\n+// Available Models (see: https://openrouter.ai/models)\n+// ============================================================================\n+\n+/**\n+ * AI models available for agents. Pick from our selection of recommended models or choose any model in OpenRouter.\n+ *\n+ * See available models at https://openrouter.ai/models\n+ */\n+export type ModelName =\n+  // Recommended Models\n+\n+  // OpenAI\n+  | 'openai/gpt-5'\n+  | 'openai/gpt-5-mini'\n+  | 'openai/gpt-5-nano'\n+\n+  // Anthropic\n+  | 'anthropic/claude-4-sonnet-20250522'\n+  | 'anthropic/claude-opus-4.1'\n+\n+  // Gemini\n+  | 'google/gemini-2.5-pro'\n+  | 'google/gemini-2.5-flash'\n+  | 'google/gemini-2.5-flash-lite'\n+\n+  // X-AI\n+  | 'x-ai/grok-4-07-09'\n+\n+  // Qwen\n+  | 'qwen/qwen3-coder'\n+  | 'qwen/qwen3-coder:fast'\n+  | 'qwen/qwen3-235b-a22b-2507'\n+  | 'qwen/qwen3-235b-a22b-2507:fast'\n+  | 'qwen/qwen3-235b-a22b-thinking-2507'\n+  | 'qwen/qwen3-235b-a22b-thinking-2507:fast'\n+  | 'qwen/qwen3-30b-a3b'\n+  | 'qwen/qwen3-30b-a3b:fast'\n+\n+  // DeepSeek\n+  | 'deepseek/deepseek-chat-v3-0324'\n+  | 'deepseek/deepseek-chat-v3-0324:fast'\n+  | 'deepseek/deepseek-r1-0528'\n+  | 'deepseek/deepseek-r1-0528:fast'\n+\n+  // Other open source models\n+  | 'moonshotai/kimi-k2'\n+  | 'moonshotai/kimi-k2:fast'\n+  | 'z-ai/glm-4.5'\n+  | 'z-ai/glm-4.5:fast'\n+  | (string & {})\n+\n+import type * as Tools from './tools'\n+export type { Tools }\n+type ToolName = Tools.ToolName\n"
        },
        {
          "path": ".agents/types/tools.d.ts",
          "status": "deleted",
          "diff": "Index: .agents/types/tools.d.ts\n===================================================================\n--- .agents/types/tools.d.ts\tab4819b (parent)\n+++ .agents/types/tools.d.ts\t02ef7c0 (commit)\n@@ -1,194 +1,1 @@\n-/**\n- * Union type of all available tool names\n- */\n-export type ToolName =\n-  | 'add_message'\n-  | 'code_search'\n-  | 'end_turn'\n-  | 'find_files'\n-  | 'read_docs'\n-  | 'read_files'\n-  | 'run_file_change_hooks'\n-  | 'run_terminal_command'\n-  | 'set_messages'\n-  | 'set_output'\n-  | 'spawn_agents'\n-  | 'str_replace'\n-  | 'think_deeply'\n-  | 'web_search'\n-  | 'write_file'\n-\n-/**\n- * Map of tool names to their parameter types\n- */\n-export interface ToolParamsMap {\n-  add_message: AddMessageParams\n-  code_search: CodeSearchParams\n-  end_turn: EndTurnParams\n-  find_files: FindFilesParams\n-  read_docs: ReadDocsParams\n-  read_files: ReadFilesParams\n-  run_file_change_hooks: RunFileChangeHooksParams\n-  run_terminal_command: RunTerminalCommandParams\n-  set_messages: SetMessagesParams\n-  set_output: SetOutputParams\n-  spawn_agents: SpawnAgentsParams\n-  str_replace: StrReplaceParams\n-  think_deeply: ThinkDeeplyParams\n-  web_search: WebSearchParams\n-  write_file: WriteFileParams\n-}\n-\n-/**\n- * Add a new message to the conversation history. To be used for complex requests that can't be solved in a single step, as you may forget what happened!\n- */\n-export interface AddMessageParams {\n-  role: 'user' | 'assistant'\n-  content: string\n-}\n-\n-/**\n- * Search for string patterns in the project's files. This tool uses ripgrep (rg), a fast line-oriented search tool. Use this tool only when read_files is not sufficient to find the files you need.\n- */\n-export interface CodeSearchParams {\n-  /** The pattern to search for. */\n-  pattern: string\n-  /** Optional ripgrep flags to customize the search (e.g., \"-i\" for case-insensitive, \"-t ts\" for TypeScript files only, \"-A 3\" for 3 lines after match, \"-B 2\" for 2 lines before match, \"--type-not test\" to exclude test files). */\n-  flags?: string\n-  /** Optional working directory to search within, relative to the project root. Defaults to searching the entire project. */\n-  cwd?: string\n-}\n-\n-/**\n- * End your turn, regardless of any new tool results that might be coming. This will allow the user to type another prompt.\n- */\n-export interface EndTurnParams {}\n-\n-/**\n- * Find several files related to a brief natural language description of the files or the name of a function or class you are looking for.\n- */\n-export interface FindFilesParams {\n-  /** A brief natural language description of the files or the name of a function or class you are looking for. It's also helpful to mention a directory or two to look within. */\n-  prompt: string\n-}\n-\n-/**\n- * Fetch up-to-date documentation for libraries and frameworks using Context7 API.\n- */\n-export interface ReadDocsParams {\n-  /** The exact library or framework name (e.g., \"Next.js\", \"MongoDB\", \"React\"). Use the official name as it appears in documentation, not a search query. */\n-  libraryTitle: string\n-  /** Optional specific topic to focus on (e.g., \"routing\", \"hooks\", \"authentication\") */\n-  topic?: string\n-  /** Optional maximum number of tokens to return. Defaults to 10000. Values less than 10000 are automatically increased to 10000. */\n-  max_tokens?: number\n-}\n-\n-/**\n- * Read the multiple files from disk and return their contents. Use this tool to read as many files as would be helpful to answer the user's request.\n- */\n-export interface ReadFilesParams {\n-  /** List of file paths to read. */\n-  paths: string[]\n-}\n-\n-/**\n- * Parameters for run_file_change_hooks tool\n- */\n-export interface RunFileChangeHooksParams {\n-  /** List of file paths that were changed and should trigger file change hooks */\n-  files: string[]\n-}\n-\n-/**\n- * Execute a CLI command from the **project root** (different from the user's cwd).\n- */\n-export interface RunTerminalCommandParams {\n-  /** CLI command valid for user's OS. */\n-  command: string\n-  /** Either SYNC (waits, returns output) or BACKGROUND (runs in background). Default SYNC */\n-  process_type?: 'SYNC' | 'BACKGROUND'\n-  /** The working directory to run the command in. Default is the project root. */\n-  cwd?: string\n-  /** Set to -1 for no timeout. Does not apply for BACKGROUND commands. Default 30 */\n-  timeout_seconds?: number\n-}\n-\n-/**\n- * Set the conversation history to the provided messages.\n- */\n-export interface SetMessagesParams {\n-  messages: {\n-    role: 'user' | 'assistant'\n-    content: string\n-  }[]\n-}\n-\n-/**\n- * JSON object to set as the agent output. This completely replaces any previous output. If the agent was spawned, this value will be passed back to its parent. If the agent has an outputSchema defined, the output will be validated against it.\n- */\n-export interface SetOutputParams {}\n-\n-/**\n- * Spawn multiple agents and send a prompt to each of them.\n- */\n-export interface SpawnAgentsParams {\n-  agents: {\n-    /** Agent to spawn */\n-    agent_type: string\n-    /** Prompt to send to the agent */\n-    prompt?: string\n-    /** Parameters object for the agent (if any) */\n-    params?: Record<string, any>\n-  }[]\n-}\n-\n-/**\n- * Replace strings in a file with new strings.\n- */\n-export interface StrReplaceParams {\n-  /** The path to the file to edit. */\n-  path: string\n-  /** Array of replacements to make. */\n-  replacements: {\n-    /** The string to replace. This must be an *exact match* of the string you want to replace, including whitespace and punctuation. */\n-    old: string\n-    /** The string to replace the corresponding old string with. Can be empty to delete. */\n-    new: string\n-  }[]\n-}\n-\n-/**\n- * Deeply consider complex tasks by brainstorming approaches and tradeoffs step-by-step.\n- */\n-export interface ThinkDeeplyParams {\n-  /** Detailed step-by-step analysis. Initially keep each step concise (max ~5-7 words per step). */\n-  thought: string\n-}\n-\n-/**\n- * Search the web for current information using Linkup API.\n- */\n-export interface WebSearchParams {\n-  /** The search query to find relevant web content */\n-  query: string\n-  /** Search depth - 'standard' for quick results, 'deep' for more comprehensive search. Default is 'standard'. */\n-  depth: 'standard' | 'deep'\n-}\n-\n-/**\n- * Create or edit a file with the given content.\n- */\n-export interface WriteFileParams {\n-  /** Path to the file relative to the **project root** */\n-  path: string\n-  /** What the change is intended to do in only one sentence. */\n-  instructions: string\n-  /** Edit snippet to apply to the file. */\n-  content: string\n-}\n-\n-/**\n- * Get parameters type for a specific tool\n- */\n-export type GetToolParams<T extends ToolName> = ToolParamsMap[T]\n+[DELETED]\n\\ No newline at end of file\n"
        },
        {
          "path": ".agents/types/tools.ts",
          "status": "added",
          "diff": "Index: .agents/types/tools.ts\n===================================================================\n--- .agents/types/tools.ts\tab4819b (parent)\n+++ .agents/types/tools.ts\t02ef7c0 (commit)\n@@ -1,1 +1,194 @@\n-[NEW FILE]\n\\ No newline at end of file\n+/**\n+ * Union type of all available tool names\n+ */\n+export type ToolName =\n+  | 'add_message'\n+  | 'code_search'\n+  | 'end_turn'\n+  | 'find_files'\n+  | 'read_docs'\n+  | 'read_files'\n+  | 'run_file_change_hooks'\n+  | 'run_terminal_command'\n+  | 'set_messages'\n+  | 'set_output'\n+  | 'spawn_agents'\n+  | 'str_replace'\n+  | 'think_deeply'\n+  | 'web_search'\n+  | 'write_file'\n+\n+/**\n+ * Map of tool names to their parameter types\n+ */\n+export interface ToolParamsMap {\n+  add_message: AddMessageParams\n+  code_search: CodeSearchParams\n+  end_turn: EndTurnParams\n+  find_files: FindFilesParams\n+  read_docs: ReadDocsParams\n+  read_files: ReadFilesParams\n+  run_file_change_hooks: RunFileChangeHooksParams\n+  run_terminal_command: RunTerminalCommandParams\n+  set_messages: SetMessagesParams\n+  set_output: SetOutputParams\n+  spawn_agents: SpawnAgentsParams\n+  str_replace: StrReplaceParams\n+  think_deeply: ThinkDeeplyParams\n+  web_search: WebSearchParams\n+  write_file: WriteFileParams\n+}\n+\n+/**\n+ * Add a new message to the conversation history. To be used for complex requests that can't be solved in a single step, as you may forget what happened!\n+ */\n+export interface AddMessageParams {\n+  role: 'user' | 'assistant'\n+  content: string\n+}\n+\n+/**\n+ * Search for string patterns in the project's files. This tool uses ripgrep (rg), a fast line-oriented search tool. Use this tool only when read_files is not sufficient to find the files you need.\n+ */\n+export interface CodeSearchParams {\n+  /** The pattern to search for. */\n+  pattern: string\n+  /** Optional ripgrep flags to customize the search (e.g., \"-i\" for case-insensitive, \"-t ts\" for TypeScript files only, \"-A 3\" for 3 lines after match, \"-B 2\" for 2 lines before match, \"--type-not test\" to exclude test files). */\n+  flags?: string\n+  /** Optional working directory to search within, relative to the project root. Defaults to searching the entire project. */\n+  cwd?: string\n+}\n+\n+/**\n+ * End your turn, regardless of any new tool results that might be coming. This will allow the user to type another prompt.\n+ */\n+export interface EndTurnParams {}\n+\n+/**\n+ * Find several files related to a brief natural language description of the files or the name of a function or class you are looking for.\n+ */\n+export interface FindFilesParams {\n+  /** A brief natural language description of the files or the name of a function or class you are looking for. It's also helpful to mention a directory or two to look within. */\n+  prompt: string\n+}\n+\n+/**\n+ * Fetch up-to-date documentation for libraries and frameworks using Context7 API.\n+ */\n+export interface ReadDocsParams {\n+  /** The exact library or framework name (e.g., \"Next.js\", \"MongoDB\", \"React\"). Use the official name as it appears in documentation, not a search query. */\n+  libraryTitle: string\n+  /** Optional specific topic to focus on (e.g., \"routing\", \"hooks\", \"authentication\") */\n+  topic?: string\n+  /** Optional maximum number of tokens to return. Defaults to 10000. Values less than 10000 are automatically increased to 10000. */\n+  max_tokens?: number\n+}\n+\n+/**\n+ * Read the multiple files from disk and return their contents. Use this tool to read as many files as would be helpful to answer the user's request.\n+ */\n+export interface ReadFilesParams {\n+  /** List of file paths to read. */\n+  paths: string[]\n+}\n+\n+/**\n+ * Parameters for run_file_change_hooks tool\n+ */\n+export interface RunFileChangeHooksParams {\n+  /** List of file paths that were changed and should trigger file change hooks */\n+  files: string[]\n+}\n+\n+/**\n+ * Execute a CLI command from the **project root** (different from the user's cwd).\n+ */\n+export interface RunTerminalCommandParams {\n+  /** CLI command valid for user's OS. */\n+  command: string\n+  /** Either SYNC (waits, returns output) or BACKGROUND (runs in background). Default SYNC */\n+  process_type?: 'SYNC' | 'BACKGROUND'\n+  /** The working directory to run the command in. Default is the project root. */\n+  cwd?: string\n+  /** Set to -1 for no timeout. Does not apply for BACKGROUND commands. Default 30 */\n+  timeout_seconds?: number\n+}\n+\n+/**\n+ * Set the conversation history to the provided messages.\n+ */\n+export interface SetMessagesParams {\n+  messages: {\n+    role: 'user' | 'assistant'\n+    content: string\n+  }[]\n+}\n+\n+/**\n+ * JSON object to set as the agent output. This completely replaces any previous output. If the agent was spawned, this value will be passed back to its parent. If the agent has an outputSchema defined, the output will be validated against it.\n+ */\n+export interface SetOutputParams {}\n+\n+/**\n+ * Spawn multiple agents and send a prompt to each of them.\n+ */\n+export interface SpawnAgentsParams {\n+  agents: {\n+    /** Agent to spawn */\n+    agent_type: string\n+    /** Prompt to send to the agent */\n+    prompt?: string\n+    /** Parameters object for the agent (if any) */\n+    params?: Record<string, any>\n+  }[]\n+}\n+\n+/**\n+ * Replace strings in a file with new strings.\n+ */\n+export interface StrReplaceParams {\n+  /** The path to the file to edit. */\n+  path: string\n+  /** Array of replacements to make. */\n+  replacements: {\n+    /** The string to replace. This must be an *exact match* of the string you want to replace, including whitespace and punctuation. */\n+    old: string\n+    /** The string to replace the corresponding old string with. Can be empty to delete. */\n+    new: string\n+  }[]\n+}\n+\n+/**\n+ * Deeply consider complex tasks by brainstorming approaches and tradeoffs step-by-step.\n+ */\n+export interface ThinkDeeplyParams {\n+  /** Detailed step-by-step analysis. Initially keep each step concise (max ~5-7 words per step). */\n+  thought: string\n+}\n+\n+/**\n+ * Search the web for current information using Linkup API.\n+ */\n+export interface WebSearchParams {\n+  /** The search query to find relevant web content */\n+  query: string\n+  /** Search depth - 'standard' for quick results, 'deep' for more comprehensive search. Default is 'standard'. */\n+  depth: 'standard' | 'deep'\n+}\n+\n+/**\n+ * Create or edit a file with the given content.\n+ */\n+export interface WriteFileParams {\n+  /** Path to the file relative to the **project root** */\n+  path: string\n+  /** What the change is intended to do in only one sentence. */\n+  instructions: string\n+  /** Edit snippet to apply to the file. */\n+  content: string\n+}\n+\n+/**\n+ * Get parameters type for a specific tool\n+ */\n+export type GetToolParams<T extends ToolName> = ToolParamsMap[T]\n"
        },
        {
          "path": "backend/src/templates/agents/agent-builder.ts",
          "status": "modified",
          "diff": "Index: backend/src/templates/agents/agent-builder.ts\n===================================================================\n--- backend/src/templates/agents/agent-builder.ts\tab4819b (parent)\n+++ backend/src/templates/agents/agent-builder.ts\t02ef7c0 (commit)\n@@ -1,92 +1,17 @@\n-import * as fs from 'fs'\n-import * as path from 'path'\n-\n-import {\n-  AGENT_TEMPLATES_DIR,\n-  openrouterModels,\n-  AGENT_DEFINITION_FILE,\n-} from '@codebuff/common/old-constants'\n+import { AGENT_TEMPLATES_DIR } from '@codebuff/common/old-constants'\n import z from 'zod/v4'\n \n import type { AgentTemplate } from '../types'\n import type { Model } from '@codebuff/common/old-constants'\n import type { ToolName } from '@codebuff/common/tools/constants'\n \n-const COMMON_UTIL_PATH = '../../../../common/src/util'\n-const TEMPLATE_RELATIVE_PATH =\n-  `${COMMON_UTIL_PATH}/types/${AGENT_DEFINITION_FILE}` as const\n-// Import to validate path exists at compile time\n-import(TEMPLATE_RELATIVE_PATH)\n+// @ts-ignore - No default import, but we are importing as text so it's fine\n+import agentDefinitionContent from '../../../../.agents/types/agent-definition' with { type: 'text' }\n+// @ts-ignore - No default import, but we are importing as text so it's fine\n+import toolsDefinitionContent from '../../../../.agents/types/tools' with { type: 'text' }\n \n-const TEMPLATE_PATH = path.join(__dirname, TEMPLATE_RELATIVE_PATH)\n-const DEFAULT_MODEL = openrouterModels.openrouter_claude_sonnet_4\n-const TYPES_DIR = path.join(AGENT_TEMPLATES_DIR, 'types')\n-const EXAMPLES_DIR = path.join(AGENT_TEMPLATES_DIR, 'examples')\n-const TEMPLATE_TYPES_PATH = path.join(TYPES_DIR, AGENT_DEFINITION_FILE)\n-const TOOL_DEFINITIONS_FILE = 'tools.d.ts'\n-const TOOL_DEFINITIONS_PATH = path.join(TYPES_DIR, TOOL_DEFINITIONS_FILE)\n-\n-export const agentBuilder = (\n-  model: Model,\n-  allAvailableAgents?: string[],\n-): Omit<AgentTemplate, 'id'> => {\n-  // Read the AGENT_CONFIG_FILE content dynamically\n-  // The import above ensures this path exists at compile time\n-  let agentTemplateContent = ''\n-  try {\n-    agentTemplateContent = fs.readFileSync(TEMPLATE_PATH, 'utf8')\n-  } catch (error) {\n-    console.warn(`Could not read ${AGENT_DEFINITION_FILE}:`, error)\n-    agentTemplateContent = '// Agent template types not available'\n-  }\n-  // Read the tools.d.ts content from common package\n-  let toolDefinitionsContent = ''\n-  try {\n-    const toolsPath = path.join(\n-      __dirname,\n-      `${COMMON_UTIL_PATH}/types/tools.d.ts`,\n-    )\n-    toolDefinitionsContent = fs.readFileSync(toolsPath, 'utf8')\n-  } catch (error) {\n-    console.warn(`Could not read tools.d.ts from common:`, error)\n-    toolDefinitionsContent = '// Tool definitions not available'\n-  }\n-\n-  // Read example agent files from common package\n-  const exampleAgentContents: Record<string, string> = {}\n-\n-  try {\n-    const exampleAgentsDir = path.join(__dirname, `${COMMON_UTIL_PATH}`)\n-    // Check if directory exists before trying to read it\n-    if (fs.existsSync(exampleAgentsDir)) {\n-      const files = fs.readdirSync(exampleAgentsDir)\n-\n-      files\n-        .filter(\n-          (file) =>\n-            file.endsWith('.ts') &&\n-            (file.startsWith('diff-reviewer') ||\n-              file === 'your-custom-agent.ts'),\n-        )\n-        .forEach((filename) => {\n-          try {\n-            const fullPath = path.join(exampleAgentsDir, filename)\n-            const content = fs.readFileSync(fullPath, 'utf8')\n-            exampleAgentContents[filename] = content\n-          } catch (error) {\n-            console.warn(`Could not read example agent ${filename}:`, error)\n-          }\n-        })\n-    } else {\n-      console.warn(\n-        `Example agents directory does not exist: ${exampleAgentsDir}`,\n-      )\n-    }\n-  } catch (error) {\n-    console.warn('Could not read example agents directory:', error)\n-  }\n-\n+export const agentBuilder = (model: Model): Omit<AgentTemplate, 'id'> => {\n   return {\n     model,\n     displayName: 'Bob the Agent Builder',\n     spawnPurposePrompt:\n@@ -97,29 +22,18 @@\n         .optional()\n         .describe(\n           'What agent type you would like to create or edit. Include as many details as possible.',\n         ),\n-      params: z\n-        .object({\n-          name: z.string().optional(),\n-          purpose: z.string().optional(),\n-          specialty: z.string().optional(),\n-          model: z.string().optional(),\n-        })\n-        .passthrough()\n-        .optional(),\n     },\n-    outputMode: 'structured_output',\n+    outputMode: 'last_message',\n     includeMessageHistory: false,\n     toolNames: [\n       'write_file',\n       'str_replace',\n       'run_terminal_command',\n       'read_files',\n       'code_search',\n       'spawn_agents',\n-      'add_message',\n-      'set_output',\n       'end_turn',\n     ] satisfies ToolName[],\n     spawnableAgents: [],\n \n@@ -130,27 +44,29 @@\n       '',\n       '## Environment Setup Complete',\n       '',\n       'Your environment has been automatically prepared with:',\n-      '- Agent template type definitions in `.agents/types/agent-definition.d.ts`',\n-      '- Tool type definitions in `.agents/types/tools.d.ts`',\n-      '- Example agent files copied to `.agents/` directory for reference',\n+      '- Agent template type definitions in `.agents/types/agent-definition.ts`',\n+      '- Tool type definitions in `.agents/types/tools.ts`',\n+      '- Example agent files copied to `.agents/examples/` directory for reference',\n+      '- Documentation in `.agents/README.md`',\n+      '- Your own agent template in `.agents/my-custom-agent.ts`',\n       '',\n       'All necessary files are now available in your working directory.',\n       '',\n       '## Complete Agent Template Type Definitions',\n       '',\n       'Here are the complete TypeScript type definitions for creating custom Codebuff agents:',\n       '```typescript',\n-      agentTemplateContent,\n+      agentDefinitionContent,\n       '```',\n       '',\n       '## Available Tools Type Definitions',\n       '',\n       'Here are the complete TypeScript type definitions for all available tools:',\n       '',\n       '```typescript',\n-      toolDefinitionsContent,\n+      toolsDefinitionContent,\n       '```',\n       '',\n       '## Agent Template Patterns:',\n       '',\n@@ -184,16 +100,16 @@\n ## Environment Ready\n \n Your environment has been automatically set up with:\n - Type definitions in \\`.agents/types/\\`\n-- Example agent files in \\`.agents/\\` directory\n+- Example agent files in \\`.agents/examples/\\` directory\n - All necessary scaffolding complete\n \n You can now proceed directly to agent creation or editing.\n \n ## Example Agents Available\n \n-Three example agents are now available in your \\`.agents/\\` directory which are all diff reviewers of increasing complexity. These can serve as examples of well-made agents at different stages of complexity.\n+Three example agents are now available in your \\`.agents/examples/\\` directory which are all diff reviewers of increasing complexity. These can serve as examples of well-made agents at different stages of complexity.\n \n **IMPORTANT**: Examine these examples to find connections and patterns that relate to the user's request. Look for:\n - Similar tool combinations\n - Comparable complexity levels\n@@ -218,71 +134,6 @@\n The agent builder is focused on creating new agent templates based on user specifications.\n \n IMPORTANT: Always end your response with the end_turn tool when you have completed the agent creation or editing task.`,\n     stepPrompt: '',\n-\n-    handleSteps: function* ({ agentState, prompt, params }) {\n-      // Step 1: Create directory structure\n-      yield {\n-        toolName: 'run_terminal_command',\n-        args: {\n-          command: `mkdir -p ${TYPES_DIR} && mkdir -p ${EXAMPLES_DIR}`,\n-          process_type: 'SYNC',\n-          timeout_seconds: 10,\n-        },\n-      }\n-\n-      // Step 2: Write the AGENT_DEFINITION_FILE with the template content\n-      yield {\n-        toolName: 'write_file',\n-        args: {\n-          path: TEMPLATE_TYPES_PATH,\n-          instructions: 'Create agent template type definitions file',\n-          content: agentTemplateContent,\n-        },\n-      }\n-\n-      // Step 3: Write the tool definitions file (copy from existing tools.d.ts)\n-      yield {\n-        toolName: 'write_file',\n-        args: {\n-          path: TOOL_DEFINITIONS_PATH,\n-          instructions: 'Create tools type file',\n-          content: toolDefinitionsContent,\n-        },\n-      }\n-\n-      // Step 4: Add message about reading example files and then read them\n-      yield {\n-        toolName: 'add_message',\n-        args: {\n-          role: 'assistant',\n-          content:\n-            \"I'll read the example agent files to understand the patterns and then help you create your agent.\",\n-        },\n-      }\n-\n-      // Step 5: Copy example agent files to .agents/ directory\n-      for (const [filename, content] of Object.entries(exampleAgentContents)) {\n-        if (content) {\n-          // Copy your-custom-agent.ts to top level .agents directory, others to examples\n-          const targetPath =\n-            filename === 'your-custom-agent.ts'\n-              ? `${AGENT_TEMPLATES_DIR}/${filename}`\n-              : `${EXAMPLES_DIR}/${filename}`\n-\n-          yield {\n-            toolName: 'write_file',\n-            args: {\n-              path: targetPath,\n-              instructions: `Copy ${filename === 'your-custom-agent.ts' ? 'custom agent template' : 'example agent'} file ${filename}`,\n-              content: content,\n-            },\n-          }\n-        }\n-      }\n-\n-      // Step 6: Complete agent creation process\n-      yield 'STEP_ALL'\n-    },\n   }\n }\n"
        },
        {
          "path": "common/src/types/__tests__/dynamic-agent-template.test.ts",
          "status": "modified",
          "diff": "Index: common/src/types/__tests__/dynamic-agent-template.test.ts\n===================================================================\n--- common/src/types/__tests__/dynamic-agent-template.test.ts\tab4819b (parent)\n+++ common/src/types/__tests__/dynamic-agent-template.test.ts\t02ef7c0 (commit)\n@@ -1,7 +1,7 @@\n-import { publishedTools } from 'src/tools/list'\n-import type { AgentDefinition } from '../../util/types/agent-definition'\n+import type { AgentDefinition } from '../agent-definition'\n import type { DynamicAgentDefinition } from '../dynamic-agent-template'\n+import type { publishedTools } from '../../tools/list'\n \n // Create a version of DynamicAgentDefinition where handleSteps is compatible with AgentDefinition\n \n type DynamicAgentDefinitionHandleSteps = Omit<\n"
        },
        {
          "path": "common/src/types/agent-definition.ts",
          "status": "added",
          "diff": "Index: common/src/types/agent-definition.ts\n===================================================================\n--- common/src/types/agent-definition.ts\tab4819b (parent)\n+++ common/src/types/agent-definition.ts\t02ef7c0 (commit)\n@@ -1,1 +1,1 @@\n-[NEW FILE]\n\\ No newline at end of file\n+export * from '../../../.agents/types/agent-definition'\n"
        },
        {
          "path": "common/src/types/agent-template.ts",
          "status": "modified",
          "diff": "Index: common/src/types/agent-template.ts\n===================================================================\n--- common/src/types/agent-template.ts\tab4819b (parent)\n+++ common/src/types/agent-template.ts\t02ef7c0 (commit)\n@@ -1,8 +1,8 @@\n+import type { ToolCall } from './agent-definition'\n import type { Model } from '../constants'\n import type { AgentState, AgentTemplateType } from './session-state'\n import type { ToolName } from '../tools/constants'\n-import type { ToolCall } from '../util/types/agent-definition'\n import type { z } from 'zod/v4'\n \n export type AgentTemplate<\n   P = string | undefined,\n"
        },
        {
          "path": "common/src/util/examples/diff-reviewer-1.ts",
          "status": "deleted",
          "diff": "Index: common/src/util/examples/diff-reviewer-1.ts\n===================================================================\n--- common/src/util/examples/diff-reviewer-1.ts\tab4819b (parent)\n+++ common/src/util/examples/diff-reviewer-1.ts\t02ef7c0 (commit)\n@@ -1,18 +1,1 @@\n-import type { AgentDefinition } from '../types/agent-definition'\n-\n-const definition: AgentDefinition = {\n-  id: 'diff-reviewer-1',\n-  displayName: 'Diff Reviewer (Level 1)',\n-  model: 'anthropic/claude-4-sonnet-20250522',\n-  toolNames: ['read_files', 'run_terminal_command'],\n-\n-  spawnPurposePrompt:\n-    'Spawn when you need to review code changes in the git diff',\n-\n-  instructionsPrompt: `Execute the following steps:\n-1. Run git diff\n-2. Read the files that have changed\n-3. Review the changes and suggest improvements`,\n-}\n-\n-export default definition\n+[DELETED]\n\\ No newline at end of file\n"
        },
        {
          "path": "common/src/util/examples/diff-reviewer-2.ts",
          "status": "deleted",
          "diff": "Index: common/src/util/examples/diff-reviewer-2.ts\n===================================================================\n--- common/src/util/examples/diff-reviewer-2.ts\tab4819b (parent)\n+++ common/src/util/examples/diff-reviewer-2.ts\t02ef7c0 (commit)\n@@ -1,55 +1,1 @@\n-import type {\n-  AgentDefinition,\n-  AgentStepContext,\n-} from '../types/agent-definition'\n-\n-const definition: AgentDefinition = {\n-  id: 'diff-reviewer-2',\n-  displayName: 'Diff Reviewer (Level 2)',\n-  model: 'anthropic/claude-4-sonnet-20250522',\n-\n-  inputSchema: {\n-    prompt: {\n-      type: 'string',\n-      description:\n-        'Please provide a short description of the changes you want to review',\n-    },\n-  },\n-  toolNames: ['read_files', 'run_terminal_command'],\n-\n-  spawnPurposePrompt:\n-    'Spawn when you need to review code changes in the git diff',\n-\n-  systemPrompt:\n-    'You are an expert software developer. Your job is to review code changes and provide helpful feedback.',\n-\n-  instructionsPrompt: `Execute the following steps:\n-1. Run git diff\n-2. Read the files that have changed\n-3. Review the changes and suggest improvements\n-\n-Use the following guidelines while reviewing the changes:\n-- Find ways to simplify the code\n-- Reuse existing code as much as possible instead of writing new code\n-- Preserve as much behavior as possible in the existing code\n-- Prefer changing as few lines of code as possible\n-- Look for opportunities to improve the code's readability\n-- Look for logical errors in the code\n-- Look for missed cases in the code\n-- Look for any other bugs`,\n-\n-  handleSteps: function* ({ agentState, prompt, params }: AgentStepContext) {\n-    // Step 1: Run git diff immediately. Saves the agent a step, lowering cost and latency!\n-    yield {\n-      toolName: 'run_terminal_command',\n-      args: {\n-        command: 'git diff',\n-      },\n-    }\n-\n-    // Step 2: Let AI run the rest of the steps!\n-    yield 'STEP_ALL'\n-  },\n-}\n-\n-export default definition\n+[DELETED]\n\\ No newline at end of file\n"
        },
        {
          "path": "common/src/util/examples/diff-reviewer-3.ts",
          "status": "deleted",
          "diff": "Index: common/src/util/examples/diff-reviewer-3.ts\n===================================================================\n--- common/src/util/examples/diff-reviewer-3.ts\tab4819b (parent)\n+++ common/src/util/examples/diff-reviewer-3.ts\t02ef7c0 (commit)\n@@ -1,87 +1,1 @@\n-import type {\n-  AgentDefinition,\n-  AgentStepContext,\n-} from '../types/agent-definition'\n-\n-const definition: AgentDefinition = {\n-  id: 'diff-reviewer-3',\n-  displayName: 'Diff Reviewer (Level 3)',\n-  model: 'anthropic/claude-4-sonnet-20250522',\n-  inputSchema: {\n-    prompt: {\n-      type: 'string',\n-      description:\n-        'Please provide a short description of the changes you want to review',\n-    },\n-  },\n-  outputMode: 'last_message',\n-\n-  toolNames: ['read_files', 'run_terminal_command', 'spawn_agents'],\n-  spawnableAgents: ['codebuff/file-explorer@0.0.1'],\n-\n-  spawnPurposePrompt:\n-    'Spawn when you need to review code changes in the git diff',\n-\n-  systemPrompt:\n-    'You are an expert software developer. Your job is to review code changes and provide helpful feedback.',\n-\n-  instructionsPrompt: `Review the changes and suggest improvements.\n-\n-Use the following guidelines while reviewing the changes:\n-- Find ways to simplify the code\n-- Reuse existing code as much as possible instead of writing new code\n-- Preserve as much behavior as possible in the existing code\n-- Prefer changing as few lines of code as possible\n-- Look for opportunities to improve the code's readability\n-- Look for logical errors in the code\n-- Look for missed cases in the code\n-- Look for any other bugs`,\n-\n-  handleSteps: function* ({ agentState, prompt, params }: AgentStepContext) {\n-    // Step 1: Get list of changed files from git diff --name-only\n-    const { toolResult: gitDiffFilesResult } = yield {\n-      toolName: 'run_terminal_command',\n-      args: {\n-        command: 'git diff --name-only',\n-      },\n-    }\n-\n-    // Then, extract file paths from the result\n-    const changedFiles = (gitDiffFilesResult || '')\n-      .split('\\n')\n-      .map((line) => line.trim())\n-      .filter((line) => line && !line.startsWith('??') && !line.includes('OSC'))\n-\n-    // Step 2: Read the files\n-    if (changedFiles.length > 0) {\n-      yield {\n-        toolName: 'read_files',\n-        args: {\n-          paths: changedFiles,\n-        },\n-      }\n-    }\n-\n-    // Step 3: Run full git diff to see the actual changes\n-    yield {\n-      toolName: 'run_terminal_command',\n-      args: {\n-        command: 'git diff',\n-      },\n-    }\n-\n-    // Step 4: Put words in the AI's mouth to get it to spawn the file explorer.\n-    yield {\n-      toolName: 'add_message',\n-      args: {\n-        role: 'assistant',\n-        content:\n-          'Now I will spawn a file explorer to find any missing codebase context, and then review the changes.',\n-      },\n-    }\n-\n-    yield 'STEP_ALL'\n-  },\n-}\n-\n-export default definition\n+[DELETED]\n\\ No newline at end of file\n"
        },
        {
          "path": "common/src/util/types/agent-definition.d.ts",
          "status": "deleted",
          "diff": "Index: common/src/util/types/agent-definition.d.ts\n===================================================================\n--- common/src/util/types/agent-definition.d.ts\tab4819b (parent)\n+++ common/src/util/types/agent-definition.d.ts\t02ef7c0 (commit)\n@@ -1,312 +1,1 @@\n-/**\n- * Codebuff Agent Type Definitions\n- *\n- * This file provides TypeScript type definitions for creating custom Codebuff agents.\n- * Import these types in your agent files to get full type safety and IntelliSense.\n- *\n- * Usage in .agents/your-agent.ts:\n- *   import { AgentDefinition, ToolName, ModelName } from './types/agent-definition'\n- *\n- *   const definition: AgentDefinition = {\n- *     // ... your agent configuration with full type safety ...\n- *   }\n- *\n- *   export default definition\n- */\n-\n-// ============================================================================\n-// Agent Definition and Utility Types\n-// ============================================================================\n-\n-export interface AgentDefinition {\n-  /** Unique identifier for this agent. Must contain only lowercase letters, numbers, and hyphens, e.g. 'code-reviewer' */\n-  id: string\n-\n-  /** Version string (if not provided, will default to '0.0.1' and be bumped on each publish) */\n-  version?: string\n-\n-  /** Publisher ID for the agent. Must be provided if you want to publish the agent. */\n-  publisher?: string\n-\n-  /** Human-readable name for the agent */\n-  displayName: string\n-\n-  /** AI model to use for this agent. Can be any model in OpenRouter: https://openrouter.ai/models */\n-  model: ModelName\n-\n-  // ============================================================================\n-  // Tools and Subagents\n-  // ============================================================================\n-\n-  /** Tools this agent can use. */\n-  toolNames?: ToolName[]\n-\n-  /** Other agents this agent can spawn, like 'codebuff/file-picker@0.0.1'.\n-   *\n-   * Use the fully qualified agent id from the agent store, including publisher and version: 'codebuff/file-picker@0.0.1'\n-   * (publisher and version are required!)\n-   *\n-   * Or, use the agent id from a local agent file in your .agents directory: 'file-picker'.\n-   */\n-  spawnableAgents?: string[]\n-\n-  // ============================================================================\n-  // Input and Output\n-  // ============================================================================\n-\n-  /** The input schema required to spawn the agent. Provide a prompt string and/or a params object or none.\n-   * 80% of the time you want just a prompt string with a description:\n-   * inputSchema: {\n-   *   prompt: { type: 'string', description: 'A description of what info would be helpful to the agent' }\n-   * }\n-   */\n-  inputSchema?: {\n-    prompt?: { type: 'string'; description?: string }\n-    params?: JsonSchema\n-  }\n-\n-  /** Whether to include conversation history from the parent agent in context.\n-   *\n-   * Defaults to false.\n-   * Use this if the agent needs to know all the previous messages in the conversation.\n-   */\n-  includeMessageHistory?: boolean\n-\n-  /** How the agent should output a response to its parent (defaults to 'last_message')\n-   *\n-   * last_message: The last message from the agent, typcically after using tools.\n-   *\n-   * all_messages: All messages from the agent, including tool calls and results.\n-   *\n-   * json: Make the agent output a JSON object. Can be used with outputSchema or without if you want freeform json output.\n-   */\n-  outputMode?: 'last_message' | 'all_messages' | 'structured_output'\n-\n-  /** JSON schema for structured output (when outputMode is 'structured_output') */\n-  outputSchema?: JsonSchema\n-\n-  // ============================================================================\n-  // Prompts\n-  // ============================================================================\n-\n-  /** Prompt for when and why to spawn this agent. Include the main purpose and use cases.\n-   *\n-   * This field is key if the agent is intended to be spawned by other agents. */\n-  spawnPurposePrompt?: string\n-\n-  /** Background information for the agent. Fairly optional. Prefer using instructionsPrompt for agent instructions. */\n-  systemPrompt?: string\n-\n-  /** Instructions for the agent.\n-   *\n-   * IMPORTANT: Updating this prompt is the best way to shape the agent's behavior.\n-   * This prompt is inserted after each user input. */\n-  instructionsPrompt?: string\n-\n-  /** Prompt inserted at each agent step.\n-   *\n-   * Powerful for changing the agent's behavior, but usually not necessary for smart models.\n-   * Prefer instructionsPrompt for most instructions. */\n-  stepPrompt?: string\n-\n-  // ============================================================================\n-  // Handle Steps\n-  // ============================================================================\n-\n-  /** Programmatically step the agent forward and run tools.\n-   *\n-   * You can either yield:\n-   * - A tool call object with toolName and args properties.\n-   * - 'STEP' to run agent's model and generate one assistant message.\n-   * - 'STEP_ALL' to run the agent's model until it uses the end_turn tool or stops includes no tool calls in a message.\n-   *\n-   * Or use 'return' to end the turn.\n-   *\n-   * Example 1:\n-   * function* handleSteps({ agentStep, prompt, params}) {\n-   *   const { toolResult } = yield {\n-   *     toolName: 'read_files',\n-   *     args: { paths: ['file1.txt', 'file2.txt'] }\n-   *   }\n-   *   yield 'STEP_ALL'\n-   * }\n-   *\n-   * Example 2:\n-   * handleSteps: function* ({ agentState, prompt, params }) {\n-   *   while (true) {\n-   *     yield {\n-   *       toolName: 'spawn_agents',\n-   *       args: {\n-   *         agents: [\n-   *         {\n-   *           agent_type: 'thinker',\n-   *           prompt: 'Think deeply about the user request',\n-   *         },\n-   *       ],\n-   *     },\n-   *   }\n-   *   yield 'STEP'\n-   * }\n-   * }\n-   */\n-  handleSteps?: (\n-    context: AgentStepContext,\n-  ) => Generator<\n-    ToolCall | 'STEP' | 'STEP_ALL',\n-    void,\n-    { agentState: AgentState; toolResult: string | undefined }\n-  >\n-}\n-\n-// ============================================================================\n-// Supporting Types\n-// ============================================================================\n-\n-export interface AgentState {\n-  agentId: string\n-  parentId: string\n-  messageHistory: Message[]\n-}\n-\n-/**\n- * Message in conversation history\n- */\n-export interface Message {\n-  role: 'user' | 'assistant'\n-  content: string\n-}\n-\n-/**\n- * Context provided to handleSteps generator function\n- */\n-export interface AgentStepContext {\n-  agentState: AgentState\n-  prompt?: string\n-  params?: Record<string, any>\n-}\n-\n-/**\n- * Tool call object for handleSteps generator\n- */\n-export type ToolCall<T extends ToolName = ToolName> = {\n-  [K in T]: {\n-    toolName: K\n-    args?: Tools.GetToolParams<K>\n-  }\n-}[T]\n-\n-/**\n- * JSON Schema definition (for prompt schema or output schema)\n- */\n-export interface JsonSchema {\n-  type: string\n-  properties?: Record<string, any>\n-  required?: string[]\n-  [key: string]: any\n-}\n-\n-// ============================================================================\n-// Available Tools\n-// ============================================================================\n-\n-/**\n- * File operation tools\n- */\n-export type FileTools =\n-  | 'read_files'\n-  | 'write_file'\n-  | 'str_replace'\n-  | 'find_files'\n-\n-/**\n- * Code analysis tools\n- */\n-export type CodeAnalysisTools = 'code_search' | 'find_files'\n-\n-/**\n- * Terminal and system tools\n- */\n-export type TerminalTools = 'run_terminal_command' | 'run_file_change_hooks'\n-\n-/**\n- * Web and browser tools\n- */\n-export type WebTools = 'web_search' | 'read_docs'\n-\n-/**\n- * Agent management tools\n- */\n-export type AgentTools = 'spawn_agents' | 'set_messages' | 'add_message'\n-\n-/**\n- * Planning and organization tools\n- */\n-export type PlanningTools = 'think_deeply'\n-\n-/**\n- * Output and control tools\n- */\n-export type OutputTools = 'set_output' | 'end_turn'\n-\n-/**\n- * Common tool combinations for convenience\n- */\n-export type FileEditingTools = FileTools | 'end_turn'\n-export type ResearchTools = WebTools | 'write_file' | 'end_turn'\n-export type CodeAnalysisToolSet = FileTools | CodeAnalysisTools | 'end_turn'\n-\n-// ============================================================================\n-// Available Models (see: https://openrouter.ai/models)\n-// ============================================================================\n-\n-/**\n- * AI models available for agents. Pick from our selection of recommended models or choose any model in OpenRouter.\n- *\n- * See available models at https://openrouter.ai/models\n- */\n-export type ModelName =\n-  // Recommended Models\n-\n-  // OpenAI\n-  | 'openai/gpt-5'\n-  | 'openai/gpt-5-mini'\n-  | 'openai/gpt-5-nano'\n-\n-  // Anthropic\n-  | 'anthropic/claude-4-sonnet-20250522'\n-  | 'anthropic/claude-opus-4.1'\n-\n-  // Gemini\n-  | 'google/gemini-2.5-pro'\n-  | 'google/gemini-2.5-flash'\n-  | 'google/gemini-2.5-flash-lite'\n-\n-  // X-AI\n-  | 'x-ai/grok-4-07-09'\n-\n-  // Qwen\n-  | 'qwen/qwen3-coder'\n-  | 'qwen/qwen3-coder:fast'\n-  | 'qwen/qwen3-235b-a22b-2507'\n-  | 'qwen/qwen3-235b-a22b-2507:fast'\n-  | 'qwen/qwen3-235b-a22b-thinking-2507'\n-  | 'qwen/qwen3-235b-a22b-thinking-2507:fast'\n-  | 'qwen/qwen3-30b-a3b'\n-  | 'qwen/qwen3-30b-a3b:fast'\n-\n-  // DeepSeek\n-  | 'deepseek/deepseek-chat-v3-0324'\n-  | 'deepseek/deepseek-chat-v3-0324:fast'\n-  | 'deepseek/deepseek-r1-0528'\n-  | 'deepseek/deepseek-r1-0528:fast'\n-\n-  // Other open source models\n-  | 'moonshotai/kimi-k2'\n-  | 'moonshotai/kimi-k2:fast'\n-  | 'z-ai/glm-4.5'\n-  | 'z-ai/glm-4.5:fast'\n-  | (string & {})\n-\n-import type * as Tools from './tools'\n-export type { Tools }\n-type ToolName = Tools.ToolName\n+[DELETED]\n\\ No newline at end of file\n"
        },
        {
          "path": "common/src/util/types/tools.d.ts",
          "status": "deleted",
          "diff": "Index: common/src/util/types/tools.d.ts\n===================================================================\n--- common/src/util/types/tools.d.ts\tab4819b (parent)\n+++ common/src/util/types/tools.d.ts\t02ef7c0 (commit)\n@@ -1,194 +1,1 @@\n-/**\n- * Union type of all available tool names\n- */\n-export type ToolName =\n-  | 'add_message'\n-  | 'code_search'\n-  | 'end_turn'\n-  | 'find_files'\n-  | 'read_docs'\n-  | 'read_files'\n-  | 'run_file_change_hooks'\n-  | 'run_terminal_command'\n-  | 'set_messages'\n-  | 'set_output'\n-  | 'spawn_agents'\n-  | 'str_replace'\n-  | 'think_deeply'\n-  | 'web_search'\n-  | 'write_file'\n-\n-/**\n- * Map of tool names to their parameter types\n- */\n-export interface ToolParamsMap {\n-  add_message: AddMessageParams\n-  code_search: CodeSearchParams\n-  end_turn: EndTurnParams\n-  find_files: FindFilesParams\n-  read_docs: ReadDocsParams\n-  read_files: ReadFilesParams\n-  run_file_change_hooks: RunFileChangeHooksParams\n-  run_terminal_command: RunTerminalCommandParams\n-  set_messages: SetMessagesParams\n-  set_output: SetOutputParams\n-  spawn_agents: SpawnAgentsParams\n-  str_replace: StrReplaceParams\n-  think_deeply: ThinkDeeplyParams\n-  web_search: WebSearchParams\n-  write_file: WriteFileParams\n-}\n-\n-/**\n- * Add a new message to the conversation history. To be used for complex requests that can't be solved in a single step, as you may forget what happened!\n- */\n-export interface AddMessageParams {\n-  role: 'user' | 'assistant'\n-  content: string\n-}\n-\n-/**\n- * Search for string patterns in the project's files. This tool uses ripgrep (rg), a fast line-oriented search tool. Use this tool only when read_files is not sufficient to find the files you need.\n- */\n-export interface CodeSearchParams {\n-  /** The pattern to search for. */\n-  pattern: string\n-  /** Optional ripgrep flags to customize the search (e.g., \"-i\" for case-insensitive, \"-t ts\" for TypeScript files only, \"-A 3\" for 3 lines after match, \"-B 2\" for 2 lines before match, \"--type-not test\" to exclude test files). */\n-  flags?: string\n-  /** Optional working directory to search within, relative to the project root. Defaults to searching the entire project. */\n-  cwd?: string\n-}\n-\n-/**\n- * End your turn, regardless of any new tool results that might be coming. This will allow the user to type another prompt.\n- */\n-export interface EndTurnParams {}\n-\n-/**\n- * Find several files related to a brief natural language description of the files or the name of a function or class you are looking for.\n- */\n-export interface FindFilesParams {\n-  /** A brief natural language description of the files or the name of a function or class you are looking for. It's also helpful to mention a directory or two to look within. */\n-  prompt: string\n-}\n-\n-/**\n- * Fetch up-to-date documentation for libraries and frameworks using Context7 API.\n- */\n-export interface ReadDocsParams {\n-  /** The exact library or framework name (e.g., \"Next.js\", \"MongoDB\", \"React\"). Use the official name as it appears in documentation, not a search query. */\n-  libraryTitle: string\n-  /** Optional specific topic to focus on (e.g., \"routing\", \"hooks\", \"authentication\") */\n-  topic?: string\n-  /** Optional maximum number of tokens to return. Defaults to 10000. Values less than 10000 are automatically increased to 10000. */\n-  max_tokens?: number\n-}\n-\n-/**\n- * Read the multiple files from disk and return their contents. Use this tool to read as many files as would be helpful to answer the user's request.\n- */\n-export interface ReadFilesParams {\n-  /** List of file paths to read. */\n-  paths: string[]\n-}\n-\n-/**\n- * Parameters for run_file_change_hooks tool\n- */\n-export interface RunFileChangeHooksParams {\n-  /** List of file paths that were changed and should trigger file change hooks */\n-  files: string[]\n-}\n-\n-/**\n- * Execute a CLI command from the **project root** (different from the user's cwd).\n- */\n-export interface RunTerminalCommandParams {\n-  /** CLI command valid for user's OS. */\n-  command: string\n-  /** Either SYNC (waits, returns output) or BACKGROUND (runs in background). Default SYNC */\n-  process_type?: 'SYNC' | 'BACKGROUND'\n-  /** The working directory to run the command in. Default is the project root. */\n-  cwd?: string\n-  /** Set to -1 for no timeout. Does not apply for BACKGROUND commands. Default 30 */\n-  timeout_seconds?: number\n-}\n-\n-/**\n- * Set the conversation history to the provided messages.\n- */\n-export interface SetMessagesParams {\n-  messages: {\n-    role: 'user' | 'assistant'\n-    content: string\n-  }[]\n-}\n-\n-/**\n- * JSON object to set as the agent output. This completely replaces any previous output. If the agent was spawned, this value will be passed back to its parent. If the agent has an outputSchema defined, the output will be validated against it.\n- */\n-export interface SetOutputParams {}\n-\n-/**\n- * Spawn multiple agents and send a prompt to each of them.\n- */\n-export interface SpawnAgentsParams {\n-  agents: {\n-    /** Agent to spawn */\n-    agent_type: string\n-    /** Prompt to send to the agent */\n-    prompt?: string\n-    /** Parameters object for the agent (if any) */\n-    params?: Record<string, any>\n-  }[]\n-}\n-\n-/**\n- * Replace strings in a file with new strings.\n- */\n-export interface StrReplaceParams {\n-  /** The path to the file to edit. */\n-  path: string\n-  /** Array of replacements to make. */\n-  replacements: {\n-    /** The string to replace. This must be an *exact match* of the string you want to replace, including whitespace and punctuation. */\n-    old: string\n-    /** The string to replace the corresponding old string with. Can be empty to delete. */\n-    new: string\n-  }[]\n-}\n-\n-/**\n- * Deeply consider complex tasks by brainstorming approaches and tradeoffs step-by-step.\n- */\n-export interface ThinkDeeplyParams {\n-  /** Detailed step-by-step analysis. Initially keep each step concise (max ~5-7 words per step). */\n-  thought: string\n-}\n-\n-/**\n- * Search the web for current information using Linkup API.\n- */\n-export interface WebSearchParams {\n-  /** The search query to find relevant web content */\n-  query: string\n-  /** Search depth - 'standard' for quick results, 'deep' for more comprehensive search. Default is 'standard'. */\n-  depth: 'standard' | 'deep'\n-}\n-\n-/**\n- * Create or edit a file with the given content.\n- */\n-export interface WriteFileParams {\n-  /** Path to the file relative to the **project root** */\n-  path: string\n-  /** What the change is intended to do in only one sentence. */\n-  instructions: string\n-  /** Edit snippet to apply to the file. */\n-  content: string\n-}\n-\n-/**\n- * Get parameters type for a specific tool\n- */\n-export type GetToolParams<T extends ToolName> = ToolParamsMap[T]\n+[DELETED]\n\\ No newline at end of file\n"
        },
        {
          "path": "npm-app/src/cli-handlers/agents.ts",
          "status": "modified",
          "diff": "Index: npm-app/src/cli-handlers/agents.ts\n===================================================================\n--- npm-app/src/cli-handlers/agents.ts\tab4819b (parent)\n+++ npm-app/src/cli-handlers/agents.ts\t02ef7c0 (commit)\n@@ -1,9 +1,22 @@\n import * as fs from 'fs'\n import * as path from 'path'\n \n+// Import files to replicate in the user's .agents directory:\n+\n+// import readme from '../../../.agents/README.md' with { type: 'text' }\n+// @ts-ignore - No default import, but we are importing as text so it's fine\n+import agentDefinitionTypes from '../../../.agents/types/agent-definition' with { type: 'text' }\n+// @ts-ignore - No default import, but we are importing as text so it's fine\n+import toolsTypes from '../../../.agents/types/tools' with { type: 'text' }\n+import diffReviewer1 from '../../../.agents/examples/diff-reviewer-1' with { type: 'text' }\n+import diffReviewer2 from '../../../.agents/examples/diff-reviewer-2' with { type: 'text' }\n+import diffReviewer3 from '../../../.agents/examples/diff-reviewer-3' with { type: 'text' }\n+import myCustomAgent from '../../../.agents/my-custom-agent' with { type: 'text' }\n+// @ts-ignore - It complains about the .md file, but it works.\n+import readmeContent from '../../../.agents/README.md' with { type: 'text' }\n+\n import { AGENT_TEMPLATES_DIR } from '@codebuff/common/old-constants'\n-import { AgentTemplateTypes } from '@codebuff/common/types/session-state'\n import {\n   filterCustomAgentFiles,\n   extractAgentIdFromFileName,\n } from '@codebuff/common/util/agent-file-utils'\n@@ -540,38 +553,87 @@\n   }\n }\n \n async function startDirectAgentCreation(onExit: () => void) {\n-  // Switch to agent-builder which automatically spawns Bob the Agent Builder for agent creation\n-  const prompt = `Create a new custom agent template for me. Please ask me what kind of agent I'd like to create and help me build it.`\n-\n-  console.log(\n-    green(\n-      '\\n🤖 Starting agent creation with Buffy the Enthusiastic Agent Builder...',\n-    ),\n-  )\n-  console.log(\n-    gray(\n-      'Buffy will connect you with Bob the Agent Builder to create your custom agent.',\n-    ),\n-  )\n-\n   try {\n-    const cliInstance = CLI.getInstance()\n-    // Switch to agent-builder which automatically spawns the agent builder for agent creation\n-    await cliInstance.resetAgent(\n-      AgentTemplateTypes.agent_builder,\n-      undefined,\n-      prompt,\n+    await createExampleAgentFiles()\n+    console.log(green('\\n✅ Created example agent files in .agents directory!'))\n+    console.log(\n+      gray('Check out the files and edit them to create your custom agents.'),\n     )\n-    cliInstance.freshPrompt()\n+    console.log(\n+      gray('Run \"codebuff --agent your-agent-id\" to test your agents.'),\n+    )\n   } catch (error) {\n-    console.error(red('Error starting agent creation:'), error)\n+    console.error(red('Error creating example files:'), error)\n   }\n \n   onExit()\n }\n \n+async function createExampleAgentFiles() {\n+  const agentsDir = path.join(getProjectRoot(), AGENT_TEMPLATES_DIR)\n+  const typesDir = path.join(agentsDir, 'types')\n+  const examplesDir = path.join(agentsDir, 'examples')\n+\n+  // Create directories\n+  if (!fs.existsSync(agentsDir)) {\n+    fs.mkdirSync(agentsDir, { recursive: true })\n+  }\n+  if (!fs.existsSync(typesDir)) {\n+    fs.mkdirSync(typesDir, { recursive: true })\n+  }\n+  if (!fs.existsSync(examplesDir)) {\n+    fs.mkdirSync(examplesDir, { recursive: true })\n+  }\n+\n+  const filesToCreate = [\n+    {\n+      path: path.join(agentsDir, 'README.md'),\n+      content: readmeContent,\n+      description: 'Documentation for your agents',\n+    },\n+    {\n+      path: path.join(typesDir, 'agent-definition.ts'),\n+      content: agentDefinitionTypes,\n+      description: 'TypeScript type definitions for agents',\n+    },\n+    {\n+      path: path.join(typesDir, 'tools.ts'),\n+      content: toolsTypes,\n+      description: 'TypeScript type definitions for tools',\n+    },\n+    {\n+      path: path.join(agentsDir, 'my-custom-agent.ts'),\n+      content: myCustomAgent,\n+      description: 'Your first custom agent example',\n+    },\n+    {\n+      path: path.join(examplesDir, 'diff-reviewer-1.ts'),\n+      content: diffReviewer1,\n+      description: 'Diff reviewer agent example 1',\n+    },\n+    {\n+      path: path.join(examplesDir, 'diff-reviewer-2.ts'),\n+      content: diffReviewer2,\n+      description: 'Diff reviewer agent example 2',\n+    },\n+    {\n+      path: path.join(examplesDir, 'diff-reviewer-3.ts'),\n+      content: diffReviewer3,\n+      description: 'Diff reviewer agent example 3',\n+    },\n+  ]\n+\n+  console.log(green('\\n📁 Creating agent files:'))\n+\n+  for (const file of filesToCreate) {\n+    fs.writeFileSync(file.path, file.content)\n+    const relativePath = path.relative(getProjectRoot(), file.path)\n+    console.log(gray(`  ✓ ${relativePath} - ${file.description}`))\n+  }\n+}\n+\n // Cleanup function\n export function cleanupAgentsBuffer() {\n   if (isInAgentsBuffer) {\n     process.stdout.write(SHOW_CURSOR)\n"
        },
        {
          "path": "sdk/package.json",
          "status": "modified",
          "diff": "Index: sdk/package.json\n===================================================================\n--- sdk/package.json\tab4819b (parent)\n+++ sdk/package.json\t02ef7c0 (commit)\n@@ -20,10 +20,9 @@\n     \"README.md\",\n     \"CHANGELOG.md\"\n   ],\n   \"scripts\": {\n-    \"build\": \"bun run copy-types && tsc\",\n-    \"copy-types\": \"mkdir -p src/types && cp ../common/src/util/types/agent-definition.d.ts src/types/agent-definition.ts && cp ../common/src/util/types/tools.d.ts src/types/tools.ts\",\n+    \"build\": \"tsc\",\n     \"clean\": \"rm -rf dist\",\n     \"prepare-dist\": \"node scripts/publish.js --dry-run\",\n     \"publish-sdk\": \"node scripts/publish.js --public\",\n     \"publish-dry-run\": \"node scripts/publish.js --dry-run\",\n"
        },
        {
          "path": "sdk/src/client.ts",
          "status": "modified",
          "diff": "Index: sdk/src/client.ts\n===================================================================\n--- sdk/src/client.ts\tab4819b (parent)\n+++ sdk/src/client.ts\t02ef7c0 (commit)\n@@ -11,9 +11,9 @@\n } from '../../common/src/actions'\n import { API_KEY_ENV_VAR } from '../../common/src/constants'\n import { getInitialSessionState } from '../../common/src/types/session-state'\n \n-import type { AgentDefinition } from './types/agent-definition'\n+import type { AgentDefinition } from '../../common/src/types/agent-definition'\n import type { PrintModeEvent } from '../../common/src/types/print-mode'\n import type { SessionState } from '../../common/src/types/session-state'\n \n type ClientToolName = 'write_file' | 'run_terminal_command'\n"
        },
        {
          "path": "sdk/src/index.ts",
          "status": "modified",
          "diff": "Index: sdk/src/index.ts\n===================================================================\n--- sdk/src/index.ts\tab4819b (parent)\n+++ sdk/src/index.ts\t02ef7c0 (commit)\n@@ -1,4 +1,4 @@\n export { CodebuffClient } from './client'\n export { WebSocketHandler } from './websocket-client'\n export { getInitialSessionState } from '../../common/src/types/session-state'\n-export type { AgentDefinition } from './types/agent-definition'\n+export type { AgentDefinition } from '../../common/src/types/agent-definition'\n"
        },
        {
          "path": "sdk/src/types/agent-definition.ts",
          "status": "deleted",
          "diff": "Index: sdk/src/types/agent-definition.ts\n===================================================================\n--- sdk/src/types/agent-definition.ts\tab4819b (parent)\n+++ sdk/src/types/agent-definition.ts\t02ef7c0 (commit)\n@@ -1,312 +1,1 @@\n-/**\n- * Codebuff Agent Type Definitions\n- *\n- * This file provides TypeScript type definitions for creating custom Codebuff agents.\n- * Import these types in your agent files to get full type safety and IntelliSense.\n- *\n- * Usage in .agents/your-agent.ts:\n- *   import { AgentDefinition, ToolName, ModelName } from './types/agent-definition'\n- *\n- *   const definition: AgentDefinition = {\n- *     // ... your agent configuration with full type safety ...\n- *   }\n- *\n- *   export default definition\n- */\n-\n-// ============================================================================\n-// Agent Definition and Utility Types\n-// ============================================================================\n-\n-export interface AgentDefinition {\n-  /** Unique identifier for this agent. Must contain only lowercase letters, numbers, and hyphens, e.g. 'code-reviewer' */\n-  id: string\n-\n-  /** Version string (if not provided, will default to '0.0.1' and be bumped on each publish) */\n-  version?: string\n-\n-  /** Publisher ID for the agent. Must be provided if you want to publish the agent. */\n-  publisher?: string\n-\n-  /** Human-readable name for the agent */\n-  displayName: string\n-\n-  /** AI model to use for this agent. Can be any model in OpenRouter: https://openrouter.ai/models */\n-  model: ModelName\n-\n-  // ============================================================================\n-  // Tools and Subagents\n-  // ============================================================================\n-\n-  /** Tools this agent can use. */\n-  toolNames?: ToolName[]\n-\n-  /** Other agents this agent can spawn, like 'codebuff/file-picker@0.0.1'.\n-   *\n-   * Use the fully qualified agent id from the agent store, including publisher and version: 'codebuff/file-picker@0.0.1'\n-   * (publisher and version are required!)\n-   *\n-   * Or, use the agent id from a local agent file in your .agents directory: 'file-picker'.\n-   */\n-  spawnableAgents?: string[]\n-\n-  // ============================================================================\n-  // Input and Output\n-  // ============================================================================\n-\n-  /** The input schema required to spawn the agent. Provide a prompt string and/or a params object or none.\n-   * 80% of the time you want just a prompt string with a description:\n-   * inputSchema: {\n-   *   prompt: { type: 'string', description: 'A description of what info would be helpful to the agent' }\n-   * }\n-   */\n-  inputSchema?: {\n-    prompt?: { type: 'string'; description?: string }\n-    params?: JsonSchema\n-  }\n-\n-  /** Whether to include conversation history from the parent agent in context.\n-   *\n-   * Defaults to false.\n-   * Use this if the agent needs to know all the previous messages in the conversation.\n-   */\n-  includeMessageHistory?: boolean\n-\n-  /** How the agent should output a response to its parent (defaults to 'last_message')\n-   *\n-   * last_message: The last message from the agent, typcically after using tools.\n-   *\n-   * all_messages: All messages from the agent, including tool calls and results.\n-   *\n-   * json: Make the agent output a JSON object. Can be used with outputSchema or without if you want freeform json output.\n-   */\n-  outputMode?: 'last_message' | 'all_messages' | 'structured_output'\n-\n-  /** JSON schema for structured output (when outputMode is 'structured_output') */\n-  outputSchema?: JsonSchema\n-\n-  // ============================================================================\n-  // Prompts\n-  // ============================================================================\n-\n-  /** Prompt for when and why to spawn this agent. Include the main purpose and use cases for this agent.\n-   *\n-   * This field is important if the agent is intended to be spawned by other agents. */\n-  spawnPurposePrompt?: string\n-\n-  /** Background information for the agent. Fairly optional. Prefer using instructionsPrompt for agent instructions. */\n-  systemPrompt?: string\n-\n-  /** Instructions for the agent.\n-   *\n-   * IMPORTANT: Updating this prompt is the best way to shape the agent's behavior.\n-   * This prompt is inserted after each user input. */\n-  instructionsPrompt?: string\n-\n-  /** Prompt inserted at each agent step.\n-   *\n-   * Powerful for changing the agent's behavior, but usually not necessary for smart models.\n-   * Prefer instructionsPrompt for most instructions. */\n-  stepPrompt?: string\n-\n-  // ============================================================================\n-  // Handle Steps\n-  // ============================================================================\n-\n-  /** Programmatically step the agent forward and run tools.\n-   *\n-   * You can either yield:\n-   * - A tool call object with toolName and args properties.\n-   * - 'STEP' to run agent's model and generate one assistant message.\n-   * - 'STEP_ALL' to run the agent's model until it uses the end_turn tool or stops includes no tool calls in a message.\n-   *\n-   * Or use 'return' to end the turn.\n-   *\n-   * Example 1:\n-   * function* handleSteps({ agentStep, prompt, params}) {\n-   *   const { toolResult } = yield {\n-   *     toolName: 'read_files',\n-   *     args: { paths: ['file1.txt', 'file2.txt'] }\n-   *   }\n-   *   yield 'STEP_ALL'\n-   * }\n-   *\n-   * Example 2:\n-   * handleSteps: function* ({ agentState, prompt, params }) {\n-   *   while (true) {\n-   *     yield {\n-   *       toolName: 'spawn_agents',\n-   *       args: {\n-   *         agents: [\n-   *         {\n-   *           agent_type: 'thinker',\n-   *           prompt: 'Think deeply about the user request',\n-   *         },\n-   *       ],\n-   *     },\n-   *   }\n-   *   yield 'STEP'\n-   * }\n-   * }\n-   */\n-  handleSteps?: (\n-    context: AgentStepContext,\n-  ) => Generator<\n-    ToolCall | 'STEP' | 'STEP_ALL',\n-    void,\n-    { agentState: AgentState; toolResult: string | undefined }\n-  >\n-}\n-\n-// ============================================================================\n-// Supporting Types\n-// ============================================================================\n-\n-export interface AgentState {\n-  agentId: string\n-  parentId: string\n-  messageHistory: Message[]\n-}\n-\n-/**\n- * Message in conversation history\n- */\n-export interface Message {\n-  role: 'user' | 'assistant'\n-  content: string\n-}\n-\n-/**\n- * Context provided to handleSteps generator function\n- */\n-export interface AgentStepContext {\n-  agentState: AgentState\n-  prompt?: string\n-  params?: Record<string, any>\n-}\n-\n-/**\n- * Tool call object for handleSteps generator\n- */\n-export type ToolCall<T extends ToolName = ToolName> = {\n-  [K in T]: {\n-    toolName: K\n-    args?: Tools.GetToolParams<K>\n-  }\n-}[T]\n-\n-/**\n- * JSON Schema definition (for prompt schema or output schema)\n- */\n-export interface JsonSchema {\n-  type: string\n-  properties?: Record<string, any>\n-  required?: string[]\n-  [key: string]: any\n-}\n-\n-// ============================================================================\n-// Available Tools\n-// ============================================================================\n-\n-/**\n- * File operation tools\n- */\n-export type FileTools =\n-  | 'read_files'\n-  | 'write_file'\n-  | 'str_replace'\n-  | 'find_files'\n-\n-/**\n- * Code analysis tools\n- */\n-export type CodeAnalysisTools = 'code_search' | 'find_files'\n-\n-/**\n- * Terminal and system tools\n- */\n-export type TerminalTools = 'run_terminal_command' | 'run_file_change_hooks'\n-\n-/**\n- * Web and browser tools\n- */\n-export type WebTools = 'web_search' | 'read_docs'\n-\n-/**\n- * Agent management tools\n- */\n-export type AgentTools = 'spawn_agents' | 'set_messages' | 'add_message'\n-\n-/**\n- * Planning and organization tools\n- */\n-export type PlanningTools = 'think_deeply'\n-\n-/**\n- * Output and control tools\n- */\n-export type OutputTools = 'set_output' | 'end_turn'\n-\n-/**\n- * Common tool combinations for convenience\n- */\n-export type FileEditingTools = FileTools | 'end_turn'\n-export type ResearchTools = WebTools | 'write_file' | 'end_turn'\n-export type CodeAnalysisToolSet = FileTools | CodeAnalysisTools | 'end_turn'\n-\n-// ============================================================================\n-// Available Models (see: https://openrouter.ai/models)\n-// ============================================================================\n-\n-/**\n- * AI models available for agents. Pick from our selection of recommended models or choose any model in OpenRouter.\n- *\n- * See available models at https://openrouter.ai/models\n- */\n-export type ModelName =\n-  // Recommended Models\n-\n-  // OpenAI\n-  | 'openai/gpt-5'\n-  | 'openai/gpt-5-mini'\n-  | 'openai/gpt-5-nano'\n-\n-  // Anthropic\n-  | 'anthropic/claude-4-sonnet-20250522'\n-  | 'anthropic/claude-opus-4.1'\n-\n-  // Gemini\n-  | 'google/gemini-2.5-pro'\n-  | 'google/gemini-2.5-flash'\n-  | 'google/gemini-2.5-flash-lite'\n-\n-  // X-AI\n-  | 'x-ai/grok-4-07-09'\n-\n-  // Qwen\n-  | 'qwen/qwen3-coder'\n-  | 'qwen/qwen3-coder:fast'\n-  | 'qwen/qwen3-235b-a22b-2507'\n-  | 'qwen/qwen3-235b-a22b-2507:fast'\n-  | 'qwen/qwen3-235b-a22b-thinking-2507'\n-  | 'qwen/qwen3-235b-a22b-thinking-2507:fast'\n-  | 'qwen/qwen3-30b-a3b'\n-  | 'qwen/qwen3-30b-a3b:fast'\n-\n-  // DeepSeek\n-  | 'deepseek/deepseek-chat-v3-0324'\n-  | 'deepseek/deepseek-chat-v3-0324:fast'\n-  | 'deepseek/deepseek-r1-0528'\n-  | 'deepseek/deepseek-r1-0528:fast'\n-\n-  // Other open source models\n-  | 'moonshotai/kimi-k2'\n-  | 'moonshotai/kimi-k2:fast'\n-  | 'z-ai/glm-4.5'\n-  | 'z-ai/glm-4.5:fast'\n-  | (string & {})\n-\n-import type * as Tools from './tools'\n-export type { Tools }\n-type ToolName = Tools.ToolName\n+[DELETED]\n\\ No newline at end of file\n"
        }
      ]
    },
    {
      "id": "update-agent-builder",
      "sha": "ab4819b41ba4358c693ef8748e8d5af88f58d628",
      "parentSha": "73bcca5dd29f5cc20fa5c7399a6f3c8df0225523",
      "spec": "Implement the following changes across the codebase:\n\n1) backend/src/templates/agents/agent-builder.ts\n- Imports:\n  - Import AGENT_TEMPLATES_DIR, openrouterModels, and AGENT_DEFINITION_FILE from @codebuff/common/old-constants.\n  - Import Model type from @codebuff/common/old-constants.\n  - Remove the import of AgentTemplateTypes entirely (and any usage).\n- Example agent discovery filter:\n  - Change the files filter to include both diff-reviewer*.ts and a single exact file your-custom-agent.ts.\n    • Only .ts files qualify.\n    • Keep other behavior the same.\n- Copy behavior for examples:\n  - When iterating exampleAgentContents to write files, special-case your-custom-agent.ts so that it is written to the top-level AGENT_TEMPLATES_DIR.\n  - All other example agents should continue to be written under the EXAMPLES_DIR.\n  - Adjust the instructions string to say \"Copy custom agent template file ...\" for your-custom-agent.ts and \"Copy example agent file ...\" for others.\n- Spawnable agents:\n  - Set spawnableAgents to an empty array [] regardless of allAvailableAgents.\n\n2) common/src/constants/agents.ts\n- Remove the entire base_agent_builder persona entry.\n- In the agent_builder persona entry, fix the purpose string to read: \"Creates new agent templates for the codebuff multi-agent system\" (change mult-agent to multi-agent).\n\n3) common/src/util/examples/diff-reviewer-1.ts\n- Update model to: anthropic/claude-4-sonnet-20250522.\n- Keep other fields intact.\n\n4) common/src/util/examples/diff-reviewer-2.ts\n- Update model to: anthropic/claude-4-sonnet-20250522.\n- Keep other fields intact.\n\n5) common/src/util/examples/diff-reviewer-3.ts\n- Update model to: anthropic/claude-4-sonnet-20250522.\n- Update spawnableAgents to exactly: ['codebuff/file-explorer@0.0.1'].\n- In handleSteps:\n  - Keep steps that compute changedFiles, read_files, and run git diff unchanged.\n  - Replace the assistant add_message content before the final step with: \"Now I will spawn a file explorer to find any missing codebase context, and then review the changes.\".\n  - Replace the trailing sequence (the intermediate 'STEP', the \"Here is my comprehensive review of the changes.\" add_message, and the final 'STEP') with a single 'STEP_ALL'.\n\n6) common/src/util/your-custom-agent.ts (new file)\n- Create a new file exporting a default AgentDefinition object for a \"Git Committer\" agent with the following characteristics:\n  - id: git-committer\n  - displayName: Git Committer\n  - model: anthropic/claude-4-sonnet-20250522\n  - toolNames includes: read_files, run_terminal_command, spawn_agents\n  - spawnableAgents exactly: ['codebuff/file-explorer@0.0.1']\n  - spawnPurposePrompt: \"Spawn when you need to commit changes to the git repository\"\n  - instructionsPrompt includes numbered steps instructing to run git diff, spawn a file explorer to gather context, read relevant files, and commit changes with a descriptive message.\n  - Include a brief header comment instructing the user to edit the file to customize and how to run/publish it (as per the diff).\n  - Ensure the import type for AgentDefinition is relative to the local types file (./types/agent-definition).\n\nNotes/constraints:\n- Do not change any other files or behavior.\n- Preserve existing prompts, tools lists, and text outside the specified edits.\n- Ensure your-custom-agent.ts is copied by agent-builder to AGENT_TEMPLATES_DIR (top-level), not to the examples subfolder.",
      "prompt": "Update the agent builder and example agents to support a new starter custom agent and align example configurations. Specifically: make the agent builder gather both existing diff-reviewer examples and a new your-custom-agent starter template; copy the starter template directly into the top-level agents directory while keeping examples under the examples subfolder; remove advertised spawnable agents from the builder; fix the agent personas to remove an obsolete entry and correct a wording typo; and refresh the diff-reviewer examples to use the current Anthropic model, correct the file-explorer spawn target, and streamline the final step behavior. Also add a new your-custom-agent file that scaffolds a Git Committer agent ready to run and publish.",
      "supplementalFiles": [
        "backend/src/templates/agent-registry.ts",
        "backend/src/templates/agent-list.ts",
        "backend/src/templates/types.ts",
        "npm-app/src/agents/load-agents.ts",
        "npm-app/src/cli-handlers/agents.ts",
        "npm-app/src/cli-handlers/agent-creation-chat.ts",
        "common/src/types/dynamic-agent-template.ts",
        "common/src/util/agent-template-validation.ts"
      ],
      "fileDiffs": [
        {
          "path": "backend/src/templates/agents/agent-builder.ts",
          "status": "modified",
          "diff": "Index: backend/src/templates/agents/agent-builder.ts\n===================================================================\n--- backend/src/templates/agents/agent-builder.ts\t73bcca5 (parent)\n+++ backend/src/templates/agents/agent-builder.ts\tab4819b (commit)\n@@ -5,9 +5,8 @@\n   AGENT_TEMPLATES_DIR,\n   openrouterModels,\n   AGENT_DEFINITION_FILE,\n } from '@codebuff/common/old-constants'\n-import { AgentTemplateTypes } from '@codebuff/common/types/session-state'\n import z from 'zod/v4'\n \n import type { AgentTemplate } from '../types'\n import type { Model } from '@codebuff/common/old-constants'\n@@ -63,9 +62,12 @@\n       const files = fs.readdirSync(exampleAgentsDir)\n \n       files\n         .filter(\n-          (file) => file.endsWith('.ts') && file.startsWith('diff-reviewer'),\n+          (file) =>\n+            file.endsWith('.ts') &&\n+            (file.startsWith('diff-reviewer') ||\n+              file === 'your-custom-agent.ts'),\n         )\n         .forEach((filename) => {\n           try {\n             const fullPath = path.join(exampleAgentsDir, filename)\n@@ -118,17 +120,9 @@\n       'add_message',\n       'set_output',\n       'end_turn',\n     ] satisfies ToolName[],\n-    spawnableAgents: allAvailableAgents\n-      ? (allAvailableAgents as any[])\n-      : [\n-          AgentTemplateTypes.file_picker,\n-          AgentTemplateTypes.researcher,\n-          AgentTemplateTypes.thinker,\n-          AgentTemplateTypes.reviewer,\n-          AgentTemplateTypes.agent_builder,\n-        ],\n+    spawnableAgents: [],\n \n     systemPrompt: [\n       '# Bob the Agent Builder',\n       '',\n@@ -269,13 +263,19 @@\n \n       // Step 5: Copy example agent files to .agents/ directory\n       for (const [filename, content] of Object.entries(exampleAgentContents)) {\n         if (content) {\n+          // Copy your-custom-agent.ts to top level .agents directory, others to examples\n+          const targetPath =\n+            filename === 'your-custom-agent.ts'\n+              ? `${AGENT_TEMPLATES_DIR}/${filename}`\n+              : `${EXAMPLES_DIR}/${filename}`\n+\n           yield {\n             toolName: 'write_file',\n             args: {\n-              path: `${EXAMPLES_DIR}/${filename}`,\n-              instructions: `Copy example agent file ${filename}`,\n+              path: targetPath,\n+              instructions: `Copy ${filename === 'your-custom-agent.ts' ? 'custom agent template' : 'example agent'} file ${filename}`,\n               content: content,\n             },\n           }\n         }\n"
        },
        {
          "path": "common/src/constants/agents.ts",
          "status": "modified",
          "diff": "Index: common/src/constants/agents.ts\n===================================================================\n--- common/src/constants/agents.ts\t73bcca5 (parent)\n+++ common/src/constants/agents.ts\tab4819b (commit)\n@@ -23,14 +23,8 @@\n     displayName: 'Buffy the Enthusiastic Coding Assistant',\n     purpose: 'Base agent that orchestrates the full response.',\n   } as const,\n \n-  base_agent_builder: {\n-    displayName: 'Buffy the Enthusiastic Agent Builder',\n-    purpose:\n-      'Enhanced base agent that can create custom agents and handle all coding tasks',\n-  } as const,\n-\n   superagent: {\n     displayName: 'Superagent',\n     purpose:\n       'Superagent that can spawn multiple code editing agents to complete a task.',\n@@ -76,9 +70,9 @@\n       'Reviews file changes and responds with critical feedback. Use this after making any significant change to the codebase.',\n   } as const,\n   agent_builder: {\n     displayName: 'Bob the Agent Builder',\n-    purpose: 'Creates new agent templates for the codebuff mult-agent system',\n+    purpose: 'Creates new agent templates for the codebuff multi-agent system',\n     hidden: false,\n   } as const,\n } as const satisfies Partial<\n   Record<\n"
        },
        {
          "path": "common/src/util/examples/diff-reviewer-1.ts",
          "status": "modified",
          "diff": "Index: common/src/util/examples/diff-reviewer-1.ts\n===================================================================\n--- common/src/util/examples/diff-reviewer-1.ts\t73bcca5 (parent)\n+++ common/src/util/examples/diff-reviewer-1.ts\tab4819b (commit)\n@@ -1,11 +1,10 @@\n import type { AgentDefinition } from '../types/agent-definition'\n \n const definition: AgentDefinition = {\n   id: 'diff-reviewer-1',\n-\n   displayName: 'Diff Reviewer (Level 1)',\n-  model: 'openai/gpt-5',\n+  model: 'anthropic/claude-4-sonnet-20250522',\n   toolNames: ['read_files', 'run_terminal_command'],\n \n   spawnPurposePrompt:\n     'Spawn when you need to review code changes in the git diff',\n"
        },
        {
          "path": "common/src/util/examples/diff-reviewer-2.ts",
          "status": "modified",
          "diff": "Index: common/src/util/examples/diff-reviewer-2.ts\n===================================================================\n--- common/src/util/examples/diff-reviewer-2.ts\t73bcca5 (parent)\n+++ common/src/util/examples/diff-reviewer-2.ts\tab4819b (commit)\n@@ -5,9 +5,9 @@\n \n const definition: AgentDefinition = {\n   id: 'diff-reviewer-2',\n   displayName: 'Diff Reviewer (Level 2)',\n-  model: 'openai/gpt-5',\n+  model: 'anthropic/claude-4-sonnet-20250522',\n \n   inputSchema: {\n     prompt: {\n       type: 'string',\n"
        },
        {
          "path": "common/src/util/examples/diff-reviewer-3.ts",
          "status": "modified",
          "diff": "Index: common/src/util/examples/diff-reviewer-3.ts\n===================================================================\n--- common/src/util/examples/diff-reviewer-3.ts\t73bcca5 (parent)\n+++ common/src/util/examples/diff-reviewer-3.ts\tab4819b (commit)\n@@ -4,11 +4,10 @@\n } from '../types/agent-definition'\n \n const definition: AgentDefinition = {\n   id: 'diff-reviewer-3',\n-\n   displayName: 'Diff Reviewer (Level 3)',\n-  model: 'openai/gpt-5',\n+  model: 'anthropic/claude-4-sonnet-20250522',\n   inputSchema: {\n     prompt: {\n       type: 'string',\n       description:\n@@ -17,9 +16,9 @@\n   },\n   outputMode: 'last_message',\n \n   toolNames: ['read_files', 'run_terminal_command', 'spawn_agents'],\n-  spawnableAgents: ['james/file-explorer@0.1.3'],\n+  spawnableAgents: ['codebuff/file-explorer@0.0.1'],\n \n   spawnPurposePrompt:\n     'Spawn when you need to review code changes in the git diff',\n \n@@ -76,25 +75,13 @@\n       toolName: 'add_message',\n       args: {\n         role: 'assistant',\n         content:\n-          'Now I will spawn a file explorer to find any missing codebase context.',\n+          'Now I will spawn a file explorer to find any missing codebase context, and then review the changes.',\n       },\n     }\n \n-    yield 'STEP'\n-\n-    // Step 5: Put words in the AI's mouth to review the changes.\n-    yield {\n-      toolName: 'add_message',\n-      args: {\n-        role: 'assistant',\n-        content: 'Here is my comprehensive review of the changes.',\n-      },\n-    }\n-\n-    // Step 6: Let AI review the changes in a final step. (The last message is also the agent's output.)\n-    yield 'STEP'\n+    yield 'STEP_ALL'\n   },\n }\n \n export default definition\n"
        },
        {
          "path": "common/src/util/your-custom-agent.ts",
          "status": "added",
          "diff": "Index: common/src/util/your-custom-agent.ts\n===================================================================\n--- common/src/util/your-custom-agent.ts\t73bcca5 (parent)\n+++ common/src/util/your-custom-agent.ts\tab4819b (commit)\n@@ -1,1 +1,36 @@\n-[NEW FILE]\n\\ No newline at end of file\n+/*\n+ *  EDIT ME to create your own agent!\n+ *\n+ *  Change any field below, and consult the AgentDefinition type for information on all fields and their purpose.\n+ *\n+ *  Run your agent with:\n+ *  > codebuff --agent git-committer\n+ *\n+ *  Or, run codebuff normally, and use the '@' menu to mention your agent, and codebuff will spawn it for you.\n+ * \n+ *  Finally, you can publish your agent with 'codebuff publish your-custom-agent'.\n+ */\n+\n+import type { AgentDefinition } from './types/agent-definition'\n+\n+const definition: AgentDefinition = {\n+  id: 'git-committer',\n+  displayName: 'Git Committer',\n+\n+  model: 'anthropic/claude-4-sonnet-20250522',\n+  toolNames: ['read_files', 'run_terminal_command', 'spawn_agents'],\n+  spawnableAgents: ['codebuff/file-explorer@0.0.1'],\n+\n+  spawnPurposePrompt:\n+    'Spawn when you need to commit changes to the git repository',\n+\n+  instructionsPrompt: `Execute the following steps:\n+1. Run git diff\n+2. Spawn a file explorer to find all relevant files to the change so you have the maximum context\n+3. Read any relevant files\n+4. Commit the changes to the git repository with a message that describes the changes`,\n+\n+  // Add more fields here to customize your agent further: system prompt, input/output schema, handleSteps, etc.\n+}\n+\n+export default definition\n"
        }
      ]
    },
    {
      "id": "restrict-tool-types",
      "sha": "9f1a1161e09d78da32eb8b805a9cf8bd457bac1e",
      "parentSha": "5017a872d03e20b83399847d1c7b211042b452e0",
      "spec": "Objective: Publish a curated subset of tool type definitions to consumers (common and sdk) while keeping the full internal tool set unchanged for backend/runtime.\n\nRequired changes:\n1) Add a curated list of published tools\n- File: common/src/tools/list.ts\n- Export a new readonly array of tool names representing the public/published API. Include exactly: add_message, code_search, end_turn, find_files, read_docs, read_files, run_file_change_hooks, run_terminal_command, set_messages, set_output, spawn_agents, str_replace, think_deeply, web_search, write_file. Do not include: add_subgoal, create_plan, update_subgoal, browser_logs, spawn_agents_async, spawn_agent_inline.\n\n2) Use the curated list in the code generator\n- File: common/src/tools/compile-tool-definitions.ts\n- Import the curated list from list.ts.\n- Change the iteration that builds toolEntries so it only maps over the curated list, pairing each published tool name with llmToolCallSchema[toolName]. Previously this iterated over all entries in llmToolCallSchema; after the change it must restrict to the curated names.\n\n3) Update generated/tool-facing type surfaces to match the published subset\n- File: common/src/util/types/tools.d.ts\n  - Ensure ToolName union only contains the published tool names (listed above).\n  - Remove entries in ToolParamsMap for non-published tools.\n  - Remove the associated param interfaces for non-published tools (e.g., AddSubgoalParams, BrowserLogsParams, CreatePlanParams, SpawnAgentsAsyncParams, SpawnAgentInlineParams, UpdateSubgoalParams).\n- File: sdk/src/types/tools.ts\n  - Mirror the same updates as common: restrict ToolName to the published set; remove non-published entries and their interfaces; ensure remaining interfaces match current schemas.\n\n4) Narrow consumer-facing agent tool unions to exclude unpublished tools\n- File: common/src/util/types/agent-definition.d.ts\n  - WebTools: remove browser_logs; keep only web_search and read_docs.\n  - AgentTools: include spawn_agents, set_messages, add_message only; remove spawn_agents_async and send_agent_message.\n  - PlanningTools: include think_deeply only; remove create_plan, add_subgoal, update_subgoal.\n- File: sdk/src/types/agent-definition.ts\n  - Mirror the same union changes as in common.\n\n5) Do not change internal/full tool registries or handlers\n- Do not modify common/src/tools/constants.ts toolNames or backend tool definitions/handlers. The full set remains available internally; only the published type surfaces and generation are restricted.\n\n6) Regeneration and formatting\n- Use scripts/generate-tool-definitions.ts to regenerate common/src/util/types/tools.d.ts after the generator change, and ensure formatting via Prettier.\n- Ensure sdk/src/types/tools.ts reflects the same published set (commit aligned updates if necessary).\n\nAcceptance criteria:\n- The published list exists in common/src/tools/list.ts and is used by the generator.\n- common/src/util/types/tools.d.ts and sdk/src/types/tools.ts expose only the published tool names and interfaces.\n- consumer-facing agent unions in common and sdk exclude the unpublished tools as specified.\n- Backend/runtime continues to compile; no references to removed types are required for internal handlers.\n- Prettier formatting passes.",
      "prompt": "Limit the public tool type definitions to a curated subset. Add a centralized list of published tool names, update the type generation to only include those tools, and adjust consumer-facing type unions in both common and sdk to exclude any internal or experimental tools. Regenerate and format the output so that the SDK and shared types only expose the approved tool set, without changing any backend tool handlers or the full internal tool registry.",
      "supplementalFiles": [
        "scripts/generate-tool-definitions.ts",
        "common/src/tools/constants.ts",
        "common/src/tools/params/tool/add-subgoal.ts",
        "common/src/tools/params/tool/create-plan.ts",
        "common/src/tools/params/tool/spawn-agents-async.ts",
        "common/src/tools/params/tool/spawn-agent-inline.ts",
        "backend/src/tools/definitions/tool/browser-logs.ts"
      ],
      "fileDiffs": [
        {
          "path": "common/src/tools/compile-tool-definitions.ts",
          "status": "modified",
          "diff": "Index: common/src/tools/compile-tool-definitions.ts\n===================================================================\n--- common/src/tools/compile-tool-definitions.ts\t5017a87 (parent)\n+++ common/src/tools/compile-tool-definitions.ts\t9f1a116 (commit)\n@@ -1,14 +1,16 @@\n import z from 'zod/v4'\n \n-import { llmToolCallSchema } from './list'\n+import { llmToolCallSchema, publishedTools } from './list'\n \n /**\n  * Compiles all tool definitions into a single TypeScript definition file content.\n  * This generates type definitions for all available tools and their parameters.\n  */\n export function compileToolDefinitions(): string {\n-  const toolEntries = Object.entries(llmToolCallSchema)\n+  const toolEntries = publishedTools.map(\n+    (toolName) => [toolName, llmToolCallSchema[toolName]] as const,\n+  )\n \n   const toolInterfaces = toolEntries\n     .map(([toolName, toolDef]) => {\n       const parameterSchema = toolDef.parameters\n"
        },
        {
          "path": "common/src/tools/list.ts",
          "status": "modified",
          "diff": "Index: common/src/tools/list.ts\n===================================================================\n--- common/src/tools/list.ts\t5017a87 (parent)\n+++ common/src/tools/list.ts\t9f1a116 (commit)\n@@ -47,8 +47,28 @@\n } satisfies {\n   [K in ToolName]: ToolParams<K>\n }\n \n+export const publishedTools = [\n+  'add_message',\n+  'code_search',\n+  'end_turn',\n+  'find_files',\n+  'read_docs',\n+  'read_files',\n+  'run_file_change_hooks',\n+  'run_terminal_command',\n+  'set_messages',\n+  'set_output',\n+  'spawn_agents',\n+  'str_replace',\n+  'think_deeply',\n+  'web_search',\n+  'write_file',\n+  // 'spawn_agents_async',\n+  // 'spawn_agent_inline',\n+] as const\n+\n export const clientToolCallSchema = {\n   // Tools that require an id and objective\n   add_subgoal: ['id', 'objective', 'status', 'plan', 'log'],\n   update_subgoal: ['id', 'status', 'plan', 'log'],\n"
        },
        {
          "path": "common/src/util/types/agent-definition.d.ts",
          "status": "modified",
          "diff": "Index: common/src/util/types/agent-definition.d.ts\n===================================================================\n--- common/src/util/types/agent-definition.d.ts\t5017a87 (parent)\n+++ common/src/util/types/agent-definition.d.ts\t9f1a116 (commit)\n@@ -230,28 +230,23 @@\n \n /**\n  * Web and browser tools\n  */\n-export type WebTools = 'browser_logs' | 'web_search' | 'read_docs'\n+export type WebTools = 'web_search' | 'read_docs'\n \n /**\n  * Agent management tools\n  */\n export type AgentTools =\n   | 'spawn_agents'\n-  | 'spawn_agents_async'\n-  | 'send_agent_message'\n   | 'set_messages'\n   | 'add_message'\n \n /**\n  * Planning and organization tools\n  */\n export type PlanningTools =\n   | 'think_deeply'\n-  | 'create_plan'\n-  | 'add_subgoal'\n-  | 'update_subgoal'\n \n /**\n  * Output and control tools\n  */\n"
        },
        {
          "path": "common/src/util/types/tools.d.ts",
          "status": "modified",
          "diff": "Index: common/src/util/types/tools.d.ts\n===================================================================\n--- common/src/util/types/tools.d.ts\t5017a87 (parent)\n+++ common/src/util/types/tools.d.ts\t9f1a116 (commit)\n@@ -2,12 +2,9 @@\n  * Union type of all available tool names\n  */\n export type ToolName =\n   | 'add_message'\n-  | 'add_subgoal'\n-  | 'browser_logs'\n   | 'code_search'\n-  | 'create_plan'\n   | 'end_turn'\n   | 'find_files'\n   | 'read_docs'\n   | 'read_files'\n@@ -15,25 +12,19 @@\n   | 'run_terminal_command'\n   | 'set_messages'\n   | 'set_output'\n   | 'spawn_agents'\n-  | 'spawn_agents_async'\n-  | 'spawn_agent_inline'\n   | 'str_replace'\n   | 'think_deeply'\n-  | 'update_subgoal'\n   | 'web_search'\n   | 'write_file'\n \n /**\n  * Map of tool names to their parameter types\n  */\n export interface ToolParamsMap {\n   add_message: AddMessageParams\n-  add_subgoal: AddSubgoalParams\n-  browser_logs: BrowserLogsParams\n   code_search: CodeSearchParams\n-  create_plan: CreatePlanParams\n   end_turn: EndTurnParams\n   find_files: FindFilesParams\n   read_docs: ReadDocsParams\n   read_files: ReadFilesParams\n@@ -41,13 +32,10 @@\n   run_terminal_command: RunTerminalCommandParams\n   set_messages: SetMessagesParams\n   set_output: SetOutputParams\n   spawn_agents: SpawnAgentsParams\n-  spawn_agents_async: SpawnAgentsAsyncParams\n-  spawn_agent_inline: SpawnAgentInlineParams\n   str_replace: StrReplaceParams\n   think_deeply: ThinkDeeplyParams\n-  update_subgoal: UpdateSubgoalParams\n   web_search: WebSearchParams\n   write_file: WriteFileParams\n }\n \n@@ -59,36 +47,8 @@\n   content: string\n }\n \n /**\n- * Add a new subgoal for tracking progress. To be used for complex requests that can't be solved in a single step, as you may forget what happened!\n- */\n-export interface AddSubgoalParams {\n-  /** A unique identifier for the subgoal. Try to choose the next sequential integer that is not already in use. */\n-  id: string\n-  /** The objective of the subgoal, concisely and clearly stated. */\n-  objective: string\n-  /** The status of the subgoal. */\n-  status: 'NOT_STARTED' | 'IN_PROGRESS' | 'COMPLETE' | 'ABORTED'\n-  /** A plan for the subgoal. */\n-  plan?: string\n-  /** A log message for the subgoal progress. */\n-  log?: string\n-}\n-\n-/**\n- * Parameters for browser_logs tool\n- */\n-export interface BrowserLogsParams {\n-  /** The type of browser action to perform (e.g., \"navigate\"). */\n-  type: string\n-  /** The URL to navigate to. */\n-  url: string\n-  /** When to consider navigation successful. Defaults to 'load'. */\n-  waitUntil?: 'load' | 'domcontentloaded' | 'networkidle0'\n-}\n-\n-/**\n  * Search for string patterns in the project's files. This tool uses ripgrep (rg), a fast line-oriented search tool. Use this tool only when read_files is not sufficient to find the files you need.\n  */\n export interface CodeSearchParams {\n   /** The pattern to search for. */\n@@ -99,18 +59,8 @@\n   cwd?: string\n }\n \n /**\n- * Generate a detailed markdown plan for complex tasks.\n- */\n-export interface CreatePlanParams {\n-  /** The path including the filename of a markdown file that will be overwritten with the plan. */\n-  path: string\n-  /** A detailed plan to solve the user's request. */\n-  plan: string\n-}\n-\n-/**\n  * End your turn, regardless of any new tool results that might be coming. This will allow the user to type another prompt.\n  */\n export interface EndTurnParams {}\n \n@@ -193,34 +143,8 @@\n   }[]\n }\n \n /**\n- * Parameters for spawn_agents_async tool\n- */\n-export interface SpawnAgentsAsyncParams {\n-  agents: {\n-    /** Agent to spawn */\n-    agent_type: string\n-    /** Prompt to send to the agent */\n-    prompt?: string\n-    /** Parameters object for the agent (if any) */\n-    params?: Record<string, any>\n-  }[]\n-}\n-\n-/**\n- * Spawn a single agent that runs within the current message history.\n- */\n-export interface SpawnAgentInlineParams {\n-  /** Agent to spawn */\n-  agent_type: string\n-  /** Prompt to send to the agent */\n-  prompt?: string\n-  /** Parameters object for the agent (if any) */\n-  params?: Record<string, any>\n-}\n-\n-/**\n  * Replace strings in a file with new strings.\n  */\n export interface StrReplaceParams {\n   /** The path to the file to edit. */\n@@ -242,22 +166,8 @@\n   thought: string\n }\n \n /**\n- * Update a subgoal in the context given the id, and optionally the status or plan, or a new log to append. Feel free to update any combination of the status, plan, or log in one invocation.\n- */\n-export interface UpdateSubgoalParams {\n-  /** The id of the subgoal to update. */\n-  id: string\n-  /** Change the status of the subgoal. */\n-  status?: 'NOT_STARTED' | 'IN_PROGRESS' | 'COMPLETE' | 'ABORTED'\n-  /** Change the plan for the subgoal. */\n-  plan?: string\n-  /** Add a log message to the subgoal. This will create a new log entry and append it to the existing logs. Use this to record your progress and any new information you learned as you go. */\n-  log?: string\n-}\n-\n-/**\n  * Search the web for current information using Linkup API.\n  */\n export interface WebSearchParams {\n   /** The search query to find relevant web content */\n"
        },
        {
          "path": "sdk/src/types/agent-definition.ts",
          "status": "modified",
          "diff": "Index: sdk/src/types/agent-definition.ts\n===================================================================\n--- sdk/src/types/agent-definition.ts\t5017a87 (parent)\n+++ sdk/src/types/agent-definition.ts\t9f1a116 (commit)\n@@ -230,28 +230,23 @@\n \n /**\n  * Web and browser tools\n  */\n-export type WebTools = 'browser_logs' | 'web_search' | 'read_docs'\n+export type WebTools = 'web_search' | 'read_docs'\n \n /**\n  * Agent management tools\n  */\n export type AgentTools =\n   | 'spawn_agents'\n-  | 'spawn_agents_async'\n-  | 'send_agent_message'\n   | 'set_messages'\n   | 'add_message'\n \n /**\n  * Planning and organization tools\n  */\n export type PlanningTools =\n   | 'think_deeply'\n-  | 'create_plan'\n-  | 'add_subgoal'\n-  | 'update_subgoal'\n \n /**\n  * Output and control tools\n  */\n"
        },
        {
          "path": "sdk/src/types/tools.ts",
          "status": "modified",
          "diff": "Index: sdk/src/types/tools.ts\n===================================================================\n--- sdk/src/types/tools.ts\t5017a87 (parent)\n+++ sdk/src/types/tools.ts\t9f1a116 (commit)\n@@ -2,12 +2,9 @@\n  * Union type of all available tool names\n  */\n export type ToolName =\n   | 'add_message'\n-  | 'add_subgoal'\n-  | 'browser_logs'\n   | 'code_search'\n-  | 'create_plan'\n   | 'end_turn'\n   | 'find_files'\n   | 'read_docs'\n   | 'read_files'\n@@ -15,25 +12,19 @@\n   | 'run_terminal_command'\n   | 'set_messages'\n   | 'set_output'\n   | 'spawn_agents'\n-  | 'spawn_agents_async'\n-  | 'spawn_agent_inline'\n   | 'str_replace'\n   | 'think_deeply'\n-  | 'update_subgoal'\n   | 'web_search'\n   | 'write_file'\n \n /**\n  * Map of tool names to their parameter types\n  */\n export interface ToolParamsMap {\n   add_message: AddMessageParams\n-  add_subgoal: AddSubgoalParams\n-  browser_logs: BrowserLogsParams\n   code_search: CodeSearchParams\n-  create_plan: CreatePlanParams\n   end_turn: EndTurnParams\n   find_files: FindFilesParams\n   read_docs: ReadDocsParams\n   read_files: ReadFilesParams\n@@ -41,13 +32,10 @@\n   run_terminal_command: RunTerminalCommandParams\n   set_messages: SetMessagesParams\n   set_output: SetOutputParams\n   spawn_agents: SpawnAgentsParams\n-  spawn_agents_async: SpawnAgentsAsyncParams\n-  spawn_agent_inline: SpawnAgentInlineParams\n   str_replace: StrReplaceParams\n   think_deeply: ThinkDeeplyParams\n-  update_subgoal: UpdateSubgoalParams\n   web_search: WebSearchParams\n   write_file: WriteFileParams\n }\n \n@@ -59,36 +47,8 @@\n   content: string\n }\n \n /**\n- * Add a new subgoal for tracking progress. To be used for complex requests that can't be solved in a single step, as you may forget what happened!\n- */\n-export interface AddSubgoalParams {\n-  /** A unique identifier for the subgoal. Try to choose the next sequential integer that is not already in use. */\n-  id: string\n-  /** The objective of the subgoal, concisely and clearly stated. */\n-  objective: string\n-  /** The status of the subgoal. */\n-  status: 'NOT_STARTED' | 'IN_PROGRESS' | 'COMPLETE' | 'ABORTED'\n-  /** A plan for the subgoal. */\n-  plan?: string\n-  /** A log message for the subgoal progress. */\n-  log?: string\n-}\n-\n-/**\n- * Parameters for browser_logs tool\n- */\n-export interface BrowserLogsParams {\n-  /** The type of browser action to perform (e.g., \"navigate\"). */\n-  type: string\n-  /** The URL to navigate to. */\n-  url: string\n-  /** When to consider navigation successful. Defaults to 'load'. */\n-  waitUntil?: 'load' | 'domcontentloaded' | 'networkidle0'\n-}\n-\n-/**\n  * Search for string patterns in the project's files. This tool uses ripgrep (rg), a fast line-oriented search tool. Use this tool only when read_files is not sufficient to find the files you need.\n  */\n export interface CodeSearchParams {\n   /** The pattern to search for. */\n@@ -99,18 +59,8 @@\n   cwd?: string\n }\n \n /**\n- * Generate a detailed markdown plan for complex tasks.\n- */\n-export interface CreatePlanParams {\n-  /** The path including the filename of a markdown file that will be overwritten with the plan. */\n-  path: string\n-  /** A detailed plan to solve the user's request. */\n-  plan: string\n-}\n-\n-/**\n  * End your turn, regardless of any new tool results that might be coming. This will allow the user to type another prompt.\n  */\n export interface EndTurnParams {}\n \n@@ -193,34 +143,8 @@\n   }[]\n }\n \n /**\n- * Parameters for spawn_agents_async tool\n- */\n-export interface SpawnAgentsAsyncParams {\n-  agents: {\n-    /** Agent to spawn */\n-    agent_type: string\n-    /** Prompt to send to the agent */\n-    prompt?: string\n-    /** Parameters object for the agent (if any) */\n-    params?: Record<string, any>\n-  }[]\n-}\n-\n-/**\n- * Spawn a single agent that runs within the current message history.\n- */\n-export interface SpawnAgentInlineParams {\n-  /** Agent to spawn */\n-  agent_type: string\n-  /** Prompt to send to the agent */\n-  prompt?: string\n-  /** Parameters object for the agent (if any) */\n-  params?: Record<string, any>\n-}\n-\n-/**\n  * Replace strings in a file with new strings.\n  */\n export interface StrReplaceParams {\n   /** The path to the file to edit. */\n@@ -242,22 +166,8 @@\n   thought: string\n }\n \n /**\n- * Update a subgoal in the context given the id, and optionally the status or plan, or a new log to append. Feel free to update any combination of the status, plan, or log in one invocation.\n- */\n-export interface UpdateSubgoalParams {\n-  /** The id of the subgoal to update. */\n-  id: string\n-  /** Change the status of the subgoal. */\n-  status?: 'NOT_STARTED' | 'IN_PROGRESS' | 'COMPLETE' | 'ABORTED'\n-  /** Change the plan for the subgoal. */\n-  plan?: string\n-  /** Add a log message to the subgoal. This will create a new log entry and append it to the existing logs. Use this to record your progress and any new information you learned as you go. */\n-  log?: string\n-}\n-\n-/**\n  * Search the web for current information using Linkup API.\n  */\n export interface WebSearchParams {\n   /** The search query to find relevant web content */\n"
        }
      ]
    },
    {
      "id": "restore-subagents-field",
      "sha": "b30e2efa6cfe7019e0b31101812ef11cffe3c99b",
      "parentSha": "58db7581a3322ef766d7529c23abc1c05440441c",
      "spec": "Implement a repo-wide migration of the AgentState field 'spawnableAgents' to 'subagents' and align all spawning handlers, schema definitions, and tests.\n\nRequired changes:\n\n1) Update AgentState schema and initial session state\n- File: common/src/types/session-state.ts\n  - In AgentStateSchema: rename the property 'spawnableAgents' to 'subagents' in both the type and Zod schema definition (including the recursive reference). The resulting schema should have 'subagents: AgentState[]'.\n  - In getInitialSessionState(): replace 'spawnableAgents: []' with 'subagents: []' in the mainAgentState initializer.\n\n2) Update spawn handlers to construct AgentState using 'subagents'\n- File: backend/src/tools/handlers/tool/spawn-agent-inline.ts\n  - When creating the inline child AgentState, replace 'spawnableAgents: []' with 'subagents: []'.\n- File: backend/src/tools/handlers/tool/spawn-agents.ts\n  - When creating each subAgentState, replace 'spawnableAgents: []' with 'subagents: []'.\n- File: backend/src/tools/handlers/tool/spawn-agents-async.ts\n  - When composing the async agentState, replace 'spawnableAgents: []' with 'subagents: []'.\n\n3) Update unit test to reflect the new field name\n- File: backend/src/__tests__/sandbox-generator.test.ts\n  - In the mockAgentState initializer, replace 'spawnableAgents: []' with 'subagents: []'.\n\n4) Clarify spawnable agent ID documentation for user-defined agents\n- File: common/src/util/types/agent-config.d.ts\n  - Expand the JSDoc for the 'spawnableAgents?: string[]' field to explain:\n    - Use fully qualified agent IDs when referencing store agents, e.g., 'publisher/agent-id@version'.\n    - Local agent IDs from .agents can be referenced by their simple id, e.g., 'file-picker'.\n\n5) Validate no regressions and consistent usage\n- Search the codebase for any other construction sites of AgentState and update to 'subagents' if present (e.g., any additional tests or helpers).\n- Do not change AgentTemplate.spawnableAgents (this remains the template whitelist of which agents can be spawned and is distinct from AgentState.subagents).\n- No functional changes beyond the property rename; ensure existing behavior of message sharing, parentId wiring, and expiration logic remains intact.\n\nNotes:\n- The spawn handler registration remains in backend/src/tools/handlers/list.ts and does not need modification.\n- The tool definition for spawn_agent_inline (backend/src/tools/definitions/tool/spawn-agent-inline.ts) remains the same; only the runtime construction of AgentState is affected.\n",
      "prompt": "Migrate the AgentState structure to use a 'subagents' array instead of 'spawnableAgents' across the schema, state initialization, spawn handlers, and tests. Ensure all places that construct or validate AgentState use 'subagents' consistently while leaving AgentTemplate.spawnableAgents intact. Update developer-facing JSDoc to clarify how to specify spawnable agent IDs. Keep the existing agent spawning behavior unchanged.",
      "supplementalFiles": [
        "backend/src/run-agent-step.ts",
        "backend/src/tools/handlers/list.ts",
        "backend/src/tools/definitions/tool/spawn-agent-inline.ts",
        "backend/src/util/messages.ts",
        "common/src/types/agent-template.ts"
      ],
      "fileDiffs": [
        {
          "path": "backend/src/__tests__/sandbox-generator.test.ts",
          "status": "modified",
          "diff": "Index: backend/src/__tests__/sandbox-generator.test.ts\n===================================================================\n--- backend/src/__tests__/sandbox-generator.test.ts\t58db758 (parent)\n+++ backend/src/__tests__/sandbox-generator.test.ts\tb30e2ef (commit)\n@@ -24,9 +24,9 @@\n       agentType: 'test-vm-agent',\n       messageHistory: [],\n       output: undefined,\n       agentContext: {},\n-      spawnableAgents: [],\n+      subagents: [],\n       stepsRemaining: 10,\n     }\n \n     // Base template structure - will be customized per test\n"
        },
        {
          "path": "backend/src/tools/handlers/tool/spawn-agent-inline.ts",
          "status": "modified",
          "diff": "Index: backend/src/tools/handlers/tool/spawn-agent-inline.ts\n===================================================================\n--- backend/src/tools/handlers/tool/spawn-agent-inline.ts\t58db758 (parent)\n+++ backend/src/tools/handlers/tool/spawn-agent-inline.ts\tb30e2ef (commit)\n@@ -132,9 +132,9 @@\n     const childAgentState: AgentState = {\n       agentId,\n       agentType,\n       agentContext: agentState!.agentContext, // Inherit parent context directly\n-      spawnableAgents: [],\n+      subagents: [],\n       messageHistory: getLatestState().messages, // Share the same message array\n       stepsRemaining: 20, // MAX_AGENT_STEPS\n       output: undefined,\n       parentId: agentState!.agentId,\n"
        },
        {
          "path": "backend/src/tools/handlers/tool/spawn-agents-async.ts",
          "status": "modified",
          "diff": "Index: backend/src/tools/handlers/tool/spawn-agents-async.ts\n===================================================================\n--- backend/src/tools/handlers/tool/spawn-agents-async.ts\t58db758 (parent)\n+++ backend/src/tools/handlers/tool/spawn-agents-async.ts\tb30e2ef (commit)\n@@ -181,9 +181,9 @@\n         agentState = {\n           agentId,\n           agentType,\n           agentContext: {},\n-          spawnableAgents: [],\n+          subagents: [],\n           messageHistory: subAgentMessages,\n           stepsRemaining: 20, // MAX_AGENT_STEPS\n           output: undefined,\n           // Add parent ID to agent state for communication\n"
        },
        {
          "path": "backend/src/tools/handlers/tool/spawn-agents.ts",
          "status": "modified",
          "diff": "Index: backend/src/tools/handlers/tool/spawn-agents.ts\n===================================================================\n--- backend/src/tools/handlers/tool/spawn-agents.ts\t58db758 (parent)\n+++ backend/src/tools/handlers/tool/spawn-agents.ts\tb30e2ef (commit)\n@@ -160,9 +160,9 @@\n         const subAgentState: AgentState = {\n           agentId,\n           agentType,\n           agentContext: {},\n-          spawnableAgents: [],\n+          subagents: [],\n           messageHistory: subAgentMessages,\n           stepsRemaining: 20, // MAX_AGENT_STEPS\n           output: undefined,\n           parentId: agentState!.agentId,\n"
        },
        {
          "path": "backend/src/tools/handlers/tool/spawn-inline-agent.ts",
          "status": "added",
          "diff": "Index: backend/src/tools/handlers/tool/spawn-inline-agent.ts\n===================================================================\n--- backend/src/tools/handlers/tool/spawn-inline-agent.ts\t58db758 (parent)\n+++ backend/src/tools/handlers/tool/spawn-inline-agent.ts\tb30e2ef (commit)\n@@ -1,1 +1,197 @@\n-[NEW FILE]\n\\ No newline at end of file\n+import { generateCompactId } from '@codebuff/common/util/string'\n+\n+import { getAgentTemplate } from '../../../templates/agent-registry'\n+import { logger } from '../../../util/logger'\n+import { expireMessages } from '../../../util/messages'\n+\n+import type { CodebuffToolCall } from '../../constants'\n+import type { CodebuffToolHandlerFunction } from '../handler-function-type'\n+import type { AgentTemplate } from '@codebuff/common/types/agent-template'\n+import type { CodebuffMessage } from '@codebuff/common/types/message'\n+import type { PrintModeEvent } from '@codebuff/common/types/print-mode'\n+import type {\n+  AgentState,\n+  AgentTemplateType,\n+} from '@codebuff/common/types/session-state'\n+import type { ProjectFileContext } from '@codebuff/common/util/file'\n+import type { WebSocket } from 'ws'\n+\n+export const handleSpawnAgentInline = ((params: {\n+  previousToolCallFinished: Promise<void>\n+  toolCall: CodebuffToolCall<'spawn_agent_inline'>\n+\n+  fileContext: ProjectFileContext\n+  clientSessionId: string\n+  userInputId: string\n+\n+  getLatestState: () => { messages: CodebuffMessage[] }\n+  state: {\n+    ws?: WebSocket\n+    fingerprintId?: string\n+    userId?: string\n+    agentTemplate?: AgentTemplate\n+    localAgentTemplates?: Record<string, AgentTemplate>\n+    messages?: CodebuffMessage[]\n+    agentState?: AgentState\n+  }\n+}): { result: Promise<undefined>; state: {} } => {\n+  const {\n+    previousToolCallFinished,\n+    toolCall,\n+    fileContext,\n+    clientSessionId,\n+    userInputId,\n+    getLatestState,\n+    state,\n+  } = params\n+  const {\n+    agent_type: agentTypeStr,\n+    prompt,\n+    params: agentParams,\n+  } = toolCall.args\n+  const {\n+    ws,\n+    fingerprintId,\n+    userId,\n+    agentTemplate: parentAgentTemplate,\n+    localAgentTemplates,\n+    messages,\n+  } = state\n+  let { agentState } = state\n+\n+  if (!ws) {\n+    throw new Error(\n+      'Internal error for spawn_agent_inline: Missing WebSocket in state',\n+    )\n+  }\n+  if (!fingerprintId) {\n+    throw new Error(\n+      'Internal error for spawn_agent_inline: Missing fingerprintId in state',\n+    )\n+  }\n+  if (!parentAgentTemplate) {\n+    throw new Error(\n+      'Internal error for spawn_agent_inline: Missing agentTemplate in state',\n+    )\n+  }\n+  if (!messages) {\n+    throw new Error(\n+      'Internal error for spawn_agent_inline: Missing messages in state',\n+    )\n+  }\n+  if (!agentState) {\n+    throw new Error(\n+      'Internal error for spawn_agent_inline: Missing agentState in state',\n+    )\n+  }\n+  if (!localAgentTemplates) {\n+    throw new Error(\n+      'Internal error for spawn_agent_inline: Missing localAgentTemplates in state',\n+    )\n+  }\n+\n+  const triggerSpawnInlineAgent = async () => {\n+    const agentType = agentTypeStr as AgentTemplateType\n+    const agentTemplate = await getAgentTemplate(agentType, localAgentTemplates)\n+\n+    if (!agentTemplate) {\n+      throw new Error(`Agent type ${agentTypeStr} not found.`)\n+    }\n+\n+    if (!parentAgentTemplate.spawnableAgents.includes(agentType)) {\n+      throw new Error(\n+        `Agent type ${parentAgentTemplate.id} is not allowed to spawn child agent type ${agentType}.`,\n+      )\n+    }\n+\n+    // Validate prompt and params against agent's schema\n+    const { inputSchema } = agentTemplate\n+\n+    // Validate prompt requirement\n+    if (inputSchema.prompt) {\n+      const result = inputSchema.prompt.safeParse(prompt)\n+      if (!result.success) {\n+        throw new Error(\n+          `Invalid prompt for agent ${agentType}: ${JSON.stringify(result.error.issues, null, 2)}`,\n+        )\n+      }\n+    }\n+\n+    // Validate params if schema exists\n+    if (inputSchema.params) {\n+      const result = inputSchema.params.safeParse(agentParams)\n+      if (!result.success) {\n+        throw new Error(\n+          `Invalid params for agent ${agentType}: ${JSON.stringify(result.error.issues, null, 2)}`,\n+        )\n+      }\n+    }\n+\n+    const agentId = generateCompactId()\n+\n+    // Create child agent state that shares message history with parent\n+    const childAgentState: AgentState = {\n+      agentId,\n+      agentType,\n+      agentContext: agentState!.agentContext, // Inherit parent context directly\n+      subagents: [],\n+      messageHistory: getLatestState().messages, // Share the same message array\n+      stepsRemaining: 20, // MAX_AGENT_STEPS\n+      output: undefined,\n+      parentId: agentState!.agentId,\n+    }\n+\n+    logger.debug(\n+      {\n+        agentTemplate,\n+        prompt,\n+        params: agentParams,\n+        agentId,\n+        parentId: childAgentState.parentId,\n+      },\n+      `Spawning inline agent — ${agentType} (${agentId})`,\n+    )\n+\n+    // Import loopAgentSteps dynamically to avoid circular dependency\n+    const { loopAgentSteps } = await import('../../../run-agent-step')\n+\n+    const result = await loopAgentSteps(ws, {\n+      userInputId: `${userInputId}-inline-${agentType}${agentId}`,\n+      prompt: prompt || '',\n+      params: agentParams,\n+      agentType: agentTemplate.id,\n+      agentState: childAgentState,\n+      fingerprintId,\n+      fileContext,\n+      localAgentTemplates,\n+      toolResults: [],\n+      userId,\n+      clientSessionId,\n+      onResponseChunk: (chunk: string | PrintModeEvent) => {\n+        // Child agent output is streamed directly to parent's output\n+        // No need for special handling since we share message history\n+      },\n+    })\n+\n+    // Update parent's message history with child's final state\n+    // Since we share the same message array reference, this should already be updated\n+    let finalMessages = result.agentState?.messageHistory || state.messages\n+\n+    // Expire messages with timeToLive: 'userPrompt' to clean up inline agent's temporary messages\n+    finalMessages = expireMessages(finalMessages, 'userPrompt')\n+\n+    state.messages = finalMessages\n+\n+    // Update parent agent state to reflect shared message history\n+    if (agentState && result.agentState) {\n+      agentState.messageHistory = finalMessages\n+    }\n+\n+    return undefined\n+  }\n+\n+  return {\n+    result: previousToolCallFinished.then(triggerSpawnInlineAgent),\n+    state: {},\n+  }\n+}) satisfies CodebuffToolHandlerFunction<'spawn_agent_inline'>\n"
        },
        {
          "path": "common/src/types/session-state.ts",
          "status": "modified",
          "diff": "Index: common/src/types/session-state.ts\n===================================================================\n--- common/src/types/session-state.ts\t58db758 (parent)\n+++ common/src/types/session-state.ts\tb30e2ef (commit)\n@@ -33,9 +33,9 @@\n export const AgentStateSchema: z.ZodType<{\n   agentId: string\n   agentType: AgentTemplateType | null\n   agentContext: Record<string, Subgoal>\n-  spawnableAgents: AgentState[]\n+  subagents: AgentState[]\n   messageHistory: CodebuffMessage[]\n   stepsRemaining: number\n   output?: Record<string, any>\n   parentId?: string\n@@ -43,9 +43,9 @@\n   z.object({\n     agentId: z.string(),\n     agentType: z.string().nullable(),\n     agentContext: z.record(z.string(), subgoalSchema),\n-    spawnableAgents: AgentStateSchema.array(),\n+    subagents: AgentStateSchema.array(),\n     messageHistory: CodebuffMessageSchema.array(),\n     stepsRemaining: z.number(),\n     output: z.record(z.string(), z.any()).optional(),\n     parentId: z.string().optional(),\n@@ -104,9 +104,9 @@\n     mainAgentState: {\n       agentId: 'main-agent',\n       agentType: null,\n       agentContext: {},\n-      spawnableAgents: [],\n+      subagents: [],\n       messageHistory: [],\n       stepsRemaining: 12,\n       output: undefined,\n     },\n"
        },
        {
          "path": "common/src/util/types/agent-config.d.ts",
          "status": "modified",
          "diff": "Index: common/src/util/types/agent-config.d.ts\n===================================================================\n--- common/src/util/types/agent-config.d.ts\t58db758 (parent)\n+++ common/src/util/types/agent-config.d.ts\tb30e2ef (commit)\n@@ -40,9 +40,15 @@\n \n   /** Tools this agent can use. */\n   toolNames?: ToolName[]\n \n-  /** Other agents this agent can spawn. */\n+  /** Other agents this agent can spawn, like 'codebuff/file-picker@0.0.1'.\n+   *\n+   * Use the fully qualified agent id from the agent store, including publisher and version: 'codebuff/file-picker@0.0.1'\n+   * (publisher and version are required!)\n+   * \n+   * Or, use the agent id from a local agent file in your .agents directory: 'file-picker'.\n+   */\n   spawnableAgents?: string[]\n \n   // ============================================================================\n   // Input and Output\n"
        }
      ]
    },
    {
      "id": "stop-think-deeply",
      "sha": "97178a8d6f7ad7e72c158fbaa65095b3e9ee7373",
      "parentSha": "35043edbe6de9aa084382656707d99db112a4faa",
      "spec": "Implement a termination guard so an agent ends its turn when only reflective tools (e.g., think_deeply) were used.\n\n1) Add shared constant listing tools that should NOT force a follow-up step\n- File: common/src/tools/constants.ts\n- Export a new array constant named TOOLS_WHICH_WONT_FORCE_NEXT_STEP with the initial value containing only 'think_deeply'.\n- Place it alongside existing tool constants and export it for import by backend code.\n\n2) Update agent step termination logic to respect the new constant\n- File: backend/src/run-agent-step.ts\n- Import TOOLS_WHICH_WONT_FORCE_NEXT_STEP from @codebuff/common/tools/constants.\n- After processing the tool stream (where toolCalls and toolResults are available) and before returning, compute a new boolean hasNoToolResults that is true when both:\n  - All toolCalls are in TOOLS_WHICH_WONT_FORCE_NEXT_STEP (i.e., filtering out those tools leaves zero), and\n  - All toolResults are in TOOLS_WHICH_WONT_FORCE_NEXT_STEP (i.e., filtering out those tools leaves zero).\n- Compute shouldEndTurn as true when either:\n  - Any tool call is 'end_turn', OR\n  - hasNoToolResults is true.\n- Remove the previous condition that ended the turn only when toolCalls.length === 0 && toolResults.length === 0.\n- Include shouldEndTurn in the end-of-step debug log payload so the decision is visible in logs.\n\n3) Do not modify any other files or loops; the behavior change must be localized to run-agent-step.ts with the new shared constant in common.\n\nObservable behavior:\n- If the agent emits only a think_deeply tool (and no other tools) in a step, the step ends instead of forcing another step.\n- Existing behavior for explicit end_turn remains unchanged.\n- Other tools continue to trigger follow-up steps as before unless end_turn is used.",
      "prompt": "Update the agent step termination so that purely reflective planning tools do not cause another step. Introduce a shared list of non-progress tools (starting with think_deeply) and adjust the end-of-step logic to end the turn whenever only those tools were used, while still ending on explicit end_turn. Keep the change minimal and localized to the agent step logic and shared tool constants.",
      "supplementalFiles": [
        "backend/src/tools/definitions/tool/think-deeply.ts",
        "backend/src/tools/handlers/tool/think-deeply.ts",
        "backend/src/tools/definitions/tool/end-turn.ts",
        "backend/src/tools/handlers/tool/end-turn.ts",
        "backend/src/tools/tool-executor.ts",
        "backend/src/loop-main-prompt.ts",
        "backend/src/tools/constants.ts",
        "common/src/tools/list.ts",
        "common/src/tools/params/tool/think-deeply.ts"
      ],
      "fileDiffs": [
        {
          "path": "backend/src/run-agent-step.ts",
          "status": "modified",
          "diff": "Index: backend/src/run-agent-step.ts\n===================================================================\n--- backend/src/run-agent-step.ts\t35043ed (parent)\n+++ backend/src/run-agent-step.ts\t97178a8 (commit)\n@@ -47,8 +47,9 @@\n   ToolResult,\n } from '@codebuff/common/types/session-state'\n import type { ProjectFileContext } from '@codebuff/common/util/file'\n import type { WebSocket } from 'ws'\n+import { TOOLS_WHICH_WONT_FORCE_NEXT_STEP } from '@codebuff/common/tools/constants'\n \n export interface AgentOptions {\n   userId: string | undefined\n   userInputId: string\n@@ -436,8 +437,18 @@\n     ]\n     logger.debug({ summary: fullResponse }, 'Compacted messages')\n   }\n \n+  const hasNoToolResults =\n+    toolCalls.filter(\n+      (call) => !TOOLS_WHICH_WONT_FORCE_NEXT_STEP.includes(call.toolName),\n+    ).length === 0 &&\n+    toolResults.filter(\n+      (result) => !TOOLS_WHICH_WONT_FORCE_NEXT_STEP.includes(result.toolName),\n+    ).length === 0\n+  const shouldEndTurn =\n+    toolCalls.some((call) => call.toolName === 'end_turn') || hasNoToolResults\n+\n   logger.debug(\n     {\n       iteration: iterationNum,\n       agentId: agentState.agentId,\n@@ -445,20 +456,17 @@\n       fullResponse,\n       fullResponseChunks,\n       toolCalls,\n       toolResults,\n+      shouldEndTurn,\n       agentContext: newAgentContext,\n       finalMessageHistoryWithToolResults,\n       model,\n       agentTemplate,\n       duration: Date.now() - startTime,\n     },\n     `End agent ${agentType} step ${iterationNum} (${userInputId}${prompt ? ` - Prompt: ${prompt.slice(0, 20)}` : ''})`,\n   )\n-  const shouldEndTurn =\n-    toolCalls.some((call) => call.toolName === 'end_turn') ||\n-    (toolCalls.length === 0 && toolResults.length === 0)\n-\n   const newAgentState = {\n     ...agentState,\n     messageHistory: finalMessageHistoryWithToolResults,\n     stepsRemaining: agentState.stepsRemaining - 1,\n"
        },
        {
          "path": "common/src/tools/constants.ts",
          "status": "modified",
          "diff": "Index: common/src/tools/constants.ts\n===================================================================\n--- common/src/tools/constants.ts\t35043ed (parent)\n+++ common/src/tools/constants.ts\t97178a8 (commit)\n@@ -6,8 +6,10 @@\n export const toolXmlName = 'codebuff_tool_call'\n export const startToolTag = `<${toolXmlName}>\\n`\n export const endToolTag = `\\n</${toolXmlName}>`\n \n+export const TOOLS_WHICH_WONT_FORCE_NEXT_STEP = ['think_deeply']\n+\n // List of all available tools\n export const toolNames = [\n   'add_subgoal',\n   'add_message',\n"
        }
      ]
    },
    {
      "id": "add-prompt-error",
      "sha": "984735852c0ca031f81994ca3205a4ca140600c2",
      "parentSha": "9819a676a62052cd1d959ef7af0ec6228395bee2",
      "spec": "Implement a dedicated prompt-error server action for errors associated with prompt inputs and route such errors based on the originating ClientAction type.\n\nScope and requirements:\n1) Shared types/schema (common/src/actions.ts)\n- Extend SERVER_ACTION_SCHEMA to include a new discriminated union member with type: 'prompt-error', fields: userInputId (string), message (string), optional error (string), optional remainingBalance (number).\n- Export generic utility types for ClientAction and ServerAction that allow narrowing by the 'type' discriminator (e.g., export type ClientAction<T extends ...> = Extract<...>, and similar for ServerAction).\n\n2) Server middleware error routing (backend/src/websockets/middleware.ts)\n- Add a helper that, given a ClientAction, returns an appropriately shaped server error action:\n  - If action.type === 'prompt', return a ServerAction<'prompt-error'> using action.promptId as userInputId.\n  - Otherwise, return a ServerAction<'action-error'>.\n- Use this helper when returning errors from middleware paths, including (but not limited to):\n  - Organization insufficient credits gating.\n  - Missing user or fingerprint ID.\n  - User insufficient credits gating.\n- Preserve existing error details (message, error, remainingBalance) and logging; only change the emitted action type when the client action is a prompt.\n\n3) Main prompt execution error handling (backend/src/websockets/websocket-action.ts)\n- In the catch block for mainPrompt execution failures for a prompt input, send a single 'prompt-error' action containing the error message and the same promptId as userInputId.\n- Remove the previous behavior of emitting error response-chunk(s) and a terminal prompt-response for this error path. On error, do not send response-chunk/prompt-response; only send prompt-error.\n- Maintain call to endUserInput and continue to emit usage responses as currently done after handling the error.\n\n4) CLI client subscription (npm-app/src/client.ts)\n- Subscribe to 'prompt-error' in setupSubscriptions() using the same handler as 'action-error'.\n- Ensure the handler recognizes and renders credit gating messages consistently (e.g., \"Insufficient credits\"), logs details, and resets the prompt state as today.\n\nAcceptance criteria:\n- When a prompt action fails in middleware due to missing auth or insufficient credits, the server emits a 'prompt-error' action with the userInputId matching the promptId and an appropriate message; non-prompt actions continue to emit 'action-error'.\n- When the main prompt execution throws, the server emits a single 'prompt-error' (no response-chunk or prompt-response in that error path), then usage updates proceed normally.\n- The shared schema validates the new 'prompt-error' action and generic ClientAction/ServerAction types compile in dependents.\n- The CLI client logs and handles 'prompt-error' identically to 'action-error' and returns control to the user.\n- No changes to WebSocket message envelope schemas are required; the new action is carried in the existing 'action' server message envelope.\n\nNon-goals:\n- Do not modify web frontend or SDK subscriptions beyond the CLI client in this task.\n- Do not change success paths for streaming or prompt completion.",
      "prompt": "Introduce a distinct error channel for user prompts. Add a new server action that specifically reports prompt-related failures, wire server middleware and the main prompt execution path to use it when the originating request is a prompt, and update the CLI client to listen for and display these prompt errors just like general action errors. Keep existing success and streaming behaviors unchanged.",
      "supplementalFiles": [
        "backend/src/websockets/server.ts",
        "backend/src/websockets/switchboard.ts",
        "common/src/websockets/websocket-schema.ts",
        "sdk/src/websocket-client.ts",
        "npm-app/src/cli.ts",
        "npm-app/src/display/print-mode.ts"
      ],
      "fileDiffs": [
        {
          "path": "backend/src/websockets/middleware.ts",
          "status": "modified",
          "diff": "Index: backend/src/websockets/middleware.ts\n===================================================================\n--- backend/src/websockets/middleware.ts\t9819a67 (parent)\n+++ backend/src/websockets/middleware.ts\t9847358 (commit)\n@@ -29,8 +29,26 @@\n   ws: WebSocket,\n   userInfo: UserInfo | undefined,\n ) => Promise<void | ServerAction>\n \n+function getServerErrorAction<T extends ClientAction>(\n+  action: T,\n+  error: T extends { type: 'prompt' }\n+    ? Omit<ServerAction<'prompt-error'>, 'type' | 'userInputId'>\n+    : Omit<ServerAction<'action-error'>, 'type'>,\n+): ServerAction<'prompt-error'> | ServerAction<'action-error'> {\n+  return action.type === 'prompt'\n+    ? {\n+        type: 'prompt-error',\n+        userInputId: action.promptId,\n+        ...error,\n+      }\n+    : {\n+        type: 'action-error',\n+        ...error,\n+      }\n+}\n+\n export class WebSocketMiddleware {\n   private middlewares: Array<MiddlewareCallback> = []\n \n   use<T extends ClientAction['type']>(\n@@ -221,14 +239,13 @@\n             orgBalance: orgBalance.netBalance,\n           },\n           'Organization has insufficient credits, gating request.',\n         )\n-        return {\n-          type: 'action-error',\n+        return getServerErrorAction(action, {\n           error: 'Insufficient organization credits',\n           message,\n           remainingBalance: orgBalance.netBalance, // Send org balance here\n-        }\n+        })\n       }\n     }\n \n     // Update request context with the results\n@@ -279,13 +296,12 @@\n         actionType: action.type,\n       },\n       'Missing user or fingerprint ID',\n     )\n-    return {\n-      type: 'action-error',\n+    return getServerErrorAction(action, {\n       error: 'Missing user or fingerprint ID',\n       message: 'Please log in to continue.',\n-    }\n+    })\n   }\n \n   // Get user info for balance calculation\n   const user = await db.query.user.findFirst({\n@@ -337,14 +353,13 @@\n       balance.totalDebt > 0\n         ? `You have a balance of negative ${pluralize(Math.abs(balance.totalDebt), 'credit')}. Please add credits to continue using Codebuff.`\n         : `You do not have enough credits for this action. Please add credits or wait for your next cycle to begin.`\n \n-    return {\n-      type: 'action-error',\n+    return getServerErrorAction(action, {\n       error: 'Insufficient credits',\n       message,\n       remainingBalance: balance.netBalance,\n-    }\n+    })\n   }\n \n   // Send initial usage info if we have sufficient credits\n   sendAction(ws, {\n"
        },
        {
          "path": "backend/src/websockets/websocket-action.ts",
          "status": "modified",
          "diff": "Index: backend/src/websockets/websocket-action.ts\n===================================================================\n--- backend/src/websockets/websocket-action.ts\t9819a67 (parent)\n+++ backend/src/websockets/websocket-action.ts\t9847358 (commit)\n@@ -6,9 +6,8 @@\n } from '@codebuff/common/old-constants'\n import { AnalyticsEvent } from '@codebuff/common/constants/analytics-events'\n import db from '@codebuff/common/db/index'\n import * as schema from '@codebuff/common/db/schema'\n-import { buildArray } from '@codebuff/common/util/array'\n import { ensureEndsWithNewline } from '@codebuff/common/util/file'\n import { generateCompactId } from '@codebuff/common/util/string'\n import { eq } from 'drizzle-orm'\n \n@@ -23,9 +22,8 @@\n import { protec } from './middleware'\n import { sendMessage } from './server'\n import { assembleLocalAgentTemplates } from '../templates/agent-registry'\n import { logger, withLoggerContext } from '../util/logger'\n-import { asSystemMessage } from '../util/messages'\n \n import type {\n   ClientAction,\n   ServerAction,\n@@ -166,48 +164,15 @@\n         })\n       } catch (e) {\n         logger.error(e, 'Error in mainPrompt')\n         let response =\n-          e && typeof e === 'object' && 'message' in e ? `\\n\\n${e.message}` : ''\n+          e && typeof e === 'object' && 'message' in e ? `${e.message}` : `${e}`\n \n-        const newMessages = buildArray(\n-          ...action.sessionState.mainAgentState.messageHistory,\n-          prompt && {\n-            role: 'user' as const,\n-            content: prompt,\n-          },\n-          {\n-            role: 'user' as const,\n-            content: asSystemMessage(`Received error from server: ${response}`),\n-          },\n-        )\n-\n         sendAction(ws, {\n-          type: 'response-chunk',\n+          type: 'prompt-error',\n           userInputId: promptId,\n-          chunk: { type: 'error', message: response },\n+          message: response,\n         })\n-        sendAction(ws, {\n-          type: 'response-chunk',\n-          userInputId: promptId,\n-          chunk: response,\n-        })\n-        setTimeout(() => {\n-          sendAction(ws, {\n-            type: 'prompt-response',\n-            promptId,\n-            // Send back original sessionState.\n-            sessionState: {\n-              ...action.sessionState,\n-              mainAgentState: {\n-                ...action.sessionState.mainAgentState,\n-                messageHistory: newMessages,\n-              },\n-            },\n-            toolCalls: [],\n-            toolResults: [],\n-          })\n-        }, 100)\n       } finally {\n         endUserInput(userId, promptId)\n         const usageResponse = await genUsageResponse(\n           fingerprintId,\n"
        },
        {
          "path": "common/src/actions.ts",
          "status": "modified",
          "diff": "Index: common/src/actions.ts\n===================================================================\n--- common/src/actions.ts\t9819a67 (parent)\n+++ common/src/actions.ts\t9847358 (commit)\n@@ -59,9 +59,12 @@\n     promptId: z.string(),\n   }),\n ])\n \n-export type ClientAction = z.infer<typeof CLIENT_ACTION_SCHEMA>\n+type ClientActionAny = z.infer<typeof CLIENT_ACTION_SCHEMA>\n+export type ClientAction<\n+  T extends ClientActionAny['type'] = ClientActionAny['type'],\n+> = Extract<ClientActionAny, { type: T }>\n \n export const UsageReponseSchema = z.object({\n   type: z.literal('usage-response'),\n   usage: z.number(),\n@@ -143,10 +146,20 @@\n     error: z.string().optional(),\n     remainingBalance: z.number().optional(),\n   }),\n   z.object({\n+    type: z.literal('prompt-error'),\n+    userInputId: z.string(),\n+    message: z.string(),\n+    error: z.string().optional(),\n+    remainingBalance: z.number().optional(),\n+  }),\n+  z.object({\n     // The server is imminently going to shutdown, and the client should reconnect\n     type: z.literal('request-reconnect'),\n   }),\n ])\n \n-export type ServerAction = z.infer<typeof SERVER_ACTION_SCHEMA>\n+type ServerActionAny = z.infer<typeof SERVER_ACTION_SCHEMA>\n+export type ServerAction<\n+  T extends ServerActionAny['type'] = ServerActionAny['type'],\n+> = Extract<ServerActionAny, { type: T }>\n"
        },
        {
          "path": "npm-app/src/client.ts",
          "status": "modified",
          "diff": "Index: npm-app/src/client.ts\n===================================================================\n--- npm-app/src/client.ts\t9819a67 (parent)\n+++ npm-app/src/client.ts\t9847358 (commit)\n@@ -733,9 +733,11 @@\n     this.webSocket.close()\n   }\n \n   private setupSubscriptions() {\n-    this.webSocket.subscribe('action-error', (action) => {\n+    const onError = (\n+      action: ServerAction<'action-error'> | ServerAction<'prompt-error'>,\n+    ): void => {\n       if (action.error === 'Insufficient credits') {\n         console.error(['', red(`Error: ${action.message}`)].join('\\n'))\n         logger.info(\n           {\n@@ -769,9 +771,11 @@\n         )\n       }\n       this.freshPrompt()\n       return\n-    })\n+    }\n+    this.webSocket.subscribe('action-error', onError)\n+    this.webSocket.subscribe('prompt-error', onError)\n \n     this.webSocket.subscribe('read-files', (a) => {\n       const { filePaths, requestId } = a\n       const files = getFiles(filePaths)\n"
        }
      ]
    },
    {
      "id": "update-validation-api",
      "sha": "0acdecd90962d314a834a4150d1c84e2ef67f5ca",
      "parentSha": "92111590ee50c46bdfe62febff22d4f433d866c6",
      "spec": "Implement an unauthenticated, array-based agent validation flow across CLI and web API.\n\n1) npm-app/src/utils/agent-validation.ts\n- Change the validation helper to accept an array and drop auth:\n  - Update function signature to: validateAgentConfigsIfAuthenticated(agentConfigs: any[]): Promise<void>.\n  - Remove the User import and the user parameter.\n  - Early return only when agentConfigs is falsy or has length 0.\n  - When calling the API, send a POST to `${websiteUrl}/api/agents/validate` with headers { 'Content-Type': 'application/json' } and body { agentConfigs }.\n  - Remove setting Cookie header and any reliance on user.authToken.\n  - Preserve existing warning/error printing behavior after the fetch.\n\n2) npm-app/src/client.ts\n- Update warmContextCache() to invoke the helper with an array of agent configs:\n  - Replace the current call to pass only Object.values(fileContext.agentTemplates).\n  - Remove passing this.user to the helper (since it no longer takes a user argument).\n\n3) web/src/app/api/agents/validate/route.ts\n- Remove authentication requirement and accept an array payload:\n  - Delete imports and usage of next-auth/getServerSession and authOptions.\n  - Update the request type to interface ValidateAgentsRequest { agentConfigs: any[] }.\n  - If agentConfigs is missing or not an array, return 400 with error: 'Invalid request: agentConfigs must be an array of AgentConfig objects'.\n  - Convert the array to an object keyed by config.id via Object.fromEntries(agentConfigs.map((config) => [config.id, config])) and pass that to validateAgents.\n  - Keep the response shape: { success: true, configs: Object.keys(configs), validationErrors, errorCount: validationErrors.length }.\n  - Update logger.warn to omit user context (no session) and keep the same message; update error logging similarly.\n\nAcceptance criteria:\n- CLI calls validation during warmContextCache without requiring login.\n- The payload sent by CLI is an array of agent configs; server accepts it without auth.\n- Server converts array to object keyed by id before calling validateAgents and returns the same response fields as before.\n- No references to next-auth remain in the validate route; no Cookie header is sent from CLI for validation.\n- Existing publish/validation code paths that still expect an object (e.g., publish route) remain unchanged and continue to work.",
      "prompt": "Simplify the agent validation flow to not require authentication and to use an array-based payload. Update the CLI helper to send an array of local agent configs and call the web validation API without any auth. Update the web validation endpoint to accept an array, convert it to the format expected by the shared validator, and return the same response structure. Make sure initialization validates local agents even when the user is not logged in, and keep logging and error responses clear.",
      "supplementalFiles": [
        "common/src/templates/agent-validation.ts",
        "common/src/types/dynamic-agent-template.ts",
        "web/src/app/api/agents/publish/route.ts",
        "backend/src/templates/agent-registry.ts"
      ],
      "fileDiffs": [
        {
          "path": "npm-app/src/client.ts",
          "status": "modified",
          "diff": "Index: npm-app/src/client.ts\n===================================================================\n--- npm-app/src/client.ts\t9211159 (parent)\n+++ npm-app/src/client.ts\t0acdecd (commit)\n@@ -1547,10 +1547,9 @@\n       throw new Error('Failed to initialize project file context')\n     }\n \n     await validateAgentConfigsIfAuthenticated(\n-      this.user,\n-      fileContext.agentTemplates,\n+      Object.values(fileContext.agentTemplates),\n     )\n \n     this.webSocket.subscribe('init-response', (a) => {\n       const parsedAction = InitResponseSchema.safeParse(a)\n"
        },
        {
          "path": "npm-app/src/utils/agent-validation.ts",
          "status": "modified",
          "diff": "Index: npm-app/src/utils/agent-validation.ts\n===================================================================\n--- npm-app/src/utils/agent-validation.ts\t9211159 (parent)\n+++ npm-app/src/utils/agent-validation.ts\t0acdecd (commit)\n@@ -5,30 +5,27 @@\n \n import type { User } from '@codebuff/common/util/credentials'\n \n /**\n- * Validates agent configs using the REST API if user is authenticated\n- * @param user The user object (null if not authenticated)\n+ * Validates agent configs using the REST API\n  * @param agentConfigs The agent configs to validate\n  */\n export async function validateAgentConfigsIfAuthenticated(\n-  user: User | undefined,\n-  agentConfigs: Record<string, any> | undefined,\n+  agentConfigs: any[]\n ): Promise<void> {\n-  // Only validate if user is authenticated and there are agent configs\n-  const agentConfigKeys = Object.keys(agentConfigs || {})\n-\n-  if (!user || !agentConfigs || agentConfigKeys.length === 0) {\n+  // Only validate if there are agent configs\n+  if (!agentConfigs || agentConfigs.length === 0) {\n     return\n   }\n \n   try {\n+    const headers: Record<string, string> = {\n+      'Content-Type': 'application/json',\n+    }\n+\n     const response = await fetch(`${websiteUrl}/api/agents/validate`, {\n       method: 'POST',\n-      headers: {\n-        'Content-Type': 'application/json',\n-        Cookie: `next-auth.session-token=${user.authToken}`,\n-      },\n+      headers,\n       body: JSON.stringify({ agentConfigs }),\n     })\n \n     if (!response.ok) {\n"
        },
        {
          "path": "web/src/app/api/agents/validate/route.ts",
          "status": "modified",
          "diff": "Index: web/src/app/api/agents/validate/route.ts\n===================================================================\n--- web/src/app/api/agents/validate/route.ts\t9211159 (parent)\n+++ web/src/app/api/agents/validate/route.ts\t0acdecd (commit)\n@@ -1,43 +1,40 @@\n import { validateAgents } from '@codebuff/common/templates/agent-validation'\n import { NextResponse } from 'next/server'\n-import { getServerSession } from 'next-auth'\n \n-import { authOptions } from '@/app/api/auth/[...nextauth]/auth-options'\n import { logger } from '@/util/logger'\n \n import type { NextRequest } from 'next/server'\n \n interface ValidateAgentsRequest {\n-  agentConfigs: Record<string, any>\n+  agentConfigs: any[]\n }\n \n export async function POST(request: NextRequest): Promise<NextResponse> {\n   try {\n-    const session = await getServerSession(authOptions)\n-    if (!session?.user?.id) {\n-      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\n-    }\n-\n     const body = (await request.json()) as ValidateAgentsRequest\n     const { agentConfigs } = body\n \n-    if (!agentConfigs || typeof agentConfigs !== 'object') {\n+    if (!agentConfigs || !Array.isArray(agentConfigs)) {\n       return NextResponse.json(\n         {\n           error:\n-            'Invalid request: agentConfigs must be an object, with keys being the agent IDs and values of type AgentConfig',\n+            'Invalid request: agentConfigs must be an array of AgentConfig objects',\n         },\n         { status: 400 }\n       )\n     }\n \n-    const { templates: configs, validationErrors } = validateAgents(agentConfigs)\n+    const configsObject = Object.fromEntries(\n+      agentConfigs.map((config) => [config.id, config])\n+    )\n+    const { templates: configs, validationErrors } =\n+      validateAgents(configsObject)\n \n     if (validationErrors.length > 0) {\n       logger.warn(\n-        { errorCount: validationErrors.length, userId: session.user.id },\n-        'Agent config validation errors found',\n+        { errorCount: validationErrors.length },\n+        'Agent config validation errors found'\n       )\n     }\n \n     return NextResponse.json({\n@@ -48,12 +45,12 @@\n     })\n   } catch (error) {\n     logger.error(\n       { error: error instanceof Error ? error.message : String(error) },\n-      'Error validating agent configs',\n+      'Error validating agent configs'\n     )\n     return NextResponse.json(\n       { error: 'Internal server error' },\n-      { status: 500 },\n+      { status: 500 }\n     )\n   }\n }\n"
        }
      ]
    },
    {
      "id": "migrate-agent-validation",
      "sha": "2b5651f20a560ba0587dedad7a14805107cb7d65",
      "parentSha": "48529542ec1e1c37e471882f54865e25ec41df7a",
      "spec": "Implement a migration of agent config validation from the backend WebSocket init handler to a Next.js web API route and trigger it from the CLI client when a user is authenticated.\n\nMake the following changes:\n\n1) Create a new Next.js API route to validate agent configs\n- File: web/src/app/api/agents/validate/route.ts\n- POST-only handler that:\n  - Requires authentication: use getServerSession(authOptions); return 401 if absent.\n  - Accepts JSON body: { agentConfigs: Record<string, any> } and return 400 if invalid.\n  - Calls validateAgents from @codebuff/common/templates/agent-validation to validate provided configs.\n  - Logs a warning with the count if validationErrors are present.\n  - Returns JSON { success: true, configs: string[], validationErrors: Array<{filePath: string; message: string}>, errorCount: number }.\n  - On unexpected errors, log and return 500 with { error: 'Internal server error' }.\n\n2) Add a CLI utility to call the new validation route when authenticated\n- File: npm-app/src/utils/agent-validation.ts\n- Export function validateAgentConfigsIfAuthenticated(user: User | undefined, agentConfigs: Record<string, any> | undefined): Promise<void>\n  - If no user or no agentConfigs (or empty), return immediately.\n  - POST to `${websiteUrl}/api/agents/validate` with headers:\n    - 'Content-Type': 'application/json'\n    - Cookie: `next-auth.session-token=${user.authToken}`\n  - Body: { agentConfigs }\n  - If response.ok is false, print a single red console line: \"Agent Config Validation Error: <message or HTTP code>\" (use JSON error if present; else status text).\n  - If response.ok is true and data.validationErrors has entries, print a yellow header \"Agent Config Validation Warnings:\" followed by each error message on its own line.\n  - On network/processing errors, logger.warn with error details and do not throw.\n\n3) Wire the validator into the CLI client init flow\n- File: npm-app/src/client.ts\n  - Import the new utility from './utils/agent-validation'.\n  - In warmContextCache(), after obtaining the fileContext from getProjectFileContext and before subscribing/handling init-response, call:\n    await validateAgentConfigsIfAuthenticated(this.user, fileContext.agentTemplates)\n  - Leave downstream handling tolerant if init-response no longer includes agentNames/message.\n\n4) Update project file context assembly to load local agents directly (not via preloaded globals)\n- File: npm-app/src/project-files.ts\n  - Replace usage of loadedAgents for agentTemplates with an awaited call: await loadLocalAgents({ verbose: false }).\n  - Remove the separate scan/collection of agent template files from knowledgeFiles (the block that creates agentTemplatePaths, reads them, and merges scraped content for them). Keep knowledge files, but exclude anything under AGENT_TEMPLATES_DIR.\n  - Ensure the returned ProjectFileContext.agentTemplates is the result of loadLocalAgents and not a cached global.\n\n5) Simplify backend WebSocket init to stop validating/sending agent info\n- File: backend/src/websockets/websocket-action.ts\n  - In the onInit handler only:\n    - Remove assembling local agent templates via assembleLocalAgentTemplates(fileContext) and any validation error formatting.\n    - Do not include message or agentNames in the init-response payload. Only send the combined usage response payload (type: 'init-response' plus usage fields).\n  - Do NOT change callMainPrompt or onPrompt; those can continue to assemble localAgentTemplates to serve prompt execution.\n\n6) Remove obsolete dynamic agent knowledge doc\n- File: backend/src/templates/dynamic-agents.knowledge.md\n  - Delete the content (or replace with a placeholder marker as in the diff) so it no longer exposes outdated implementation details.\n\nAcceptance criteria:\n- When an authenticated user runs the CLI, the CLI posts local agentConfigs to /api/agents/validate and prints any warnings/errors as described, without crashing.\n- The server init-response sent over WebSocket no longer contains agentNames or a validation error message; the CLI remains functional.\n- Project file context includes agentTemplates loaded via loadLocalAgents; agent template files are not mixed into knowledge files.\n- The new web route enforces authentication and responds with the specified schema.\n- No regressions in prompt handling (onPrompt still uses assembleLocalAgentTemplates during execution).\n",
      "prompt": "Move dynamic agent validation out of the WebSocket init path and into a dedicated authenticated web API, and have the CLI validate locally loaded agents through that API when a user is logged in. Introduce a small CLI utility to call the API and print any validation warnings. Update the project file context to load local agent configs directly at initialization and avoid mixing agent templates into knowledge files. Finally, simplify the server init response to just usage data so the CLI no longer expects WebSocket-delivered agent names or validation messages.",
      "supplementalFiles": [
        "common/src/templates/agent-validation.ts",
        "common/src/util/agent-template-validation.ts",
        "backend/src/templates/agent-registry.ts",
        "npm-app/src/agents/load-agents.ts",
        "npm-app/src/agents/agent-utils.ts",
        "npm-app/src/config.ts",
        "npm-app/src/credentials.ts",
        "common/src/util/credentials.ts",
        "web/src/app/api/auth/[...nextauth]/auth-options.ts"
      ],
      "fileDiffs": [
        {
          "path": "backend/src/templates/dynamic-agents.knowledge.md",
          "status": "deleted",
          "diff": "Index: backend/src/templates/dynamic-agents.knowledge.md\n===================================================================\n--- backend/src/templates/dynamic-agents.knowledge.md\t4852954 (parent)\n+++ backend/src/templates/dynamic-agents.knowledge.md\t2b5651f (commit)\n@@ -1,312 +1,1 @@\n-# Dynamic Agent System - Technical Documentation\n-\n-## Architecture Overview\n-\n-The dynamic agent system allows users to create custom AI agents by placing TypeScript or JSON configuration files in `.agents/templates/`. The system supports both prompt-based agents and programmatic agents with generator functions. The system consists of several key components:\n-\n-### Core Components\n-\n-1. **DynamicAgentService** (`dynamic-agent-service.ts`)\n-\n-   - Centralized loading and validation of dynamic agents\n-   - Schema conversion from JSON to Zod\n-   - Error handling and reporting\n-\n-2. **AgentRegistry** (`agent-registry.ts`)\n-\n-   - Combines static and dynamic agents\n-   - Provides unified lookup interface\n-   - Manages agent name mappings\n-\n-3. **Schema Validation** (`common/src/types/dynamic-agent-template.ts`)\n-   - Zod schema for validating agent templates\n-   - Type definitions for dynamic agents\n-   - Spawnable agent validation\n-\n-## Loading Process\n-\n-1. **Discovery**: Scan `.agents/templates/` for `*.ts`\n-2. **TypeScript Processing**: Import `.ts` files and extract default export, convert `handleSteps` functions to strings\n-3. **Filtering**: Skip files with `override: true` (those modify existing agents)\n-4. **Validation**: Parse and validate against `DynamicAgentTemplateSchema`\n-5. **Conversion**: Convert JSON schema to internal Zod format\n-6. **Integration**: Merge with static agents in registry\n-\n-## Schema Conversion\n-\n-Dynamic agents define their parameters using a simple JSON schema:\n-\n-```json\n-\"inputSchema\": {\n-  \"text\": { \"type\": \"string\", \"description\": \"Input text\" },\n-  \"count\": { \"type\": \"number\", \"description\": \"Number of items\" }\n-}\n-```\n-\n-This gets converted to Zod schemas during loading:\n-\n-```typescript\n-{\n-  text: z.string().describe(\"Input text\"),\n-  count: z.number().describe(\"Number of items\")\n-}\n-```\n-\n-## Path-Based Prompt Loading\n-\n-Prompt fields (systemPrompt, instructionsPrompt, etc.) can now reference external files:\n-\n-```json\n-{\n-  \"systemPrompt\": {\n-    \"path\": \".agents/templates/my-agent-system.md\"\n-  },\n-  \"instructionsPrompt\": \"Direct string content\"\n-}\n-```\n-\n-Paths are resolved relative to the project root. This enables:\n-\n-- Better organization of long prompts\n-- Easier editing with syntax highlighting\n-- Version control of prompt changes\n-- Reusable prompt components\n-\n-### File Content Resolution\n-\n-Dynamic agent path resolution is handled by utilities in `backend/src/util/file-resolver`:\n-\n-- `resolveFileContent()`: Core file reading with path resolution\n-- `resolvePromptField()`: For dynamic agent templates (string | {path})\n-\n-Agent overrides use their own resolution logic that works with the pre-populated `fileContext.agentTemplates` cache, ensuring compatibility with the existing override system architecture.\n-\n-## Error Handling\n-\n-The system provides detailed validation errors:\n-\n-- **File-level errors**: JSON parsing, missing required fields\n-- **Schema errors**: Invalid field types, malformed structure\n-- **Reference errors**: Invalid spawnable agents, unknown models\n-- **Runtime errors**: File system access, permission issues\n-\n-## Integration Points\n-\n-### Tool System (`tools.ts`)\n-\n-- `buildSpawnableAgentsDescription()` includes dynamic agents\n-- Schema display uses pre-converted Zod schemas\n-- Graceful fallback for unknown agents\n-\n-### Agent Spawning (`run-tool.ts`)\n-\n-- Uses `agentRegistry.getAgentName()` for unified lookups\n-- Supports both static and dynamic agents\n-- Proper error handling for missing agents\n-\n-### Prompt System (`strings.ts`)\n-\n-- Async initialization to load dynamic agents\n-- Agent name resolution includes dynamic agents\n-- Template processing supports custom schemas\n-\n-## Performance Considerations\n-\n-- **Lazy Loading**: Agents loaded only when registry is initialized\n-- **Caching**: Templates cached after first load\n-- **Schema Pre-conversion**: JSON→Zod conversion done once at load time\n-- **Error Tolerance**: Invalid agents don't break the entire system\n-\n-## Development Guidelines\n-\n-### Adding New Features\n-\n-1. **Schema Changes**: Update `DynamicAgentTemplateSchema` first\n-2. **Validation**: Add validation logic to `DynamicAgentService`\n-3. **Integration**: Update registry and tool system as needed\n-4. **Documentation**: Update user-facing docs and examples\n-\n-### Testing Dynamic Agents\n-\n-1. **Unit Tests**: Test individual components in isolation\n-2. **Integration Tests**: Test full loading and validation flow\n-3. **Error Cases**: Verify graceful handling of invalid templates\n-4. **Performance**: Ensure loading doesn't impact startup time\n-\n-### Debugging Issues\n-\n-1. **Check Logs**: Dynamic agent loading is extensively logged\n-2. **Validation Errors**: Review `getValidationErrors()` output\n-3. **Schema Issues**: Verify JSON structure matches expected format\n-4. **File System**: Ensure proper permissions and file locations\n-\n-## Security Considerations\n-\n-- **File Access**: Limited to `.agents/templates/` directory\n-- **Model Restrictions**: Only allowed model prefixes accepted\n-- **Tool Limitations**: Agents can only use predefined tools\n-- **Validation**: All input validated against strict schemas\n-\n-## Programmatic Agents with handleSteps\n-\n-### Overview\n-\n-Programmatic agents use generator functions to define custom execution logic instead of relying solely on LLM prompts. This enables:\n-\n-- **Complex orchestration**: Multi-step workflows with conditional logic\n-- **Tool coordination**: Precise control over tool execution order\n-- **State management**: Maintain state across multiple steps\n-- **Iterative refinement**: Loop until desired outcomes are achieved\n-\n-### Generator Function Structure\n-\n-```typescript\n-function* ({ agentState, prompt, params }) {\n-  // Yield tool calls to execute them\n-  const { toolResult } = yield {\n-    toolName: 'spawn_agents',\n-    args: { agents: [{ agent_type: 'file_picker', prompt }] }\n-  }\n-\n-  // Process results and yield more tools\n-  yield {\n-    toolName: 'set_output',\n-    args: { result: toolResult?.result }\n-  }\n-}\n-```\n-\n-### Execution Environment\n-\n-- **Local Development**: Functions execute natively in Node.js for TypeScript files\n-- **Production**: Functions converted to strings and executed in secure QuickJS sandbox\n-- **Security**: Sandboxed execution prevents access to file system, network, or other sensitive APIs\n-- **Memory Limits**: Configurable memory and stack size limits prevent resource exhaustion\n-\n-### Tool Integration\n-\n-Programmatic agents can yield any tool call that matches their `toolNames` configuration:\n-\n-```typescript\n-// Spawn other agents\n-yield { toolName: 'spawn_agents', args: { agents: [...] } }\n-\n-// Read/write files\n-yield { toolName: 'read_files', args: { paths: [...] } }\n-yield { toolName: 'write_file', args: { path: '...', content: '...' } }\n-\n-// Search code\n-yield { toolName: 'code_search', args: { pattern: '...' } }\n-\n-// Set final output (required for outputMode: 'structured_output')\n-yield { toolName: 'set_output', args: { result: {...} } }\n-```\n-\n-### State Management\n-\n-The generator receives updated `agentState` and `toolResult` on each iteration:\n-\n-```typescript\n-function* ({ agentState, prompt, params }) {\n-  let step = 1\n-\n-  while (step <= 3) {\n-    const { toolResult } = yield {\n-      toolName: 'code_search',\n-      args: { pattern: `step${step}` }\n-    }\n-\n-    if (toolResult?.result) {\n-      break // Found what we need\n-    }\n-\n-    step++\n-  }\n-}\n-```\n-\n-### Error Handling\n-\n-- **Syntax Errors**: Caught during loading and reported as validation errors\n-- **Runtime Errors**: Caught during execution, agent output includes error details\n-- **Timeout Protection**: QuickJS sandbox prevents infinite loops\n-- **Memory Protection**: Configurable limits prevent memory exhaustion\n-\n-## Future Enhancements\n-\n-- **Hot Reloading**: Detect file changes and reload agents\n-- **Agent Marketplace**: Share agents across projects\n-- **Advanced Schemas**: Support for complex parameter types\n-- **Visual Editor**: GUI for creating agent templates\n-- **Analytics**: Track agent usage and performance\n-- **Debugging Tools**: Step-through debugging for generator functions\n-- **Performance Monitoring**: Track execution time and resource usage\n-\n-## Troubleshooting\n-\n-### Common Issues\n-\n-1. **Agent Not Loading**\n-\n-   - Check `override: false` is set\n-   - Verify JSON syntax is valid\n-   - Review validation errors in logs\n-\n-2. **Schema Errors**\n-\n-   - Ensure all required fields are present\n-   - Check field types match expected values\n-   - Validate spawnable agents exist\n-\n-3. **Runtime Errors**\n-   - Verify file permissions\n-   - Check directory structure\n-   - Review system logs for details\n-\n-### Debug Commands\n-\n-```bash\n-# Check agent registry status\n-grep \"Agent registry initialized\" debug/backend.log\n-\n-# View validation errors\n-grep \"validation errors\" debug/backend.log\n-\n-# Monitor agent loading\n-tail -f debug/backend.log | grep \"dynamic agent\"\n-```\n-\n-## API Reference\n-\n-### DynamicAgentService\n-\n-```typescript\n-class DynamicAgentService {\n-  async loadAgents(\n-    fileContext: ProjectFileContext,\n-  ): Promise<DynamicAgentLoadResult>\n-  getTemplate(agentType: string): AgentTemplate | undefined\n-  getAllTemplates(): Record<string, AgentTemplate>\n-  getValidationErrors(): DynamicAgentValidationError[]\n-  hasAgent(agentType: string): boolean\n-  getAgentTypes(): string[]\n-  isServiceLoaded(): boolean\n-  reset(): void\n-}\n-```\n-\n-### AgentRegistry\n-\n-```typescript\n-class AgentRegistry {\n-  async initialize(fileContext: ProjectFileContext): Promise<void>\n-  getAgentName(agentType: string): string | undefined\n-  getAllAgentNames(): Record<string, string>\n-  getTemplate(agentType: string): AgentTemplate | undefined\n-  getAllTemplates(): Record<string, AgentTemplate>\n-  getValidationErrors(): Array<{ filePath: string; message: string }>\n-  hasAgent(agentType: string): boolean\n-  getAvailableTypes(): string[]\n-  reset(): void\n-}\n-```\n+[DELETED]\n\\ No newline at end of file\n"
        },
        {
          "path": "backend/src/websockets/websocket-action.ts",
          "status": "modified",
          "diff": "Index: backend/src/websockets/websocket-action.ts\n===================================================================\n--- backend/src/websockets/websocket-action.ts\t4852954 (parent)\n+++ backend/src/websockets/websocket-action.ts\t2b5651f (commit)\n@@ -6,9 +6,8 @@\n } from '@codebuff/common/old-constants'\n import { AnalyticsEvent } from '@codebuff/common/constants/analytics-events'\n import db from '@codebuff/common/db/index'\n import * as schema from '@codebuff/common/db/schema'\n-import { formatValidationErrorMessage } from '@codebuff/common/util/agent-template-validation'\n import { buildArray } from '@codebuff/common/util/array'\n import { ensureEndsWithNewline } from '@codebuff/common/util/file'\n import { generateCompactId } from '@codebuff/common/util/string'\n import { eq } from 'drizzle-orm'\n@@ -295,27 +294,8 @@\n       })\n       return\n     }\n \n-    // Assemble local agent templates from fileContext\n-    const { agentTemplates, validationErrors } =\n-      assembleLocalAgentTemplates(fileContext)\n-\n-    if (validationErrors.length > 0) {\n-      logger.warn(\n-        { errorCount: validationErrors.length },\n-        'Agent template validation errors found',\n-      )\n-    }\n-\n-    const errorMessage = formatValidationErrorMessage(validationErrors)\n-\n-    // Get all agent names for frontend\n-    const allAgentNames: Record<string, string> = {}\n-    for (const [id, template] of Object.entries(agentTemplates)) {\n-      allAgentNames[id] = template.displayName\n-    }\n-\n     // Send combined init and usage response\n     const usageResponse = await genUsageResponse(\n       fingerprintId,\n       userId,\n@@ -323,12 +303,8 @@\n     )\n     sendAction(ws, {\n       ...usageResponse,\n       type: 'init-response',\n-      message: errorMessage\n-        ? `**Agent Template Validation Errors:**\\n${errorMessage}`\n-        : undefined,\n-      agentNames: allAgentNames,\n     })\n   })\n }\n \n"
        },
        {
          "path": "npm-app/src/client.ts",
          "status": "modified",
          "diff": "Index: npm-app/src/client.ts\n===================================================================\n--- npm-app/src/client.ts\t4852954 (parent)\n+++ npm-app/src/client.ts\t2b5651f (commit)\n@@ -80,8 +80,9 @@\n   markSubagentInactive,\n   storeSubagentChunk,\n } from './subagent-storage'\n import { handleToolCall } from './tool-handlers'\n+import { validateAgentConfigsIfAuthenticated } from './utils/agent-validation'\n import { identifyUser, trackEvent } from './utils/analytics'\n import { getRepoMetrics, gitCommandIsAvailable } from './utils/git'\n import { logger, loggerContext } from './utils/logger'\n import { Spinner } from './utils/spinner'\n@@ -1545,8 +1546,13 @@\n     if (!fileContext) {\n       throw new Error('Failed to initialize project file context')\n     }\n \n+    await validateAgentConfigsIfAuthenticated(\n+      this.user,\n+      fileContext.agentTemplates,\n+    )\n+\n     this.webSocket.subscribe('init-response', (a) => {\n       const parsedAction = InitResponseSchema.safeParse(a)\n       if (!parsedAction.success) {\n         return\n"
        },
        {
          "path": "npm-app/src/project-files.ts",
          "status": "modified",
          "diff": "Index: npm-app/src/project-files.ts\n===================================================================\n--- npm-app/src/project-files.ts\t4852954 (parent)\n+++ npm-app/src/project-files.ts\t2b5651f (commit)\n@@ -24,9 +24,9 @@\n import { filterObject } from '@codebuff/common/util/object'\n import { createPatch } from 'diff'\n import { green } from 'picocolors'\n \n-import { loadedAgents, loadLocalAgents } from './agents/load-agents'\n+import { loadLocalAgents } from './agents/load-agents'\n import { checkpointManager } from './checkpoints/checkpoint-manager'\n import { CONFIG_DIR } from './credentials'\n import { loadCodebuffConfig } from './json-config/parser'\n import { findGitRoot, gitCommandIsAvailable } from './utils/git'\n@@ -276,18 +276,8 @@\n         lowercaseFilePath === codebuffConfigFileBackup.toLowerCase()\n       )\n     })\n \n-    // Separate agent template files from knowledge files\n-    const agentTemplatePaths = allFilePaths.filter((filePath) => {\n-      const lowercaseFilePath = filePath.toLowerCase()\n-      return (\n-        filePath.startsWith(AGENT_TEMPLATES_DIR) &&\n-        (lowercaseFilePath.endsWith('.json') ||\n-          lowercaseFilePath.endsWith('.md'))\n-      )\n-    })\n-\n     // Filter out agent template paths from knowledge files to avoid duplication\n     const filteredKnowledgeFilePaths = knowledgeFilePaths.filter(\n       (filePath) => !filePath.startsWith(AGENT_TEMPLATES_DIR),\n     )\n@@ -295,13 +285,8 @@\n     const knowledgeFiles = getExistingFiles(filteredKnowledgeFilePaths)\n     const knowledgeFilesWithScrapedContent =\n       await addScrapedContentToFiles(knowledgeFiles)\n \n-    // Load agent template files\n-    const agentTemplateFiles = getExistingFiles(agentTemplatePaths)\n-    const agentTemplateFilesWithScrapedContent =\n-      await addScrapedContentToFiles(agentTemplateFiles)\n-\n     // Get knowledge files from user's home directory\n     const homeDir = os.homedir()\n     const userKnowledgeFiles = findKnowledgeFilesInDir(homeDir)\n     const userKnowledgeFilesWithScrapedContent =\n@@ -323,9 +308,9 @@\n       fileTree,\n       fileTokenScores: tokenScores,\n       tokenCallers,\n       knowledgeFiles: knowledgeFilesWithScrapedContent,\n-      agentTemplates: loadedAgents,\n+      agentTemplates: await loadLocalAgents({ verbose: false }),\n       codebuffConfig,\n       shellConfigFiles,\n       systemInfo: getSystemInfo(),\n       userKnowledgeFiles: userKnowledgeFilesWithScrapedContent,\n"
        },
        {
          "path": "npm-app/src/utils/agent-validation.ts",
          "status": "added",
          "diff": "Index: npm-app/src/utils/agent-validation.ts\n===================================================================\n--- npm-app/src/utils/agent-validation.ts\t4852954 (parent)\n+++ npm-app/src/utils/agent-validation.ts\t2b5651f (commit)\n@@ -1,1 +1,62 @@\n-[NEW FILE]\n\\ No newline at end of file\n+import { red, yellow } from 'picocolors'\n+\n+import { websiteUrl } from '../config'\n+import { logger } from './logger'\n+\n+import type { User } from '@codebuff/common/util/credentials'\n+\n+/**\n+ * Validates agent configs using the REST API if user is authenticated\n+ * @param user The user object (null if not authenticated)\n+ * @param agentConfigs The agent configs to validate\n+ */\n+export async function validateAgentConfigsIfAuthenticated(\n+  user: User | undefined,\n+  agentConfigs: Record<string, any> | undefined,\n+): Promise<void> {\n+  // Only validate if user is authenticated and there are agent configs\n+  const agentConfigKeys = Object.keys(agentConfigs || {})\n+\n+  if (!user || !agentConfigs || agentConfigKeys.length === 0) {\n+    return\n+  }\n+\n+  try {\n+    const response = await fetch(`${websiteUrl}/api/agents/validate`, {\n+      method: 'POST',\n+      headers: {\n+        'Content-Type': 'application/json',\n+        Cookie: `next-auth.session-token=${user.authToken}`,\n+      },\n+      body: JSON.stringify({ agentConfigs }),\n+    })\n+\n+    if (!response.ok) {\n+      const errorData = await response.json().catch(() => ({}))\n+      const errorMessage =\n+        (errorData as any).error ||\n+        `HTTP ${response.status}: ${response.statusText}`\n+      console.log(`\\n${red('Agent Config Validation Error:')} ${errorMessage}`)\n+      return\n+    }\n+\n+    const data = await response.json()\n+\n+    if (data.validationErrors && data.validationErrors.length > 0) {\n+      const errorMessage = data.validationErrors\n+        .map((err: { filePath: string; message: string }) => err.message)\n+        .join('\\n')\n+      console.log(\n+        `\\n${yellow('Agent Config Validation Warnings:')}\\n${errorMessage}`,\n+      )\n+    }\n+  } catch (error) {\n+    logger.warn(\n+      {\n+        errorMessage: error instanceof Error ? error.message : String(error),\n+        errorStack: error instanceof Error ? error.stack : undefined,\n+      },\n+      'Failed to validate agent configs via REST API',\n+    )\n+  }\n+}\n"
        },
        {
          "path": "web/src/app/api/agents/validate/route.ts",
          "status": "added",
          "diff": "Index: web/src/app/api/agents/validate/route.ts\n===================================================================\n--- web/src/app/api/agents/validate/route.ts\t4852954 (parent)\n+++ web/src/app/api/agents/validate/route.ts\t2b5651f (commit)\n@@ -1,1 +1,59 @@\n-[NEW FILE]\n\\ No newline at end of file\n+import { validateAgents } from '@codebuff/common/templates/agent-validation'\n+import { NextResponse } from 'next/server'\n+import { getServerSession } from 'next-auth'\n+\n+import { authOptions } from '@/app/api/auth/[...nextauth]/auth-options'\n+import { logger } from '@/util/logger'\n+\n+import type { NextRequest } from 'next/server'\n+\n+interface ValidateAgentsRequest {\n+  agentConfigs: Record<string, any>\n+}\n+\n+export async function POST(request: NextRequest): Promise<NextResponse> {\n+  try {\n+    const session = await getServerSession(authOptions)\n+    if (!session?.user?.id) {\n+      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\n+    }\n+\n+    const body = (await request.json()) as ValidateAgentsRequest\n+    const { agentConfigs } = body\n+\n+    if (!agentConfigs || typeof agentConfigs !== 'object') {\n+      return NextResponse.json(\n+        {\n+          error:\n+            'Invalid request: agentConfigs must be an object, with keys being the agent IDs and values of type AgentConfig',\n+        },\n+        { status: 400 }\n+      )\n+    }\n+\n+    const { templates: configs, validationErrors } = validateAgents(agentConfigs)\n+\n+    if (validationErrors.length > 0) {\n+      logger.warn(\n+        { errorCount: validationErrors.length, userId: session.user.id },\n+        'Agent config validation errors found',\n+      )\n+    }\n+\n+    return NextResponse.json({\n+      success: true,\n+      configs: Object.keys(configs),\n+      validationErrors,\n+      errorCount: validationErrors.length,\n+    })\n+  } catch (error) {\n+    logger.error(\n+      { error: error instanceof Error ? error.message : String(error) },\n+      'Error validating agent configs',\n+    )\n+    return NextResponse.json(\n+      { error: 'Internal server error' },\n+      { status: 500 },\n+    )\n+  }\n+}\n"
        }
      ]
    },
    {
      "id": "unify-agent-builder",
      "sha": "48529542ec1e1c37e471882f54865e25ec41df7a",
      "parentSha": "8a4bb98f4842f6d0b9e013d0dab4e5cd5a41ad74",
      "spec": "Implement a single unified agent builder and align type/tooling and examples across the repo.\n\n1) Unify builder into backend/src/templates/agents/agent-builder.ts\n- Replace the existing builder with a combined implementation that:\n  - Creates .agents/types and .agents/examples directories at runtime (mkdir -p).\n  - Writes agent-config.d.ts and tools.d.ts into .agents/types by reading from common/src/util/types/ (AGENT_CONFIG_FILE and tools.d.ts under that directory).\n  - Reads example agent files from common/src/util/ and copies those whose names start with diff-reviewer to .agents/examples.\n  - Sets systemPrompt/instructionsPrompt to describe the prepared environment and provide full type definitions and best practices (do not include base-agent-builder as a separate entity).\n  - Keeps toolNames including: create_plan, run_terminal_command, set_output, str_replace, write_file, spawn_agents, add_subgoal, browser_logs, code_search, end_turn, read_files, think_deeply, update_subgoal, add_message.\n  - Allows subagents to be provided via the optional allAvailableAgents param; otherwise default to [file_picker, researcher, thinker, reviewer, agent_builder].\n\n2) Remove the separate base builder\n- Delete backend/src/templates/agents/base-agent-builder.ts and remove all references to baseAgentBuilder.\n\n3) Update agent registry\n- In backend/src/templates/agent-list.ts:\n  - Remove import and registry entry for baseAgentBuilder.\n  - Ensure agentBuilder is imported and used; keep AgentTemplateTypes.agent_builder mapped to the unified builder.\n\n4) Migrate type surface used by agents\n- .agents/types/agent-config.d.ts:\n  - Change outputMode union to: 'last_message' | 'all_messages' | 'structured_output'.\n  - Update the outputSchema comment to reference structured_output.\n  - Update the handleSteps Generator third generic type to string | undefined (toolResult’s type).\n- .agents/types/tools.d.ts:\n  - Reformat unions/keys without string literals and add doc comments as shown.\n  - Remove 'send_agent_message' from ToolName and ToolParamsMap.\n  - Add 'spawn_agent_inline' to ToolName and define SpawnAgentInlineParams.\n  - EndTurnParams and SetOutputParams should be empty interfaces (no required fields).\n  - Make optional fields explicit (e.g., RunTerminalCommandParams.process_type, cwd, timeout_seconds). Keep the rest of the shapes and comments aligned to the diff.\n\n5) Adjust built-in agents\n- .agents/file-explorer.ts: set outputMode to 'structured_output' instead of 'json'.\n- .agents/superagent.ts: remove 'send_agent_message' from toolNames.\n\n6) Examples: replace old examples with diff-reviewers\n- Remove common/src/util/example-1.ts, example-2.ts, example-3.ts.\n- Add three example configs under common/src/util/:\n  - diff-reviewer-1.ts: basic agent with model openai/gpt-5, tools ['read_files', 'run_terminal_command'], parentPrompt for reviewing git diffs, and a simple instructionsPrompt (steps to run git diff, read changed files, review changes).\n  - diff-reviewer-2.ts: intermediate agent with inputSchema.prompt, same base tools, systemPrompt explicitly expert reviewer, handleSteps first runs 'git diff' then yields STEP_ALL, and expanded review guidelines in instructionsPrompt.\n  - diff-reviewer-3.ts: advanced agent with outputMode 'last_message', tools ['read_files','run_terminal_command','spawn_agents'], subagents ['james/file-explorer@0.1.3'], handleSteps that: (a) runs 'git diff --name-only', (b) reads changed files if any, (c) runs 'git diff', (d) add assistant messages prompting to spawn explorer and then to write the final review, yielding STEP between messages.\n- Add corresponding copies under .agents/examples/ as diff-reviewer-1.ts, diff-reviewer-2.ts, diff-reviewer-3.ts. These example files should import AgentConfig from '@codebuff/common/util/types/agent-config.d'.\n\n7) CLI flows: switch to unified builder\n- npm-app/src/cli-handlers/agent-creation-chat.ts: change resetAgent calls to use AgentTemplateTypes.agent_builder (update comments to reference agent-builder, not base-agent-builder).\n- npm-app/src/cli-handlers/agents.ts: same change for the direct agent creation workflow (update resetAgent target and comments).\n\n8) Optional cleanup (if present)\n- If AgentTemplateTypes includes base_agent_builder in common/src/types/session-state.ts and personas reference it in common/src/constants/agents.ts, remove or migrate those references to agent_builder.\n- Ensure no toolNames arrays reference 'send_agent_message' anywhere else.\n\nBehavioral outcome:\n- Only one agent builder is available and is used by CLI flows and template registry.\n- Agents expecting structured outputs use 'structured_output' outputMode; examples and templates compile against the updated .agents/types/*.d.ts.\n- The deprecated tool 'send_agent_message' is no longer referenced; 'spawn_agent_inline' is available in types.\n- Three diff-reviewer example agents are available and are copied/scaffolded by the builder.",
      "prompt": "Unify the agent-builder system into a single builder, update agent type definitions to use structured output, and introduce three diff-reviewer example agents. Remove the deprecated messaging tool and update the agent registry and CLI flows to target the unified builder. Ensure the builder prepares local .agents/types and .agents/examples, copies the correct type definitions and example agents from common, and leaves agents and examples ready to compile and run.",
      "supplementalFiles": [
        "backend/src/templates/agent-registry.ts",
        "backend/src/templates/types.ts",
        "common/src/types/session-state.ts",
        "common/src/constants/agents.ts",
        "npm-app/src/cli.ts"
      ],
      "fileDiffs": [
        {
          "path": ".agents/agent-builder.ts",
          "status": "deleted",
          "diff": "Index: .agents/agent-builder.ts\n===================================================================\n--- .agents/agent-builder.ts\t8a4bb98 (parent)\n+++ .agents/agent-builder.ts\t4852954 (commit)\n@@ -1,215 +1,1 @@\n-import { publisher, version } from './constants'\n-\n-import type { AgentConfig } from './types/agent-config'\n-\n-const config: AgentConfig = {\n-  id: 'agent-builder',\n-  version,\n-  publisher,\n-  displayName: 'Bob the Agent Builder',\n-  model: 'anthropic/claude-4-sonnet-20250522',\n-\n-  toolNames: [\n-    'write_file',\n-    'str_replace',\n-    'run_terminal_command',\n-    'read_files',\n-    'code_search',\n-    'spawn_agents',\n-    'add_message',\n-    'end_turn',\n-  ],\n-  subagents: [`codebuff/file-picker@${version}`],\n-\n-  inputSchema: {\n-    prompt: {\n-      description: 'What agent type you would like to create or edit.',\n-      type: 'string',\n-    },\n-  },\n-  includeMessageHistory: false,\n-\n-  parentPrompt:\n-    'Creates new agent templates for the codebuff mult-agent system',\n-  systemPrompt: `# Agent Builder\n-\n-You are an expert agent builder specialized in creating new agent templates for the codebuff system. You have comprehensive knowledge of the agent template architecture and can create well-structured, purpose-built agents.\n-\n-## Agent Template Patterns\n-\n-1. **Base Agent Pattern**: Full-featured agents with comprehensive tool access\n-2. **Specialized Agent Pattern**: Focused agents with limited tool sets\n-3. **Thinking Agent Pattern**: Agents that spawn thinker sub-agents\n-4. **Research Agent Pattern**: Agents that start with web search\n-\n-## Best Practices\n-\n-1. **Use as few fields as possible**: Leave out fields that are not needed to reduce complexity\n-2. **Minimal Tools**: Only include tools the agent actually needs\n-3. **Clear and Concise Prompts**: Write clear, specific prompts that have no unnecessary words\n-4. **Consistent Naming**: Follow naming conventions (kebab-case for IDs)\n-5. **Appropriate Model**: Choose the right model for the task complexity\n-\n-## Your Task\n-\n-When asked to create an agent template, you should:\n-1. Understand the requested agent\\'s purpose and capabilities\n-2. Choose appropriate tools for the agent\\'s function\n-3. Write a comprehensive system prompt\n-4. Create the complete agent template file in .agents/\n-5. Ensure the template follows all conventions and best practices\n-6. Use the AgentConfig interface for the configuration\n-7. Start the file with: import type { AgentConfig } from \"./types/agent-config\"\n-\n-Create agent templates that are focused, efficient, and well-documented. Always import the AgentConfig type and export a default configuration object.`,\n-  instructionsPrompt: `You are helping to create or edit an agent template. The user will describe what kind of agent they want to create or how they want to modify an existing agent.\n-\n-## Example Agents for Reference\n-\n-You have access to three example agents in \\`.agents/examples/\\` that demonstrate different complexity levels:\n-\n-1. **Level 1 - Code Reviewer**: Simple agent with basic tools (read_files, write_file, end_turn)\n-2. **Level 2 - Test Generator**: Intermediate agent with subagents and handleSteps logic\n-3. **Level 3 - Documentation Writer**: Advanced agent with comprehensive tools, multiple subagents, and complex orchestration\n-\n-**IMPORTANT**: When creating new agents, first examine these examples to find connections and patterns that relate to the user's request. Look for:\n-- Similar tool combinations\n-- Comparable complexity levels\n-- Related functionality patterns\n-- Appropriate model choices\n-- Relevant prompt structures\n-\n-Use these examples as inspiration and starting points, adapting their patterns to fit the user's specific needs.\n-\n-For new agents, analyze their request and create a complete agent template that:\n-- Has a clear purpose and appropriate capabilities\n-- Leaves out fields that are not needed\n-- Uses only the tools it needs\n-- Follows naming conventions\n-- Is properly structured\n-- Draws inspiration from relevant example agents\n-\n-For editing existing agents:\n-- First read the existing agent file they want to edit using read_files\n-- Understand the current structure and functionality\n-- Make the requested changes while preserving what works\n-- Maintain best practices and ensure the agent still works effectively\n-- Use str_replace for targeted edits or write_file for major restructuring\n-\n-When editing, always start by reading the current agent file to understand its structure before making changes. Ask clarifying questions if needed, then create or update the template file in the appropriate location.\n-\n-IMPORTANT: Always end your response with the end_turn tool when you have completed the agent creation or editing task.`,\n-\n-  // Generator function that defines the agent's execution flow\n-  handleSteps: function* ({ agentState, prompt, params }) {\n-    const AGENT_TEMPLATES_DIR = '.agents'\n-    const TYPES_DIR = `${AGENT_TEMPLATES_DIR}/types`\n-    const TEMPLATE_TYPES_PATH = `${TYPES_DIR}/agent-config.d.ts`\n-    const TOOL_DEFINITIONS_PATH = `${TYPES_DIR}/tools.d.ts`\n-\n-    // Step 1: Create directory structure\n-    yield {\n-      toolName: 'run_terminal_command',\n-      args: {\n-        command: `mkdir -p ${TYPES_DIR}`,\n-        process_type: 'SYNC',\n-        timeout_seconds: 10,\n-      },\n-    }\n-\n-    // Step 2: Read and write the agent config template\n-    const { toolResult: configResult } = yield {\n-      toolName: 'read_files',\n-      args: {\n-        paths: ['common/src/util/types/agent-config.ts'],\n-      },\n-    }\n-\n-    if (configResult) {\n-      yield {\n-        toolName: 'write_file',\n-        args: {\n-          path: TEMPLATE_TYPES_PATH,\n-          instructions: 'Create agent template type definitions file',\n-          content: configResult,\n-        },\n-      }\n-    }\n-\n-    // Step 3: Read and write the tools definitions\n-    const { toolResult: toolsResult } = yield {\n-      toolName: 'read_files',\n-      args: {\n-        paths: ['common/src/util/types/tools.d.ts'],\n-      },\n-    }\n-\n-    if (toolsResult) {\n-      yield {\n-        toolName: 'write_file',\n-        args: {\n-          path: TOOL_DEFINITIONS_PATH,\n-          instructions: 'Create tools type file',\n-          content: toolsResult,\n-        },\n-      }\n-    }\n-\n-    // Step 4: Copy example agents for reference\n-    const { toolResult: exampleAgentsResult } = yield {\n-      toolName: 'read_files',\n-      args: {\n-        paths: [\n-          'common/src/util/example-1.ts',\n-          'common/src/util/example-2.ts',\n-          'common/src/util/example-3.ts',\n-        ],\n-      },\n-    }\n-\n-    if (exampleAgentsResult) {\n-      const exampleFiles = exampleAgentsResult.split('\\n\\n').filter(Boolean)\n-\n-      // Write example 1\n-      if (exampleFiles[0]) {\n-        yield {\n-          toolName: 'write_file',\n-          args: {\n-            path: `${AGENT_TEMPLATES_DIR}/example-1.ts`,\n-            instructions: 'Copy example 1 agent',\n-            content: exampleFiles[0],\n-          },\n-        }\n-      }\n-\n-      // Write example 2\n-      if (exampleFiles[1]) {\n-        yield {\n-          toolName: 'write_file',\n-          args: {\n-            path: `${AGENT_TEMPLATES_DIR}/example-2.ts`,\n-            instructions: 'Copy example 2 agent',\n-            content: exampleFiles[1],\n-          },\n-        }\n-      }\n-\n-      // Write example 3\n-      if (exampleFiles[2]) {\n-        yield {\n-          toolName: 'write_file',\n-          args: {\n-            path: `${AGENT_TEMPLATES_DIR}/example-3.ts`,\n-            instructions: 'Copy example 3 agent',\n-            content: exampleFiles[2],\n-          },\n-        }\n-      }\n-    }\n-\n-    // Step 5: Let the agent ask questions and understand what the user wants\n-    yield 'STEP_ALL'\n-  },\n-}\n-\n-export default config\n+[DELETED]\n\\ No newline at end of file\n"
        },
        {
          "path": ".agents/examples/diff-reviewer-1.ts",
          "status": "added",
          "diff": "Index: .agents/examples/diff-reviewer-1.ts\n===================================================================\n--- .agents/examples/diff-reviewer-1.ts\t8a4bb98 (parent)\n+++ .agents/examples/diff-reviewer-1.ts\t4852954 (commit)\n@@ -1,1 +1,18 @@\n-[NEW FILE]\n\\ No newline at end of file\n+import { AgentConfig } from '@codebuff/common/util/types/agent-config.d'\n+\n+const config: AgentConfig = {\n+  id: 'diff-reviewer-1',\n+\n+  displayName: 'Diff Reviewer (Level 1)',\n+  model: 'openai/gpt-5',\n+  toolNames: ['read_files', 'run_terminal_command'],\n+\n+  parentPrompt: 'Spawn when you need to review code changes in the git diff',\n+\n+  instructionsPrompt: `Execute the following steps:\n+1. Run git diff\n+2. Read the files that have changed\n+3. Review the changes and suggest improvements`,\n+}\n+\n+export default config\n"
        },
        {
          "path": ".agents/examples/diff-reviewer-2.ts",
          "status": "added",
          "diff": "Index: .agents/examples/diff-reviewer-2.ts\n===================================================================\n--- .agents/examples/diff-reviewer-2.ts\t8a4bb98 (parent)\n+++ .agents/examples/diff-reviewer-2.ts\t4852954 (commit)\n@@ -1,1 +1,54 @@\n-[NEW FILE]\n\\ No newline at end of file\n+import {\n+  AgentConfig,\n+  AgentStepContext,\n+} from '@codebuff/common/util/types/agent-config.d'\n+\n+const config: AgentConfig = {\n+  id: 'diff-reviewer-2',\n+  displayName: 'Diff Reviewer (Level 2)',\n+  model: 'openai/gpt-5',\n+\n+  inputSchema: {\n+    prompt: {\n+      type: 'string',\n+      description:\n+        'Please provide a short description of the changes you want to review',\n+    },\n+  },\n+  toolNames: ['read_files', 'run_terminal_command'],\n+\n+  parentPrompt: 'Spawn when you need to review code changes in the git diff',\n+\n+  systemPrompt:\n+    'You are an expert software developer. Your job is to review code changes and provide helpful feedback.',\n+\n+  instructionsPrompt: `Execute the following steps:\n+1. Run git diff\n+2. Read the files that have changed\n+3. Review the changes and suggest improvements\n+\n+Use the following guidelines while reviewing the changes:\n+- Find ways to simplify the code\n+- Reuse existing code as much as possible instead of writing new code\n+- Preserve as much behavior as possible in the existing code\n+- Prefer changing as few lines of code as possible\n+- Look for opportunities to improve the code's readability\n+- Look for logical errors in the code\n+- Look for missed cases in the code\n+- Look for any other bugs`,\n+\n+  handleSteps: function* ({ agentState, prompt, params }: AgentStepContext) {\n+    // Step 1: Run git diff immediately. Saves the agent a step, lowering cost and latency!\n+    yield {\n+      toolName: 'run_terminal_command',\n+      args: {\n+        command: 'git diff',\n+      },\n+    }\n+\n+    // Step 2: Let AI run the rest of the steps!\n+    yield 'STEP_ALL'\n+  },\n+}\n+\n+export default config\n"
        },
        {
          "path": ".agents/examples/diff-reviewer-3.ts",
          "status": "added",
          "diff": "Index: .agents/examples/diff-reviewer-3.ts\n===================================================================\n--- .agents/examples/diff-reviewer-3.ts\t8a4bb98 (parent)\n+++ .agents/examples/diff-reviewer-3.ts\t4852954 (commit)\n@@ -1,1 +1,99 @@\n-[NEW FILE]\n\\ No newline at end of file\n+import {\n+  AgentConfig,\n+  AgentStepContext,\n+} from '@codebuff/common/util/types/agent-config.d'\n+\n+const config: AgentConfig = {\n+  id: 'diff-reviewer-3',\n+\n+  displayName: 'Diff Reviewer (Level 3)',\n+  model: 'openai/gpt-5',\n+  inputSchema: {\n+    prompt: {\n+      type: 'string',\n+      description:\n+        'Please provide a short description of the changes you want to review',\n+    },\n+  },\n+  outputMode: 'last_message',\n+\n+  toolNames: ['read_files', 'run_terminal_command', 'spawn_agents'],\n+  subagents: ['james/file-explorer@0.1.3'],\n+\n+  parentPrompt: 'Spawn when you need to review code changes in the git diff',\n+\n+  systemPrompt:\n+    'You are an expert software developer. Your job is to review code changes and provide helpful feedback.',\n+\n+  instructionsPrompt: `Review the changes and suggest improvements.\n+\n+Use the following guidelines while reviewing the changes:\n+- Find ways to simplify the code\n+- Reuse existing code as much as possible instead of writing new code\n+- Preserve as much behavior as possible in the existing code\n+- Prefer changing as few lines of code as possible\n+- Look for opportunities to improve the code's readability\n+- Look for logical errors in the code\n+- Look for missed cases in the code\n+- Look for any other bugs`,\n+\n+  handleSteps: function* ({ agentState, prompt, params }: AgentStepContext) {\n+    // Step 1: Get list of changed files from git diff --name-only\n+    const { toolResult: gitDiffFilesResult } = yield {\n+      toolName: 'run_terminal_command',\n+      args: {\n+        command: 'git diff --name-only',\n+      },\n+    }\n+\n+    // Then, extract file paths from the result\n+    const changedFiles = (gitDiffFilesResult || '')\n+      .split('\\n')\n+      .map((line) => line.trim())\n+      .filter((line) => line && !line.startsWith('??') && !line.includes('OSC'))\n+\n+    // Step 2: Read the files\n+    if (changedFiles.length > 0) {\n+      yield {\n+        toolName: 'read_files',\n+        args: {\n+          paths: changedFiles,\n+        },\n+      }\n+    }\n+\n+    // Step 3: Run full git diff to see the actual changes\n+    yield {\n+      toolName: 'run_terminal_command',\n+      args: {\n+        command: 'git diff',\n+      },\n+    }\n+\n+    // Step 4: Put words in the AI's mouth to get it to spawn the file explorer.\n+    yield {\n+      toolName: 'add_message',\n+      args: {\n+        role: 'assistant',\n+        content:\n+          'Now I will spawn a file explorer to find any missing codebase context.',\n+      },\n+    }\n+\n+    yield 'STEP'\n+\n+    // Step 5: Put words in the AI's mouth to review the changes.\n+    yield {\n+      toolName: 'add_message',\n+      args: {\n+        role: 'assistant',\n+        content: 'Here is my comprehensive review of the changes.',\n+      },\n+    }\n+\n+    // Step 6: Let AI review the changes in a final step. (The last message is also the agent's output.)\n+    yield 'STEP'\n+  },\n+}\n+\n+export default config\n"
        },
        {
          "path": ".agents/file-explorer.ts",
          "status": "modified",
          "diff": "Index: .agents/file-explorer.ts\n===================================================================\n--- .agents/file-explorer.ts\t8a4bb98 (parent)\n+++ .agents/file-explorer.ts\t4852954 (commit)\n@@ -9,9 +9,9 @@\n   displayName: 'Dora the File Explorer',\n   parentPrompt:\n     'Spawns multiple file picker agents in parallel to comprehensively explore the codebase from different perspectives',\n   model: 'anthropic/claude-4-sonnet-20250522',\n-  outputMode: 'json',\n+  outputMode: 'structured_output',\n   includeMessageHistory: false,\n   toolNames: ['spawn_agents', 'set_output'],\n   subagents: [`file-picker`],\n   inputSchema: {\n"
        },
        {
          "path": ".agents/superagent.ts",
          "status": "modified",
          "diff": "Index: .agents/superagent.ts\n===================================================================\n--- .agents/superagent.ts\t8a4bb98 (parent)\n+++ .agents/superagent.ts\t4852954 (commit)\n@@ -11,9 +11,8 @@\n \n   toolNames: [\n     'spawn_agents',\n     'spawn_agents_async',\n-    'send_agent_message',\n     'end_turn',\n     'think_deeply',\n   ],\n   subagents: [\n"
        },
        {
          "path": ".agents/types/agent-config.d.ts",
          "status": "modified",
          "diff": "Index: .agents/types/agent-config.d.ts\n===================================================================\n--- .agents/types/agent-config.d.ts\t8a4bb98 (parent)\n+++ .agents/types/agent-config.d.ts\t4852954 (commit)\n@@ -73,11 +73,11 @@\n    * all_messages: All messages from the agent, including tool calls and results.\n    *\n    * json: Make the agent output a JSON object. Can be used with outputSchema or without if you want freeform json output.\n    */\n-  outputMode?: 'last_message' | 'all_messages' | 'json'\n+  outputMode?: 'last_message' | 'all_messages' | 'structured_output'\n \n-  /** JSON schema for structured output (when outputMode is 'json') */\n+  /** JSON schema for structured output (when outputMode is 'structured_output') */\n   outputSchema?: JsonSchema\n \n   // ============================================================================\n   // Prompts\n@@ -147,9 +147,9 @@\n     context: AgentStepContext,\n   ) => Generator<\n     ToolCall | 'STEP' | 'STEP_ALL',\n     void,\n-    { agentState: AgentState; toolResult: ToolResult | undefined }\n+    { agentState: AgentState; toolResult: string | undefined }\n   >\n }\n \n // ============================================================================\n"
        },
        {
          "path": ".agents/types/tools.d.ts",
          "status": "modified",
          "diff": "Index: .agents/types/tools.d.ts\n===================================================================\n--- .agents/types/tools.d.ts\t8a4bb98 (parent)\n+++ .agents/types/tools.d.ts\t4852954 (commit)\n@@ -1,265 +1,282 @@\n /**\n  * Union type of all available tool names\n  */\n-export type ToolName = 'add_message' | 'add_subgoal' | 'browser_logs' | 'code_search' | 'create_plan' | 'end_turn' | 'find_files' | 'read_docs' | 'read_files' | 'run_file_change_hooks' | 'run_terminal_command' | 'send_agent_message' | 'set_messages' | 'set_output' | 'spawn_agents' | 'spawn_agents_async' | 'str_replace' | 'think_deeply' | 'update_subgoal' | 'web_search' | 'write_file'\n+export type ToolName =\n+  | 'add_message'\n+  | 'add_subgoal'\n+  | 'browser_logs'\n+  | 'code_search'\n+  | 'create_plan'\n+  | 'end_turn'\n+  | 'find_files'\n+  | 'read_docs'\n+  | 'read_files'\n+  | 'run_file_change_hooks'\n+  | 'run_terminal_command'\n+  | 'set_messages'\n+  | 'set_output'\n+  | 'spawn_agents'\n+  | 'spawn_agents_async'\n+  | 'spawn_agent_inline'\n+  | 'str_replace'\n+  | 'think_deeply'\n+  | 'update_subgoal'\n+  | 'web_search'\n+  | 'write_file'\n \n /**\n  * Map of tool names to their parameter types\n  */\n export interface ToolParamsMap {\n-  'add_message': AddMessageParams\n-  'add_subgoal': AddSubgoalParams\n-  'browser_logs': BrowserLogsParams\n-  'code_search': CodeSearchParams\n-  'create_plan': CreatePlanParams\n-  'end_turn': EndTurnParams\n-  'find_files': FindFilesParams\n-  'read_docs': ReadDocsParams\n-  'read_files': ReadFilesParams\n-  'run_file_change_hooks': RunFileChangeHooksParams\n-  'run_terminal_command': RunTerminalCommandParams\n-  'send_agent_message': SendAgentMessageParams\n-  'set_messages': SetMessagesParams\n-  'set_output': SetOutputParams\n-  'spawn_agents': SpawnAgentsParams\n-  'spawn_agents_async': SpawnAgentsAsyncParams\n-  'str_replace': StrReplaceParams\n-  'think_deeply': ThinkDeeplyParams\n-  'update_subgoal': UpdateSubgoalParams\n-  'web_search': WebSearchParams\n-  'write_file': WriteFileParams\n+  add_message: AddMessageParams\n+  add_subgoal: AddSubgoalParams\n+  browser_logs: BrowserLogsParams\n+  code_search: CodeSearchParams\n+  create_plan: CreatePlanParams\n+  end_turn: EndTurnParams\n+  find_files: FindFilesParams\n+  read_docs: ReadDocsParams\n+  read_files: ReadFilesParams\n+  run_file_change_hooks: RunFileChangeHooksParams\n+  run_terminal_command: RunTerminalCommandParams\n+  set_messages: SetMessagesParams\n+  set_output: SetOutputParams\n+  spawn_agents: SpawnAgentsParams\n+  spawn_agents_async: SpawnAgentsAsyncParams\n+  spawn_agent_inline: SpawnAgentInlineParams\n+  str_replace: StrReplaceParams\n+  think_deeply: ThinkDeeplyParams\n+  update_subgoal: UpdateSubgoalParams\n+  web_search: WebSearchParams\n+  write_file: WriteFileParams\n }\n \n /**\n  * Add a new message to the conversation history. To be used for complex requests that can't be solved in a single step, as you may forget what happened!\n  */\n export interface AddMessageParams {\n-  \"role\": \"user\" | \"assistant\"\n-  \"content\": string\n+  role: 'user' | 'assistant'\n+  content: string\n }\n \n /**\n  * Add a new subgoal for tracking progress. To be used for complex requests that can't be solved in a single step, as you may forget what happened!\n  */\n export interface AddSubgoalParams {\n-  // A unique identifier for the subgoal. Try to choose the next sequential integer that is not already in use.\n-  \"id\": string\n-  // The objective of the subgoal, concisely and clearly stated.\n-  \"objective\": string\n-  // The status of the subgoal.\n-  \"status\": \"NOT_STARTED\" | \"IN_PROGRESS\" | \"COMPLETE\" | \"ABORTED\"\n-  // A plan for the subgoal.\n-  \"plan\"?: string\n-  // A log message for the subgoal progress.\n-  \"log\"?: string\n+  /** A unique identifier for the subgoal. Try to choose the next sequential integer that is not already in use. */\n+  id: string\n+  /** The objective of the subgoal, concisely and clearly stated. */\n+  objective: string\n+  /** The status of the subgoal. */\n+  status: 'NOT_STARTED' | 'IN_PROGRESS' | 'COMPLETE' | 'ABORTED'\n+  /** A plan for the subgoal. */\n+  plan?: string\n+  /** A log message for the subgoal progress. */\n+  log?: string\n }\n \n /**\n  * Parameters for browser_logs tool\n  */\n export interface BrowserLogsParams {\n-  // The type of browser action to perform (e.g., \"navigate\").\n-  \"type\": string\n-  // The URL to navigate to.\n-  \"url\": string\n-  // When to consider navigation successful. Defaults to 'load'.\n-  \"waitUntil\"?: \"load\" | \"domcontentloaded\" | \"networkidle0\"\n+  /** The type of browser action to perform (e.g., \"navigate\"). */\n+  type: string\n+  /** The URL to navigate to. */\n+  url: string\n+  /** When to consider navigation successful. Defaults to 'load'. */\n+  waitUntil?: 'load' | 'domcontentloaded' | 'networkidle0'\n }\n \n /**\n  * Search for string patterns in the project's files. This tool uses ripgrep (rg), a fast line-oriented search tool. Use this tool only when read_files is not sufficient to find the files you need.\n  */\n export interface CodeSearchParams {\n-  // The pattern to search for.\n-  \"pattern\": string\n-  // Optional ripgrep flags to customize the search (e.g., \"-i\" for case-insensitive, \"-t ts\" for TypeScript files only, \"-A 3\" for 3 lines after match, \"-B 2\" for 2 lines before match, \"--type-not test\" to exclude test files).\n-  \"flags\"?: string\n-  // Optional working directory to search within, relative to the project root. Defaults to searching the entire project.\n-  \"cwd\"?: string\n+  /** The pattern to search for. */\n+  pattern: string\n+  /** Optional ripgrep flags to customize the search (e.g., \"-i\" for case-insensitive, \"-t ts\" for TypeScript files only, \"-A 3\" for 3 lines after match, \"-B 2\" for 2 lines before match, \"--type-not test\" to exclude test files). */\n+  flags?: string\n+  /** Optional working directory to search within, relative to the project root. Defaults to searching the entire project. */\n+  cwd?: string\n }\n \n /**\n  * Generate a detailed markdown plan for complex tasks.\n  */\n export interface CreatePlanParams {\n-  // The path including the filename of a markdown file that will be overwritten with the plan.\n-  \"path\": string\n-  // A detailed plan to solve the user's request.\n-  \"plan\": string\n+  /** The path including the filename of a markdown file that will be overwritten with the plan. */\n+  path: string\n+  /** A detailed plan to solve the user's request. */\n+  plan: string\n }\n \n /**\n  * End your turn, regardless of any new tool results that might be coming. This will allow the user to type another prompt.\n  */\n-export interface EndTurnParams {\n+export interface EndTurnParams {}\n \n-}\n-\n /**\n  * Find several files related to a brief natural language description of the files or the name of a function or class you are looking for.\n  */\n export interface FindFilesParams {\n-  // A brief natural language description of the files or the name of a function or class you are looking for. It's also helpful to mention a directory or two to look within.\n-  \"prompt\": string\n+  /** A brief natural language description of the files or the name of a function or class you are looking for. It's also helpful to mention a directory or two to look within. */\n+  prompt: string\n }\n \n /**\n  * Fetch up-to-date documentation for libraries and frameworks using Context7 API.\n  */\n export interface ReadDocsParams {\n-  // The exact library or framework name (e.g., \"Next.js\", \"MongoDB\", \"React\"). Use the official name as it appears in documentation, not a search query.\n-  \"libraryTitle\": string\n-  // Optional specific topic to focus on (e.g., \"routing\", \"hooks\", \"authentication\")\n-  \"topic\"?: string\n-  // Optional maximum number of tokens to return. Defaults to 10000. Values less than 10000 are automatically increased to 10000.\n-  \"max_tokens\"?: number\n+  /** The exact library or framework name (e.g., \"Next.js\", \"MongoDB\", \"React\"). Use the official name as it appears in documentation, not a search query. */\n+  libraryTitle: string\n+  /** Optional specific topic to focus on (e.g., \"routing\", \"hooks\", \"authentication\") */\n+  topic?: string\n+  /** Optional maximum number of tokens to return. Defaults to 10000. Values less than 10000 are automatically increased to 10000. */\n+  max_tokens?: number\n }\n \n /**\n  * Read the multiple files from disk and return their contents. Use this tool to read as many files as would be helpful to answer the user's request.\n  */\n export interface ReadFilesParams {\n-  // List of file paths to read.\n-  \"paths\": string[]\n+  /** List of file paths to read. */\n+  paths: string[]\n }\n \n /**\n  * Parameters for run_file_change_hooks tool\n  */\n export interface RunFileChangeHooksParams {\n-  // List of file paths that were changed and should trigger file change hooks\n-  \"files\": string[]\n+  /** List of file paths that were changed and should trigger file change hooks */\n+  files: string[]\n }\n \n /**\n  * Execute a CLI command from the **project root** (different from the user's cwd).\n  */\n export interface RunTerminalCommandParams {\n-  // CLI command valid for user's OS.\n-  \"command\": string\n-  // Either SYNC (waits, returns output) or BACKGROUND (runs in background). Default SYNC\n-  \"process_type\": \"SYNC\" | \"BACKGROUND\"\n-  // The working directory to run the command in. Default is the project root.\n-  \"cwd\"?: string\n-  // Set to -1 for no timeout. Does not apply for BACKGROUND commands. Default 30\n-  \"timeout_seconds\": number\n+  /** CLI command valid for user's OS. */\n+  command: string\n+  /** Either SYNC (waits, returns output) or BACKGROUND (runs in background). Default SYNC */\n+  process_type?: 'SYNC' | 'BACKGROUND'\n+  /** The working directory to run the command in. Default is the project root. */\n+  cwd?: string\n+  /** Set to -1 for no timeout. Does not apply for BACKGROUND commands. Default 30 */\n+  timeout_seconds?: number\n }\n \n /**\n- * Send a message to another agent (parent or child) for communication and data exchange.\n- */\n-export interface SendAgentMessageParams {\n-  // ID of the target agent to send message to. Use \"PARENT_ID\" to send to parent agent.\n-  \"target_agent_id\": string\n-  // Message prompt to send to the target agent\n-  \"prompt\": string\n-  // Optional parameters object to send with the message\n-  \"params\"?: Record<string, any>\n-}\n-\n-/**\n  * Set the conversation history to the provided messages.\n  */\n export interface SetMessagesParams {\n-  \"messages\": {\n-  \"role\": \"user\" | \"assistant\"\n-  \"content\": string\n-}[]\n+  messages: {\n+    role: 'user' | 'assistant'\n+    content: string\n+  }[]\n }\n \n /**\n  * JSON object to set as the agent output. This completely replaces any previous output. If the agent was spawned, this value will be passed back to its parent. If the agent has an outputSchema defined, the output will be validated against it.\n  */\n-export interface SetOutputParams {\n+export interface SetOutputParams {}\n \n-}\n-\n /**\n  * Spawn multiple agents and send a prompt to each of them.\n  */\n export interface SpawnAgentsParams {\n-  \"agents\": {\n-  // Agent to spawn\n-  \"agent_type\": string\n-  // Prompt to send to the agent\n-  \"prompt\"?: string\n-  // Parameters object for the agent (if any)\n-  \"params\"?: Record<string, any>\n-}[]\n+  agents: {\n+    /** Agent to spawn */\n+    agent_type: string\n+    /** Prompt to send to the agent */\n+    prompt?: string\n+    /** Parameters object for the agent (if any) */\n+    params?: Record<string, any>\n+  }[]\n }\n \n /**\n  * Parameters for spawn_agents_async tool\n  */\n export interface SpawnAgentsAsyncParams {\n-  \"agents\": {\n-  // Agent to spawn\n-  \"agent_type\": string\n-  // Prompt to send to the agent\n-  \"prompt\"?: string\n-  // Parameters object for the agent (if any)\n-  \"params\"?: Record<string, any>\n-}[]\n+  agents: {\n+    /** Agent to spawn */\n+    agent_type: string\n+    /** Prompt to send to the agent */\n+    prompt?: string\n+    /** Parameters object for the agent (if any) */\n+    params?: Record<string, any>\n+  }[]\n }\n \n /**\n+ * Spawn a single agent that runs within the current message history.\n+ */\n+export interface SpawnAgentInlineParams {\n+  /** Agent to spawn */\n+  agent_type: string\n+  /** Prompt to send to the agent */\n+  prompt?: string\n+  /** Parameters object for the agent (if any) */\n+  params?: Record<string, any>\n+}\n+\n+/**\n  * Replace strings in a file with new strings.\n  */\n export interface StrReplaceParams {\n-  // The path to the file to edit.\n-  \"path\": string\n-  // Array of replacements to make.\n-  \"replacements\": {\n-  // The string to replace. This must be an *exact match* of the string you want to replace, including whitespace and punctuation.\n-  \"old\": string\n-  // The string to replace the corresponding old string with. Can be empty to delete.\n-  \"new\": string\n-}[]\n+  /** The path to the file to edit. */\n+  path: string\n+  /** Array of replacements to make. */\n+  replacements: {\n+    /** The string to replace. This must be an *exact match* of the string you want to replace, including whitespace and punctuation. */\n+    old: string\n+    /** The string to replace the corresponding old string with. Can be empty to delete. */\n+    new: string\n+  }[]\n }\n \n /**\n  * Deeply consider complex tasks by brainstorming approaches and tradeoffs step-by-step.\n  */\n export interface ThinkDeeplyParams {\n-  // Detailed step-by-step analysis. Initially keep each step concise (max ~5-7 words per step).\n-  \"thought\": string\n+  /** Detailed step-by-step analysis. Initially keep each step concise (max ~5-7 words per step). */\n+  thought: string\n }\n \n /**\n  * Update a subgoal in the context given the id, and optionally the status or plan, or a new log to append. Feel free to update any combination of the status, plan, or log in one invocation.\n  */\n export interface UpdateSubgoalParams {\n-  // The id of the subgoal to update.\n-  \"id\": string\n-  // Change the status of the subgoal.\n-  \"status\"?: \"NOT_STARTED\" | \"IN_PROGRESS\" | \"COMPLETE\" | \"ABORTED\"\n-  // Change the plan for the subgoal.\n-  \"plan\"?: string\n-  // Add a log message to the subgoal. This will create a new log entry and append it to the existing logs. Use this to record your progress and any new information you learned as you go.\n-  \"log\"?: string\n+  /** The id of the subgoal to update. */\n+  id: string\n+  /** Change the status of the subgoal. */\n+  status?: 'NOT_STARTED' | 'IN_PROGRESS' | 'COMPLETE' | 'ABORTED'\n+  /** Change the plan for the subgoal. */\n+  plan?: string\n+  /** Add a log message to the subgoal. This will create a new log entry and append it to the existing logs. Use this to record your progress and any new information you learned as you go. */\n+  log?: string\n }\n \n /**\n  * Search the web for current information using Linkup API.\n  */\n export interface WebSearchParams {\n-  // The search query to find relevant web content\n-  \"query\": string\n-  // Search depth - 'standard' for quick results, 'deep' for more comprehensive search. Default is 'standard'.\n-  \"depth\": \"standard\" | \"deep\"\n+  /** The search query to find relevant web content */\n+  query: string\n+  /** Search depth - 'standard' for quick results, 'deep' for more comprehensive search. Default is 'standard'. */\n+  depth: 'standard' | 'deep'\n }\n \n /**\n  * Create or edit a file with the given content.\n  */\n export interface WriteFileParams {\n-  // Path to the file relative to the **project root**\n-  \"path\": string\n-  // What the change is intended to do in only one sentence.\n-  \"instructions\": string\n-  // Edit snippet to apply to the file.\n-  \"content\": string\n+  /** Path to the file relative to the **project root** */\n+  path: string\n+  /** What the change is intended to do in only one sentence. */\n+  instructions: string\n+  /** Edit snippet to apply to the file. */\n+  content: string\n }\n \n /**\n  * Get parameters type for a specific tool\n"
        },
        {
          "path": "backend/src/templates/agent-list.ts",
          "status": "modified",
          "diff": "Index: backend/src/templates/agent-list.ts\n===================================================================\n--- backend/src/templates/agent-list.ts\t8a4bb98 (parent)\n+++ backend/src/templates/agent-list.ts\t4852954 (commit)\n@@ -1,12 +1,10 @@\n import { models } from '@codebuff/common/old-constants'\n import { AgentTemplateTypes } from '@codebuff/common/types/session-state'\n \n-import { agentBuilder } from './agents/agent-builder'\n import { dryRun } from './agents/archive/dry-run'\n import { ask } from './agents/ask'\n import { base } from './agents/base'\n-import { baseAgentBuilder } from './agents/base-agent-builder'\n import { fileExplorer } from './agents/file-explorer'\n import { filePicker } from './agents/file-picker'\n import { planner } from './agents/planner'\n import { researcher } from './agents/researcher'\n@@ -16,8 +14,9 @@\n import { thinkingBase } from './agents/thinking-base'\n \n import type { AgentTemplate } from './types'\n import type { AgentTemplateType } from '@codebuff/common/types/session-state'\n+import { agentBuilder } from './agents/agent-builder'\n \n export const agentTemplates: Record<AgentTemplateType | string, AgentTemplate> =\n   {\n     [AgentTemplateTypes.base]: {\n@@ -47,12 +46,8 @@\n     [AgentTemplateTypes.claude4_gemini_thinking]: {\n       id: AgentTemplateTypes.claude4_gemini_thinking,\n       ...thinkingBase(models.openrouter_claude_sonnet_4),\n     },\n-    [AgentTemplateTypes.base_agent_builder]: {\n-      id: AgentTemplateTypes.base_agent_builder,\n-      ...baseAgentBuilder(models.openrouter_claude_sonnet_4),\n-    },\n \n     [AgentTemplateTypes.thinker]: {\n       id: AgentTemplateTypes.thinker,\n       ...thinker(models.openrouter_grok_4),\n"
        },
        {
          "path": "backend/src/templates/agents/agent-builder.ts",
          "status": "modified",
          "diff": "Index: backend/src/templates/agents/agent-builder.ts\n===================================================================\n--- backend/src/templates/agents/agent-builder.ts\t8a4bb98 (parent)\n+++ backend/src/templates/agents/agent-builder.ts\t4852954 (commit)\n@@ -5,29 +5,33 @@\n   AGENT_TEMPLATES_DIR,\n   openrouterModels,\n   AGENT_CONFIG_FILE,\n } from '@codebuff/common/old-constants'\n-\n import { AgentTemplateTypes } from '@codebuff/common/types/session-state'\n import z from 'zod/v4'\n \n import type { AgentTemplate } from '../types'\n import type { Model } from '@codebuff/common/old-constants'\n import type { ToolName } from '@codebuff/common/tools/constants'\n \n+const COMMON_UTIL_PATH = '../../../../common/src/util'\n const TEMPLATE_RELATIVE_PATH =\n-  `../../../../common/src/util/types/${AGENT_CONFIG_FILE}` as const\n+  `${COMMON_UTIL_PATH}/types/${AGENT_CONFIG_FILE}` as const\n // Import to validate path exists at compile time\n import(TEMPLATE_RELATIVE_PATH)\n \n const TEMPLATE_PATH = path.join(__dirname, TEMPLATE_RELATIVE_PATH)\n const DEFAULT_MODEL = openrouterModels.openrouter_claude_sonnet_4\n const TYPES_DIR = path.join(AGENT_TEMPLATES_DIR, 'types')\n+const EXAMPLES_DIR = path.join(AGENT_TEMPLATES_DIR, 'examples')\n const TEMPLATE_TYPES_PATH = path.join(TYPES_DIR, AGENT_CONFIG_FILE)\n const TOOL_DEFINITIONS_FILE = 'tools.d.ts'\n const TOOL_DEFINITIONS_PATH = path.join(TYPES_DIR, TOOL_DEFINITIONS_FILE)\n \n-export const agentBuilder = (model: Model): Omit<AgentTemplate, 'id'> => {\n+export const agentBuilder = (\n+  model: Model,\n+  allAvailableAgents?: string[],\n+): Omit<AgentTemplate, 'id'> => {\n   // Read the AGENT_CONFIG_FILE content dynamically\n   // The import above ensures this path exists at compile time\n   let agentTemplateContent = ''\n   try {\n@@ -40,19 +44,52 @@\n   let toolDefinitionsContent = ''\n   try {\n     const toolsPath = path.join(\n       __dirname,\n-      '../../../../common/src/util/types/tools.d.ts',\n+      `${COMMON_UTIL_PATH}/types/tools.d.ts`,\n     )\n     toolDefinitionsContent = fs.readFileSync(toolsPath, 'utf8')\n   } catch (error) {\n     console.warn(`Could not read tools.d.ts from common:`, error)\n     toolDefinitionsContent = '// Tool definitions not available'\n   }\n \n+  // Read example agent files from common package\n+  const exampleAgentContents: Record<string, string> = {}\n+\n+  try {\n+    const exampleAgentsDir = path.join(__dirname, `${COMMON_UTIL_PATH}`)\n+    // Check if directory exists before trying to read it\n+    if (fs.existsSync(exampleAgentsDir)) {\n+      const files = fs.readdirSync(exampleAgentsDir)\n+\n+      files\n+        .filter(\n+          (file) => file.endsWith('.ts') && file.startsWith('diff-reviewer'),\n+        )\n+        .forEach((filename) => {\n+          try {\n+            const fullPath = path.join(exampleAgentsDir, filename)\n+            const content = fs.readFileSync(fullPath, 'utf8')\n+            exampleAgentContents[filename] = content\n+          } catch (error) {\n+            console.warn(`Could not read example agent ${filename}:`, error)\n+          }\n+        })\n+    } else {\n+      console.warn(\n+        `Example agents directory does not exist: ${exampleAgentsDir}`,\n+      )\n+    }\n+  } catch (error) {\n+    console.warn('Could not read example agents directory:', error)\n+  }\n+\n   return {\n-    displayName: 'Bob the Agent Builder',\n     model,\n+    displayName: 'Bob the Agent Builder',\n+    parentPrompt:\n+      'Enhanced base agent that can create custom agents and handle all coding tasks with deterministic agent creation behavior',\n     inputSchema: {\n       prompt: z\n         .string()\n         .optional()\n@@ -60,25 +97,8 @@\n           'What agent type you would like to create or edit. Include as many details as possible.',\n         ),\n       params: z\n         .object({\n-          editMode: z\n-            .boolean()\n-            .optional()\n-            .describe('Whether this is editing an existing agent'),\n-          agentId: z\n-            .string()\n-            .optional()\n-            .describe('ID of the agent being edited'),\n-          filePath: z\n-            .string()\n-            .optional()\n-            .describe('File path of the agent being edited'),\n-          originalContent: z\n-            .string()\n-            .optional()\n-            .describe('Original content of the agent file'),\n-          // Keep existing params as well\n           name: z.string().optional(),\n           purpose: z.string().optional(),\n           specialty: z.string().optional(),\n           model: z.string().optional(),\n@@ -98,16 +118,32 @@\n       'add_message',\n       'set_output',\n       'end_turn',\n     ] satisfies ToolName[],\n-    subagents: [AgentTemplateTypes.file_picker],\n-    parentPrompt:\n-      'Creates new agent templates for the codebuff mult-agent system',\n+    subagents: allAvailableAgents\n+      ? (allAvailableAgents as any[])\n+      : [\n+          AgentTemplateTypes.file_picker,\n+          AgentTemplateTypes.researcher,\n+          AgentTemplateTypes.thinker,\n+          AgentTemplateTypes.reviewer,\n+          AgentTemplateTypes.agent_builder,\n+        ],\n+\n     systemPrompt: [\n-      '# Agent Builder',\n+      '# Bob the Agent Builder',\n       '',\n       'You are an expert agent builder specialized in creating new agent templates for the codebuff system. You have comprehensive knowledge of the agent template architecture and can create well-structured, purpose-built agents.',\n       '',\n+      '## Environment Setup Complete',\n+      '',\n+      'Your environment has been automatically prepared with:',\n+      '- Agent template type definitions in `.agents/types/agent-config.d.ts`',\n+      '- Tool type definitions in `.agents/types/tools.d.ts`',\n+      '- Example agent files copied to `.agents/` directory for reference',\n+      '',\n+      'All necessary files are now available in your working directory.',\n+      '',\n       '## Complete Agent Template Type Definitions',\n       '',\n       'Here are the complete TypeScript type definitions for creating custom Codebuff agents:',\n       '```typescript',\n@@ -130,13 +166,13 @@\n       '4. **Research Agent Pattern**: Agents that start with web search',\n       '',\n       '## Best Practices:',\n       '',\n-      '1. **Use as few fields as possible**: Leave out fields that are not needed to reduce complexity. Use as few fields as possible to accomplish the task.',\n+      '1. **Use as few fields as possible**: Leave out fields that are not needed to reduce complexity',\n       '2. **Minimal Tools**: Only include tools the agent actually needs',\n       '3. **Clear and Concise Prompts**: Write clear, specific prompts that have no unnecessary words',\n       '4. **Consistent Naming**: Follow naming conventions (kebab-case for IDs)',\n-      '5. **Appropriate Model**: Choose the right model for the task complexity',\n+      '5. **Appropriate Model**: Choose the right model for the task complexity. Default is claude-4-sonnet-20250522 for medium-high complexity tasks, and openai/gpt-5 for all other tasks.',\n       '',\n       '## Your Task:',\n       'When asked to create an agent template, you should:',\n       \"1. Understand the requested agent's purpose and capabilities\",\n@@ -150,34 +186,53 @@\n       'Create agent templates that are focused, efficient, and well-documented. Always import the AgentConfig type and export a default configuration object.',\n     ].join('\\n'),\n     instructionsPrompt: `You are helping to create or edit an agent template. The user will describe what kind of agent they want to create or how they want to modify an existing agent.\n \n-For new agents, analyze their request and create a complete agent template that:\n+## Environment Ready\n+\n+Your environment has been automatically set up with:\n+- Type definitions in \\`.agents/types/\\`\n+- Example agent files in \\`.agents/\\` directory\n+- All necessary scaffolding complete\n+\n+You can now proceed directly to agent creation or editing.\n+\n+## Example Agents Available\n+\n+Three example agents are now available in your \\`.agents/\\` directory which are all diff reviewers of increasing complexity. These can serve as examples of well-made agents at different stages of complexity.\n+\n+**IMPORTANT**: Examine these examples to find connections and patterns that relate to the user's request. Look for:\n+- Similar tool combinations\n+- Comparable complexity levels\n+- Related functionality patterns\n+- Appropriate model choices\n+- Relevant prompt structures\n+\n+Use these examples as inspiration and starting points, adapting their patterns to fit the user's specific needs.\n+\n+## For New Agents\n+\n+Analyze their request and create a complete agent template that:\n - Has a clear purpose and appropriate capabilities\n-- Leaves out fields that are not needed.\n+- Leaves out fields that are not needed\n - Uses only the tools it needs\n - Follows naming conventions\n - Is properly structured\n+- Draws inspiration from relevant example agents\n \n-For editing existing agents:\n-- First read the existing agent file they want to edit using read_files\n-- Understand the current structure and functionality\n-- Make the requested changes while preserving what works\n-- Maintain best practices and ensure the agent still works effectively\n-- Use str_replace for targeted edits or write_file for major restructuring\n+## For Creating New Agents\n \n-When editing, always start by reading the current agent file to understand its structure before making changes. Ask clarifying questions if needed, then create or update the template file in the appropriate location.\n+The agent builder is focused on creating new agent templates based on user specifications.\n \n IMPORTANT: Always end your response with the end_turn tool when you have completed the agent creation or editing task.`,\n     stepPrompt: '',\n \n-    // Generator function that defines the agent's execution flow\n     handleSteps: function* ({ agentState, prompt, params }) {\n       // Step 1: Create directory structure\n       yield {\n         toolName: 'run_terminal_command',\n         args: {\n-          command: `mkdir -p ${TYPES_DIR}`,\n+          command: `mkdir -p ${TYPES_DIR} && mkdir -p ${EXAMPLES_DIR}`,\n           process_type: 'SYNC',\n           timeout_seconds: 10,\n         },\n       }\n@@ -201,55 +256,33 @@\n           content: toolDefinitionsContent,\n         },\n       }\n \n-      // Step 4: Add user message with requirements for agent creation or editing\n-      const isEditMode = params?.editMode === true\n+      // Step 4: Add message about reading example files and then read them\n+      yield {\n+        toolName: 'add_message',\n+        args: {\n+          role: 'assistant',\n+          content:\n+            \"I'll read the example agent files to understand the patterns and then help you create your agent.\",\n+        },\n+      }\n \n-      if (isEditMode) {\n-        // Edit mode - the prompt should already contain the edit request\n-        // No need to add additional message, the user prompt contains everything\n-      } else {\n-        // Creation mode - add structured requirements\n-        const requirements = {\n-          name: params?.name || 'Custom Agent',\n-          purpose:\n-            params?.purpose ||\n-            'A custom agent that helps with development tasks',\n-          specialty: params?.specialty || 'general development',\n-          model: params?.model || DEFAULT_MODEL,\n+      // Step 5: Copy example agent files to .agents/ directory\n+      for (const [filename, content] of Object.entries(exampleAgentContents)) {\n+        if (content) {\n+          yield {\n+            toolName: 'write_file',\n+            args: {\n+              path: `${EXAMPLES_DIR}/${filename}`,\n+              instructions: `Copy example agent file ${filename}`,\n+              content: content,\n+            },\n+          }\n         }\n-        yield {\n-          toolName: 'add_message',\n-          args: {\n-            role: 'user',\n-            content: `Create a new agent template with the following specifications:\n-\n-**Agent Details:**\n-- Name: ${requirements.name}\n-- Purpose: ${requirements.purpose}\n-- Specialty: ${requirements.specialty}\n-- Model: ${requirements.model}\n-- Agent ID: ${requirements.name\n-              .toLowerCase()\n-              .replace(/[^a-z0-9]+/g, '-')\n-              .replace(/^-+|-+$/g, '')}\n-\n-**Requirements:**\n-- Create the agent template file in ${AGENT_TEMPLATES_DIR}\n-- Always start the file with: import type { AgentConfig } from './types/agent-config'\n-- Use the AgentConfig interface\n-- Include appropriate tools based on the specialty\n-- Write a comprehensive system prompt\n-- Follow naming conventions and best practices\n-- Export a default configuration object\n-\n-Please create the complete agent template now.`,\n-          },\n-        }\n       }\n \n-      // Step 5: Complete agent creation process\n+      // Step 6: Complete agent creation process\n       yield 'STEP_ALL'\n     },\n   }\n }\n"
        },
        {
          "path": "backend/src/templates/agents/base-agent-builder.ts",
          "status": "deleted",
          "diff": "Index: backend/src/templates/agents/base-agent-builder.ts\n===================================================================\n--- backend/src/templates/agents/base-agent-builder.ts\t8a4bb98 (parent)\n+++ backend/src/templates/agents/base-agent-builder.ts\t4852954 (commit)\n@@ -1,317 +1,1 @@\n-import * as fs from 'fs'\n-import * as path from 'path'\n-\n-import {\n-  AGENT_TEMPLATES_DIR,\n-  openrouterModels,\n-  AGENT_CONFIG_FILE,\n-} from '@codebuff/common/old-constants'\n-import { AgentTemplateTypes } from '@codebuff/common/types/session-state'\n-import z from 'zod/v4'\n-\n-import type { AgentTemplate } from '../types'\n-import type { Model } from '@codebuff/common/old-constants'\n-import type { ToolName } from '@codebuff/common/tools/constants'\n-\n-const COMMON_UTIL_PATH = '../../../../common/src/util'\n-const TEMPLATE_RELATIVE_PATH =\n-  `${COMMON_UTIL_PATH}/types/${AGENT_CONFIG_FILE}` as const\n-// Import to validate path exists at compile time\n-import(TEMPLATE_RELATIVE_PATH)\n-\n-const TEMPLATE_PATH = path.join(__dirname, TEMPLATE_RELATIVE_PATH)\n-const DEFAULT_MODEL = openrouterModels.openrouter_claude_sonnet_4\n-const TYPES_DIR = path.join(AGENT_TEMPLATES_DIR, 'types')\n-const TEMPLATE_TYPES_PATH = path.join(TYPES_DIR, AGENT_CONFIG_FILE)\n-const TOOL_DEFINITIONS_FILE = 'tools.d.ts'\n-const TOOL_DEFINITIONS_PATH = path.join(TYPES_DIR, TOOL_DEFINITIONS_FILE)\n-\n-export const baseAgentBuilder = (\n-  model: Model,\n-  allAvailableAgents?: string[],\n-): Omit<AgentTemplate, 'id'> => {\n-  // Read the AGENT_CONFIG_FILE content dynamically\n-  // The import above ensures this path exists at compile time\n-  let agentTemplateContent = ''\n-  try {\n-    agentTemplateContent = fs.readFileSync(TEMPLATE_PATH, 'utf8')\n-  } catch (error) {\n-    console.warn(`Could not read ${AGENT_CONFIG_FILE}:`, error)\n-    agentTemplateContent = '// Agent template types not available'\n-  }\n-  // Read the tools.d.ts content from common package\n-  let toolDefinitionsContent = ''\n-  try {\n-    const toolsPath = path.join(\n-      __dirname,\n-      `${COMMON_UTIL_PATH}/types/tools.d.ts`,\n-    )\n-    toolDefinitionsContent = fs.readFileSync(toolsPath, 'utf8')\n-  } catch (error) {\n-    console.warn(`Could not read tools.d.ts from common:`, error)\n-    toolDefinitionsContent = '// Tool definitions not available'\n-  }\n-\n-  // Read example agent files from common package\n-  const exampleAgentContents: Record<string, string> = {}\n-\n-  try {\n-    const exampleAgentsDir = path.join(__dirname, `${COMMON_UTIL_PATH}`)\n-    // Check if directory exists before trying to read it\n-    if (fs.existsSync(exampleAgentsDir)) {\n-      const files = fs.readdirSync(exampleAgentsDir)\n-\n-      files\n-        .filter((file) => file.endsWith('.ts') && file.startsWith('example-'))\n-        .forEach((filename) => {\n-          try {\n-            const fullPath = path.join(exampleAgentsDir, filename)\n-            const content = fs.readFileSync(fullPath, 'utf8')\n-            exampleAgentContents[filename] = content\n-          } catch (error) {\n-            console.warn(`Could not read example agent ${filename}:`, error)\n-          }\n-        })\n-    } else {\n-      console.warn(\n-        `Example agents directory does not exist: ${exampleAgentsDir}`,\n-      )\n-    }\n-  } catch (error) {\n-    console.warn('Could not read example agents directory:', error)\n-  }\n-\n-  return {\n-    model,\n-    displayName: 'Buffy the Enthusiastic Agent Builder',\n-    parentPrompt:\n-      'Enhanced base agent that can create custom agents and handle all coding tasks with deterministic agent creation behavior',\n-    inputSchema: {\n-      prompt: z\n-        .string()\n-        .optional()\n-        .describe(\n-          'What agent type you would like to create or edit. Include as many details as possible.',\n-        ),\n-      params: z\n-        .object({\n-          editMode: z\n-            .boolean()\n-            .optional()\n-            .describe('Whether this is editing an existing agent'),\n-          agentId: z\n-            .string()\n-            .optional()\n-            .describe('ID of the agent being edited'),\n-          filePath: z\n-            .string()\n-            .optional()\n-            .describe('File path of the agent being edited'),\n-          originalContent: z\n-            .string()\n-            .optional()\n-            .describe('Original content of the agent file'),\n-          // Keep existing params as well\n-          name: z.string().optional(),\n-          purpose: z.string().optional(),\n-          specialty: z.string().optional(),\n-          model: z.string().optional(),\n-        })\n-        .passthrough()\n-        .optional(),\n-    },\n-    outputMode: 'structured_output',\n-    includeMessageHistory: false,\n-    toolNames: [\n-      'create_plan',\n-      'run_terminal_command',\n-      'set_output',\n-      'str_replace',\n-      'write_file',\n-      'spawn_agents',\n-      'add_subgoal',\n-      'browser_logs',\n-      'code_search',\n-      'end_turn',\n-      'read_files',\n-      'think_deeply',\n-      'update_subgoal',\n-      'add_message',\n-    ] satisfies ToolName[],\n-    subagents: allAvailableAgents\n-      ? (allAvailableAgents as any[])\n-      : [\n-          AgentTemplateTypes.file_picker,\n-          AgentTemplateTypes.researcher,\n-          AgentTemplateTypes.thinker,\n-          AgentTemplateTypes.reviewer,\n-          AgentTemplateTypes.agent_builder,\n-        ],\n-\n-    systemPrompt: [\n-      '# Buffy the Enthusiastic Agent Builder',\n-      '',\n-      'You are an expert agent builder specialized in creating new agent templates for the codebuff system. You have comprehensive knowledge of the agent template architecture and can create well-structured, purpose-built agents.',\n-      '',\n-      '## Environment Setup Complete',\n-      '',\n-      'Your environment has been automatically prepared with:',\n-      '- Agent template type definitions in `.agents/types/agent-config.d.ts`',\n-      '- Tool type definitions in `.agents/types/tools.d.ts`',\n-      '- Example agent files copied to `.agents/` directory for reference',\n-      '',\n-      'All necessary files are now available in your working directory.',\n-      '',\n-      '## Complete Agent Template Type Definitions',\n-      '',\n-      'Here are the complete TypeScript type definitions for creating custom Codebuff agents:',\n-      '```typescript',\n-      agentTemplateContent,\n-      '```',\n-      '',\n-      '## Available Tools Type Definitions',\n-      '',\n-      'Here are the complete TypeScript type definitions for all available tools:',\n-      '',\n-      '```typescript',\n-      toolDefinitionsContent,\n-      '```',\n-      '',\n-      '## Agent Template Patterns:',\n-      '',\n-      '1. **Base Agent Pattern**: Full-featured agents with comprehensive tool access',\n-      '2. **Specialized Agent Pattern**: Focused agents with limited tool sets',\n-      '3. **Thinking Agent Pattern**: Agents that spawn thinker sub-agents',\n-      '4. **Research Agent Pattern**: Agents that start with web search',\n-      '',\n-      '## Best Practices:',\n-      '',\n-      '1. **Use as few fields as possible**: Leave out fields that are not needed to reduce complexity',\n-      '2. **Minimal Tools**: Only include tools the agent actually needs',\n-      '3. **Clear and Concise Prompts**: Write clear, specific prompts that have no unnecessary words',\n-      '4. **Consistent Naming**: Follow naming conventions (kebab-case for IDs)',\n-      '5. **Appropriate Model**: Choose the right model for the task complexity',\n-      '',\n-      '## Your Task:',\n-      'When asked to create an agent template, you should:',\n-      \"1. Understand the requested agent's purpose and capabilities\",\n-      \"2. Choose appropriate tools for the agent's function\",\n-      '3. Write a comprehensive system prompt',\n-      `4. Create the complete agent template file in ${AGENT_TEMPLATES_DIR}`,\n-      '5. Ensure the template follows all conventions and best practices',\n-      '6. Use the AgentConfig interface for the configuration',\n-      '7. Start the file with: import type { AgentConfig } from \"./types/agent-config\"',\n-      '',\n-      'Create agent templates that are focused, efficient, and well-documented. Always import the AgentConfig type and export a default configuration object.',\n-    ].join('\\n'),\n-    instructionsPrompt: `You are helping to create or edit an agent template. The user will describe what kind of agent they want to create or how they want to modify an existing agent.\n-\n-## Environment Ready\n-\n-Your environment has been automatically set up with:\n-- Type definitions in \\`.agents/types/\\`\n-- Example agent files in \\`.agents/\\` directory\n-- All necessary scaffolding complete\n-\n-You can now proceed directly to agent creation or editing.\n-\n-## Example Agents Available\n-\n-Three example agents are now available in your \\`.agents/\\` directory:\n-\n-1. **example-1.ts**: Simple agent with basic tools (read_files, write_file, set_output, end_turn)\n-2. **example-2.ts**: Intermediate agent with subagents and handleSteps logic\n-3. **example-3.ts**: Advanced agent with comprehensive tools, multiple subagents, and complex orchestration\n-\n-**IMPORTANT**: Examine these examples to find connections and patterns that relate to the user's request. Look for:\n-- Similar tool combinations\n-- Comparable complexity levels\n-- Related functionality patterns\n-- Appropriate model choices\n-- Relevant prompt structures\n-\n-Use these examples as inspiration and starting points, adapting their patterns to fit the user's specific needs.\n-\n-## For New Agents\n-\n-Analyze their request and create a complete agent template that:\n-- Has a clear purpose and appropriate capabilities\n-- Leaves out fields that are not needed\n-- Uses only the tools it needs\n-- Follows naming conventions\n-- Is properly structured\n-- Draws inspiration from relevant example agents\n-\n-## For Editing Existing Agents\n-\n-- First read the existing agent file they want to edit using read_files\n-- Understand the current structure and functionality\n-- Make the requested changes while preserving what works\n-- Maintain best practices and ensure the agent still works effectively\n-- Use str_replace for targeted edits or write_file for major restructuring\n-\n-When editing, always start by reading the current agent file to understand its structure before making changes. Ask clarifying questions if needed, then create or update the template file in the appropriate location.\n-\n-IMPORTANT: Always end your response with the end_turn tool when you have completed the agent creation or editing task.`,\n-    stepPrompt: '',\n-\n-    handleSteps: function* ({ agentState, prompt, params }) {\n-      // Step 1: Create directory structure\n-      yield {\n-        toolName: 'run_terminal_command',\n-        args: {\n-          command: `mkdir -p ${TYPES_DIR}`,\n-          process_type: 'SYNC',\n-          timeout_seconds: 10,\n-        },\n-      }\n-\n-      // Step 2: Write the AGENT_CONFIG_FILE with the template content\n-      yield {\n-        toolName: 'write_file',\n-        args: {\n-          path: TEMPLATE_TYPES_PATH,\n-          instructions: 'Create agent template type definitions file',\n-          content: agentTemplateContent,\n-        },\n-      }\n-\n-      // Step 3: Write the tool definitions file (copy from existing tools.d.ts)\n-      yield {\n-        toolName: 'write_file',\n-        args: {\n-          path: TOOL_DEFINITIONS_PATH,\n-          instructions: 'Create tools type file',\n-          content: toolDefinitionsContent,\n-        },\n-      }\n-\n-      // Step 4: Add message about reading example files and then read them\n-      yield {\n-        toolName: 'add_message',\n-        args: {\n-          role: 'assistant',\n-          content:\n-            \"I'll read the example agent files to understand the patterns and then help you create your agent.\",\n-        },\n-      }\n-\n-      // Step 5: Copy example agent files to .agents/ directory\n-      for (const [filename, content] of Object.entries(exampleAgentContents)) {\n-        if (content) {\n-          yield {\n-            toolName: 'write_file',\n-            args: {\n-              path: `${AGENT_TEMPLATES_DIR}${filename}`,\n-              instructions: `Copy example agent file ${filename}`,\n-              content: content,\n-            },\n-          }\n-        }\n-      }\n-\n-      // Step 6: Complete agent creation process\n-      yield 'STEP_ALL'\n-    },\n-  }\n-}\n+[DELETED]\n\\ No newline at end of file\n"
        },
        {
          "path": "common/src/util/diff-reviewer-1.ts",
          "status": "added",
          "diff": "Index: common/src/util/diff-reviewer-1.ts\n===================================================================\n--- common/src/util/diff-reviewer-1.ts\t8a4bb98 (parent)\n+++ common/src/util/diff-reviewer-1.ts\t4852954 (commit)\n@@ -1,1 +1,18 @@\n-[NEW FILE]\n\\ No newline at end of file\n+import { AgentConfig } from '@codebuff/common/util/types/agent-config.d'\n+\n+const config: AgentConfig = {\n+  id: 'diff-reviewer-1',\n+\n+  displayName: 'Diff Reviewer (Level 1)',\n+  model: 'openai/gpt-5',\n+  toolNames: ['read_files', 'run_terminal_command'],\n+\n+  parentPrompt: 'Spawn when you need to review code changes in the git diff',\n+\n+  instructionsPrompt: `Execute the following steps:\n+1. Run git diff\n+2. Read the files that have changed\n+3. Review the changes and suggest improvements`,\n+}\n+\n+export default config\n"
        },
        {
          "path": "common/src/util/diff-reviewer-2.ts",
          "status": "added",
          "diff": "Index: common/src/util/diff-reviewer-2.ts\n===================================================================\n--- common/src/util/diff-reviewer-2.ts\t8a4bb98 (parent)\n+++ common/src/util/diff-reviewer-2.ts\t4852954 (commit)\n@@ -1,1 +1,54 @@\n-[NEW FILE]\n\\ No newline at end of file\n+import {\n+  AgentConfig,\n+  AgentStepContext,\n+} from '@codebuff/common/util/types/agent-config.d'\n+\n+const config: AgentConfig = {\n+  id: 'diff-reviewer-2',\n+  displayName: 'Diff Reviewer (Level 2)',\n+  model: 'openai/gpt-5',\n+\n+  inputSchema: {\n+    prompt: {\n+      type: 'string',\n+      description:\n+        'Please provide a short description of the changes you want to review',\n+    },\n+  },\n+  toolNames: ['read_files', 'run_terminal_command'],\n+\n+  parentPrompt: 'Spawn when you need to review code changes in the git diff',\n+\n+  systemPrompt:\n+    'You are an expert software developer. Your job is to review code changes and provide helpful feedback.',\n+\n+  instructionsPrompt: `Execute the following steps:\n+1. Run git diff\n+2. Read the files that have changed\n+3. Review the changes and suggest improvements\n+\n+Use the following guidelines while reviewing the changes:\n+- Find ways to simplify the code\n+- Reuse existing code as much as possible instead of writing new code\n+- Preserve as much behavior as possible in the existing code\n+- Prefer changing as few lines of code as possible\n+- Look for opportunities to improve the code's readability\n+- Look for logical errors in the code\n+- Look for missed cases in the code\n+- Look for any other bugs`,\n+\n+  handleSteps: function* ({ agentState, prompt, params }: AgentStepContext) {\n+    // Step 1: Run git diff immediately. Saves the agent a step, lowering cost and latency!\n+    yield {\n+      toolName: 'run_terminal_command',\n+      args: {\n+        command: 'git diff',\n+      },\n+    }\n+\n+    // Step 2: Let AI run the rest of the steps!\n+    yield 'STEP_ALL'\n+  },\n+}\n+\n+export default config\n"
        },
        {
          "path": "common/src/util/diff-reviewer-3.ts",
          "status": "added",
          "diff": "Index: common/src/util/diff-reviewer-3.ts\n===================================================================\n--- common/src/util/diff-reviewer-3.ts\t8a4bb98 (parent)\n+++ common/src/util/diff-reviewer-3.ts\t4852954 (commit)\n@@ -1,1 +1,99 @@\n-[NEW FILE]\n\\ No newline at end of file\n+import {\n+  AgentConfig,\n+  AgentStepContext,\n+} from '@codebuff/common/util/types/agent-config.d'\n+\n+const config: AgentConfig = {\n+  id: 'diff-reviewer-3',\n+\n+  displayName: 'Diff Reviewer (Level 3)',\n+  model: 'openai/gpt-5',\n+  inputSchema: {\n+    prompt: {\n+      type: 'string',\n+      description:\n+        'Please provide a short description of the changes you want to review',\n+    },\n+  },\n+  outputMode: 'last_message',\n+\n+  toolNames: ['read_files', 'run_terminal_command', 'spawn_agents'],\n+  subagents: ['james/file-explorer@0.1.3'],\n+\n+  parentPrompt: 'Spawn when you need to review code changes in the git diff',\n+\n+  systemPrompt:\n+    'You are an expert software developer. Your job is to review code changes and provide helpful feedback.',\n+\n+  instructionsPrompt: `Review the changes and suggest improvements.\n+\n+Use the following guidelines while reviewing the changes:\n+- Find ways to simplify the code\n+- Reuse existing code as much as possible instead of writing new code\n+- Preserve as much behavior as possible in the existing code\n+- Prefer changing as few lines of code as possible\n+- Look for opportunities to improve the code's readability\n+- Look for logical errors in the code\n+- Look for missed cases in the code\n+- Look for any other bugs`,\n+\n+  handleSteps: function* ({ agentState, prompt, params }: AgentStepContext) {\n+    // Step 1: Get list of changed files from git diff --name-only\n+    const { toolResult: gitDiffFilesResult } = yield {\n+      toolName: 'run_terminal_command',\n+      args: {\n+        command: 'git diff --name-only',\n+      },\n+    }\n+\n+    // Then, extract file paths from the result\n+    const changedFiles = (gitDiffFilesResult || '')\n+      .split('\\n')\n+      .map((line) => line.trim())\n+      .filter((line) => line && !line.startsWith('??') && !line.includes('OSC'))\n+\n+    // Step 2: Read the files\n+    if (changedFiles.length > 0) {\n+      yield {\n+        toolName: 'read_files',\n+        args: {\n+          paths: changedFiles,\n+        },\n+      }\n+    }\n+\n+    // Step 3: Run full git diff to see the actual changes\n+    yield {\n+      toolName: 'run_terminal_command',\n+      args: {\n+        command: 'git diff',\n+      },\n+    }\n+\n+    // Step 4: Put words in the AI's mouth to get it to spawn the file explorer.\n+    yield {\n+      toolName: 'add_message',\n+      args: {\n+        role: 'assistant',\n+        content:\n+          'Now I will spawn a file explorer to find any missing codebase context.',\n+      },\n+    }\n+\n+    yield 'STEP'\n+\n+    // Step 5: Put words in the AI's mouth to review the changes.\n+    yield {\n+      toolName: 'add_message',\n+      args: {\n+        role: 'assistant',\n+        content: 'Here is my comprehensive review of the changes.',\n+      },\n+    }\n+\n+    // Step 6: Let AI review the changes in a final step. (The last message is also the agent's output.)\n+    yield 'STEP'\n+  },\n+}\n+\n+export default config\n"
        },
        {
          "path": "common/src/util/example-1.ts",
          "status": "deleted",
          "diff": "Index: common/src/util/example-1.ts\n===================================================================\n--- common/src/util/example-1.ts\t8a4bb98 (parent)\n+++ common/src/util/example-1.ts\t4852954 (commit)\n@@ -1,82 +1,1 @@\n-import type { AgentConfig } from './types/agent-config'\n-\n-const config: AgentConfig = {\n-  id: 'example-1',\n-  displayName: 'Ruby the Code Reviewer (Example 1)',\n-  model: 'anthropic/claude-3.5-haiku-20241022',\n-\n-  toolNames: ['read_files', 'write_file', 'set_output', 'end_turn'],\n-\n-  inputSchema: {\n-    prompt: {\n-      type: 'string',\n-      description:\n-        'Files or code areas you want reviewed for quality and best practices',\n-    },\n-  },\n-\n-  outputMode: 'structured_output',\n-  outputSchema: {\n-    type: 'object',\n-    properties: {\n-      summary: { type: 'string' },\n-      issues: {\n-        type: 'array',\n-        items: {\n-          type: 'object',\n-          properties: {\n-            file: { type: 'string' },\n-            line: { type: 'number' },\n-            severity: { type: 'string' },\n-            issue: { type: 'string' },\n-            suggestion: { type: 'string' },\n-          },\n-        },\n-      },\n-      positives: {\n-        type: 'array',\n-        items: { type: 'string' },\n-      },\n-    },\n-  },\n-  parentPrompt:\n-    'Reviews code for quality, best practices, and potential improvements. Good for beginners learning code review fundamentals.',\n-\n-  systemPrompt: `# Ruby the Code Reviewer (Level 1)\n-\n-You are a friendly code reviewer focused on helping developers improve their code quality. You provide constructive feedback on:\n-\n-- Code readability and clarity\n-- Basic best practices\n-- Simple performance improvements\n-- Code organization\n-- Common anti-patterns\n-\n-## Your Approach\n-- Be encouraging and constructive\n-- Focus on the most important issues first\n-- Explain WHY something should be changed\n-- Provide specific, actionable suggestions\n-- Highlight good practices you see\n-\n-## Review Areas\n-- Variable and function naming\n-- Code structure and organization\n-- Basic error handling\n-- Simple performance issues\n-- Code duplication\n-- Basic security concerns`,\n-\n-  instructionsPrompt: `Review the provided code and provide structured feedback. Focus on:\n-\n-1. **Read the files** that need review\n-2. **Analyze** for common issues and good practices\n-3. **Provide output** with:\n-   - Summary of overall code quality\n-   - Specific issues with file, line, severity, and suggestions\n-   - Positive aspects worth highlighting\n-\n-Keep feedback constructive and educational. Prioritize the most impactful improvements.`,\n-}\n-\n-export default config\n+[DELETED]\n\\ No newline at end of file\n"
        },
        {
          "path": "common/src/util/example-2.ts",
          "status": "deleted",
          "diff": "Index: common/src/util/example-2.ts\n===================================================================\n--- common/src/util/example-2.ts\t8a4bb98 (parent)\n+++ common/src/util/example-2.ts\t4852954 (commit)\n@@ -1,142 +1,1 @@\n-// @ts-nocheck\n-import type { AgentConfig } from './types/agent-config'\n-\n-const config: AgentConfig = {\n-  id: 'example-2',\n-  displayName: 'Tessa the Test Generator (Level 2)',\n-  model: 'anthropic/claude-3.5-sonnet-20240620',\n-\n-  toolNames: [\n-    'read_files',\n-    'write_file',\n-    'str_replace',\n-    'code_search',\n-    'run_terminal_command',\n-    'spawn_agents',\n-    'set_output',\n-    'end_turn',\n-  ],\n-\n-  subagents: ['file-picker'],\n-\n-  inputSchema: {\n-    prompt: {\n-      type: 'string',\n-      description:\n-        'Code files or functions you want comprehensive tests generated for',\n-    },\n-    params: {\n-      type: 'object',\n-      properties: {\n-        testType: {\n-          type: 'string',\n-          description: 'Type of tests to generate: unit, integration, or both',\n-        },\n-        framework: {\n-          type: 'string',\n-          description: 'Testing framework preference (jest, vitest, etc.)',\n-        },\n-        coverage: {\n-          type: 'string',\n-          description: 'Coverage level: basic, comprehensive, or edge-cases',\n-        },\n-      },\n-    },\n-  },\n-\n-  outputMode: 'structured_output',\n-  outputSchema: {\n-    type: 'object',\n-    properties: {\n-      summary: { type: 'string' },\n-      testsCreated: {\n-        type: 'array',\n-        items: {\n-          type: 'object',\n-          properties: {\n-            file: { type: 'string' },\n-            testFile: { type: 'string' },\n-            testCount: { type: 'number' },\n-            coverage: { type: 'string' },\n-          },\n-        },\n-      },\n-      recommendations: {\n-        type: 'array',\n-        items: { type: 'string' },\n-      },\n-    },\n-  },\n-\n-  displayName: 'Tessa the Test Generator (Example 2)',\n-  parentPrompt:\n-    'Generates comprehensive test suites for code files and functions. Intermediate complexity with multiple testing strategies.',\n-\n-  systemPrompt: `# Tessa the Test Generator (Level 2)\n-\n-You are an expert test engineer who creates comprehensive, maintainable test suites. You understand:\n-\n-- Multiple testing frameworks and their conventions\n-- Test-driven development principles\n-- Edge case identification\n-- Mock and stub strategies\n-- Test organization and structure\n-\n-## Testing Philosophy\n-- Write tests that document behavior\n-- Cover happy paths, edge cases, and error conditions\n-- Use descriptive test names and clear assertions\n-- Minimize test coupling and maximize maintainability\n-- Balance thoroughness with practicality\n-\n-## Test Types You Generate\n-- **Unit Tests**: Individual function/method testing\n-- **Integration Tests**: Component interaction testing\n-- **Edge Case Tests**: Boundary and error condition testing\n-- **Performance Tests**: Basic performance validation\n-\n-## Code Analysis Skills\n-- Identify testable units and their dependencies\n-- Recognize complex logic that needs thorough testing\n-- Spot potential failure points and edge cases\n-- Understand mocking requirements for external dependencies`,\n-\n-  instructionsPrompt: `Generate comprehensive tests for the provided code. Your process:\n-\n-1. **Analyze the codebase** using file-picker if needed to understand structure\n-2. **Read target files** to understand functionality and dependencies\n-3. **Identify test scenarios** including:\n-   - Happy path cases\n-   - Edge cases and boundary conditions\n-   - Error handling scenarios\n-   - Integration points\n-4. **Generate test files** with:\n-   - Proper test framework setup\n-   - Descriptive test names\n-   - Comprehensive assertions\n-   - Appropriate mocks/stubs\n-5. **Run tests** to ensure they work\n-6. **Provide recommendations** for testing strategy improvements\n-\n-Focus on creating maintainable, readable tests that serve as documentation.`,\n-\n-  handleSteps: function* ({ agentState, prompt, params }) {\n-    // Step 1: Understand the codebase structure\n-    yield {\n-      toolName: 'spawn_agents',\n-      args: {\n-        agents: [\n-          {\n-            agent_type: 'file-picker',\n-            prompt: `Find files related to: ${prompt}. Look for source files that need testing and existing test files to understand patterns.`,\n-          },\n-        ],\n-      },\n-    }\n-\n-    // Step 2: Let the model analyze and generate tests\n-    yield 'STEP_ALL'\n-  },\n-}\n-\n-export default config\n+[DELETED]\n\\ No newline at end of file\n"
        },
        {
          "path": "common/src/util/example-3.ts",
          "status": "deleted",
          "diff": "Index: common/src/util/example-3.ts\n===================================================================\n--- common/src/util/example-3.ts\t8a4bb98 (parent)\n+++ common/src/util/example-3.ts\t4852954 (commit)\n@@ -1,247 +1,1 @@\n-// @ts-nocheck\n-import type { AgentConfig } from './types/agent-config'\n-\n-const config: AgentConfig = {\n-  id: 'example-3',\n-  displayName: 'Doc the Documentation Writer (Level 3)',\n-  model: 'google/gemini-2.5-pro',\n-\n-  toolNames: [\n-    'read_files',\n-    'write_file',\n-    'str_replace',\n-    'code_search',\n-    'run_terminal_command',\n-    'spawn_agents',\n-    'web_search',\n-    'read_docs',\n-    'create_plan',\n-    'add_subgoal',\n-    'update_subgoal',\n-    'think_deeply',\n-    'set_output',\n-    'end_turn',\n-  ],\n-\n-  displayName: 'Doc the Documentation Writer (Example 3)',\n-  subagents: ['file-explorer', 'researcher', 'thinker'],\n-\n-  includeMessageHistory: true,\n-\n-  inputSchema: {\n-    prompt: {\n-      type: 'string',\n-      description:\n-        'Project, codebase, or specific components you want comprehensive documentation for',\n-    },\n-    params: {\n-      type: 'object',\n-      properties: {\n-        docType: {\n-          type: 'string',\n-          description:\n-            'Type of documentation: api, user-guide, technical, or comprehensive',\n-        },\n-        audience: {\n-          type: 'string',\n-          description: 'Target audience: developers, end-users, or maintainers',\n-        },\n-        format: {\n-          type: 'string',\n-          description: 'Output format: markdown, rst, or html',\n-        },\n-        includeExamples: {\n-          type: 'boolean',\n-          description: 'Whether to include code examples and tutorials',\n-        },\n-        generateDiagrams: {\n-          type: 'boolean',\n-          description: 'Whether to generate architecture diagrams',\n-        },\n-      },\n-    },\n-  },\n-\n-  outputMode: 'structured_output',\n-  outputSchema: {\n-    type: 'object',\n-    properties: {\n-      summary: { type: 'string' },\n-      documentsCreated: {\n-        type: 'array',\n-        items: {\n-          type: 'object',\n-          properties: {\n-            file: { type: 'string' },\n-            type: { type: 'string' },\n-            sections: { type: 'array', items: { type: 'string' } },\n-            wordCount: { type: 'number' },\n-          },\n-        },\n-      },\n-      architectureInsights: {\n-        type: 'array',\n-        items: { type: 'string' },\n-      },\n-      recommendations: {\n-        type: 'array',\n-        items: { type: 'string' },\n-      },\n-    },\n-  },\n-\n-  parentPrompt:\n-    'Creates comprehensive, professional documentation for codebases and projects. Advanced complexity with research, planning, and multi-format output.',\n-\n-  systemPrompt: `# Doc the Documentation Writer (Level 3)\n-\n-You are a senior technical writer and documentation architect who creates world-class documentation. You excel at:\n-\n-- **Information Architecture**: Organizing complex information logically\n-- **Audience Analysis**: Tailoring content to specific user needs\n-- **Technical Communication**: Explaining complex concepts clearly\n-- **Research & Analysis**: Understanding codebases deeply\n-- **Multi-format Publishing**: Creating docs in various formats\n-\n-## Documentation Philosophy\n-- Documentation is a product, not a byproduct\n-- Users' mental models drive information architecture\n-- Examples and tutorials are as important as reference material\n-- Consistency in style, tone, and structure builds trust\n-- Documentation should evolve with the codebase\n-\n-## Your Expertise\n-- **API Documentation**: OpenAPI specs, endpoint docs, SDKs\n-- **User Guides**: Tutorials, how-tos, troubleshooting\n-- **Technical Docs**: Architecture, deployment, maintenance\n-- **Code Documentation**: Inline comments, README files\n-- **Visual Documentation**: Diagrams, flowcharts, screenshots\n-\n-## Advanced Capabilities\n-- Research existing documentation patterns and best practices\n-- Analyze codebase architecture and dependencies\n-- Create comprehensive documentation plans\n-- Generate multiple documentation formats\n-- Integrate with existing documentation systems`,\n-\n-  instructionsPrompt: `Create comprehensive documentation for the specified project or codebase. Your systematic approach:\n-\n-1. **Research & Planning Phase**\n-   - Explore the codebase architecture\n-   - Research documentation best practices\n-   - Create a detailed documentation plan\n-   - Identify target audiences and their needs\n-\n-2. **Analysis Phase**\n-   - Deep dive into code structure and patterns\n-   - Understand dependencies and integrations\n-   - Identify key concepts and workflows\n-   - Map user journeys and use cases\n-\n-3. **Content Creation Phase**\n-   - Write clear, comprehensive documentation\n-   - Include practical examples and tutorials\n-   - Create visual aids and diagrams\n-   - Ensure consistency across all documents\n-\n-4. **Quality Assurance Phase**\n-   - Review for accuracy and completeness\n-   - Test examples and code snippets\n-   - Validate against user needs\n-   - Optimize for discoverability\n-\n-Focus on creating documentation that serves as both reference and learning material.`,\n-\n-  handleSteps: function* ({ agentState, prompt, params }) {\n-    // Step 1: Create comprehensive plan\n-    yield {\n-      toolName: 'add_subgoal',\n-      args: {\n-        id: '1',\n-        objective: 'Research and plan comprehensive documentation strategy',\n-        status: 'IN_PROGRESS',\n-      },\n-    }\n-\n-    // Step 2: Research best practices\n-    yield {\n-      toolName: 'spawn_agents',\n-      args: {\n-        agents: [\n-          {\n-            agent_type: 'researcher',\n-            prompt: `Research current best practices for ${params?.docType || 'technical'} documentation, focusing on ${params?.audience || 'developers'} audience. Include modern documentation tools and formats.`,\n-          },\n-        ],\n-      },\n-    }\n-\n-    // Step 3: Explore codebase comprehensively\n-    yield {\n-      toolName: 'spawn_agents',\n-      args: {\n-        agents: [\n-          {\n-            agent_type: 'file-explorer',\n-            prompt: `Comprehensively explore the codebase for documentation: ${prompt}`,\n-            params: {\n-              prompts: [\n-                'Main application architecture and entry points',\n-                'API endpoints and data models',\n-                'Configuration and deployment files',\n-                'Existing documentation and README files',\n-              ],\n-            },\n-          },\n-        ],\n-      },\n-    }\n-\n-    // Step 4: Deep thinking about documentation strategy\n-    yield {\n-      toolName: 'spawn_agents',\n-      args: {\n-        agents: [\n-          {\n-            agent_type: 'thinker',\n-            prompt: `Analyze the codebase structure and research findings to develop a comprehensive documentation strategy. Consider information architecture, user journeys, and content organization for ${params?.audience || 'developers'}.`,\n-          },\n-        ],\n-      },\n-    }\n-\n-    // Step 5: Create detailed plan\n-    yield {\n-      toolName: 'create_plan',\n-      args: {\n-        path: 'documentation-plan.md',\n-        plan: 'Based on research and codebase analysis, create a detailed plan for comprehensive documentation including structure, content types, examples, and delivery format.',\n-      },\n-    }\n-\n-    // Step 6: Update subgoal and continue with implementation\n-    yield {\n-      toolName: 'update_subgoal',\n-      args: {\n-        id: '1',\n-        status: 'COMPLETE',\n-        log: 'Completed research and planning phase',\n-      },\n-    }\n-\n-    // Step 7: Execute documentation creation\n-    yield {\n-      toolName: 'add_subgoal',\n-      args: {\n-        id: '2',\n-        objective: 'Create comprehensive documentation based on plan',\n-        status: 'IN_PROGRESS',\n-      },\n-    }\n-\n-    // Step 8: Let the model continue with implementation\n-    yield 'STEP_ALL'\n-  },\n-}\n-\n-export default config\n+[DELETED]\n\\ No newline at end of file\n"
        },
        {
          "path": "npm-app/src/cli-handlers/agent-creation-chat.ts",
          "status": "modified",
          "diff": "Index: npm-app/src/cli-handlers/agent-creation-chat.ts\n===================================================================\n--- npm-app/src/cli-handlers/agent-creation-chat.ts\t8a4bb98 (parent)\n+++ npm-app/src/cli-handlers/agent-creation-chat.ts\t4852954 (commit)\n@@ -84,12 +84,12 @@\n \n Please create a complete TypeScript agent template file in the ${AGENT_TEMPLATES_DIR} directory with proper types and a comprehensive system prompt.`\n \n   try {\n-    // Use the resetAgent helper to properly switch to base-agent-builder which automatically spawns the agent builder\n+    // Use the resetAgent helper to properly switch to agent-builder which automatically spawns the agent builder\n     const cliInstance = CLI.getInstance()\n     await cliInstance.resetAgent(\n-      AgentTemplateTypes.base_agent_builder,\n+      AgentTemplateTypes.agent_builder,\n       {\n         name: requirements.name,\n         purpose: requirements.purpose,\n         specialty: requirements.specialty,\n"
        },
        {
          "path": "npm-app/src/cli-handlers/agents.ts",
          "status": "modified",
          "diff": "Index: npm-app/src/cli-handlers/agents.ts\n===================================================================\n--- npm-app/src/cli-handlers/agents.ts\t8a4bb98 (parent)\n+++ npm-app/src/cli-handlers/agents.ts\t4852954 (commit)\n@@ -540,9 +540,9 @@\n   }\n }\n \n async function startDirectAgentCreation(onExit: () => void) {\n-  // Switch to base-agent-builder which automatically spawns Bob the Agent Builder for agent creation\n+  // Switch to agent-builder which automatically spawns Bob the Agent Builder for agent creation\n   const prompt = `Create a new custom agent template for me. Please ask me what kind of agent I'd like to create and help me build it.`\n \n   console.log(\n     green(\n@@ -556,11 +556,11 @@\n   )\n \n   try {\n     const cliInstance = CLI.getInstance()\n-    // Switch to base-agent-builder which automatically spawns the agent builder for agent creation\n+    // Switch to agent-builder which automatically spawns the agent builder for agent creation\n     await cliInstance.resetAgent(\n-      AgentTemplateTypes.base_agent_builder,\n+      AgentTemplateTypes.agent_builder,\n       undefined,\n       prompt,\n     )\n     cliInstance.freshPrompt()\n"
        }
      ]
    },
    {
      "id": "remove-agent-messaging",
      "sha": "31862b4b644e63ebe57a72ec8d354bf026386e7f",
      "parentSha": "9d31e1ba5066ea4fead2ed302c9796ab80f3f21d",
      "spec": "Implement the removal of inter-agent messaging via the send_agent_message tool across the monorepo and update related agent behavior and documentation to reflect independent async execution.\n\nMake the following changes:\n\nBackend\n- backend/src/run-agent-step.ts\n  - Remove the logic that retrieves pending messages from asyncAgentManager and pushes them as tool results (the loop that calls getAndClearMessages and emits a send_agent_message result). Leave agent registration/status update logic intact.\n\n- backend/src/templates/agents/superagent.ts\n  - In the agent template configuration, remove send_agent_message from the toolNames array. Keep spawn_agents, spawn_agents_async, end_turn, think_deeply.\n  - In the system instructions, delete guidance about sending a message to a previous agent; keep guidance about synchronous (ask) vs asynchronous (base) delegation.\n\n- backend/src/tools/definitions/list.ts\n  - Remove the exported mapping for send_agent_message from the tool definitions list.\n\n- backend/src/tools/definitions/tool/send-agent-message.ts\n  - Remove this tool definition entirely (or replace contents with a minimal placeholder indicating deletion).\n\n- backend/src/tools/definitions/tool/spawn-agents-async.ts\n  - Update the description to remove mention of communication via send_agent_message. Clarify that spawned agents run independently and the parent can end its turn without waiting.\n\n- backend/src/tools/handlers/list.ts\n  - Remove the handler mapping for send_agent_message from the tool handlers list.\n\n- backend/src/tools/handlers/tool/send-agent-message.ts\n  - Remove this handler entirely (or replace contents with a minimal placeholder indicating deletion).\n\nCommon (shared types/schemas)\n- common/src/tools/constants.ts\n  - Remove 'send_agent_message' from the ToolName list.\n\n- common/src/tools/list.ts\n  - Remove send_agent_message imports, params, and entries from both llmToolCallSchema/clientToolCallSchema maps. Also remove the parameter-name hints for send_agent_message.\n\n- common/src/tools/params/tool/send-agent-message.ts\n  - Remove this params schema file entirely (or replace contents with a minimal placeholder indicating deletion).\n\n- common/src/util/types/tools.d.ts\n  - Remove 'send_agent_message' from the ToolName union and ToolParamsMap.\n  - Remove the SendAgentMessageParams interface and its references.\n\nnpm-app (CLI rendering)\n- npm-app/src/utils/tool-renderers.ts\n  - Remove the send_agent_message renderer entry (header and prompt rendering). Do not add any new renderer for it.\n\nSDK typings\n- sdk/src/types/agent-config.ts\n  - In the JSDoc for outputMode, change the description to say 'json' instead of 'structured_output'. Leave the union type values unchanged (still 'structured_output').\n\n- sdk/src/types/tools.ts\n  - Remove 'send_agent_message' from the ToolName union and ToolParamsMap.\n  - Remove the SendAgentMessageParams interface.\n  - Ensure spawn_agent_inline is present in ToolName and ToolParamsMap with its parameters interface defined (agent_type, prompt?, params?).\n  - Keep other refactors as shown: empty marker interfaces for EndTurnParams and SetOutputParams, JSDoc normalization, and formatting.\n\nBehavioral outcome\n- Agents can no longer send messages to each other using send_agent_message.\n- Async agents are treated as independent; the parent proceeds without message-based wakeups.\n- The main agent loop no longer injects send_agent_message payloads as tool results.\n- Superagent instructions and tool availability reflect this change.\n- The SDK and CLI no longer type or render send_agent_message.\n\nScope notes\n- Do not remove asyncAgentManager itself or its message queue methods; only remove integration points and the tool.\n- Do not alter other tools beyond the mappings and doc string changes specified above.",
      "prompt": "Remove the inter-agent messaging capability and references from the codebase. Eliminate the send_agent_message tool entirely, including its definitions, handlers, type entries, and CLI rendering. Update the superagent configuration and instructions so it no longer offers or suggests inter-agent messaging, and adjust the async spawn description to emphasize that spawned agents run independently. Remove any logic that injected pending inter-agent messages into the agent loop. Align SDK tool typings by removing send_agent_message, adding inline spawn tool typings, and adjust the output mode documentation wording as needed. Ensure the system functions without inter-agent messaging and that async agents are still usable without parent-child message passing.",
      "supplementalFiles": [
        "backend/src/async-agent-manager.ts",
        "backend/src/tools/constants.ts",
        "backend/src/tools/tool-executor.ts",
        "common/src/tools/utils.ts",
        "common/src/types/session-state.ts",
        "npm-app/src/tool-handlers.ts"
      ],
      "fileDiffs": [
        {
          "path": "backend/src/run-agent-step.ts",
          "status": "modified",
          "diff": "Index: backend/src/run-agent-step.ts\n===================================================================\n--- backend/src/run-agent-step.ts\t9d31e1b (parent)\n+++ backend/src/run-agent-step.ts\t31862b4 (commit)\n@@ -211,20 +211,8 @@\n     } else {\n       // Update status to running for existing agents\n       asyncAgentManager.updateAgentState(agentState, 'running')\n     }\n-\n-    // Check for pending messages from other agents\n-    const pendingMessages = asyncAgentManager.getAndClearMessages(\n-      agentState.agentId,\n-    )\n-    for (const message of pendingMessages) {\n-      toolResults.push({\n-        toolName: 'send_agent_message',\n-        toolCallId: generateCompactId(),\n-        result: `Message from agent ${message.fromAgentId}:\\n\\nPrompt: ${message.prompt}${message.params ? `\\n\\nParams: ${JSON.stringify(message.params, null, 2)}` : ''}`,\n-      })\n-    }\n   }\n \n   const agentTemplate = await getAgentTemplate(agentType, localAgentTemplates)\n   if (!agentTemplate) {\n"
        },
        {
          "path": "backend/src/templates/agents/superagent.ts",
          "status": "modified",
          "diff": "Index: backend/src/templates/agents/superagent.ts\n===================================================================\n--- backend/src/templates/agents/superagent.ts\t9d31e1b (parent)\n+++ backend/src/templates/agents/superagent.ts\t31862b4 (commit)\n@@ -18,15 +18,9 @@\n     prompt: z.string().describe('A coding task to complete'),\n   },\n   outputMode: 'last_message',\n   includeMessageHistory: false,\n-  toolNames: [\n-    'spawn_agents',\n-    'spawn_agents_async',\n-    'send_agent_message',\n-    'end_turn',\n-    'think_deeply',\n-  ],\n+  toolNames: ['spawn_agents', 'spawn_agents_async', 'end_turn', 'think_deeply'],\n   subagents: allAvailableAgents\n     ? (allAvailableAgents as any[])\n     : [\n         AgentTemplateTypes.thinker,\n@@ -49,10 +43,8 @@\n If you are gathering information, spawn the \"ask\" agent synchronously (spawn_agents) so you can understand something before proceeding.\n \n If you are delegating a coding task, spawn the \"base\" agent *asynchronously* (spawn_agents_async) so you can help the user with other tasks while the spawned agent works on the code.\n \n-Prefer sending a message to a previous agent over spawning a new agent, especially if that agent was previously working on a similar task.\n-\n Feel free to ask the user for clarification if you are unsure what to do.\n `.trim(),\n   stepPrompt:\n     'Spawn as many agents as you can to help. Use the end_turn tool at the end of your response when you have completed the user request or want the user to respond to your message or if you are waiting for a response from an agent.',\n"
        },
        {
          "path": "backend/src/tools/definitions/list.ts",
          "status": "modified",
          "diff": "Index: backend/src/tools/definitions/list.ts\n===================================================================\n--- backend/src/tools/definitions/list.ts\t9d31e1b (parent)\n+++ backend/src/tools/definitions/list.ts\t31862b4 (commit)\n@@ -10,9 +10,8 @@\n import { readDocsTool } from './tool/read-docs'\n import { readFilesTool } from './tool/read-files'\n import { runFileChangeHooksTool } from './tool/run-file-change-hooks'\n import { runTerminalCommandTool } from './tool/run-terminal-command'\n-import { sendAgentMessageTool } from './tool/send-agent-message'\n import { setMessagesTool } from './tool/set-messages'\n import { setOutputTool } from './tool/set-output'\n import { spawnAgentsTool } from './tool/spawn-agents'\n import { spawnAgentsAsyncTool } from './tool/spawn-agents-async'\n@@ -38,9 +37,8 @@\n   read_docs: readDocsTool,\n   read_files: readFilesTool,\n   run_file_change_hooks: runFileChangeHooksTool,\n   run_terminal_command: runTerminalCommandTool,\n-  send_agent_message: sendAgentMessageTool,\n   set_messages: setMessagesTool,\n   set_output: setOutputTool,\n   spawn_agents: spawnAgentsTool,\n   spawn_agents_async: spawnAgentsAsyncTool,\n"
        },
        {
          "path": "backend/src/tools/definitions/tool/send-agent-message.ts",
          "status": "deleted",
          "diff": "Index: backend/src/tools/definitions/tool/send-agent-message.ts\n===================================================================\n--- backend/src/tools/definitions/tool/send-agent-message.ts\t9d31e1b (parent)\n+++ backend/src/tools/definitions/tool/send-agent-message.ts\t31862b4 (commit)\n@@ -1,27 +1,1 @@\n-import { getToolCallString } from '@codebuff/common/tools/utils'\n-\n-import type { ToolDescription } from '../tool-def-type'\n-\n-const toolName = 'send_agent_message'\n-const endsAgentStep = false\n-export const sendAgentMessageTool = {\n-  toolName,\n-  description: `\n-Use this tool to send messages between agents in an async agent hierarchy. This enables parent-child communication and data exchange.\n-\n-- Use target_agent_id \"PARENT_ID\" to send messages to the parent agent\n-- Use the actual agent ID to send messages to specific child agents\n-- The prompt field contains the message content\n-- The params field can contain structured data\n-\n-Example:\n-${getToolCallString(toolName, {\n-  target_agent_id: 'PARENT_ID',\n-  prompt: 'Found 5 authentication-related files',\n-  params: {\n-    files: ['src/auth.ts', 'src/login.ts'],\n-    confidence: 0.9,\n-  },\n-})}\n-    `.trim(),\n-} satisfies ToolDescription\n+[DELETED]\n\\ No newline at end of file\n"
        },
        {
          "path": "backend/src/tools/definitions/tool/spawn-agents-async.ts",
          "status": "modified",
          "diff": "Index: backend/src/tools/definitions/tool/spawn-agents-async.ts\n===================================================================\n--- backend/src/tools/definitions/tool/spawn-agents-async.ts\t9d31e1b (parent)\n+++ backend/src/tools/definitions/tool/spawn-agents-async.ts\t31862b4 (commit)\n@@ -7,9 +7,9 @@\n   toolName,\n   description: `\n Use this tool to spawn subagents asynchronously to help you complete the user request. Unlike spawn_agents, this tool does not wait for the agents to complete and allows the parent agent to continue execution. The subagents can continue to run even if the parent agent ends its turn.\n \n-The spawned agents run independently and can communicate back to the parent using send_agent_message. The parent agent can also send further messages to the async agents. The parent agent can end its turn without waiting for the async agents to complete. If so, async children will wake the parent when they send a message.\n+The spawned agents run independently. The parent agent can end its turn without waiting for the async agents to complete.\n \n Prefer to use spawn_agents unless you really need this ability to spawn asynchronous agents.\n \n Example:\n"
        },
        {
          "path": "backend/src/tools/handlers/list.ts",
          "status": "modified",
          "diff": "Index: backend/src/tools/handlers/list.ts\n===================================================================\n--- backend/src/tools/handlers/list.ts\t9d31e1b (parent)\n+++ backend/src/tools/handlers/list.ts\t31862b4 (commit)\n@@ -8,9 +8,8 @@\n import { handleReadDocs } from './tool/read-docs'\n import { handleReadFiles } from './tool/read-files'\n import { handleRunFileChangeHooks } from './tool/run-file-change-hooks'\n import { handleRunTerminalCommand } from './tool/run-terminal-command'\n-import { handleSendAgentMessage } from './tool/send-agent-message'\n import { handleSetMessages } from './tool/set-messages'\n import { handleSetOutput } from './tool/set-output'\n import { handleSpawnAgents } from './tool/spawn-agents'\n import { handleSpawnAgentsAsync } from './tool/spawn-agents-async'\n@@ -44,9 +43,8 @@\n   read_docs: handleReadDocs,\n   read_files: handleReadFiles,\n   run_file_change_hooks: handleRunFileChangeHooks,\n   run_terminal_command: handleRunTerminalCommand,\n-  send_agent_message: handleSendAgentMessage,\n   set_messages: handleSetMessages,\n   set_output: handleSetOutput,\n   spawn_agents: handleSpawnAgents,\n   spawn_agents_async: handleSpawnAgentsAsync,\n"
        },
        {
          "path": "backend/src/tools/handlers/tool/send-agent-message.ts",
          "status": "deleted",
          "diff": "Index: backend/src/tools/handlers/tool/send-agent-message.ts\n===================================================================\n--- backend/src/tools/handlers/tool/send-agent-message.ts\t9d31e1b (parent)\n+++ backend/src/tools/handlers/tool/send-agent-message.ts\t31862b4 (commit)\n@@ -1,73 +1,1 @@\n-import { asyncAgentManager } from '../../../async-agent-manager'\n-import { logger } from '../../../util/logger'\n-\n-import type { CodebuffToolCall } from '../../constants'\n-import type { CodebuffToolHandlerFunction } from '../handler-function-type'\n-import type { AgentState } from '@codebuff/common/types/session-state'\n-\n-export const handleSendAgentMessage = ((params: {\n-  previousToolCallFinished: Promise<void>\n-  toolCall: CodebuffToolCall<'send_agent_message'>\n-\n-  state: {\n-    agentState?: AgentState\n-  }\n-}): { result: Promise<string>; state: {} } => {\n-  const { previousToolCallFinished, toolCall, state } = params\n-  const { target_agent_id, prompt, params: messageParams } = toolCall.args\n-  const { agentState } = state\n-\n-  if (!agentState) {\n-    throw new Error(\n-      'Internal error for send_agent_message: Missing agentState in state',\n-    )\n-  }\n-\n-  const sendMessage = async () => {\n-    const currentAgentId = agentState.agentId\n-    let targetAgentId = target_agent_id\n-\n-    // Handle special \"PARENT_ID\" case\n-    if (target_agent_id === 'PARENT_ID') {\n-      if (agentState.parentId) {\n-        targetAgentId = agentState.parentId\n-      } else {\n-        throw new Error('No parent agent found for this agent')\n-      }\n-    }\n-\n-    // Verify target agent exists\n-    const targetAgent = asyncAgentManager.getAgent(targetAgentId)\n-    if (!targetAgent) {\n-      throw new Error(`Target agent ${targetAgentId} not found`)\n-    }\n-\n-    // Send the message\n-    asyncAgentManager.sendMessage({\n-      fromAgentId: currentAgentId,\n-      toAgentId: targetAgentId,\n-      prompt,\n-      params: messageParams,\n-      timestamp: new Date(),\n-    })\n-\n-    logger.debug(\n-      {\n-        fromAgentId: currentAgentId,\n-        toAgentId: targetAgentId,\n-        prompt: prompt.slice(0, 50) + '...',\n-      },\n-      'Sent message to agent',\n-    )\n-\n-    return `Message sent to agent ${targetAgentId}`\n-  }\n-\n-  // Send the message immediately.\n-  const resultPromise = sendMessage()\n-\n-  return {\n-    result: previousToolCallFinished.then(() => resultPromise),\n-    state: {},\n-  }\n-}) satisfies CodebuffToolHandlerFunction<'send_agent_message'>\n+[DELETED]\n\\ No newline at end of file\n"
        },
        {
          "path": "common/src/tools/constants.ts",
          "status": "modified",
          "diff": "Index: common/src/tools/constants.ts\n===================================================================\n--- common/src/tools/constants.ts\t9d31e1b (parent)\n+++ common/src/tools/constants.ts\t31862b4 (commit)\n@@ -19,9 +19,8 @@\n   'read_docs',\n   'read_files',\n   'run_file_change_hooks',\n   'run_terminal_command',\n-  'send_agent_message',\n   'set_messages',\n   'set_output',\n   'spawn_agents',\n   'spawn_agents_async',\n"
        },
        {
          "path": "common/src/tools/list.ts",
          "status": "modified",
          "diff": "Index: common/src/tools/list.ts\n===================================================================\n--- common/src/tools/list.ts\t9d31e1b (parent)\n+++ common/src/tools/list.ts\t31862b4 (commit)\n@@ -8,9 +8,8 @@\n import { readDocsParams } from './params/tool/read-docs'\n import { readFilesParams } from './params/tool/read-files'\n import { runFileChangeHooksParams } from './params/tool/run-file-change-hooks'\n import { runTerminalCommandParams } from './params/tool/run-terminal-command'\n-import { sendAgentMessageParams } from './params/tool/send-agent-message'\n import { setMessagesParams } from './params/tool/set-messages'\n import { setOutputParams } from './params/tool/set-output'\n import { spawnAgentsParams } from './params/tool/spawn-agents'\n import { spawnAgentsAsyncParams } from './params/tool/spawn-agents-async'\n@@ -34,9 +33,8 @@\n   read_docs: readDocsParams,\n   read_files: readFilesParams,\n   run_file_change_hooks: runFileChangeHooksParams,\n   run_terminal_command: runTerminalCommandParams,\n-  send_agent_message: sendAgentMessageParams,\n   set_messages: setMessagesParams,\n   set_output: setOutputParams,\n   spawn_agents: spawnAgentsParams,\n   spawn_agents_async: spawnAgentsAsyncParams,\n@@ -70,9 +68,8 @@\n   create_plan: ['path', 'plan'],\n \n   browser_logs: ['type', 'url', 'waitUntil'],\n \n-  send_agent_message: ['target_agent_id', 'prompt', 'params'],\n   spawn_agents: ['agents'],\n   spawn_agents_async: ['agents'],\n   spawn_agent_inline: ['agent_type', 'prompt', 'params'],\n   set_output: [],\n"
        },
        {
          "path": "common/src/tools/params/tool/send-agent-message.ts",
          "status": "deleted",
          "diff": "Index: common/src/tools/params/tool/send-agent-message.ts\n===================================================================\n--- common/src/tools/params/tool/send-agent-message.ts\t9d31e1b (parent)\n+++ common/src/tools/params/tool/send-agent-message.ts\t31862b4 (commit)\n@@ -1,26 +1,1 @@\n-import z from 'zod/v4'\n-\n-import type { ToolParams } from '../../constants'\n-\n-const toolName = 'send_agent_message'\n-const endsAgentStep = false\n-export const sendAgentMessageParams = {\n-  toolName,\n-  endsAgentStep,\n-  parameters: z\n-    .object({\n-      target_agent_id: z\n-        .string()\n-        .describe(\n-          'ID of the target agent to send message to. Use \"PARENT_ID\" to send to parent agent.',\n-        ),\n-      prompt: z.string().describe('Message prompt to send to the target agent'),\n-      params: z\n-        .record(z.string(), z.any())\n-        .optional()\n-        .describe('Optional parameters object to send with the message'),\n-    })\n-    .describe(\n-      `Send a message to another agent (parent or child) for communication and data exchange.`,\n-    ),\n-} satisfies ToolParams\n+[DELETED]\n\\ No newline at end of file\n"
        },
        {
          "path": "common/src/util/types/tools.d.ts",
          "status": "modified",
          "diff": "Index: common/src/util/types/tools.d.ts\n===================================================================\n--- common/src/util/types/tools.d.ts\t9d31e1b (parent)\n+++ common/src/util/types/tools.d.ts\t31862b4 (commit)\n@@ -12,9 +12,8 @@\n   | 'read_docs'\n   | 'read_files'\n   | 'run_file_change_hooks'\n   | 'run_terminal_command'\n-  | 'send_agent_message'\n   | 'set_messages'\n   | 'set_output'\n   | 'spawn_agents'\n   | 'spawn_agents_async'\n@@ -39,9 +38,8 @@\n   read_docs: ReadDocsParams\n   read_files: ReadFilesParams\n   run_file_change_hooks: RunFileChangeHooksParams\n   run_terminal_command: RunTerminalCommandParams\n-  send_agent_message: SendAgentMessageParams\n   set_messages: SetMessagesParams\n   set_output: SetOutputParams\n   spawn_agents: SpawnAgentsParams\n   spawn_agents_async: SpawnAgentsAsyncParams\n@@ -166,20 +164,8 @@\n   timeout_seconds: number\n }\n \n /**\n- * Send a message to another agent (parent or child) for communication and data exchange.\n- */\n-export interface SendAgentMessageParams {\n-  /** ID of the target agent to send message to. Use \"PARENT_ID\" to send to parent agent. */\n-  target_agent_id: string\n-  /** Message prompt to send to the target agent */\n-  prompt: string\n-  /** Optional parameters object to send with the message */\n-  params?: Record<string, any>\n-}\n-\n-/**\n  * Set the conversation history to the provided messages.\n  */\n export interface SetMessagesParams {\n   messages: {\n"
        },
        {
          "path": "npm-app/src/utils/tool-renderers.ts",
          "status": "modified",
          "diff": "Index: npm-app/src/utils/tool-renderers.ts\n===================================================================\n--- npm-app/src/utils/tool-renderers.ts\t9d31e1b (parent)\n+++ npm-app/src/utils/tool-renderers.ts\t31862b4 (commit)\n@@ -340,20 +340,8 @@\n         return '\\n'\n       }\n     },\n   },\n-\n-  send_agent_message: {\n-    onToolStart: (toolName) => {\n-      return '\\n\\n' + gray(`[${bold('Send Agent Message')}]`) + '\\n'\n-    },\n-    onParamChunk: (content, paramName, toolName) => {\n-      if (paramName === 'prompt') {\n-        return gray(content)\n-      }\n-      return null\n-    },\n-  },\n   add_message: {\n     // Don't render anything\n   },\n   set_messages: {\n"
        },
        {
          "path": "sdk/src/types/agent-config.ts",
          "status": "modified",
          "diff": "Index: sdk/src/types/agent-config.ts\n===================================================================\n--- sdk/src/types/agent-config.ts\t9d31e1b (parent)\n+++ sdk/src/types/agent-config.ts\t31862b4 (commit)\n@@ -71,9 +71,9 @@\n    * last_message: The last message from the agent, typcically after using tools.\n    *\n    * all_messages: All messages from the agent, including tool calls and results.\n    *\n-   * structured_output: Make the agent output a JSON object. Can be used with outputSchema or without if you want freeform json output.\n+   * json: Make the agent output a JSON object. Can be used with outputSchema or without if you want freeform json output.\n    */\n   outputMode?: 'last_message' | 'all_messages' | 'structured_output'\n \n   /** JSON schema for structured output (when outputMode is 'structured_output') */\n"
        },
        {
          "path": "sdk/src/types/tools.ts",
          "status": "modified",
          "diff": "Index: sdk/src/types/tools.ts\n===================================================================\n--- sdk/src/types/tools.ts\t9d31e1b (parent)\n+++ sdk/src/types/tools.ts\t31862b4 (commit)\n@@ -1,265 +1,282 @@\n /**\n  * Union type of all available tool names\n  */\n-export type ToolName = 'add_message' | 'add_subgoal' | 'browser_logs' | 'code_search' | 'create_plan' | 'end_turn' | 'find_files' | 'read_docs' | 'read_files' | 'run_file_change_hooks' | 'run_terminal_command' | 'send_agent_message' | 'set_messages' | 'set_output' | 'spawn_agents' | 'spawn_agents_async' | 'str_replace' | 'think_deeply' | 'update_subgoal' | 'web_search' | 'write_file'\n+export type ToolName =\n+  | 'add_message'\n+  | 'add_subgoal'\n+  | 'browser_logs'\n+  | 'code_search'\n+  | 'create_plan'\n+  | 'end_turn'\n+  | 'find_files'\n+  | 'read_docs'\n+  | 'read_files'\n+  | 'run_file_change_hooks'\n+  | 'run_terminal_command'\n+  | 'set_messages'\n+  | 'set_output'\n+  | 'spawn_agents'\n+  | 'spawn_agents_async'\n+  | 'spawn_agent_inline'\n+  | 'str_replace'\n+  | 'think_deeply'\n+  | 'update_subgoal'\n+  | 'web_search'\n+  | 'write_file'\n \n /**\n  * Map of tool names to their parameter types\n  */\n export interface ToolParamsMap {\n-  'add_message': AddMessageParams\n-  'add_subgoal': AddSubgoalParams\n-  'browser_logs': BrowserLogsParams\n-  'code_search': CodeSearchParams\n-  'create_plan': CreatePlanParams\n-  'end_turn': EndTurnParams\n-  'find_files': FindFilesParams\n-  'read_docs': ReadDocsParams\n-  'read_files': ReadFilesParams\n-  'run_file_change_hooks': RunFileChangeHooksParams\n-  'run_terminal_command': RunTerminalCommandParams\n-  'send_agent_message': SendAgentMessageParams\n-  'set_messages': SetMessagesParams\n-  'set_output': SetOutputParams\n-  'spawn_agents': SpawnAgentsParams\n-  'spawn_agents_async': SpawnAgentsAsyncParams\n-  'str_replace': StrReplaceParams\n-  'think_deeply': ThinkDeeplyParams\n-  'update_subgoal': UpdateSubgoalParams\n-  'web_search': WebSearchParams\n-  'write_file': WriteFileParams\n+  add_message: AddMessageParams\n+  add_subgoal: AddSubgoalParams\n+  browser_logs: BrowserLogsParams\n+  code_search: CodeSearchParams\n+  create_plan: CreatePlanParams\n+  end_turn: EndTurnParams\n+  find_files: FindFilesParams\n+  read_docs: ReadDocsParams\n+  read_files: ReadFilesParams\n+  run_file_change_hooks: RunFileChangeHooksParams\n+  run_terminal_command: RunTerminalCommandParams\n+  set_messages: SetMessagesParams\n+  set_output: SetOutputParams\n+  spawn_agents: SpawnAgentsParams\n+  spawn_agents_async: SpawnAgentsAsyncParams\n+  spawn_agent_inline: SpawnAgentInlineParams\n+  str_replace: StrReplaceParams\n+  think_deeply: ThinkDeeplyParams\n+  update_subgoal: UpdateSubgoalParams\n+  web_search: WebSearchParams\n+  write_file: WriteFileParams\n }\n \n /**\n  * Add a new message to the conversation history. To be used for complex requests that can't be solved in a single step, as you may forget what happened!\n  */\n export interface AddMessageParams {\n-  \"role\": \"user\" | \"assistant\"\n-  \"content\": string\n+  role: 'user' | 'assistant'\n+  content: string\n }\n \n /**\n  * Add a new subgoal for tracking progress. To be used for complex requests that can't be solved in a single step, as you may forget what happened!\n  */\n export interface AddSubgoalParams {\n-  // A unique identifier for the subgoal. Try to choose the next sequential integer that is not already in use.\n-  \"id\": string\n-  // The objective of the subgoal, concisely and clearly stated.\n-  \"objective\": string\n-  // The status of the subgoal.\n-  \"status\": \"NOT_STARTED\" | \"IN_PROGRESS\" | \"COMPLETE\" | \"ABORTED\"\n-  // A plan for the subgoal.\n-  \"plan\"?: string\n-  // A log message for the subgoal progress.\n-  \"log\"?: string\n+  /** A unique identifier for the subgoal. Try to choose the next sequential integer that is not already in use. */\n+  id: string\n+  /** The objective of the subgoal, concisely and clearly stated. */\n+  objective: string\n+  /** The status of the subgoal. */\n+  status: 'NOT_STARTED' | 'IN_PROGRESS' | 'COMPLETE' | 'ABORTED'\n+  /** A plan for the subgoal. */\n+  plan?: string\n+  /** A log message for the subgoal progress. */\n+  log?: string\n }\n \n /**\n  * Parameters for browser_logs tool\n  */\n export interface BrowserLogsParams {\n-  // The type of browser action to perform (e.g., \"navigate\").\n-  \"type\": string\n-  // The URL to navigate to.\n-  \"url\": string\n-  // When to consider navigation successful. Defaults to 'load'.\n-  \"waitUntil\"?: \"load\" | \"domcontentloaded\" | \"networkidle0\"\n+  /** The type of browser action to perform (e.g., \"navigate\"). */\n+  type: string\n+  /** The URL to navigate to. */\n+  url: string\n+  /** When to consider navigation successful. Defaults to 'load'. */\n+  waitUntil?: 'load' | 'domcontentloaded' | 'networkidle0'\n }\n \n /**\n  * Search for string patterns in the project's files. This tool uses ripgrep (rg), a fast line-oriented search tool. Use this tool only when read_files is not sufficient to find the files you need.\n  */\n export interface CodeSearchParams {\n-  // The pattern to search for.\n-  \"pattern\": string\n-  // Optional ripgrep flags to customize the search (e.g., \"-i\" for case-insensitive, \"-t ts\" for TypeScript files only, \"-A 3\" for 3 lines after match, \"-B 2\" for 2 lines before match, \"--type-not test\" to exclude test files).\n-  \"flags\"?: string\n-  // Optional working directory to search within, relative to the project root. Defaults to searching the entire project.\n-  \"cwd\"?: string\n+  /** The pattern to search for. */\n+  pattern: string\n+  /** Optional ripgrep flags to customize the search (e.g., \"-i\" for case-insensitive, \"-t ts\" for TypeScript files only, \"-A 3\" for 3 lines after match, \"-B 2\" for 2 lines before match, \"--type-not test\" to exclude test files). */\n+  flags?: string\n+  /** Optional working directory to search within, relative to the project root. Defaults to searching the entire project. */\n+  cwd?: string\n }\n \n /**\n  * Generate a detailed markdown plan for complex tasks.\n  */\n export interface CreatePlanParams {\n-  // The path including the filename of a markdown file that will be overwritten with the plan.\n-  \"path\": string\n-  // A detailed plan to solve the user's request.\n-  \"plan\": string\n+  /** The path including the filename of a markdown file that will be overwritten with the plan. */\n+  path: string\n+  /** A detailed plan to solve the user's request. */\n+  plan: string\n }\n \n /**\n  * End your turn, regardless of any new tool results that might be coming. This will allow the user to type another prompt.\n  */\n-export interface EndTurnParams {\n+export interface EndTurnParams {}\n \n-}\n-\n /**\n  * Find several files related to a brief natural language description of the files or the name of a function or class you are looking for.\n  */\n export interface FindFilesParams {\n-  // A brief natural language description of the files or the name of a function or class you are looking for. It's also helpful to mention a directory or two to look within.\n-  \"prompt\": string\n+  /** A brief natural language description of the files or the name of a function or class you are looking for. It's also helpful to mention a directory or two to look within. */\n+  prompt: string\n }\n \n /**\n  * Fetch up-to-date documentation for libraries and frameworks using Context7 API.\n  */\n export interface ReadDocsParams {\n-  // The exact library or framework name (e.g., \"Next.js\", \"MongoDB\", \"React\"). Use the official name as it appears in documentation, not a search query.\n-  \"libraryTitle\": string\n-  // Optional specific topic to focus on (e.g., \"routing\", \"hooks\", \"authentication\")\n-  \"topic\"?: string\n-  // Optional maximum number of tokens to return. Defaults to 10000. Values less than 10000 are automatically increased to 10000.\n-  \"max_tokens\"?: number\n+  /** The exact library or framework name (e.g., \"Next.js\", \"MongoDB\", \"React\"). Use the official name as it appears in documentation, not a search query. */\n+  libraryTitle: string\n+  /** Optional specific topic to focus on (e.g., \"routing\", \"hooks\", \"authentication\") */\n+  topic?: string\n+  /** Optional maximum number of tokens to return. Defaults to 10000. Values less than 10000 are automatically increased to 10000. */\n+  max_tokens?: number\n }\n \n /**\n  * Read the multiple files from disk and return their contents. Use this tool to read as many files as would be helpful to answer the user's request.\n  */\n export interface ReadFilesParams {\n-  // List of file paths to read.\n-  \"paths\": string[]\n+  /** List of file paths to read. */\n+  paths: string[]\n }\n \n /**\n  * Parameters for run_file_change_hooks tool\n  */\n export interface RunFileChangeHooksParams {\n-  // List of file paths that were changed and should trigger file change hooks\n-  \"files\": string[]\n+  /** List of file paths that were changed and should trigger file change hooks */\n+  files: string[]\n }\n \n /**\n  * Execute a CLI command from the **project root** (different from the user's cwd).\n  */\n export interface RunTerminalCommandParams {\n-  // CLI command valid for user's OS.\n-  \"command\": string\n-  // Either SYNC (waits, returns output) or BACKGROUND (runs in background). Default SYNC\n-  \"process_type\": \"SYNC\" | \"BACKGROUND\"\n-  // The working directory to run the command in. Default is the project root.\n-  \"cwd\"?: string\n-  // Set to -1 for no timeout. Does not apply for BACKGROUND commands. Default 30\n-  \"timeout_seconds\": number\n+  /** CLI command valid for user's OS. */\n+  command: string\n+  /** Either SYNC (waits, returns output) or BACKGROUND (runs in background). Default SYNC */\n+  process_type: 'SYNC' | 'BACKGROUND'\n+  /** The working directory to run the command in. Default is the project root. */\n+  cwd?: string\n+  /** Set to -1 for no timeout. Does not apply for BACKGROUND commands. Default 30 */\n+  timeout_seconds: number\n }\n \n /**\n- * Send a message to another agent (parent or child) for communication and data exchange.\n- */\n-export interface SendAgentMessageParams {\n-  // ID of the target agent to send message to. Use \"PARENT_ID\" to send to parent agent.\n-  \"target_agent_id\": string\n-  // Message prompt to send to the target agent\n-  \"prompt\": string\n-  // Optional parameters object to send with the message\n-  \"params\"?: Record<string, any>\n-}\n-\n-/**\n  * Set the conversation history to the provided messages.\n  */\n export interface SetMessagesParams {\n-  \"messages\": {\n-  \"role\": \"user\" | \"assistant\"\n-  \"content\": string\n-}[]\n+  messages: {\n+    role: 'user' | 'assistant'\n+    content: string\n+  }[]\n }\n \n /**\n  * JSON object to set as the agent output. This completely replaces any previous output. If the agent was spawned, this value will be passed back to its parent. If the agent has an outputSchema defined, the output will be validated against it.\n  */\n-export interface SetOutputParams {\n+export interface SetOutputParams {}\n \n-}\n-\n /**\n  * Spawn multiple agents and send a prompt to each of them.\n  */\n export interface SpawnAgentsParams {\n-  \"agents\": {\n-  // Agent to spawn\n-  \"agent_type\": string\n-  // Prompt to send to the agent\n-  \"prompt\"?: string\n-  // Parameters object for the agent (if any)\n-  \"params\"?: Record<string, any>\n-}[]\n+  agents: {\n+    /** Agent to spawn */\n+    agent_type: string\n+    /** Prompt to send to the agent */\n+    prompt?: string\n+    /** Parameters object for the agent (if any) */\n+    params?: Record<string, any>\n+  }[]\n }\n \n /**\n  * Parameters for spawn_agents_async tool\n  */\n export interface SpawnAgentsAsyncParams {\n-  \"agents\": {\n-  // Agent to spawn\n-  \"agent_type\": string\n-  // Prompt to send to the agent\n-  \"prompt\"?: string\n-  // Parameters object for the agent (if any)\n-  \"params\"?: Record<string, any>\n-}[]\n+  agents: {\n+    /** Agent to spawn */\n+    agent_type: string\n+    /** Prompt to send to the agent */\n+    prompt?: string\n+    /** Parameters object for the agent (if any) */\n+    params?: Record<string, any>\n+  }[]\n }\n \n /**\n+ * Spawn a single agent that runs within the current message history.\n+ */\n+export interface SpawnAgentInlineParams {\n+  /** Agent to spawn */\n+  agent_type: string\n+  /** Prompt to send to the agent */\n+  prompt?: string\n+  /** Parameters object for the agent (if any) */\n+  params?: Record<string, any>\n+}\n+\n+/**\n  * Replace strings in a file with new strings.\n  */\n export interface StrReplaceParams {\n-  // The path to the file to edit.\n-  \"path\": string\n-  // Array of replacements to make.\n-  \"replacements\": {\n-  // The string to replace. This must be an *exact match* of the string you want to replace, including whitespace and punctuation.\n-  \"old\": string\n-  // The string to replace the corresponding old string with. Can be empty to delete.\n-  \"new\": string\n-}[]\n+  /** The path to the file to edit. */\n+  path: string\n+  /** Array of replacements to make. */\n+  replacements: {\n+    /** The string to replace. This must be an *exact match* of the string you want to replace, including whitespace and punctuation. */\n+    old: string\n+    /** The string to replace the corresponding old string with. Can be empty to delete. */\n+    new: string\n+  }[]\n }\n \n /**\n  * Deeply consider complex tasks by brainstorming approaches and tradeoffs step-by-step.\n  */\n export interface ThinkDeeplyParams {\n-  // Detailed step-by-step analysis. Initially keep each step concise (max ~5-7 words per step).\n-  \"thought\": string\n+  /** Detailed step-by-step analysis. Initially keep each step concise (max ~5-7 words per step). */\n+  thought: string\n }\n \n /**\n  * Update a subgoal in the context given the id, and optionally the status or plan, or a new log to append. Feel free to update any combination of the status, plan, or log in one invocation.\n  */\n export interface UpdateSubgoalParams {\n-  // The id of the subgoal to update.\n-  \"id\": string\n-  // Change the status of the subgoal.\n-  \"status\"?: \"NOT_STARTED\" | \"IN_PROGRESS\" | \"COMPLETE\" | \"ABORTED\"\n-  // Change the plan for the subgoal.\n-  \"plan\"?: string\n-  // Add a log message to the subgoal. This will create a new log entry and append it to the existing logs. Use this to record your progress and any new information you learned as you go.\n-  \"log\"?: string\n+  /** The id of the subgoal to update. */\n+  id: string\n+  /** Change the status of the subgoal. */\n+  status?: 'NOT_STARTED' | 'IN_PROGRESS' | 'COMPLETE' | 'ABORTED'\n+  /** Change the plan for the subgoal. */\n+  plan?: string\n+  /** Add a log message to the subgoal. This will create a new log entry and append it to the existing logs. Use this to record your progress and any new information you learned as you go. */\n+  log?: string\n }\n \n /**\n  * Search the web for current information using Linkup API.\n  */\n export interface WebSearchParams {\n-  // The search query to find relevant web content\n-  \"query\": string\n-  // Search depth - 'standard' for quick results, 'deep' for more comprehensive search. Default is 'standard'.\n-  \"depth\": \"standard\" | \"deep\"\n+  /** The search query to find relevant web content */\n+  query: string\n+  /** Search depth - 'standard' for quick results, 'deep' for more comprehensive search. Default is 'standard'. */\n+  depth: 'standard' | 'deep'\n }\n \n /**\n  * Create or edit a file with the given content.\n  */\n export interface WriteFileParams {\n-  // Path to the file relative to the **project root**\n-  \"path\": string\n-  // What the change is intended to do in only one sentence.\n-  \"instructions\": string\n-  // Edit snippet to apply to the file.\n-  \"content\": string\n+  /** Path to the file relative to the **project root** */\n+  path: string\n+  /** What the change is intended to do in only one sentence. */\n+  instructions: string\n+  /** Edit snippet to apply to the file. */\n+  content: string\n }\n \n /**\n  * Get parameters type for a specific tool\n"
        }
      ]
    },
    {
      "id": "spawn-inline-agent",
      "sha": "dac33f35484ccbbc3be3652f89796a31fcb63d62",
      "parentSha": "99fde687d379bd6ec604965ca76863b30b72be6b",
      "spec": "Implement an inline agent spawning tool that runs a child agent within the current conversation history and returns control to the parent when the child calls end_turn.\n\nScope and file changes:\n\n1) Common tool registration and schemas\n- common/src/tools/constants.ts\n  - Add 'spawn_agent_inline' to the exported toolNames list (keep ordering consistent with other spawn tools).\n- common/src/tools/list.ts\n  - Import and register spawnAgentInlineParams in the exported tool params map.\n  - Add 'spawn_agent_inline' to the property order map (['agent_type', 'prompt', 'params']).\n- common/src/tools/params/tool/spawn-agent-inline.ts (new)\n  - Define Zod schema for parameters with endsAgentStep = true:\n    - agent_type: string (required)\n    - prompt: string (optional)\n    - params: record<string, any> (optional)\n  - Export as spawnAgentInlineParams with toolName 'spawn_agent_inline'.\n- common/src/tools/params/tool/set-messages.ts\n  - Update messages array item schema to .passthrough() so additional fields (e.g., timeToLive, keepDuringTruncation) are accepted.\n- common/src/util/types/tools.d.ts\n  - Add 'spawn_agent_inline' to the ToolName union.\n  - Add SpawnAgentInlineParams to ToolParamsMap and define the interface (agent_type, prompt?, params?).\n\n2) Backend tool definition and handler\n- backend/src/tools/definitions/list.ts\n  - Import spawnAgentInlineTool and add 'spawn_agent_inline' to the exported definitions map.\n- backend/src/tools/definitions/tool/spawn-agent-inline.ts (new)\n  - Export ToolDescription for toolName 'spawn_agent_inline' describing behavior:\n    - Spawns a single agent inline that shares the current message history and preserves messages added by the child.\n    - Control returns to the parent after the child calls end_turn; this tool does not produce a tool result payload.\n    - Include a getToolCallString example with agent_type, prompt, and params.\n- backend/src/tools/handlers/list.ts\n  - Import handleSpawnAgentInline and add 'spawn_agent_inline' to the handlers map.\n- backend/src/tools/handlers/tool/spawn-agent-inline.ts (new)\n  - Implement handleSpawnAgentInline with the following behavior:\n    - Validate required state: ws, fingerprintId, agentTemplate (parent), localAgentTemplates, messages, and agentState; throw explicit errors if missing.\n    - Resolve the child agent template via getAgentTemplate(agent_type) and ensure the parent template’s subagents includes the child type; otherwise throw.\n    - Validate prompt and params against the child agent’s inputSchema if present (safeParse; throw on failure).\n    - Create a child AgentState that:\n      - Inherits parent agentContext directly.\n      - Uses getLatestState().messages as the messageHistory (shared by reference with the parent).\n      - Sets stepsRemaining to 20 and parentId to the parent’s agentId.\n    - Dynamically import loopAgentSteps and execute the child agent with the provided prompt/params.\n    - After completion, treat the shared message array as the source of truth. Run expireMessages(..., 'userPrompt') to drop userPrompt TTL messages added during inline execution.\n    - Update state.messages and parent agentState.messageHistory with the final messages.\n    - Return a result Promise that resolves to undefined so no tool_result is emitted for this tool. Ends step (endsAgentStep true).\n\n3) Tests for inline behavior and message flow\n- backend/src/__tests__/run-agent-step-tools.test.ts\n  - Import live-user-inputs and spy to simulate an active session: checkLiveUserInput returns true and no-ops for startUserInput/endUserInput/setSessionConnected.\n  - Do not mock requestToolCall to allow real tool execution pipeline.\n  - Tweak existing expectations (e.g., update text from 'Test user prompt' to 'Test instructions prompt').\n  - Expand message sequence assertions to verify the precise ordering and content of messages, taking into account that stepPrompt with timeToLive: 'agentStep' is removed by expireMessages.\n  - Add an integration test named 'should spawn agent inline that deletes last two assistant messages':\n    - Define a child agent template 'message-deleter-agent' with handleSteps that yields set_messages to remove the two most recent assistant messages from the shared history.\n    - Define a parent agent template that has toolNames including 'spawn_agent_inline' and allows 'message-deleter-agent' in subagents.\n    - Mock the streamed LLM output to yield a spawn_agent_inline tool call targeting the message-deleter child with a prompt.\n    - Seed agentState.messageHistory with interleaved user/assistant messages.\n    - Run runAgentStep and assert that:\n      - The inline agent ran within the same message history (deletions applied).\n      - TTL messages from the inline agent’s prompts were removed by expiration.\n      - Final message sequence matches expected ordering and count.\n\nConstraints and behaviors to preserve:\n- No tool_result should be emitted for spawn_agent_inline; the handler must return undefined and the history mutation is the observable effect.\n- The inline child runs to completion (until end_turn), then control returns to the parent.\n- The parent’s message history uses the same array reference during inline execution; after the child completes, apply expireMessages with 'userPrompt'.\n- Subagent permission checks must be enforced via parentAgentTemplate.subagents inclusion.\n- Prompt and params must be validated against the child’s inputSchema when defined.\n- Ensure set_messages accepts and preserves fields like timeToLive and keepDuringTruncation due to .passthrough().",
      "prompt": "Add a new tool that lets an agent spawn a child agent inline, sharing the current conversation history and returning control after the child ends its turn. Register the tool across shared schemas and backend registries, implement the handler to run the child agent within the same message list, and ensure no separate tool result is emitted—the shared history updates are the effect. Update tests to cover inline spawning, message deletion via set_messages, and TTL-based expiration of temporary prompts. Preserve subagent permission checks and schema validation for prompt and params.",
      "supplementalFiles": [
        "backend/src/run-agent-step.ts",
        "backend/src/tools/stream-parser.ts",
        "backend/src/tools/tool-executor.ts",
        "backend/src/tools/handlers/tool/spawn-agents.ts",
        "backend/src/tools/handlers/tool/spawn-agents-async.ts",
        "backend/src/util/messages.ts",
        "common/src/types/dynamic-agent-template.ts",
        "common/src/types/message.ts"
      ],
      "fileDiffs": [
        {
          "path": "backend/src/__tests__/run-agent-step-tools.test.ts",
          "status": "modified",
          "diff": "Index: backend/src/__tests__/run-agent-step-tools.test.ts\n===================================================================\n--- backend/src/__tests__/run-agent-step-tools.test.ts\t99fde68 (parent)\n+++ backend/src/__tests__/run-agent-step-tools.test.ts\tdac33f3 (commit)\n@@ -20,8 +20,9 @@\n } from 'bun:test'\n \n // Mock imports\n import * as aisdk from '../llm-apis/vercel-ai-sdk/ai-sdk'\n+import * as liveUserInputs from '../live-user-inputs'\n import { runAgentStep } from '../run-agent-step'\n import { clearAgentGeneratorCache } from '../run-programmatic-step'\n import { assembleLocalAgentTemplates } from '../templates/agent-registry'\n import * as websocketAction from '../websockets/websocket-action'\n@@ -52,8 +53,14 @@\n     spyOn(bigquery, 'insertTrace').mockImplementation(() =>\n       Promise.resolve(true),\n     )\n \n+    // Mock live user inputs to always return true (simulating active session)\n+    spyOn(liveUserInputs, 'checkLiveUserInput').mockImplementation(() => true)\n+    spyOn(liveUserInputs, 'startUserInput').mockImplementation(() => {})\n+    spyOn(liveUserInputs, 'endUserInput').mockImplementation(() => {})\n+    spyOn(liveUserInputs, 'setSessionConnected').mockImplementation(() => {})\n+\n     spyOn(websocketAction, 'requestFiles').mockImplementation(\n       async (ws: any, paths: string[]) => {\n         const results: Record<string, string | null> = {}\n         paths.forEach((p) => {\n@@ -79,12 +86,9 @@\n         return null\n       },\n     )\n \n-    spyOn(websocketAction, 'requestToolCall').mockImplementation(async () => ({\n-      success: true,\n-      result: 'Tool call success' as any,\n-    }))\n+    // Don't mock requestToolCall for integration test - let real tool execution happen\n \n     // Mock LLM APIs\n     spyOn(aisdk, 'promptAiSdk').mockImplementation(() =>\n       Promise.resolve('Test response'),\n@@ -147,9 +151,10 @@\n     })\n \n     const sessionState = getInitialSessionState(mockFileContext)\n     const agentState = sessionState.mainAgentState\n-    const { agentTemplates: localAgentTemplates } = assembleLocalAgentTemplates(mockFileContext)\n+    const { agentTemplates: localAgentTemplates } =\n+      assembleLocalAgentTemplates(mockFileContext)\n \n     const result = await runAgentStep(\n       new MockWebSocket() as unknown as WebSocket,\n       {\n@@ -179,17 +184,17 @@\n         message: 'Analysis complete',\n         status: 'success',\n         findings: ['Bug in auth.ts', 'Missing validation'],\n       }) + getToolCallString('end_turn', {})\n-    console.log('mockResponse', mockResponse)\n \n     spyOn(aisdk, 'promptAiSdkStream').mockImplementation(async function* () {\n       yield mockResponse\n     })\n \n     const sessionState = getInitialSessionState(mockFileContext)\n     const agentState = sessionState.mainAgentState\n-    const { agentTemplates: localAgentTemplates } = assembleLocalAgentTemplates(mockFileContext)\n+    const { agentTemplates: localAgentTemplates } =\n+      assembleLocalAgentTemplates(mockFileContext)\n \n     const result = await runAgentStep(\n       new MockWebSocket() as unknown as WebSocket,\n       {\n@@ -232,9 +237,10 @@\n     agentState.output = {\n       existingField: 'original value',\n       anotherField: 'unchanged',\n     }\n-    const { agentTemplates: localAgentTemplates } = assembleLocalAgentTemplates(mockFileContext)\n+    const { agentTemplates: localAgentTemplates } =\n+      assembleLocalAgentTemplates(mockFileContext)\n \n     const result = await runAgentStep(\n       new MockWebSocket() as unknown as WebSocket,\n       {\n@@ -268,9 +274,10 @@\n \n     const sessionState = getInitialSessionState(mockFileContext)\n     const agentState = sessionState.mainAgentState\n     agentState.output = { existingField: 'value' }\n-    const { agentTemplates: localAgentTemplates } = assembleLocalAgentTemplates(mockFileContext)\n+    const { agentTemplates: localAgentTemplates } =\n+      assembleLocalAgentTemplates(mockFileContext)\n \n     const result = await runAgentStep(\n       new MockWebSocket() as unknown as WebSocket,\n       {\n@@ -304,9 +311,9 @@\n       includeMessageHistory: true,\n       toolNames: ['read_files', 'end_turn'],\n       subagents: [],\n       systemPrompt: 'Test system prompt',\n-      instructionsPrompt: 'Test user prompt',\n+      instructionsPrompt: 'Test instructions prompt',\n       stepPrompt: 'Test agent step prompt',\n       handleSteps: function* ({ agentState, prompt, params }) {\n         // Yield one tool call\n         yield {\n@@ -367,52 +374,181 @@\n     // Should end turn because toolCalls.length === 0 && toolResults.length === 0 from LLM processing\n     // (The programmatic step tool results don't count toward this calculation)\n     expect(result.shouldEndTurn).toBe(true)\n \n-    const messageHistory = result.agentState.messageHistory\n+    const finalMessages = result.agentState.messageHistory\n \n-    // Verify exactly five messages were added: user prompt, user input prompt, tool call, tool result, and assistant response\n-    expect(messageHistory.length).toBe(initialMessageCount + 5)\n+    // Verify the exact sequence of messages in the final message history\n+    // The stepPrompt with timeToLive: 'agentStep' is removed by expireMessages\n+    const expectedMessages = [\n+      {\n+        role: 'user',\n+        content: expect.stringContaining('Test the handleSteps functionality'),\n+      },\n+      {\n+        role: 'user',\n+        content: expect.stringContaining('Test instructions prompt'),\n+      },\n+      {\n+        role: 'user',\n+        content: expect.stringContaining('read_files'),\n+      },\n+      {\n+        role: 'user',\n+        content: expect.stringContaining('testFunction'),\n+      },\n+      {\n+        role: 'assistant',\n+        content: 'Continuing with the analysis...',\n+      },\n+    ]\n \n-    // Get the five new messages\n-    const newMessages = messageHistory.slice(initialMessageCount)\n+    const newMessages = finalMessages.slice(initialMessageCount)\n \n-    // First message: user prompt (user role)\n-    const userPromptMessage = newMessages[0]\n-    expect(userPromptMessage.role).toBe('user')\n-    expect(typeof userPromptMessage.content).toBe('string')\n-    expect(userPromptMessage.content).toContain(\n-      'Test the handleSteps functionality',\n+    expectedMessages.forEach((expected, index) => {\n+      expect(newMessages[index]).toMatchObject(expected)\n+    })\n+    expect(newMessages).toHaveLength(expectedMessages.length)\n+\n+    // Verify requestFiles was called with correct parameters\n+    expect(websocketAction.requestFiles).toHaveBeenCalledWith(\n+      expect.any(Object), // WebSocket\n+      ['src/test.ts'],\n     )\n+  })\n \n-    // Second message: user input prompt (user role)\n-    const instructionsPromptMessage = newMessages[1]\n-    expect(instructionsPromptMessage.role).toBe('user')\n-    expect(typeof instructionsPromptMessage.content).toBe('string')\n-    expect(instructionsPromptMessage.content).toContain('Test user prompt')\n+  it('should spawn agent inline that deletes last two assistant messages', async () => {\n+    // Create a mock inline agent template that deletes messages\n+    const mockInlineAgentTemplate: AgentTemplate = {\n+      id: 'message-deleter-agent',\n+      displayName: 'Message Deleter Agent',\n+      parentPrompt: 'Deletes assistant messages',\n+      model: 'claude-3-5-sonnet-20241022',\n+      inputSchema: {},\n+      outputMode: 'json' as const,\n+      includeMessageHistory: true,\n+      toolNames: ['set_messages', 'end_turn'],\n+      subagents: [],\n+      systemPrompt: 'Delete messages system prompt',\n+      instructionsPrompt: 'Delete messages instructions prompt',\n+      stepPrompt: 'Delete messages step prompt',\n+      handleSteps: function* ({ agentState, prompt, params }) {\n+        // Delete the last two assistant messages by doing two iterations\n+        const messages = [...agentState.messageHistory]\n \n-    // Third message: read_files tool call (user role)\n-    const toolCallMessage = newMessages[2]\n-    expect(toolCallMessage.role).toBe('user')\n-    expect(typeof toolCallMessage.content).toBe('string')\n-    expect(toolCallMessage.content).toContain('read_files')\n-    expect(toolCallMessage.content).toContain('src/test.ts')\n+        // First iteration: find and remove the last assistant message\n+        for (let i = messages.length - 1; i >= 0; i--) {\n+          if (messages[i].role === 'assistant') {\n+            messages.splice(i, 1)\n+            break\n+          }\n+        }\n \n-    // Fourth message: read_files tool result (user role)\n-    const toolResultMessage = newMessages[3]\n-    expect(toolResultMessage.role).toBe('user')\n-    expect(typeof toolResultMessage.content).toBe('string')\n-    expect(toolResultMessage.content).toContain('testFunction')\n+        // Second iteration: find and remove the next-to-last assistant message\n+        for (let i = messages.length - 1; i >= 0; i--) {\n+          if (messages[i].role === 'assistant') {\n+            messages.splice(i, 1)\n+            break\n+          }\n+        }\n \n-    // Fifth message: assistant response (assistant role)\n-    const assistantMessage = newMessages[4]\n-    expect(assistantMessage.role).toBe('assistant')\n-    expect(typeof assistantMessage.content).toBe('string')\n-    expect(assistantMessage.content).toBe('Continuing with the analysis...')\n+        // Set the updated messages\n+        yield {\n+          toolName: 'set_messages',\n+          args: { messages },\n+        }\n+      },\n+    }\n \n-    // Verify requestFiles was called with correct parameters\n-    expect(websocketAction.requestFiles).toHaveBeenCalledWith(\n-      expect.any(Object), // WebSocket\n-      ['src/test.ts'],\n+    // Create a parent agent template that can spawn the inline agent\n+    const mockParentAgentTemplate: AgentTemplate = {\n+      id: 'parent-agent',\n+      displayName: 'Parent Agent',\n+      parentPrompt: 'Parent agent that spawns inline agents',\n+      model: 'claude-3-5-sonnet-20241022',\n+      inputSchema: {},\n+      outputMode: 'json' as const,\n+      includeMessageHistory: true,\n+      toolNames: ['spawn_agent_inline', 'end_turn'],\n+      subagents: ['message-deleter-agent'],\n+      systemPrompt: 'Parent system prompt',\n+      instructionsPrompt: 'Parent instructions prompt',\n+      stepPrompt: 'Parent step prompt',\n+    }\n+\n+    // Mock the agent registry to include both agents\n+    const mockAgentRegistry = {\n+      'parent-agent': mockParentAgentTemplate,\n+      'message-deleter-agent': mockInlineAgentTemplate,\n+    }\n+\n+    // Mock the LLM stream to spawn the inline agent\n+    spyOn(aisdk, 'promptAiSdkStream').mockImplementation(async function* () {\n+      yield getToolCallString('spawn_agent_inline', {\n+        agent_type: 'message-deleter-agent',\n+        prompt: 'Delete the last two assistant messages',\n+      })\n+    })\n+\n+    const sessionState = getInitialSessionState(mockFileContext)\n+    const agentState = sessionState.mainAgentState\n+\n+    // Add some initial messages including assistant messages to delete\n+    agentState.messageHistory = [\n+      { role: 'user', content: 'Hello' },\n+      { role: 'assistant', content: 'Hi there!' },\n+      { role: 'user', content: 'How are you?' },\n+      { role: 'assistant', content: 'I am doing well, thank you!' },\n+      { role: 'user', content: 'Can you help me?' },\n+      { role: 'assistant', content: 'Of course, I would be happy to help!' },\n+    ]\n+\n+    const result = await runAgentStep(\n+      new MockWebSocket() as unknown as WebSocket,\n+      {\n+        userId: TEST_USER_ID,\n+        userInputId: 'test-input',\n+        clientSessionId: 'test-session',\n+        fingerprintId: 'test-fingerprint',\n+        onResponseChunk: () => {},\n+        agentType: 'parent-agent' as any,\n+        fileContext: mockFileContext,\n+        localAgentTemplates: mockAgentRegistry,\n+        agentState,\n+        prompt: 'Spawn an inline agent to clean up messages',\n+        params: undefined,\n+      },\n     )\n+\n+    const finalMessages = result.agentState.messageHistory\n+\n+    // This integration test demonstrates that spawn_agent_inline tool calls are executed successfully!\n+    // The inline agent runs its handleSteps function and executes tool calls\n+\n+    // Verify the exact sequence of messages in the final message history\n+    // The inline agent's instructionsPrompt and stepPrompt should be removed by expireMessages\n+    const expectedMessages = [\n+      { role: 'user', content: 'Hello' },\n+      { role: 'assistant', content: 'Hi there!' },\n+      { role: 'user', content: 'How are you?' },\n+      { role: 'assistant', content: 'I am doing well, thank you!' },\n+      { role: 'user', content: 'Can you help me?' },\n+      {\n+        role: 'user',\n+        content: expect.stringContaining(\n+          'Spawn an inline agent to clean up messages',\n+        ),\n+      },\n+      {\n+        role: 'user',\n+        content: expect.stringContaining(\n+          'Delete the last two assistant messages',\n+        ),\n+      },\n+    ]\n+\n+    expectedMessages.forEach((expected, index) => {\n+      expect(finalMessages[index]).toMatchObject(expected)\n+    })\n+    expect(finalMessages).toHaveLength(expectedMessages.length)\n   })\n })\n"
        },
        {
          "path": "backend/src/tools/definitions/list.ts",
          "status": "modified",
          "diff": "Index: backend/src/tools/definitions/list.ts\n===================================================================\n--- backend/src/tools/definitions/list.ts\t99fde68 (parent)\n+++ backend/src/tools/definitions/list.ts\tdac33f3 (commit)\n@@ -15,8 +15,9 @@\n import { setMessagesTool } from './tool/set-messages'\n import { setOutputTool } from './tool/set-output'\n import { spawnAgentsTool } from './tool/spawn-agents'\n import { spawnAgentsAsyncTool } from './tool/spawn-agents-async'\n+import { spawnAgentInlineTool } from './tool/spawn-agent-inline'\n import { strReplaceTool } from './tool/str-replace'\n import { thinkDeeplyTool } from './tool/think-deeply'\n import { updateSubgoalTool } from './tool/update-subgoal'\n import { webSearchTool } from './tool/web-search'\n@@ -42,8 +43,9 @@\n   set_messages: setMessagesTool,\n   set_output: setOutputTool,\n   spawn_agents: spawnAgentsTool,\n   spawn_agents_async: spawnAgentsAsyncTool,\n+  spawn_agent_inline: spawnAgentInlineTool,\n   str_replace: strReplaceTool,\n   think_deeply: thinkDeeplyTool,\n   update_subgoal: updateSubgoalTool,\n   web_search: webSearchTool,\n"
        },
        {
          "path": "backend/src/tools/definitions/tool/spawn-agent-inline.ts",
          "status": "added",
          "diff": "Index: backend/src/tools/definitions/tool/spawn-agent-inline.ts\n===================================================================\n--- backend/src/tools/definitions/tool/spawn-agent-inline.ts\t99fde68 (parent)\n+++ backend/src/tools/definitions/tool/spawn-agent-inline.ts\tdac33f3 (commit)\n@@ -1,1 +1,25 @@\n-[NEW FILE]\n\\ No newline at end of file\n+import { getToolCallString } from '@codebuff/common/tools/utils'\n+\n+import type { ToolDescription } from '../tool-def-type'\n+\n+const toolName = 'spawn_agent_inline'\n+export const spawnAgentInlineTool = {\n+  toolName,\n+  description: `\n+Spawn a single agent that runs within the current message history. \n+The spawned agent sees all previous messages and any messages it adds \n+are preserved when control returns to you.\n+\n+This is useful for:\n+- Delegating specific tasks while maintaining context\n+- Having specialized agents process information inline\n+- Managing message history (e.g., summarization)\n+The agent will run until it calls end_turn, then control returns to you. There is no tool result for this tool.\n+Example:\n+${getToolCallString(toolName, {\n+  agent_type: 'file-picker',\n+  prompt: 'Find files related to authentication',\n+  params: { paths: ['src/auth.ts', 'src/user.ts'] },\n+})}\n+    `.trim(),\n+} satisfies ToolDescription\n\\ No newline at end of file\n"
        },
        {
          "path": "backend/src/tools/handlers/list.ts",
          "status": "modified",
          "diff": "Index: backend/src/tools/handlers/list.ts\n===================================================================\n--- backend/src/tools/handlers/list.ts\t99fde68 (parent)\n+++ backend/src/tools/handlers/list.ts\tdac33f3 (commit)\n@@ -13,8 +13,9 @@\n import { handleSetMessages } from './tool/set-messages'\n import { handleSetOutput } from './tool/set-output'\n import { handleSpawnAgents } from './tool/spawn-agents'\n import { handleSpawnAgentsAsync } from './tool/spawn-agents-async'\n+import { handleSpawnAgentInline } from './tool/spawn-agent-inline'\n import { handleStrReplace } from './tool/str-replace'\n import { handleThinkDeeply } from './tool/think-deeply'\n import { handleUpdateSubgoal } from './tool/update-subgoal'\n import { handleWebSearch } from './tool/web-search'\n@@ -48,8 +49,9 @@\n   set_messages: handleSetMessages,\n   set_output: handleSetOutput,\n   spawn_agents: handleSpawnAgents,\n   spawn_agents_async: handleSpawnAgentsAsync,\n+  spawn_agent_inline: handleSpawnAgentInline,\n   str_replace: handleStrReplace,\n   think_deeply: handleThinkDeeply,\n   update_subgoal: handleUpdateSubgoal,\n   web_search: handleWebSearch,\n"
        },
        {
          "path": "backend/src/tools/handlers/tool/spawn-agent-inline.ts",
          "status": "added",
          "diff": "Index: backend/src/tools/handlers/tool/spawn-agent-inline.ts\n===================================================================\n--- backend/src/tools/handlers/tool/spawn-agent-inline.ts\t99fde68 (parent)\n+++ backend/src/tools/handlers/tool/spawn-agent-inline.ts\tdac33f3 (commit)\n@@ -1,1 +1,197 @@\n-[NEW FILE]\n\\ No newline at end of file\n+import { generateCompactId } from '@codebuff/common/util/string'\n+\n+import { getAgentTemplate } from '../../../templates/agent-registry'\n+import { logger } from '../../../util/logger'\n+import { expireMessages } from '../../../util/messages'\n+\n+import type { AgentTemplate } from '@codebuff/common/types/agent-template'\n+import type { CodebuffToolCall } from '../../constants'\n+import type { CodebuffToolHandlerFunction } from '../handler-function-type'\n+import type { CodebuffMessage } from '@codebuff/common/types/message'\n+import type { PrintModeEvent } from '@codebuff/common/types/print-mode'\n+import type {\n+  AgentState,\n+  AgentTemplateType,\n+} from '@codebuff/common/types/session-state'\n+import type { ProjectFileContext } from '@codebuff/common/util/file'\n+import type { WebSocket } from 'ws'\n+\n+export const handleSpawnAgentInline = ((params: {\n+\n+  previousToolCallFinished: Promise<void>\n+  toolCall: CodebuffToolCall<'spawn_agent_inline'>\n+  fileContext: ProjectFileContext\n+  clientSessionId: string\n+  userInputId: string\n+\n+  getLatestState: () => { messages: CodebuffMessage[] }\n+  state: {\n+    ws?: WebSocket\n+    fingerprintId?: string\n+    userId?: string\n+    agentTemplate?: AgentTemplate\n+    localAgentTemplates?: Record<string, AgentTemplate>\n+    messages?: CodebuffMessage[]\n+    agentState?: AgentState\n+  }\n+}): { result: Promise<undefined>; state: {} } => {\n+  const {\n+    previousToolCallFinished,\n+    toolCall,\n+    fileContext,\n+    clientSessionId,\n+    userInputId,\n+    getLatestState,\n+    state,\n+  } = params\n+  const {\n+    agent_type: agentTypeStr,\n+    prompt,\n+    params: agentParams,\n+  } = toolCall.args\n+  const {\n+    ws,\n+    fingerprintId,\n+    userId,\n+    agentTemplate: parentAgentTemplate,\n+    localAgentTemplates,\n+    messages,\n+  } = state\n+  let { agentState } = state\n+\n+  if (!ws) {\n+    throw new Error(\n+      'Internal error for spawn_agent_inline: Missing WebSocket in state',\n+    )\n+  }\n+  if (!fingerprintId) {\n+    throw new Error(\n+      'Internal error for spawn_agent_inline: Missing fingerprintId in state',\n+    )\n+  }\n+  if (!parentAgentTemplate) {\n+    throw new Error(\n+      'Internal error for spawn_agent_inline: Missing agentTemplate in state',\n+    )\n+  }\n+  if (!messages) {\n+    throw new Error(\n+      'Internal error for spawn_agent_inline: Missing messages in state',\n+    )\n+  }\n+  if (!agentState) {\n+    throw new Error(\n+      'Internal error for spawn_agent_inline: Missing agentState in state',\n+    )\n+  }\n+  if (!localAgentTemplates) {\n+    throw new Error(\n+      'Internal error for spawn_agent_inline: Missing localAgentTemplates in state',\n+    )\n+  }\n+\n+  const triggerSpawnAgentInline = async () => {\n+    const agentType = agentTypeStr as AgentTemplateType\n+    const agentTemplate = await getAgentTemplate(agentType, localAgentTemplates)\n+\n+    if (!agentTemplate) {\n+      throw new Error(`Agent type ${agentTypeStr} not found.`)\n+    }\n+\n+    if (!parentAgentTemplate.subagents.includes(agentType)) {\n+      throw new Error(\n+        `Agent type ${parentAgentTemplate.id} is not allowed to spawn child agent type ${agentType}.`,\n+      )\n+    }\n+\n+    // Validate prompt and params against agent's schema\n+    const { inputSchema } = agentTemplate\n+\n+    // Validate prompt requirement\n+    if (inputSchema.prompt) {\n+      const result = inputSchema.prompt.safeParse(prompt)\n+      if (!result.success) {\n+        throw new Error(\n+          `Invalid prompt for agent ${agentType}: ${JSON.stringify(result.error.issues, null, 2)}`,\n+        )\n+      }\n+    }\n+\n+    // Validate params if schema exists\n+    if (inputSchema.params) {\n+      const result = inputSchema.params.safeParse(agentParams)\n+      if (!result.success) {\n+        throw new Error(\n+          `Invalid params for agent ${agentType}: ${JSON.stringify(result.error.issues, null, 2)}`,\n+        )\n+      }\n+    }\n+\n+    const agentId = generateCompactId()\n+\n+    // Create child agent state that shares message history with parent\n+    const childAgentState: AgentState = {\n+      agentId,\n+      agentType,\n+      agentContext: agentState!.agentContext, // Inherit parent context directly\n+      subagents: [],\n+      messageHistory: getLatestState().messages, // Share the same message array\n+      stepsRemaining: 20, // MAX_AGENT_STEPS\n+      output: undefined,\n+      parentId: agentState!.agentId,\n+    }\n+\n+    logger.debug(\n+      {\n+        agentTemplate,\n+        prompt,\n+        params: agentParams,\n+        agentId,\n+        parentId: childAgentState.parentId,\n+      },\n+      `Spawning agent inline — ${agentType} (${agentId})`,\n+    )\n+\n+    // Import loopAgentSteps dynamically to avoid circular dependency\n+    const { loopAgentSteps } = await import('../../../run-agent-step')\n+\n+    const result = await loopAgentSteps(ws, {\n+      userInputId: `${userInputId}-inline-${agentType}${agentId}`,\n+      prompt: prompt || '',\n+      params: agentParams,\n+      agentType: agentTemplate.id,\n+      agentState: childAgentState,\n+      fingerprintId,\n+      fileContext,\n+      localAgentTemplates,\n+      toolResults: [],\n+      userId,\n+      clientSessionId,\n+      onResponseChunk: (chunk: string | PrintModeEvent) => {\n+        // Child agent output is streamed directly to parent's output\n+        // No need for special handling since we share message history\n+      },\n+    })\n+\n+    // Update parent's message history with child's final state\n+    // Since we share the same message array reference, this should already be updated\n+    let finalMessages = result.agentState?.messageHistory || state.messages\n+\n+    // Expire messages with timeToLive: 'userPrompt' to clean up inline agent's temporary messages\n+    finalMessages = expireMessages(finalMessages, 'userPrompt')\n+\n+    state.messages = finalMessages\n+\n+    // Update parent agent state to reflect shared message history\n+    if (agentState && result.agentState) {\n+      agentState.messageHistory = finalMessages\n+    }\n+\n+    return undefined\n+  }\n+\n+  return {\n+    result: previousToolCallFinished.then(triggerSpawnAgentInline),\n+    state: {},\n+  }\n+}) satisfies CodebuffToolHandlerFunction<'spawn_agent_inline'>\n\\ No newline at end of file\n"
        },
        {
          "path": "common/src/tools/constants.ts",
          "status": "modified",
          "diff": "Index: common/src/tools/constants.ts\n===================================================================\n--- common/src/tools/constants.ts\t99fde68 (parent)\n+++ common/src/tools/constants.ts\tdac33f3 (commit)\n@@ -24,8 +24,9 @@\n   'set_messages',\n   'set_output',\n   'spawn_agents',\n   'spawn_agents_async',\n+  'spawn_agent_inline',\n   'str_replace',\n   'think_deeply',\n   'update_subgoal',\n   'web_search',\n"
        },
        {
          "path": "common/src/tools/list.ts",
          "status": "modified",
          "diff": "Index: common/src/tools/list.ts\n===================================================================\n--- common/src/tools/list.ts\t99fde68 (parent)\n+++ common/src/tools/list.ts\tdac33f3 (commit)\n@@ -13,8 +13,9 @@\n import { setMessagesParams } from './params/tool/set-messages'\n import { setOutputParams } from './params/tool/set-output'\n import { spawnAgentsParams } from './params/tool/spawn-agents'\n import { spawnAgentsAsyncParams } from './params/tool/spawn-agents-async'\n+import { spawnAgentInlineParams } from './params/tool/spawn-agent-inline'\n import { strReplaceParams } from './params/tool/str-replace'\n import { thinkDeeplyParams } from './params/tool/think-deeply'\n import { updateSubgoalParams } from './params/tool/update-subgoal'\n import { webSearchParams } from './params/tool/web-search'\n@@ -38,8 +39,9 @@\n   set_messages: setMessagesParams,\n   set_output: setOutputParams,\n   spawn_agents: spawnAgentsParams,\n   spawn_agents_async: spawnAgentsAsyncParams,\n+  spawn_agent_inline: spawnAgentInlineParams,\n   str_replace: strReplaceParams,\n   think_deeply: thinkDeeplyParams,\n   update_subgoal: updateSubgoalParams,\n   web_search: webSearchParams,\n@@ -71,8 +73,9 @@\n \n   send_agent_message: ['target_agent_id', 'prompt', 'params'],\n   spawn_agents: ['agents'],\n   spawn_agents_async: ['agents'],\n+  spawn_agent_inline: ['agent_type', 'prompt', 'params'],\n   set_output: [],\n \n   // Documentation tool\n   read_docs: ['libraryTitle', 'topic', 'max_tokens'],\n"
        },
        {
          "path": "common/src/tools/params/tool/set-messages.ts",
          "status": "modified",
          "diff": "Index: common/src/tools/params/tool/set-messages.ts\n===================================================================\n--- common/src/tools/params/tool/set-messages.ts\t99fde68 (parent)\n+++ common/src/tools/params/tool/set-messages.ts\tdac33f3 (commit)\n@@ -9,12 +9,15 @@\n   endsAgentStep,\n   parameters: z\n     .object({\n       messages: z.array(\n-        z.object({\n-          role: z.enum(['user', 'assistant']),\n-          content: z.string(),\n-        }),\n+        z\n+          .object({\n+            role: z.enum(['user', 'assistant']),\n+            content: z.string(),\n+          })\n+          // Make sure to pass through any additional properties!\n+          .passthrough(),\n       ),\n     })\n     .describe(`Set the conversation history to the provided messages.`),\n } satisfies ToolParams\n"
        },
        {
          "path": "common/src/tools/params/tool/spawn-agent-inline.ts",
          "status": "added",
          "diff": "Index: common/src/tools/params/tool/spawn-agent-inline.ts\n===================================================================\n--- common/src/tools/params/tool/spawn-agent-inline.ts\t99fde68 (parent)\n+++ common/src/tools/params/tool/spawn-agent-inline.ts\tdac33f3 (commit)\n@@ -1,1 +1,20 @@\n-[NEW FILE]\n\\ No newline at end of file\n+import z from 'zod/v4'\n+\n+import type { ToolParams } from '../../constants'\n+\n+const toolName = 'spawn_agent_inline'\n+const endsAgentStep = true\n+export const spawnAgentInlineParams = {\n+  toolName,\n+  endsAgentStep,\n+  parameters: z\n+    .object({\n+      agent_type: z.string().describe('Agent to spawn'),\n+      prompt: z.string().optional().describe('Prompt to send to the agent'),\n+      params: z\n+        .record(z.string(), z.any())\n+        .optional()\n+        .describe('Parameters object for the agent (if any)'),\n+    })\n+    .describe(`Spawn a single agent that runs within the current message history.`),\n+} satisfies ToolParams\n\\ No newline at end of file\n"
        },
        {
          "path": "common/src/util/types/tools.d.ts",
          "status": "modified",
          "diff": "Index: common/src/util/types/tools.d.ts\n===================================================================\n--- common/src/util/types/tools.d.ts\t99fde68 (parent)\n+++ common/src/util/types/tools.d.ts\tdac33f3 (commit)\n@@ -1,265 +1,296 @@\n /**\n  * Union type of all available tool names\n  */\n-export type ToolName = 'add_message' | 'add_subgoal' | 'browser_logs' | 'code_search' | 'create_plan' | 'end_turn' | 'find_files' | 'read_docs' | 'read_files' | 'run_file_change_hooks' | 'run_terminal_command' | 'send_agent_message' | 'set_messages' | 'set_output' | 'spawn_agents' | 'spawn_agents_async' | 'str_replace' | 'think_deeply' | 'update_subgoal' | 'web_search' | 'write_file'\n+export type ToolName =\n+  | 'add_message'\n+  | 'add_subgoal'\n+  | 'browser_logs'\n+  | 'code_search'\n+  | 'create_plan'\n+  | 'end_turn'\n+  | 'find_files'\n+  | 'read_docs'\n+  | 'read_files'\n+  | 'run_file_change_hooks'\n+  | 'run_terminal_command'\n+  | 'send_agent_message'\n+  | 'set_messages'\n+  | 'set_output'\n+  | 'spawn_agents'\n+  | 'spawn_agents_async'\n+  | 'spawn_agent_inline'\n+  | 'str_replace'\n+  | 'think_deeply'\n+  | 'update_subgoal'\n+  | 'web_search'\n+  | 'write_file'\n \n /**\n  * Map of tool names to their parameter types\n  */\n export interface ToolParamsMap {\n-  'add_message': AddMessageParams\n-  'add_subgoal': AddSubgoalParams\n-  'browser_logs': BrowserLogsParams\n-  'code_search': CodeSearchParams\n-  'create_plan': CreatePlanParams\n-  'end_turn': EndTurnParams\n-  'find_files': FindFilesParams\n-  'read_docs': ReadDocsParams\n-  'read_files': ReadFilesParams\n-  'run_file_change_hooks': RunFileChangeHooksParams\n-  'run_terminal_command': RunTerminalCommandParams\n-  'send_agent_message': SendAgentMessageParams\n-  'set_messages': SetMessagesParams\n-  'set_output': SetOutputParams\n-  'spawn_agents': SpawnAgentsParams\n-  'spawn_agents_async': SpawnAgentsAsyncParams\n-  'str_replace': StrReplaceParams\n-  'think_deeply': ThinkDeeplyParams\n-  'update_subgoal': UpdateSubgoalParams\n-  'web_search': WebSearchParams\n-  'write_file': WriteFileParams\n+  add_message: AddMessageParams\n+  add_subgoal: AddSubgoalParams\n+  browser_logs: BrowserLogsParams\n+  code_search: CodeSearchParams\n+  create_plan: CreatePlanParams\n+  end_turn: EndTurnParams\n+  find_files: FindFilesParams\n+  read_docs: ReadDocsParams\n+  read_files: ReadFilesParams\n+  run_file_change_hooks: RunFileChangeHooksParams\n+  run_terminal_command: RunTerminalCommandParams\n+  send_agent_message: SendAgentMessageParams\n+  set_messages: SetMessagesParams\n+  set_output: SetOutputParams\n+  spawn_agents: SpawnAgentsParams\n+  spawn_agents_async: SpawnAgentsAsyncParams\n+  spawn_agent_inline: SpawnAgentInlineParams\n+  str_replace: StrReplaceParams\n+  think_deeply: ThinkDeeplyParams\n+  update_subgoal: UpdateSubgoalParams\n+  web_search: WebSearchParams\n+  write_file: WriteFileParams\n }\n \n /**\n  * Add a new message to the conversation history. To be used for complex requests that can't be solved in a single step, as you may forget what happened!\n  */\n export interface AddMessageParams {\n-  \"role\": \"user\" | \"assistant\"\n-  \"content\": string\n+  role: 'user' | 'assistant'\n+  content: string\n }\n \n /**\n  * Add a new subgoal for tracking progress. To be used for complex requests that can't be solved in a single step, as you may forget what happened!\n  */\n export interface AddSubgoalParams {\n   // A unique identifier for the subgoal. Try to choose the next sequential integer that is not already in use.\n-  \"id\": string\n+  id: string\n   // The objective of the subgoal, concisely and clearly stated.\n-  \"objective\": string\n+  objective: string\n   // The status of the subgoal.\n-  \"status\": \"NOT_STARTED\" | \"IN_PROGRESS\" | \"COMPLETE\" | \"ABORTED\"\n+  status: 'NOT_STARTED' | 'IN_PROGRESS' | 'COMPLETE' | 'ABORTED'\n   // A plan for the subgoal.\n-  \"plan\"?: string\n+  plan?: string\n   // A log message for the subgoal progress.\n-  \"log\"?: string\n+  log?: string\n }\n \n /**\n  * Parameters for browser_logs tool\n  */\n export interface BrowserLogsParams {\n   // The type of browser action to perform (e.g., \"navigate\").\n-  \"type\": string\n+  type: string\n   // The URL to navigate to.\n-  \"url\": string\n+  url: string\n   // When to consider navigation successful. Defaults to 'load'.\n-  \"waitUntil\"?: \"load\" | \"domcontentloaded\" | \"networkidle0\"\n+  waitUntil?: 'load' | 'domcontentloaded' | 'networkidle0'\n }\n \n /**\n  * Search for string patterns in the project's files. This tool uses ripgrep (rg), a fast line-oriented search tool. Use this tool only when read_files is not sufficient to find the files you need.\n  */\n export interface CodeSearchParams {\n   // The pattern to search for.\n-  \"pattern\": string\n+  pattern: string\n   // Optional ripgrep flags to customize the search (e.g., \"-i\" for case-insensitive, \"-t ts\" for TypeScript files only, \"-A 3\" for 3 lines after match, \"-B 2\" for 2 lines before match, \"--type-not test\" to exclude test files).\n-  \"flags\"?: string\n+  flags?: string\n   // Optional working directory to search within, relative to the project root. Defaults to searching the entire project.\n-  \"cwd\"?: string\n+  cwd?: string\n }\n \n /**\n  * Generate a detailed markdown plan for complex tasks.\n  */\n export interface CreatePlanParams {\n   // The path including the filename of a markdown file that will be overwritten with the plan.\n-  \"path\": string\n+  path: string\n   // A detailed plan to solve the user's request.\n-  \"plan\": string\n+  plan: string\n }\n \n /**\n  * End your turn, regardless of any new tool results that might be coming. This will allow the user to type another prompt.\n  */\n-export interface EndTurnParams {\n+export interface EndTurnParams {}\n \n-}\n-\n /**\n  * Find several files related to a brief natural language description of the files or the name of a function or class you are looking for.\n  */\n export interface FindFilesParams {\n   // A brief natural language description of the files or the name of a function or class you are looking for. It's also helpful to mention a directory or two to look within.\n-  \"prompt\": string\n+  prompt: string\n }\n \n /**\n  * Fetch up-to-date documentation for libraries and frameworks using Context7 API.\n  */\n export interface ReadDocsParams {\n   // The exact library or framework name (e.g., \"Next.js\", \"MongoDB\", \"React\"). Use the official name as it appears in documentation, not a search query.\n-  \"libraryTitle\": string\n+  libraryTitle: string\n   // Optional specific topic to focus on (e.g., \"routing\", \"hooks\", \"authentication\")\n-  \"topic\"?: string\n+  topic?: string\n   // Optional maximum number of tokens to return. Defaults to 10000. Values less than 10000 are automatically increased to 10000.\n-  \"max_tokens\"?: number\n+  max_tokens?: number\n }\n \n /**\n  * Read the multiple files from disk and return their contents. Use this tool to read as many files as would be helpful to answer the user's request.\n  */\n export interface ReadFilesParams {\n   // List of file paths to read.\n-  \"paths\": string[]\n+  paths: string[]\n }\n \n /**\n  * Parameters for run_file_change_hooks tool\n  */\n export interface RunFileChangeHooksParams {\n   // List of file paths that were changed and should trigger file change hooks\n-  \"files\": string[]\n+  files: string[]\n }\n \n /**\n  * Execute a CLI command from the **project root** (different from the user's cwd).\n  */\n export interface RunTerminalCommandParams {\n   // CLI command valid for user's OS.\n-  \"command\": string\n+  command: string\n   // Either SYNC (waits, returns output) or BACKGROUND (runs in background). Default SYNC\n-  \"process_type\": \"SYNC\" | \"BACKGROUND\"\n+  process_type: 'SYNC' | 'BACKGROUND'\n   // The working directory to run the command in. Default is the project root.\n-  \"cwd\"?: string\n+  cwd?: string\n   // Set to -1 for no timeout. Does not apply for BACKGROUND commands. Default 30\n-  \"timeout_seconds\": number\n+  timeout_seconds: number\n }\n \n /**\n  * Send a message to another agent (parent or child) for communication and data exchange.\n  */\n export interface SendAgentMessageParams {\n   // ID of the target agent to send message to. Use \"PARENT_ID\" to send to parent agent.\n-  \"target_agent_id\": string\n+  target_agent_id: string\n   // Message prompt to send to the target agent\n-  \"prompt\": string\n+  prompt: string\n   // Optional parameters object to send with the message\n-  \"params\"?: Record<string, any>\n+  params?: Record<string, any>\n }\n \n /**\n  * Set the conversation history to the provided messages.\n  */\n export interface SetMessagesParams {\n-  \"messages\": {\n-  \"role\": \"user\" | \"assistant\"\n-  \"content\": string\n-}[]\n+  messages: {\n+    role: 'user' | 'assistant'\n+    content: string\n+  }[]\n }\n \n /**\n  * JSON object to set as the agent output. This completely replaces any previous output. If the agent was spawned, this value will be passed back to its parent. If the agent has an outputSchema defined, the output will be validated against it.\n  */\n-export interface SetOutputParams {\n+export interface SetOutputParams {}\n \n-}\n-\n /**\n  * Spawn multiple agents and send a prompt to each of them.\n  */\n export interface SpawnAgentsParams {\n-  \"agents\": {\n-  // Agent to spawn\n-  \"agent_type\": string\n-  // Prompt to send to the agent\n-  \"prompt\"?: string\n-  // Parameters object for the agent (if any)\n-  \"params\"?: Record<string, any>\n-}[]\n+  agents: {\n+    // Agent to spawn\n+    agent_type: string\n+    // Prompt to send to the agent\n+    prompt?: string\n+    // Parameters object for the agent (if any)\n+    params?: Record<string, any>\n+  }[]\n }\n \n /**\n  * Parameters for spawn_agents_async tool\n  */\n export interface SpawnAgentsAsyncParams {\n-  \"agents\": {\n+  agents: {\n+    // Agent to spawn\n+    agent_type: string\n+    // Prompt to send to the agent\n+    prompt?: string\n+    // Parameters object for the agent (if any)\n+    params?: Record<string, any>\n+  }[]\n+}\n+\n+/**\n+ * Spawn a single agent that runs within the current message history.\n+ */\n+export interface SpawnAgentInlineParams {\n   // Agent to spawn\n-  \"agent_type\": string\n+  agent_type: string\n   // Prompt to send to the agent\n-  \"prompt\"?: string\n+  prompt?: string\n   // Parameters object for the agent (if any)\n-  \"params\"?: Record<string, any>\n-}[]\n+  params?: Record<string, any>\n }\n \n /**\n  * Replace strings in a file with new strings.\n  */\n export interface StrReplaceParams {\n   // The path to the file to edit.\n-  \"path\": string\n+  path: string\n   // Array of replacements to make.\n-  \"replacements\": {\n-  // The string to replace. This must be an *exact match* of the string you want to replace, including whitespace and punctuation.\n-  \"old\": string\n-  // The string to replace the corresponding old string with. Can be empty to delete.\n-  \"new\": string\n-}[]\n+  replacements: {\n+    // The string to replace. This must be an *exact match* of the string you want to replace, including whitespace and punctuation.\n+    old: string\n+    // The string to replace the corresponding old string with. Can be empty to delete.\n+    new: string\n+  }[]\n }\n \n /**\n  * Deeply consider complex tasks by brainstorming approaches and tradeoffs step-by-step.\n  */\n export interface ThinkDeeplyParams {\n   // Detailed step-by-step analysis. Initially keep each step concise (max ~5-7 words per step).\n-  \"thought\": string\n+  thought: string\n }\n \n /**\n  * Update a subgoal in the context given the id, and optionally the status or plan, or a new log to append. Feel free to update any combination of the status, plan, or log in one invocation.\n  */\n export interface UpdateSubgoalParams {\n   // The id of the subgoal to update.\n-  \"id\": string\n+  id: string\n   // Change the status of the subgoal.\n-  \"status\"?: \"NOT_STARTED\" | \"IN_PROGRESS\" | \"COMPLETE\" | \"ABORTED\"\n+  status?: 'NOT_STARTED' | 'IN_PROGRESS' | 'COMPLETE' | 'ABORTED'\n   // Change the plan for the subgoal.\n-  \"plan\"?: string\n+  plan?: string\n   // Add a log message to the subgoal. This will create a new log entry and append it to the existing logs. Use this to record your progress and any new information you learned as you go.\n-  \"log\"?: string\n+  log?: string\n }\n \n /**\n  * Search the web for current information using Linkup API.\n  */\n export interface WebSearchParams {\n   // The search query to find relevant web content\n-  \"query\": string\n+  query: string\n   // Search depth - 'standard' for quick results, 'deep' for more comprehensive search. Default is 'standard'.\n-  \"depth\": \"standard\" | \"deep\"\n+  depth: 'standard' | 'deep'\n }\n \n /**\n  * Create or edit a file with the given content.\n  */\n export interface WriteFileParams {\n   // Path to the file relative to the **project root**\n-  \"path\": string\n+  path: string\n   // What the change is intended to do in only one sentence.\n-  \"instructions\": string\n+  instructions: string\n   // Edit snippet to apply to the file.\n-  \"content\": string\n+  content: string\n }\n \n /**\n  * Get parameters type for a specific tool\n"
        }
      ]
    },
    {
      "id": "update-sdk-types",
      "sha": "73a0d357e72dde6554f416d30a8fb5ce38eef662",
      "parentSha": "940f3f66b70f13a68ec3b966e0fffcfd856fc3ef",
      "spec": "Implement the following SDK packaging and type layout updates:\n\n1) Add a new types directory and migrate agent type definitions\n- Create sdk/src/types/agent-config.ts containing the agent configuration/type definitions currently provided under src/util/types (AgentConfig, ToolCall, ModelName, SubagentName, etc.). Ensure it imports the tool types from './tools' and re-exports Tools types as in the previous util/types version.\n- Create sdk/src/types/tools.ts containing the ToolName union, ToolParamsMap, and all tool parameter interfaces (ReadFilesParams, WriteFileParams, SpawnAgentsParams, etc.), mirroring the previous util/types version.\n- Update internal imports to use the new location:\n  - In sdk/src/client.ts, change the type import to import type { AgentConfig } from './types/agent-config'.\n  - In sdk/src/index.ts, change the exported type to export type { AgentConfig } from './types/agent-config'.\n- Ensure there are no remaining imports that reference './util/types/agent-config' or './util/types/tools'.\n\n2) Update build scripts and package exports\n- In sdk/package.json:\n  - Bump version to 0.1.6.\n  - Update main/types/exports to point at the built index under dist with the new pathing (main: './dist/sdk/src/index.js', types: './dist/sdk/src/index.d.ts'; exports[\".\"].types/import/default all point to './dist/sdk/src/index.*').\n  - Add 'CHANGELOG.md' to the files array so it is published to npm.\n  - Update the copy-types script to copy into the new src/types directory:\n    - mkdir -p src/types\n    - Copy agent-config.d.ts and tools.d.ts from ../common/src/util/types/ into sdk/src/types/ with .ts extension (as currently done for util/types but targeting the new location).\n\n3) Simplify and adjust the publish script to publish from the sdk directory root\n- In sdk/scripts/publish.js:\n  - Keep the clean and build steps.\n  - Remove all logic that rewrites and writes a package.json into dist or copies files into dist.\n  - Verify package contents with 'npm pack --dry-run' executed from the sdk directory (no cwd: 'dist').\n  - On non-dry-run, publish with 'npm publish' executed from the sdk directory (no cwd: 'dist').\n  - Log success including the package name and version read from the sdk/package.json.\n\n4) Update the changelog\n- In sdk/CHANGELOG.md:\n  - Add a new 0.1.5 section dated 2025-08-09 describing: Complete CodebuffClient, better docs, and a new run() API.\n  - Add or adjust the initial release entry to 0.0.1 dated 2025-08-05 with bullets for initial SDK release including CodebuffClient, runNewChat, and TypeScript support.\n\nAcceptance criteria\n- sdk/src/client.ts and sdk/src/index.ts compile and reference './types/agent-config'.\n- The new files exist under sdk/src/types and contain the agent/tool type definitions (no references remain to src/util/types in code or scripts).\n- sdk/package.json has version 0.1.6, main/types/exports pointing to the dist sdk src index, files includes CHANGELOG.md, and copy-types targets src/types.\n- sdk/scripts/publish.js builds, runs npm pack --dry-run from the sdk directory, and on publish runs npm publish from the sdk directory without writing dist/package.json or copying docs into dist.\n- sdk/CHANGELOG.md reflects the new sections/dates/descriptions.\n",
      "prompt": "In the SDK package, move the agent/tool type definitions into a new src/types directory and update internal imports to use it. Adjust the build step that copies type declarations to target the new directory. Simplify the publishing flow so that verification and publishing occur from the sdk directory (no rewriting package.json in dist). Update the package exports to reference the built index path that aligns with publishing from the sdk directory, include the changelog in package files, bump the version, and update the changelog to document the latest release with the completed client and new run() API.",
      "supplementalFiles": [
        "sdk/tsconfig.json",
        "sdk/PUBLISHING.md",
        "sdk/README.md",
        "sdk/.npmignore"
      ],
      "fileDiffs": [
        {
          "path": "sdk/CHANGELOG.md",
          "status": "modified",
          "diff": "Index: sdk/CHANGELOG.md\n===================================================================\n--- sdk/CHANGELOG.md\t940f3f6 (parent)\n+++ sdk/CHANGELOG.md\t73a0d35 (commit)\n@@ -1,11 +1,18 @@\n # Changelog\n \n All notable changes to the @codebuff/sdk package will be documented in this file.\n \n-## [0.0.1] - 2025-01-05\n+## [0.1.5] - 2025-08-09\n \n ### Added\n+- Complete `CodebuffClient`\n+- Better docs\n+- New `run()` api\n+\n+## [0.0.1] - 2025-08-05\n+\n+### Added\n - Initial release of the Codebuff SDK\n - `CodebuffClient` class for interacting with Codebuff agents\n - `runNewChat` method for starting new chat sessions\n - TypeScript support with full type definitions\n"
        },
        {
          "path": "sdk/package.json",
          "status": "modified",
          "diff": "Index: sdk/package.json\n===================================================================\n--- sdk/package.json\t940f3f6 (parent)\n+++ sdk/package.json\t73a0d35 (commit)\n@@ -1,28 +1,29 @@\n {\n   \"name\": \"@codebuff/sdk\",\n   \"private\": false,\n   \"access\": \"public\",\n-  \"version\": \"0.1.5\",\n+  \"version\": \"0.1.6\",\n   \"description\": \"Official SDK for Codebuff — AI coding agent & framework\",\n   \"license\": \"MIT\",\n   \"type\": \"module\",\n-  \"main\": \"./dist/index.js\",\n-  \"types\": \"./dist/index.d.ts\",\n+  \"main\": \"./dist/sdk/src/index.js\",\n+  \"types\": \"./dist/sdk/src/index.d.ts\",\n   \"exports\": {\n     \".\": {\n-      \"types\": \"./dist/index.d.ts\",\n-      \"import\": \"./dist/index.js\",\n-      \"default\": \"./dist/index.js\"\n+      \"types\": \"./dist/sdk/src/index.d.ts\",\n+      \"import\": \"./dist/sdk/src/index.js\",\n+      \"default\": \"./dist/sdk/src/index.js\"\n     }\n   },\n   \"files\": [\n     \"dist\",\n-    \"README.md\"\n+    \"README.md\",\n+    \"CHANGELOG.md\"\n   ],\n   \"scripts\": {\n     \"build\": \"bun run copy-types && tsc\",\n-    \"copy-types\": \"mkdir -p src/util/types && cp ../common/src/util/types/agent-config.d.ts src/util/types/agent-config.ts && cp ../common/src/util/types/tools.d.ts src/util/types/tools.ts\",\n+    \"copy-types\": \"mkdir -p src/types && cp ../common/src/util/types/agent-config.d.ts src/types/agent-config.ts && cp ../common/src/util/types/tools.d.ts src/types/tools.ts\",\n     \"clean\": \"rm -rf dist\",\n     \"prepare-dist\": \"node scripts/publish.js --dry-run\",\n     \"publish-sdk\": \"node scripts/publish.js --public\",\n     \"publish-dry-run\": \"node scripts/publish.js --dry-run\",\n"
        },
        {
          "path": "sdk/scripts/publish.js",
          "status": "modified",
          "diff": "Index: sdk/scripts/publish.js\n===================================================================\n--- sdk/scripts/publish.js\t940f3f6 (parent)\n+++ sdk/scripts/publish.js\t73a0d35 (commit)\n@@ -24,75 +24,35 @@\n \n function main() {\n   const args = process.argv.slice(2)\n   const isDryRun = args.includes('--dry-run')\n-  \n+\n   log('Starting SDK publishing process...')\n-  \n+\n   // Clean and build\n   log('Cleaning previous build...')\n   run('bun run clean')\n-  \n+\n   log('Building TypeScript...')\n   run('bun run build')\n-  \n-  // Prepare package.json for publishing\n-  log('Preparing package.json for publishing...')\n-  const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'))\n-  \n-  // No workspace dependencies to handle anymore\n-  \n-  // Update paths for publishing from dist directory\n-  packageJson.main = './sdk/src/index.js'\n-  packageJson.types = './sdk/src/index.d.ts'\n-  packageJson.exports = {\n-    '.': {\n-      types: './sdk/src/index.d.ts',\n-      import: './sdk/src/index.js',\n-      default: './sdk/src/index.js'\n-    }\n-  }\n-  \n-  // Update files field to include all built files\n-  packageJson.files = [\n-    'sdk/',\n-    'common/',\n-    'README.md',\n-    'CHANGELOG.md'\n-  ]\n-  \n-  // Write the modified package.json to dist\n-  fs.writeFileSync('dist/package.json', JSON.stringify(packageJson, null, 2))\n-  \n-  // Copy other files\n-  log('Copying additional files...')\n-  const filesToCopy = ['README.md', 'CHANGELOG.md']\n-  \n-  for (const file of filesToCopy) {\n-    if (fs.existsSync(file)) {\n-      fs.copyFileSync(file, `dist/${file}`)\n-      log(`Copied ${file}`)\n-    }\n-  }\n-  \n+\n   // Verify the package\n   log('Verifying package contents...')\n-  run('npm pack --dry-run', { cwd: 'dist' })\n-  \n+  run('npm pack --dry-run')\n+\n   if (isDryRun) {\n     log('Dry run complete! Package is ready for publishing.')\n     log('To publish for real, run: bun run publish-sdk')\n     return\n   }\n-  \n+\n   // Publish\n   log('Publishing to npm...')\n-  const publishCommand = 'npm publish'\n-  run(publishCommand, { cwd: 'dist' })\n+  const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'))\n+  run('npm publish')\n   log('✅ SDK published successfully!')\n   log(`📦 Package: ${packageJson.name}@${packageJson.version}`)\n }\n-  \n+\n if (import.meta.url === `file://${process.argv[1]}`) {\n   main()\n }\n-\n"
        },
        {
          "path": "sdk/src/client.ts",
          "status": "modified",
          "diff": "Index: sdk/src/client.ts\n===================================================================\n--- sdk/src/client.ts\t940f3f6 (parent)\n+++ sdk/src/client.ts\t73a0d35 (commit)\n@@ -13,9 +13,9 @@\n import { getInitialSessionState } from '../../common/src/types/session-state'\n \n import type { PrintModeEvent } from '../../common/src/types/print-mode'\n import type { SessionState } from '../../common/src/types/session-state'\n-import type { AgentConfig } from './util/types/agent-config'\n+import type { AgentConfig } from './types/agent-config'\n \n type ClientToolName = 'write_file' | 'run_terminal_command'\n \n export type CodebuffClientOptions = {\n"
        },
        {
          "path": "sdk/src/index.ts",
          "status": "modified",
          "diff": "Index: sdk/src/index.ts\n===================================================================\n--- sdk/src/index.ts\t940f3f6 (parent)\n+++ sdk/src/index.ts\t73a0d35 (commit)\n@@ -1,4 +1,4 @@\n export { CodebuffClient } from './client'\n export { WebSocketHandler } from './websocket-client'\n export { getInitialSessionState } from '../../common/src/types/session-state'\n-export type { AgentConfig } from './util/types/agent-config'\n+export type { AgentConfig } from './types/agent-config'\n"
        },
        {
          "path": "sdk/src/types/agent-config.ts",
          "status": "added",
          "diff": "Index: sdk/src/types/agent-config.ts\n===================================================================\n--- sdk/src/types/agent-config.ts\t940f3f6 (parent)\n+++ sdk/src/types/agent-config.ts\t73a0d35 (commit)\n@@ -1,1 +1,313 @@\n-[NEW FILE]\n\\ No newline at end of file\n+/**\n+ * Codebuff Agent Type Definitions\n+ *\n+ * This file provides TypeScript type definitions for creating custom Codebuff agents.\n+ * Import these types in your agent files to get full type safety and IntelliSense.\n+ *\n+ * Usage in .agents/your-agent.ts:\n+ *   import { AgentConfig, ToolName, ModelName } from './types/agent-config'\n+ *\n+ *   const config: AgentConfig = {\n+ *     // ... your agent configuration with full type safety ...\n+ *   }\n+ *\n+ *   export default config\n+ */\n+\n+// ============================================================================\n+// Core Agent Configuration Types\n+// ============================================================================\n+\n+export interface AgentConfig {\n+  /** Unique identifier for this agent. Must contain only lowercase letters, numbers, and hyphens, e.g. 'code-reviewer' */\n+  id: string\n+\n+  /** Version string (if not provided, will default to '0.0.1' and be bumped on each publish) */\n+  version?: string\n+\n+  /** Publisher ID for the agent. Must be provided if you want to publish the agent. */\n+  publisher?: string\n+\n+  /** Human-readable name for the agent */\n+  displayName: string\n+\n+  /** AI model to use for this agent. Can be any model in OpenRouter: https://openrouter.ai/models */\n+  model: ModelName\n+\n+  // ============================================================================\n+  // Tools and Subagents\n+  // ============================================================================\n+\n+  /** Tools this agent can use. */\n+  toolNames?: ToolName[]\n+\n+  /** Other agents this agent can spawn. */\n+  subagents?: SubagentName[]\n+\n+  // ============================================================================\n+  // Input and Output\n+  // ============================================================================\n+\n+  /** The input schema required to spawn the agent. Provide a prompt string and/or a params object or none.\n+   * 80% of the time you want just a prompt string with a description:\n+   * inputSchema: {\n+   *   prompt: { type: 'string', description: 'A description of what info would be helpful to the agent' }\n+   * }\n+   */\n+  inputSchema?: {\n+    prompt?: { type: 'string'; description?: string }\n+    params?: JsonSchema\n+  }\n+\n+  /** Whether to include conversation history from the parent agent in context.\n+   *\n+   * Defaults to false.\n+   * Use this if the agent needs to know all the previous messages in the conversation.\n+   */\n+  includeMessageHistory?: boolean\n+\n+  /** How the agent should output a response to its parent (defaults to 'last_message')\n+   *\n+   * last_message: The last message from the agent, typcically after using tools.\n+   *\n+   * all_messages: All messages from the agent, including tool calls and results.\n+   *\n+   * json: Make the agent output a JSON object. Can be used with outputSchema or without if you want freeform json output.\n+   */\n+  outputMode?: 'last_message' | 'all_messages' | 'json'\n+\n+  /** JSON schema for structured output (when outputMode is 'json') */\n+  outputSchema?: JsonSchema\n+\n+  // ============================================================================\n+  // Prompts\n+  // ============================================================================\n+\n+  /** Prompt for when to spawn this agent as a subagent. Include the main purpose and use cases.\n+   *\n+   * This field is key if the agent is a subagent and intended to be spawned. */\n+  parentPrompt?: string\n+\n+  /** Background information for the agent. Fairly optional. Prefer using instructionsPrompt for agent instructions. */\n+  systemPrompt?: string\n+\n+  /** Instructions for the agent.\n+   *\n+   * IMPORTANT: Updating this prompt is the best way to shape the agent's behavior.\n+   * This prompt is inserted after each user input. */\n+  instructionsPrompt?: string\n+\n+  /** Prompt inserted at each agent step.\n+   *\n+   * Powerful for changing the agent's behavior, but usually not necessary for smart models.\n+   * Prefer instructionsPrompt for most instructions. */\n+  stepPrompt?: string\n+\n+  // ============================================================================\n+  // Handle Steps\n+  // ============================================================================\n+\n+  /** Programmatically step the agent forward and run tools.\n+   *\n+   * You can either yield:\n+   * - A tool call object with toolName and args properties.\n+   * - 'STEP' to run agent's model and generate one assistant message.\n+   * - 'STEP_ALL' to run the agent's model until it uses the end_turn tool or stops includes no tool calls in a message.\n+   *\n+   * Or use 'return' to end the turn.\n+   *\n+   * Example 1:\n+   * function* handleSteps({ agentStep, prompt, params}) {\n+   *   const { toolResult } = yield {\n+   *     toolName: 'read_files',\n+   *     args: { paths: ['file1.txt', 'file2.txt'] }\n+   *   }\n+   *   yield 'STEP_ALL'\n+   * }\n+   *\n+   * Example 2:\n+   * handleSteps: function* ({ agentState, prompt, params }) {\n+   *   while (true) {\n+   *     yield {\n+   *       toolName: 'spawn_agents',\n+   *       args: {\n+   *         agents: [\n+   *         {\n+   *           agent_type: 'thinker',\n+   *           prompt: 'Think deeply about the user request',\n+   *         },\n+   *       ],\n+   *     },\n+   *   }\n+   *   yield 'STEP'\n+   * }\n+   * }\n+   */\n+  handleSteps?: (\n+    context: AgentStepContext,\n+  ) => Generator<\n+    ToolCall | 'STEP' | 'STEP_ALL',\n+    void,\n+    { agentState: AgentState; toolResult: ToolResult | undefined }\n+  >\n+}\n+\n+// ============================================================================\n+// Supporting Types\n+// ============================================================================\n+\n+export interface AgentState {\n+  agentId: string\n+  parentId: string\n+  messageHistory: Message[]\n+}\n+\n+/**\n+ * Message in conversation history\n+ */\n+export interface Message {\n+  role: 'user' | 'assistant' | 'system'\n+  content: string\n+  timestamp?: number\n+}\n+\n+/**\n+ * Context provided to handleSteps generator function\n+ */\n+export interface AgentStepContext {\n+  agentState: AgentState\n+  prompt?: string\n+  params?: Record<string, any>\n+}\n+\n+/**\n+ * Tool call object for handleSteps generator\n+ */\n+export type ToolCall<T extends ToolName = ToolName> = {\n+  [K in T]: {\n+    toolName: K\n+    args?: Tools.GetToolParams<K>\n+  }\n+}[T]\n+\n+/**\n+ * Result from executing a tool\n+ */\n+export interface ToolResult {\n+  toolName: string\n+  toolCallId: string\n+  result: string\n+}\n+\n+/**\n+ * JSON Schema definition (for prompt schema or output schema)\n+ */\n+export interface JsonSchema {\n+  type: string\n+  properties?: Record<string, any>\n+  required?: string[]\n+  [key: string]: any\n+}\n+\n+// ============================================================================\n+// Available Tools\n+// ============================================================================\n+\n+/**\n+ * File operation tools\n+ */\n+export type FileTools =\n+  | 'read_files'\n+  | 'write_file'\n+  | 'str_replace'\n+  | 'find_files'\n+\n+/**\n+ * Code analysis tools\n+ */\n+export type CodeAnalysisTools = 'code_search' | 'find_files'\n+\n+/**\n+ * Terminal and system tools\n+ */\n+export type TerminalTools = 'run_terminal_command' | 'run_file_change_hooks'\n+\n+/**\n+ * Web and browser tools\n+ */\n+export type WebTools = 'browser_logs' | 'web_search' | 'read_docs'\n+\n+/**\n+ * Agent management tools\n+ */\n+export type AgentTools =\n+  | 'spawn_agents'\n+  | 'spawn_agents_async'\n+  | 'send_agent_message'\n+  | 'set_messages'\n+  | 'add_message'\n+\n+/**\n+ * Planning and organization tools\n+ */\n+export type PlanningTools =\n+  | 'think_deeply'\n+  | 'create_plan'\n+  | 'add_subgoal'\n+  | 'update_subgoal'\n+\n+/**\n+ * Output and control tools\n+ */\n+export type OutputTools = 'set_output' | 'end_turn'\n+\n+/**\n+ * Common tool combinations for convenience\n+ */\n+export type FileEditingTools = FileTools | 'end_turn'\n+export type ResearchTools = WebTools | 'write_file' | 'end_turn'\n+export type CodeAnalysisToolSet = FileTools | CodeAnalysisTools | 'end_turn'\n+\n+// ============================================================================\n+// Available Models (see: https://openrouter.ai/models)\n+// ============================================================================\n+\n+/**\n+ * AI models available for agents (all models in OpenRouter are supported)\n+ *\n+ * See available models at https://openrouter.ai/models\n+ */\n+export type ModelName =\n+  // Verified OpenRouter Models\n+  | 'anthropic/claude-4-sonnet-20250522'\n+  | 'anthropic/claude-opus-4.1'\n+  | 'anthropic/claude-3.5-haiku-20241022'\n+  | 'anthropic/claude-3.5-sonnet-20240620'\n+  | 'openai/gpt-4o-2024-11-20'\n+  | 'openai/gpt-4o-mini-2024-07-18'\n+  | 'openai/o3'\n+  | 'openai/o4-mini'\n+  | 'openai/o4-mini-high'\n+  | 'google/gemini-2.5-pro'\n+  | 'google/gemini-2.5-flash'\n+  | 'x-ai/grok-4-07-09'\n+  | (string & {})\n+\n+// ============================================================================\n+// Spawnable Agents\n+// ============================================================================\n+\n+/**\n+ * Built-in agents that can be spawned by custom agents\n+ */\n+export type SubagentName =\n+  | 'file-picker'\n+  | 'file-explorer'\n+  | 'researcher'\n+  | 'thinker'\n+  | 'reviewer'\n+  | (string & {})\n+\n+import type * as Tools from './tools'\n+export type { Tools }\n+type ToolName = Tools.ToolName\n"
        },
        {
          "path": "sdk/src/types/tools.ts",
          "status": "added",
          "diff": "Index: sdk/src/types/tools.ts\n===================================================================\n--- sdk/src/types/tools.ts\t940f3f6 (parent)\n+++ sdk/src/types/tools.ts\t73a0d35 (commit)\n@@ -1,1 +1,267 @@\n-[NEW FILE]\n\\ No newline at end of file\n+/**\n+ * Union type of all available tool names\n+ */\n+export type ToolName = 'add_message' | 'add_subgoal' | 'browser_logs' | 'code_search' | 'create_plan' | 'end_turn' | 'find_files' | 'read_docs' | 'read_files' | 'run_file_change_hooks' | 'run_terminal_command' | 'send_agent_message' | 'set_messages' | 'set_output' | 'spawn_agents' | 'spawn_agents_async' | 'str_replace' | 'think_deeply' | 'update_subgoal' | 'web_search' | 'write_file'\n+\n+/**\n+ * Map of tool names to their parameter types\n+ */\n+export interface ToolParamsMap {\n+  'add_message': AddMessageParams\n+  'add_subgoal': AddSubgoalParams\n+  'browser_logs': BrowserLogsParams\n+  'code_search': CodeSearchParams\n+  'create_plan': CreatePlanParams\n+  'end_turn': EndTurnParams\n+  'find_files': FindFilesParams\n+  'read_docs': ReadDocsParams\n+  'read_files': ReadFilesParams\n+  'run_file_change_hooks': RunFileChangeHooksParams\n+  'run_terminal_command': RunTerminalCommandParams\n+  'send_agent_message': SendAgentMessageParams\n+  'set_messages': SetMessagesParams\n+  'set_output': SetOutputParams\n+  'spawn_agents': SpawnAgentsParams\n+  'spawn_agents_async': SpawnAgentsAsyncParams\n+  'str_replace': StrReplaceParams\n+  'think_deeply': ThinkDeeplyParams\n+  'update_subgoal': UpdateSubgoalParams\n+  'web_search': WebSearchParams\n+  'write_file': WriteFileParams\n+}\n+\n+/**\n+ * Add a new message to the conversation history. To be used for complex requests that can't be solved in a single step, as you may forget what happened!\n+ */\n+export interface AddMessageParams {\n+  \"role\": \"user\" | \"assistant\"\n+  \"content\": string\n+}\n+\n+/**\n+ * Add a new subgoal for tracking progress. To be used for complex requests that can't be solved in a single step, as you may forget what happened!\n+ */\n+export interface AddSubgoalParams {\n+  // A unique identifier for the subgoal. Try to choose the next sequential integer that is not already in use.\n+  \"id\": string\n+  // The objective of the subgoal, concisely and clearly stated.\n+  \"objective\": string\n+  // The status of the subgoal.\n+  \"status\": \"NOT_STARTED\" | \"IN_PROGRESS\" | \"COMPLETE\" | \"ABORTED\"\n+  // A plan for the subgoal.\n+  \"plan\"?: string\n+  // A log message for the subgoal progress.\n+  \"log\"?: string\n+}\n+\n+/**\n+ * Parameters for browser_logs tool\n+ */\n+export interface BrowserLogsParams {\n+  // The type of browser action to perform (e.g., \"navigate\").\n+  \"type\": string\n+  // The URL to navigate to.\n+  \"url\": string\n+  // When to consider navigation successful. Defaults to 'load'.\n+  \"waitUntil\"?: \"load\" | \"domcontentloaded\" | \"networkidle0\"\n+}\n+\n+/**\n+ * Search for string patterns in the project's files. This tool uses ripgrep (rg), a fast line-oriented search tool. Use this tool only when read_files is not sufficient to find the files you need.\n+ */\n+export interface CodeSearchParams {\n+  // The pattern to search for.\n+  \"pattern\": string\n+  // Optional ripgrep flags to customize the search (e.g., \"-i\" for case-insensitive, \"-t ts\" for TypeScript files only, \"-A 3\" for 3 lines after match, \"-B 2\" for 2 lines before match, \"--type-not test\" to exclude test files).\n+  \"flags\"?: string\n+  // Optional working directory to search within, relative to the project root. Defaults to searching the entire project.\n+  \"cwd\"?: string\n+}\n+\n+/**\n+ * Generate a detailed markdown plan for complex tasks.\n+ */\n+export interface CreatePlanParams {\n+  // The path including the filename of a markdown file that will be overwritten with the plan.\n+  \"path\": string\n+  // A detailed plan to solve the user's request.\n+  \"plan\": string\n+}\n+\n+/**\n+ * End your turn, regardless of any new tool results that might be coming. This will allow the user to type another prompt.\n+ */\n+export interface EndTurnParams {\n+\n+}\n+\n+/**\n+ * Find several files related to a brief natural language description of the files or the name of a function or class you are looking for.\n+ */\n+export interface FindFilesParams {\n+  // A brief natural language description of the files or the name of a function or class you are looking for. It's also helpful to mention a directory or two to look within.\n+  \"prompt\": string\n+}\n+\n+/**\n+ * Fetch up-to-date documentation for libraries and frameworks using Context7 API.\n+ */\n+export interface ReadDocsParams {\n+  // The exact library or framework name (e.g., \"Next.js\", \"MongoDB\", \"React\"). Use the official name as it appears in documentation, not a search query.\n+  \"libraryTitle\": string\n+  // Optional specific topic to focus on (e.g., \"routing\", \"hooks\", \"authentication\")\n+  \"topic\"?: string\n+  // Optional maximum number of tokens to return. Defaults to 10000. Values less than 10000 are automatically increased to 10000.\n+  \"max_tokens\"?: number\n+}\n+\n+/**\n+ * Read the multiple files from disk and return their contents. Use this tool to read as many files as would be helpful to answer the user's request.\n+ */\n+export interface ReadFilesParams {\n+  // List of file paths to read.\n+  \"paths\": string[]\n+}\n+\n+/**\n+ * Parameters for run_file_change_hooks tool\n+ */\n+export interface RunFileChangeHooksParams {\n+  // List of file paths that were changed and should trigger file change hooks\n+  \"files\": string[]\n+}\n+\n+/**\n+ * Execute a CLI command from the **project root** (different from the user's cwd).\n+ */\n+export interface RunTerminalCommandParams {\n+  // CLI command valid for user's OS.\n+  \"command\": string\n+  // Either SYNC (waits, returns output) or BACKGROUND (runs in background). Default SYNC\n+  \"process_type\": \"SYNC\" | \"BACKGROUND\"\n+  // The working directory to run the command in. Default is the project root.\n+  \"cwd\"?: string\n+  // Set to -1 for no timeout. Does not apply for BACKGROUND commands. Default 30\n+  \"timeout_seconds\": number\n+}\n+\n+/**\n+ * Send a message to another agent (parent or child) for communication and data exchange.\n+ */\n+export interface SendAgentMessageParams {\n+  // ID of the target agent to send message to. Use \"PARENT_ID\" to send to parent agent.\n+  \"target_agent_id\": string\n+  // Message prompt to send to the target agent\n+  \"prompt\": string\n+  // Optional parameters object to send with the message\n+  \"params\"?: Record<string, any>\n+}\n+\n+/**\n+ * Set the conversation history to the provided messages.\n+ */\n+export interface SetMessagesParams {\n+  \"messages\": {\n+  \"role\": \"user\" | \"assistant\"\n+  \"content\": string\n+}[]\n+}\n+\n+/**\n+ * JSON object to set as the agent output. This completely replaces any previous output. If the agent was spawned, this value will be passed back to its parent. If the agent has an outputSchema defined, the output will be validated against it.\n+ */\n+export interface SetOutputParams {\n+\n+}\n+\n+/**\n+ * Spawn multiple agents and send a prompt to each of them.\n+ */\n+export interface SpawnAgentsParams {\n+  \"agents\": {\n+  // Agent to spawn\n+  \"agent_type\": string\n+  // Prompt to send to the agent\n+  \"prompt\"?: string\n+  // Parameters object for the agent (if any)\n+  \"params\"?: Record<string, any>\n+}[]\n+}\n+\n+/**\n+ * Parameters for spawn_agents_async tool\n+ */\n+export interface SpawnAgentsAsyncParams {\n+  \"agents\": {\n+  // Agent to spawn\n+  \"agent_type\": string\n+  // Prompt to send to the agent\n+  \"prompt\"?: string\n+  // Parameters object for the agent (if any)\n+  \"params\"?: Record<string, any>\n+}[]\n+}\n+\n+/**\n+ * Replace strings in a file with new strings.\n+ */\n+export interface StrReplaceParams {\n+  // The path to the file to edit.\n+  \"path\": string\n+  // Array of replacements to make.\n+  \"replacements\": {\n+  // The string to replace. This must be an *exact match* of the string you want to replace, including whitespace and punctuation.\n+  \"old\": string\n+  // The string to replace the corresponding old string with. Can be empty to delete.\n+  \"new\": string\n+}[]\n+}\n+\n+/**\n+ * Deeply consider complex tasks by brainstorming approaches and tradeoffs step-by-step.\n+ */\n+export interface ThinkDeeplyParams {\n+  // Detailed step-by-step analysis. Initially keep each step concise (max ~5-7 words per step).\n+  \"thought\": string\n+}\n+\n+/**\n+ * Update a subgoal in the context given the id, and optionally the status or plan, or a new log to append. Feel free to update any combination of the status, plan, or log in one invocation.\n+ */\n+export interface UpdateSubgoalParams {\n+  // The id of the subgoal to update.\n+  \"id\": string\n+  // Change the status of the subgoal.\n+  \"status\"?: \"NOT_STARTED\" | \"IN_PROGRESS\" | \"COMPLETE\" | \"ABORTED\"\n+  // Change the plan for the subgoal.\n+  \"plan\"?: string\n+  // Add a log message to the subgoal. This will create a new log entry and append it to the existing logs. Use this to record your progress and any new information you learned as you go.\n+  \"log\"?: string\n+}\n+\n+/**\n+ * Search the web for current information using Linkup API.\n+ */\n+export interface WebSearchParams {\n+  // The search query to find relevant web content\n+  \"query\": string\n+  // Search depth - 'standard' for quick results, 'deep' for more comprehensive search. Default is 'standard'.\n+  \"depth\": \"standard\" | \"deep\"\n+}\n+\n+/**\n+ * Create or edit a file with the given content.\n+ */\n+export interface WriteFileParams {\n+  // Path to the file relative to the **project root**\n+  \"path\": string\n+  // What the change is intended to do in only one sentence.\n+  \"instructions\": string\n+  // Edit snippet to apply to the file.\n+  \"content\": string\n+}\n+\n+/**\n+ * Get parameters type for a specific tool\n+ */\n+export type GetToolParams<T extends ToolName> = ToolParamsMap[T]\n"
        }
      ]
    },
    {
      "id": "bundle-agent-types",
      "sha": "5484adde0bd6803aeedb33cc7bc1567789a9671b",
      "parentSha": "5a2f444fd8fcf1f05a7c49978c4948741c2a974d",
      "spec": "- Goal: Internalize AgentConfig and tool type definitions within the SDK so consumers import types directly from @codebuff/sdk without referencing ../../common.\n\nChanges required:\n\n1) Update build scripts in sdk/package.json\n- Replace the build script to first copy type definitions into the SDK, then compile TypeScript.\n- Add a copy-types script that:\n  - Creates sdk/src/util/types if it does not exist.\n  - Copies common/src/util/types/agent-config.d.ts to sdk/src/util/types/agent-config.ts (convert extension to .ts when copying).\n  - Copies common/src/util/types/tools.d.ts to sdk/src/util/types/tools.ts (convert extension to .ts when copying).\n- Ensure prepublishOnly continues to run clean then build.\n\n2) Update type import in sdk/src/client.ts\n- Change the type import for AgentConfig to use the new internal SDK path instead of common:\n  - From: ../../common/src/util/types/agent-config\n  - To: ./util/types/agent-config\n- No other logic changes; keep the use of AgentConfig[] in run() and initialSessionState flow.\n\n3) Update SDK entrypoint exports in sdk/src/index.ts\n- Re-export AgentConfig from the internal types path using a types-only export:\n  - Replace the re-export from ../../common/... with: export type { AgentConfig } from './util/types/agent-config'\n- Keep existing exports for CodebuffClient, WebSocketHandler, and getInitialSessionState as-is.\n\n4) Add type source files within the SDK (under sdk/src/util/types)\n- Create sdk/src/util/types/agent-config.ts\n  - Provide the AgentConfig and related type definitions equivalent to those in common/src/util/types/agent-config.d.ts, adjusted to import its tool types from './tools'.\n  - Ensure it defines the supporting types used by AgentConfig (e.g., ToolCall, ToolResult, JsonSchema, ModelName, SubagentName, AgentState, Message, AgentStepContext) and references types from Tools via: import type * as Tools from './tools'; type ToolName = Tools.ToolName.\n- Create sdk/src/util/types/tools.ts\n  - Provide ToolName union and ToolParamsMap and related tool param interfaces equivalent to common/src/util/types/tools.d.ts so AgentConfig's ToolCall and Tools.GetToolParams work within the SDK.\n\n5) Build behavior\n- After these changes, running the build should copy the type definitions from common into the SDK before tsc runs, ensuring dist contains declarations that expose AgentConfig directly from @codebuff/sdk.\n\nAcceptance criteria:\n- Consumers can import type { AgentConfig } from '@codebuff/sdk' without referencing common.\n- SDK compiles successfully with the new build script.\n- sdk/src/client.ts compiles with the updated local AgentConfig import.\n- Publishing dry run shows dist includes declaration files referencing './util/types/agent-config' rather than '../../common'.",
      "prompt": "Internalize the AgentConfig definition and related tool type definitions within the SDK so that consumers import types directly from @codebuff/sdk. Update the SDK build to copy the .d.ts type sources from the monorepo’s common package into the SDK before compiling, adjust the client to import AgentConfig from the SDK’s local types, and update the SDK entrypoint to re-export AgentConfig as a type. Add the corresponding type files under sdk/src/util/types to mirror the common definitions and keep them self-contained.",
      "supplementalFiles": [
        "sdk/scripts/publish.js",
        "sdk/src/websocket-client.ts",
        "common/src/types/session-state.ts",
        "common/src/types/agent-template.ts",
        "common/src/types/dynamic-agent-template.ts"
      ],
      "fileDiffs": [
        {
          "path": "sdk/package.json",
          "status": "modified",
          "diff": "Index: sdk/package.json\n===================================================================\n--- sdk/package.json\t5a2f444 (parent)\n+++ sdk/package.json\t5484add (commit)\n@@ -19,9 +19,10 @@\n     \"dist\",\n     \"README.md\"\n   ],\n   \"scripts\": {\n-    \"build\": \"tsc\",\n+    \"build\": \"bun run copy-types && tsc\",\n+    \"copy-types\": \"mkdir -p src/util/types && cp ../common/src/util/types/agent-config.d.ts src/util/types/agent-config.ts && cp ../common/src/util/types/tools.d.ts src/util/types/tools.ts\",\n     \"clean\": \"rm -rf dist\",\n     \"prepare-dist\": \"node scripts/publish.js --dry-run\",\n     \"publish-sdk\": \"node scripts/publish.js --public\",\n     \"publish-dry-run\": \"node scripts/publish.js --dry-run\",\n"
        },
        {
          "path": "sdk/src/client.ts",
          "status": "modified",
          "diff": "Index: sdk/src/client.ts\n===================================================================\n--- sdk/src/client.ts\t5a2f444 (parent)\n+++ sdk/src/client.ts\t5484add (commit)\n@@ -13,9 +13,9 @@\n import { getInitialSessionState } from '../../common/src/types/session-state'\n \n import type { PrintModeEvent } from '../../common/src/types/print-mode'\n import type { SessionState } from '../../common/src/types/session-state'\n-import type { AgentConfig } from '../../common/src/util/types/agent-config'\n+import type { AgentConfig } from './util/types/agent-config'\n \n type ClientToolName = 'write_file' | 'run_terminal_command'\n \n export type CodebuffClientOptions = {\n"
        },
        {
          "path": "sdk/src/index.ts",
          "status": "modified",
          "diff": "Index: sdk/src/index.ts\n===================================================================\n--- sdk/src/index.ts\t5a2f444 (parent)\n+++ sdk/src/index.ts\t5484add (commit)\n@@ -1,4 +1,4 @@\n export { CodebuffClient } from './client'\n export { WebSocketHandler } from './websocket-client'\n export { getInitialSessionState } from '../../common/src/types/session-state'\n-export { AgentConfig } from '../../common/src/util/types/agent-config'\n+export type { AgentConfig } from './util/types/agent-config'\n"
        },
        {
          "path": "sdk/src/util/types/agent-config.ts",
          "status": "added",
          "diff": "Index: sdk/src/util/types/agent-config.ts\n===================================================================\n--- sdk/src/util/types/agent-config.ts\t5a2f444 (parent)\n+++ sdk/src/util/types/agent-config.ts\t5484add (commit)\n@@ -1,1 +1,313 @@\n-[NEW FILE]\n\\ No newline at end of file\n+/**\n+ * Codebuff Agent Type Definitions\n+ *\n+ * This file provides TypeScript type definitions for creating custom Codebuff agents.\n+ * Import these types in your agent files to get full type safety and IntelliSense.\n+ *\n+ * Usage in .agents/your-agent.ts:\n+ *   import { AgentConfig, ToolName, ModelName } from './types/agent-config'\n+ *\n+ *   const config: AgentConfig = {\n+ *     // ... your agent configuration with full type safety ...\n+ *   }\n+ *\n+ *   export default config\n+ */\n+\n+// ============================================================================\n+// Core Agent Configuration Types\n+// ============================================================================\n+\n+export interface AgentConfig {\n+  /** Unique identifier for this agent. Must contain only lowercase letters, numbers, and hyphens, e.g. 'code-reviewer' */\n+  id: string\n+\n+  /** Version string (if not provided, will default to '0.0.1' and be bumped on each publish) */\n+  version?: string\n+\n+  /** Publisher ID for the agent. Must be provided if you want to publish the agent. */\n+  publisher?: string\n+\n+  /** Human-readable name for the agent */\n+  displayName: string\n+\n+  /** AI model to use for this agent. Can be any model in OpenRouter: https://openrouter.ai/models */\n+  model: ModelName\n+\n+  // ============================================================================\n+  // Tools and Subagents\n+  // ============================================================================\n+\n+  /** Tools this agent can use. */\n+  toolNames?: ToolName[]\n+\n+  /** Other agents this agent can spawn. */\n+  subagents?: SubagentName[]\n+\n+  // ============================================================================\n+  // Input and Output\n+  // ============================================================================\n+\n+  /** The input schema required to spawn the agent. Provide a prompt string and/or a params object or none.\n+   * 80% of the time you want just a prompt string with a description:\n+   * inputSchema: {\n+   *   prompt: { type: 'string', description: 'A description of what info would be helpful to the agent' }\n+   * }\n+   */\n+  inputSchema?: {\n+    prompt?: { type: 'string'; description?: string }\n+    params?: JsonSchema\n+  }\n+\n+  /** Whether to include conversation history from the parent agent in context.\n+   *\n+   * Defaults to false.\n+   * Use this if the agent needs to know all the previous messages in the conversation.\n+   */\n+  includeMessageHistory?: boolean\n+\n+  /** How the agent should output a response to its parent (defaults to 'last_message')\n+   *\n+   * last_message: The last message from the agent, typcically after using tools.\n+   *\n+   * all_messages: All messages from the agent, including tool calls and results.\n+   *\n+   * json: Make the agent output a JSON object. Can be used with outputSchema or without if you want freeform json output.\n+   */\n+  outputMode?: 'last_message' | 'all_messages' | 'json'\n+\n+  /** JSON schema for structured output (when outputMode is 'json') */\n+  outputSchema?: JsonSchema\n+\n+  // ============================================================================\n+  // Prompts\n+  // ============================================================================\n+\n+  /** Prompt for when to spawn this agent as a subagent. Include the main purpose and use cases.\n+   *\n+   * This field is key if the agent is a subagent and intended to be spawned. */\n+  parentPrompt?: string\n+\n+  /** Background information for the agent. Fairly optional. Prefer using instructionsPrompt for agent instructions. */\n+  systemPrompt?: string\n+\n+  /** Instructions for the agent.\n+   *\n+   * IMPORTANT: Updating this prompt is the best way to shape the agent's behavior.\n+   * This prompt is inserted after each user input. */\n+  instructionsPrompt?: string\n+\n+  /** Prompt inserted at each agent step.\n+   *\n+   * Powerful for changing the agent's behavior, but usually not necessary for smart models.\n+   * Prefer instructionsPrompt for most instructions. */\n+  stepPrompt?: string\n+\n+  // ============================================================================\n+  // Handle Steps\n+  // ============================================================================\n+\n+  /** Programmatically step the agent forward and run tools.\n+   *\n+   * You can either yield:\n+   * - A tool call object with toolName and args properties.\n+   * - 'STEP' to run agent's model and generate one assistant message.\n+   * - 'STEP_ALL' to run the agent's model until it uses the end_turn tool or stops includes no tool calls in a message.\n+   *\n+   * Or use 'return' to end the turn.\n+   *\n+   * Example 1:\n+   * function* handleSteps({ agentStep, prompt, params}) {\n+   *   const { toolResult } = yield {\n+   *     toolName: 'read_files',\n+   *     args: { paths: ['file1.txt', 'file2.txt'] }\n+   *   }\n+   *   yield 'STEP_ALL'\n+   * }\n+   *\n+   * Example 2:\n+   * handleSteps: function* ({ agentState, prompt, params }) {\n+   *   while (true) {\n+   *     yield {\n+   *       toolName: 'spawn_agents',\n+   *       args: {\n+   *         agents: [\n+   *         {\n+   *           agent_type: 'thinker',\n+   *           prompt: 'Think deeply about the user request',\n+   *         },\n+   *       ],\n+   *     },\n+   *   }\n+   *   yield 'STEP'\n+   * }\n+   * }\n+   */\n+  handleSteps?: (\n+    context: AgentStepContext,\n+  ) => Generator<\n+    ToolCall | 'STEP' | 'STEP_ALL',\n+    void,\n+    { agentState: AgentState; toolResult: ToolResult | undefined }\n+  >\n+}\n+\n+// ============================================================================\n+// Supporting Types\n+// ============================================================================\n+\n+export interface AgentState {\n+  agentId: string\n+  parentId: string\n+  messageHistory: Message[]\n+}\n+\n+/**\n+ * Message in conversation history\n+ */\n+export interface Message {\n+  role: 'user' | 'assistant' | 'system'\n+  content: string\n+  timestamp?: number\n+}\n+\n+/**\n+ * Context provided to handleSteps generator function\n+ */\n+export interface AgentStepContext {\n+  agentState: AgentState\n+  prompt?: string\n+  params?: Record<string, any>\n+}\n+\n+/**\n+ * Tool call object for handleSteps generator\n+ */\n+export type ToolCall<T extends ToolName = ToolName> = {\n+  [K in T]: {\n+    toolName: K\n+    args?: Tools.GetToolParams<K>\n+  }\n+}[T]\n+\n+/**\n+ * Result from executing a tool\n+ */\n+export interface ToolResult {\n+  toolName: string\n+  toolCallId: string\n+  result: string\n+}\n+\n+/**\n+ * JSON Schema definition (for prompt schema or output schema)\n+ */\n+export interface JsonSchema {\n+  type: string\n+  properties?: Record<string, any>\n+  required?: string[]\n+  [key: string]: any\n+}\n+\n+// ============================================================================\n+// Available Tools\n+// ============================================================================\n+\n+/**\n+ * File operation tools\n+ */\n+export type FileTools =\n+  | 'read_files'\n+  | 'write_file'\n+  | 'str_replace'\n+  | 'find_files'\n+\n+/**\n+ * Code analysis tools\n+ */\n+export type CodeAnalysisTools = 'code_search' | 'find_files'\n+\n+/**\n+ * Terminal and system tools\n+ */\n+export type TerminalTools = 'run_terminal_command' | 'run_file_change_hooks'\n+\n+/**\n+ * Web and browser tools\n+ */\n+export type WebTools = 'browser_logs' | 'web_search' | 'read_docs'\n+\n+/**\n+ * Agent management tools\n+ */\n+export type AgentTools =\n+  | 'spawn_agents'\n+  | 'spawn_agents_async'\n+  | 'send_agent_message'\n+  | 'set_messages'\n+  | 'add_message'\n+\n+/**\n+ * Planning and organization tools\n+ */\n+export type PlanningTools =\n+  | 'think_deeply'\n+  | 'create_plan'\n+  | 'add_subgoal'\n+  | 'update_subgoal'\n+\n+/**\n+ * Output and control tools\n+ */\n+export type OutputTools = 'set_output' | 'end_turn'\n+\n+/**\n+ * Common tool combinations for convenience\n+ */\n+export type FileEditingTools = FileTools | 'end_turn'\n+export type ResearchTools = WebTools | 'write_file' | 'end_turn'\n+export type CodeAnalysisToolSet = FileTools | CodeAnalysisTools | 'end_turn'\n+\n+// ============================================================================\n+// Available Models (see: https://openrouter.ai/models)\n+// ============================================================================\n+\n+/**\n+ * AI models available for agents (all models in OpenRouter are supported)\n+ *\n+ * See available models at https://openrouter.ai/models\n+ */\n+export type ModelName =\n+  // Verified OpenRouter Models\n+  | 'anthropic/claude-4-sonnet-20250522'\n+  | 'anthropic/claude-opus-4.1'\n+  | 'anthropic/claude-3.5-haiku-20241022'\n+  | 'anthropic/claude-3.5-sonnet-20240620'\n+  | 'openai/gpt-4o-2024-11-20'\n+  | 'openai/gpt-4o-mini-2024-07-18'\n+  | 'openai/o3'\n+  | 'openai/o4-mini'\n+  | 'openai/o4-mini-high'\n+  | 'google/gemini-2.5-pro'\n+  | 'google/gemini-2.5-flash'\n+  | 'x-ai/grok-4-07-09'\n+  | (string & {})\n+\n+// ============================================================================\n+// Spawnable Agents\n+// ============================================================================\n+\n+/**\n+ * Built-in agents that can be spawned by custom agents\n+ */\n+export type SubagentName =\n+  | 'file-picker'\n+  | 'file-explorer'\n+  | 'researcher'\n+  | 'thinker'\n+  | 'reviewer'\n+  | (string & {})\n+\n+import type * as Tools from './tools'\n+export type { Tools }\n+type ToolName = Tools.ToolName\n"
        },
        {
          "path": "sdk/src/util/types/tools.ts",
          "status": "added",
          "diff": "Index: sdk/src/util/types/tools.ts\n===================================================================\n--- sdk/src/util/types/tools.ts\t5a2f444 (parent)\n+++ sdk/src/util/types/tools.ts\t5484add (commit)\n@@ -1,1 +1,267 @@\n-[NEW FILE]\n\\ No newline at end of file\n+/**\n+ * Union type of all available tool names\n+ */\n+export type ToolName = 'add_message' | 'add_subgoal' | 'browser_logs' | 'code_search' | 'create_plan' | 'end_turn' | 'find_files' | 'read_docs' | 'read_files' | 'run_file_change_hooks' | 'run_terminal_command' | 'send_agent_message' | 'set_messages' | 'set_output' | 'spawn_agents' | 'spawn_agents_async' | 'str_replace' | 'think_deeply' | 'update_subgoal' | 'web_search' | 'write_file'\n+\n+/**\n+ * Map of tool names to their parameter types\n+ */\n+export interface ToolParamsMap {\n+  'add_message': AddMessageParams\n+  'add_subgoal': AddSubgoalParams\n+  'browser_logs': BrowserLogsParams\n+  'code_search': CodeSearchParams\n+  'create_plan': CreatePlanParams\n+  'end_turn': EndTurnParams\n+  'find_files': FindFilesParams\n+  'read_docs': ReadDocsParams\n+  'read_files': ReadFilesParams\n+  'run_file_change_hooks': RunFileChangeHooksParams\n+  'run_terminal_command': RunTerminalCommandParams\n+  'send_agent_message': SendAgentMessageParams\n+  'set_messages': SetMessagesParams\n+  'set_output': SetOutputParams\n+  'spawn_agents': SpawnAgentsParams\n+  'spawn_agents_async': SpawnAgentsAsyncParams\n+  'str_replace': StrReplaceParams\n+  'think_deeply': ThinkDeeplyParams\n+  'update_subgoal': UpdateSubgoalParams\n+  'web_search': WebSearchParams\n+  'write_file': WriteFileParams\n+}\n+\n+/**\n+ * Add a new message to the conversation history. To be used for complex requests that can't be solved in a single step, as you may forget what happened!\n+ */\n+export interface AddMessageParams {\n+  \"role\": \"user\" | \"assistant\"\n+  \"content\": string\n+}\n+\n+/**\n+ * Add a new subgoal for tracking progress. To be used for complex requests that can't be solved in a single step, as you may forget what happened!\n+ */\n+export interface AddSubgoalParams {\n+  // A unique identifier for the subgoal. Try to choose the next sequential integer that is not already in use.\n+  \"id\": string\n+  // The objective of the subgoal, concisely and clearly stated.\n+  \"objective\": string\n+  // The status of the subgoal.\n+  \"status\": \"NOT_STARTED\" | \"IN_PROGRESS\" | \"COMPLETE\" | \"ABORTED\"\n+  // A plan for the subgoal.\n+  \"plan\"?: string\n+  // A log message for the subgoal progress.\n+  \"log\"?: string\n+}\n+\n+/**\n+ * Parameters for browser_logs tool\n+ */\n+export interface BrowserLogsParams {\n+  // The type of browser action to perform (e.g., \"navigate\").\n+  \"type\": string\n+  // The URL to navigate to.\n+  \"url\": string\n+  // When to consider navigation successful. Defaults to 'load'.\n+  \"waitUntil\"?: \"load\" | \"domcontentloaded\" | \"networkidle0\"\n+}\n+\n+/**\n+ * Search for string patterns in the project's files. This tool uses ripgrep (rg), a fast line-oriented search tool. Use this tool only when read_files is not sufficient to find the files you need.\n+ */\n+export interface CodeSearchParams {\n+  // The pattern to search for.\n+  \"pattern\": string\n+  // Optional ripgrep flags to customize the search (e.g., \"-i\" for case-insensitive, \"-t ts\" for TypeScript files only, \"-A 3\" for 3 lines after match, \"-B 2\" for 2 lines before match, \"--type-not test\" to exclude test files).\n+  \"flags\"?: string\n+  // Optional working directory to search within, relative to the project root. Defaults to searching the entire project.\n+  \"cwd\"?: string\n+}\n+\n+/**\n+ * Generate a detailed markdown plan for complex tasks.\n+ */\n+export interface CreatePlanParams {\n+  // The path including the filename of a markdown file that will be overwritten with the plan.\n+  \"path\": string\n+  // A detailed plan to solve the user's request.\n+  \"plan\": string\n+}\n+\n+/**\n+ * End your turn, regardless of any new tool results that might be coming. This will allow the user to type another prompt.\n+ */\n+export interface EndTurnParams {\n+\n+}\n+\n+/**\n+ * Find several files related to a brief natural language description of the files or the name of a function or class you are looking for.\n+ */\n+export interface FindFilesParams {\n+  // A brief natural language description of the files or the name of a function or class you are looking for. It's also helpful to mention a directory or two to look within.\n+  \"prompt\": string\n+}\n+\n+/**\n+ * Fetch up-to-date documentation for libraries and frameworks using Context7 API.\n+ */\n+export interface ReadDocsParams {\n+  // The exact library or framework name (e.g., \"Next.js\", \"MongoDB\", \"React\"). Use the official name as it appears in documentation, not a search query.\n+  \"libraryTitle\": string\n+  // Optional specific topic to focus on (e.g., \"routing\", \"hooks\", \"authentication\")\n+  \"topic\"?: string\n+  // Optional maximum number of tokens to return. Defaults to 10000. Values less than 10000 are automatically increased to 10000.\n+  \"max_tokens\"?: number\n+}\n+\n+/**\n+ * Read the multiple files from disk and return their contents. Use this tool to read as many files as would be helpful to answer the user's request.\n+ */\n+export interface ReadFilesParams {\n+  // List of file paths to read.\n+  \"paths\": string[]\n+}\n+\n+/**\n+ * Parameters for run_file_change_hooks tool\n+ */\n+export interface RunFileChangeHooksParams {\n+  // List of file paths that were changed and should trigger file change hooks\n+  \"files\": string[]\n+}\n+\n+/**\n+ * Execute a CLI command from the **project root** (different from the user's cwd).\n+ */\n+export interface RunTerminalCommandParams {\n+  // CLI command valid for user's OS.\n+  \"command\": string\n+  // Either SYNC (waits, returns output) or BACKGROUND (runs in background). Default SYNC\n+  \"process_type\": \"SYNC\" | \"BACKGROUND\"\n+  // The working directory to run the command in. Default is the project root.\n+  \"cwd\"?: string\n+  // Set to -1 for no timeout. Does not apply for BACKGROUND commands. Default 30\n+  \"timeout_seconds\": number\n+}\n+\n+/**\n+ * Send a message to another agent (parent or child) for communication and data exchange.\n+ */\n+export interface SendAgentMessageParams {\n+  // ID of the target agent to send message to. Use \"PARENT_ID\" to send to parent agent.\n+  \"target_agent_id\": string\n+  // Message prompt to send to the target agent\n+  \"prompt\": string\n+  // Optional parameters object to send with the message\n+  \"params\"?: Record<string, any>\n+}\n+\n+/**\n+ * Set the conversation history to the provided messages.\n+ */\n+export interface SetMessagesParams {\n+  \"messages\": {\n+  \"role\": \"user\" | \"assistant\"\n+  \"content\": string\n+}[]\n+}\n+\n+/**\n+ * JSON object to set as the agent output. This completely replaces any previous output. If the agent was spawned, this value will be passed back to its parent. If the agent has an outputSchema defined, the output will be validated against it.\n+ */\n+export interface SetOutputParams {\n+\n+}\n+\n+/**\n+ * Spawn multiple agents and send a prompt to each of them.\n+ */\n+export interface SpawnAgentsParams {\n+  \"agents\": {\n+  // Agent to spawn\n+  \"agent_type\": string\n+  // Prompt to send to the agent\n+  \"prompt\"?: string\n+  // Parameters object for the agent (if any)\n+  \"params\"?: Record<string, any>\n+}[]\n+}\n+\n+/**\n+ * Parameters for spawn_agents_async tool\n+ */\n+export interface SpawnAgentsAsyncParams {\n+  \"agents\": {\n+  // Agent to spawn\n+  \"agent_type\": string\n+  // Prompt to send to the agent\n+  \"prompt\"?: string\n+  // Parameters object for the agent (if any)\n+  \"params\"?: Record<string, any>\n+}[]\n+}\n+\n+/**\n+ * Replace strings in a file with new strings.\n+ */\n+export interface StrReplaceParams {\n+  // The path to the file to edit.\n+  \"path\": string\n+  // Array of replacements to make.\n+  \"replacements\": {\n+  // The string to replace. This must be an *exact match* of the string you want to replace, including whitespace and punctuation.\n+  \"old\": string\n+  // The string to replace the corresponding old string with. Can be empty to delete.\n+  \"new\": string\n+}[]\n+}\n+\n+/**\n+ * Deeply consider complex tasks by brainstorming approaches and tradeoffs step-by-step.\n+ */\n+export interface ThinkDeeplyParams {\n+  // Detailed step-by-step analysis. Initially keep each step concise (max ~5-7 words per step).\n+  \"thought\": string\n+}\n+\n+/**\n+ * Update a subgoal in the context given the id, and optionally the status or plan, or a new log to append. Feel free to update any combination of the status, plan, or log in one invocation.\n+ */\n+export interface UpdateSubgoalParams {\n+  // The id of the subgoal to update.\n+  \"id\": string\n+  // Change the status of the subgoal.\n+  \"status\"?: \"NOT_STARTED\" | \"IN_PROGRESS\" | \"COMPLETE\" | \"ABORTED\"\n+  // Change the plan for the subgoal.\n+  \"plan\"?: string\n+  // Add a log message to the subgoal. This will create a new log entry and append it to the existing logs. Use this to record your progress and any new information you learned as you go.\n+  \"log\"?: string\n+}\n+\n+/**\n+ * Search the web for current information using Linkup API.\n+ */\n+export interface WebSearchParams {\n+  // The search query to find relevant web content\n+  \"query\": string\n+  // Search depth - 'standard' for quick results, 'deep' for more comprehensive search. Default is 'standard'.\n+  \"depth\": \"standard\" | \"deep\"\n+}\n+\n+/**\n+ * Create or edit a file with the given content.\n+ */\n+export interface WriteFileParams {\n+  // Path to the file relative to the **project root**\n+  \"path\": string\n+  // What the change is intended to do in only one sentence.\n+  \"instructions\": string\n+  // Edit snippet to apply to the file.\n+  \"content\": string\n+}\n+\n+/**\n+ * Get parameters type for a specific tool\n+ */\n+export type GetToolParams<T extends ToolName> = ToolParamsMap[T]\n"
        }
      ]
    },
    {
      "id": "support-agentconfigs",
      "sha": "2fcbe702b4fbe1c2f9323e2d9ce9177e1c35223d",
      "parentSha": "9fe911cbc20a39af62e6d185a6304352ce20ed2e",
      "spec": "Implement array-based custom agent configuration support in the SDK and introduce a shared AgentConfig type.\n\nRequired changes:\n\n1) Create common/src/util/types/agent-config.ts\n- Define and export the following TypeScript types:\n  - ToolCall: an object with fields toolName: string, args: Record<string, any>, toolCallId: string. This type is consumed by common/src/types/agent-template.ts (already importing from this path) and should match the shape used in session-state toolCallSchema.\n  - AgentConfig: a runtime-friendly shape for user-supplied agent configurations. It must at minimum include id: string, displayName: string, model: string, optional toolNames: string[], optional subagents: string[], optional prompt fields (parentPrompt, systemPrompt, instructionsPrompt, stepPrompt), optional inputSchema and output fields (includeMessageHistory, outputMode: 'last_message'|'all_messages'|'json', outputSchema: any), and handleSteps: string | function (optional). Allow additional properties via an index signature so downstream validation can accept extra fields. Do not import zod here.\n\n2) Update SDK client to accept agentConfigs array and serialize handleSteps\n- File: sdk/src/client.ts\n  - Add: import type { AgentConfig } from '../../common/src/util/types/agent-config'.\n  - Update the public run(...) method signature and JSDoc:\n    - Replace agentConfig?: Record<string, any> with agentConfigs?: AgentConfig[].\n    - Update the JSDoc parameter description to reflect an array of custom agent configurations.\n  - Update the internal initialSessionState(...) helper:\n    - Replace options.agentConfig?: Record<string, any> with options.agentConfigs?: AgentConfig[].\n    - Build a processedAgentTemplates: Record<string, any> by iterating over the agentConfigs array. For each config:\n      - Clone the object.\n      - If handleSteps is a function, replace it with its .toString() value.\n      - If config.id exists, assign processedAgentTemplates[config.id] = processedConfig.\n    - Pass processedAgentTemplates as agentTemplates to getInitialSessionState.\n\n3) Export AgentConfig from SDK entrypoint\n- File: sdk/src/index.ts\n  - Add: export { AgentConfig } from '../../common/src/util/types/agent-config'.\n\n4) Update documentation to reflect the new API\n- File: sdk/README.md\n  - In the usage example for client.run, add an example agentConfigs: [...] entry showing an object with id, model, displayName, instructionsPrompt, and a comment indicating other AgentConfig properties.\n  - In the API Reference Parameters section, replace the agentConfig (singular) entry with agentConfigs (array) and describe it as an array of custom agent configurations satisfying the AgentConfig type.\n  - Maintain existing structure and wording; only update the relevant sections while keeping other content unchanged.\n\nBehavioral expectations:\n- Users can pass multiple custom agents via agentConfigs: AgentConfig[].\n- handleSteps provided as a function will be stringified before being placed into sessionState.fileContext.agentTemplates.\n- The SDK will expose the AgentConfig type to callers via sdk/src/index.ts export.\n- The new ToolCall type location resolves the existing import in common/src/types/agent-template.ts.\n",
      "prompt": "Enhance the SDK to accept multiple custom agents in a single run and provide a reusable AgentConfig type. Introduce a shared type module that defines both AgentConfig (for user-supplied agent definitions) and ToolCall, export AgentConfig from the SDK entrypoint, and update the SDK client API to take an agentConfigs array. When preparing session state, convert this array into the agentTemplates map, stringifying any handleSteps functions. Refresh the README to document agentConfigs with a brief example and update the parameter reference accordingly.",
      "supplementalFiles": [
        "common/src/types/session-state.ts",
        "common/src/types/agent-template.ts",
        "common/src/types/dynamic-agent-template.ts",
        "sdk/src/websocket-client.ts",
        "backend/src/templates/agent-registry.ts",
        "backend/src/websockets/websocket-action.ts"
      ],
      "fileDiffs": [
        {
          "path": "sdk/README.md",
          "status": "modified",
          "diff": "Index: sdk/README.md\n===================================================================\n--- sdk/README.md\t9fe911c (parent)\n+++ sdk/README.md\t2fcbe70 (commit)\n@@ -59,8 +59,19 @@\n   handleEvent: (event) => {\n     // event includes streamed updates like assistant messages and tool calls\n     console.log('event:', event)\n   },\n+\n+  // Custom agents (optional)\n+  agentConfigs: [\n+    {\n+      id: 'my-awesome-agent',\n+      model: 'openai/gpt-5',\n+      displayName: 'My awesome agent'\n+      instructionsPrompt: 'Do something awesome'\n+      // ... other AgentConfig properties\n+    },\n+  ],\n })\n ```\n \n ## API Reference\n@@ -84,15 +95,15 @@\n - **`projectFiles`** (object, optional): All the files in your project as a plain JavaScript object. Keys should be the full path from your current directory to each file, and values should be the string contents of the file. Example: `{ \"src/index.ts\": \"console.log('hi')\" }`. This helps Codebuff pick good source files for context. Note: This parameter was previously named `allFiles` but has been renamed for clarity.\n \n - **`knowledgeFiles`** (object, optional): Knowledge files to inject into every `run()` call. Uses the same schema as `projectFiles` - keys are file paths and values are file contents. These files are added directly to the agent's context.\n \n-- **`agentConfig`** (object, optional): If you defined your own custom agent, pass the agent configuration here. The key should be the agent ID (e.g., 'my-custom-agent'), and the value should be the compiled agent configuration. We should provide a utility function to load and compile agents in the future to make this easier.\n-\n+- **`agentConfigs`** (array, optional): Array of custom agent configurations. Each object should satisfy the AgentConfig type.\n - **`maxAgentSteps`** (number, optional): Maximum number of steps the agent can take before stopping. Use this as a safety measure in case your agent starts going off the rails. A reasonable number is around 20.\n \n #### Returns\n \n Returns a Promise that resolves to a `RunState` object containing:\n+\n - `sessionState`: The current session state that can be passed to subsequent runs\n - `toolResults`: Results from any tools that were executed during the run\n \n ## License\n"
        },
        {
          "path": "sdk/src/client.ts",
          "status": "modified",
          "diff": "Index: sdk/src/client.ts\n===================================================================\n--- sdk/src/client.ts\t9fe911c (parent)\n+++ sdk/src/client.ts\t2fcbe70 (commit)\n@@ -13,8 +13,9 @@\n import { getInitialSessionState } from '../../common/src/types/session-state'\n \n import type { PrintModeEvent } from '../../common/src/types/print-mode'\n import type { SessionState } from '../../common/src/types/session-state'\n+import type { AgentConfig } from '../../common/src/util/types/agent-config'\n \n type ClientToolName = 'write_file' | 'run_terminal_command'\n \n export type CodebuffClientOptions = {\n@@ -115,9 +116,9 @@\n    * @param handleEvent - (Optional) Callback function that receives every event during execution (assistant messages, tool calls, etc.). This allows you to stream the agent's progress in real-time. We will likely add a token-by-token streaming callback in the future.\n    * @param previousRun - (Optional) JSON state returned from a previous run() call. Use this to continue a conversation or session with the agent, maintaining context from previous interactions.\n    * @param projectFiles - (Optional) All the files in your project as a plain JavaScript object. Keys should be the full path from your current directory to each file, and values should be the string contents of the file. Example: { \"src/index.ts\": \"console.log('hi')\" }. This helps Codebuff pick good source files for context.\n    * @param knowledgeFiles - (Optional) Knowledge files to inject into every run() call. Uses the same schema as projectFiles - keys are file paths and values are file contents. These files are added directly to the agent's context.\n-   * @param agentConfig - (Optional) If you defined your own custom agent, pass the agent configuration here. The key should be the agent ID (e.g., 'my-custom-agent'), and the value should be the compiled agent configuration. We will provide a utility function to load and compile agents in the future to make this easier.\n+   * @param agentConfigs - (Optional) Array of custom agent configurations. Each object should satisfy the AgentConfig type.\n    * @param maxAgentSteps - (Optional) Maximum number of steps the agent can take before stopping. Use this as a safety measure in case your agent starts going off the rails. A reasonable number is around 20.\n    *\n    * @returns A Promise that resolves to a RunState JSON object which you can pass to a subsequent run() call to continue the run.\n    */\n@@ -128,9 +129,9 @@\n     handleEvent,\n     previousRun,\n     projectFiles,\n     knowledgeFiles,\n-    agentConfig,\n+    agentConfigs,\n     maxAgentSteps,\n   }: {\n     agent: string\n     prompt: string\n@@ -138,9 +139,9 @@\n     handleEvent?: (event: PrintModeEvent) => void\n     previousRun?: RunState\n     projectFiles?: Record<string, string>\n     knowledgeFiles?: Record<string, string>\n-    agentConfig?: Record<string, any>\n+    agentConfigs?: AgentConfig[]\n     maxAgentSteps?: number\n   }): Promise<RunState> {\n     await this.websocketHandler.connect()\n \n@@ -148,9 +149,9 @@\n     const sessionState =\n       previousRun?.sessionState ??\n       initialSessionState(this.cwd, {\n         knowledgeFiles,\n-        agentConfig,\n+        agentConfigs,\n         projectFiles,\n         maxAgentSteps,\n       })\n     const toolResults = previousRun?.toolResults ?? []\n@@ -270,23 +271,38 @@\n   options: {\n     // TODO: Parse projectFiles into fileTree, fileTokenScores, tokenCallers\n     projectFiles?: Record<string, string>\n     knowledgeFiles?: Record<string, string>\n-    agentConfig?: Record<string, any>\n+    agentConfigs?: AgentConfig[]\n     maxAgentSteps?: number\n   },\n ) {\n-  const { knowledgeFiles = {}, agentConfig = {} } = options\n+  const { knowledgeFiles = {}, agentConfigs = [] } = options\n \n+  // Process agentConfigs array and convert handleSteps functions to strings\n+  const processedAgentTemplates: Record<string, any> = {}\n+  agentConfigs.forEach((config) => {\n+    const processedConfig = { ...config } as Record<string, any>\n+    if (\n+      processedConfig.handleSteps &&\n+      typeof processedConfig.handleSteps === 'function'\n+    ) {\n+      processedConfig.handleSteps = processedConfig.handleSteps.toString()\n+    }\n+    if (processedConfig.id) {\n+      processedAgentTemplates[processedConfig.id] = processedConfig\n+    }\n+  })\n+\n   const initialState = getInitialSessionState({\n     projectRoot: cwd,\n     cwd,\n     fileTree: [],\n     fileTokenScores: {},\n     tokenCallers: {},\n     knowledgeFiles,\n     userKnowledgeFiles: {},\n-    agentTemplates: agentConfig,\n+    agentTemplates: processedAgentTemplates,\n     gitChanges: {\n       status: '',\n       diff: '',\n       diffCached: '',\n"
        },
        {
          "path": "sdk/src/index.ts",
          "status": "modified",
          "diff": "Index: sdk/src/index.ts\n===================================================================\n--- sdk/src/index.ts\t9fe911c (parent)\n+++ sdk/src/index.ts\t2fcbe70 (commit)\n@@ -1,3 +1,4 @@\n export { CodebuffClient } from './client'\n export { WebSocketHandler } from './websocket-client'\n export { getInitialSessionState } from '../../common/src/types/session-state'\n+export { AgentConfig } from '../../common/src/util/types/agent-config'\n"
        }
      ]
    },
    {
      "id": "relocate-ws-errors",
      "sha": "70239cb5d29766eb96d00fe6e38272b439c0ae14",
      "parentSha": "e9bc92437f6ebe0fcdc76bec3f3bf280eadb7339",
      "spec": "Implement relocation of sendAction error handling from the shared common package to the npm-app CLI.\n\nRequired changes:\n1) Update common/src/websockets/websocket-client.ts\n- Modify APIRealtimeClient.sendAction to simply await sendMessage('action', { data: action }) and return its promise.\n- Remove the surrounding try/catch block, including all console messaging and process.exit(1). The method should bubble rejections to callers without exiting the process.\n\n2) Update npm-app/src/client.ts\n- Add a new async helper function near the top-level of the file (next to other top-level constants) that takes (ws: APIRealtimeClient, action: ClientAction) and wraps ws.sendAction(action) in try/catch.\n- In the catch block:\n  - Log a concise error including the action type and the error message in the format previously used by the shared client (\"Error sending action:\", action.type, and the underlying error message when available).\n  - Print the user guidance block exactly as before: a blank line, \"Codebuff is exiting due to an error.\", \"Make sure you are on the latest version of Codebuff!\", a dashed separator, and the instruction line \"Please run: npm install -g codebuff\" followed by the same dashed separator.\n  - Exit the process with status code 1.\n- Replace existing direct calls to this.webSocket.sendAction(...) in this file with the helper, covering all occurrences:\n  - read-files response (inside the 'read-files' subscription handler)\n  - tool-call-response on user input ID mismatch (error branch)\n  - tool-call-response on success\n  - tool-call-response on failure\n  - sending the main prompt action in sendUserInput\n  - sending cancel-user-input in cancelCurrentInput\n  - sending the init action in warmContextCache\n\nOut of scope/intentional non-changes:\n- Do not alter the SDK’s websocket wrapper (sdk/src/websocket-client.ts); it can continue calling sendAction directly and rely on bubbled errors for SDK consumers to handle.\n- Do not modify backend WebSocket server files or message schema.\n\nAcceptance behavior:\n- When sendAction fails, the CLI should show the friendly update/exit prompt and terminate with exit code 1, preserving the previous UX, but only in the npm-app layer.\n- The shared APIRealtimeClient no longer exits the process and simply propagates the error to callers.",
      "prompt": "Move WebSocket action send error handling out of the shared library and into the CLI app. The shared WebSocket client should no longer terminate the process on send failures; it should just propagate errors. In the CLI, add a small wrapper around action sends that logs a concise error, prints a helpful update message telling the user to update to the latest version, and exits. Replace the direct action send calls in the CLI with this wrapper so all action sends are covered. Leave the SDK and backend untouched.",
      "supplementalFiles": [
        "common/src/websockets/websocket-schema.ts",
        "backend/src/websockets/server.ts",
        "backend/src/websockets/websocket-action.ts",
        "sdk/src/websocket-client.ts"
      ],
      "fileDiffs": [
        {
          "path": "common/src/websockets/websocket-client.ts",
          "status": "modified",
          "diff": "Index: common/src/websockets/websocket-client.ts\n===================================================================\n--- common/src/websockets/websocket-client.ts\te9bc924 (parent)\n+++ common/src/websockets/websocket-client.ts\t70239cb (commit)\n@@ -227,29 +227,11 @@\n     }\n   }\n \n   async sendAction(action: ClientAction) {\n-    try {\n-      return await this.sendMessage('action', {\n-        data: action,\n-      })\n-    } catch (e) {\n-      // Print the error message for debugging.\n-      console.error(\n-        'Error sending action:',\n-        action.type,\n-        typeof e === 'object' && e !== null && 'message' in e ? e.message : e,\n-      )\n-\n-      console.log()\n-      console.log('Codebuff is exiting due to an error.')\n-      console.log('Make sure you are on the latest version of Codebuff!')\n-      console.log('-----------------------------------')\n-      console.log('Please run: npm install -g codebuff')\n-      console.log('-----------------------------------')\n-\n-      process.exit(1)\n-    }\n+    return await this.sendMessage('action', {\n+      data: action,\n+    })\n   }\n \n   subscribe<T extends ServerAction['type']>(\n     action: T,\n"
        },
        {
          "path": "npm-app/src/client.ts",
          "status": "modified",
          "diff": "Index: npm-app/src/client.ts\n===================================================================\n--- npm-app/src/client.ts\te9bc924 (parent)\n+++ npm-app/src/client.ts\t70239cb (commit)\n@@ -106,8 +106,33 @@\n import type { ProjectFileContext } from '@codebuff/common/util/file'\n \n const LOW_BALANCE_THRESHOLD = 100\n \n+async function sendActionAndHandleError(\n+  ws: APIRealtimeClient,\n+  action: ClientAction,\n+) {\n+  try {\n+    return await ws.sendAction(action)\n+  } catch (e) {\n+    // Print the error message for debugging.\n+    console.error(\n+      'Error sending action:',\n+      action.type,\n+      typeof e === 'object' && e !== null && 'message' in e ? e.message : e,\n+    )\n+\n+    console.log()\n+    console.log('Codebuff is exiting due to an error.')\n+    console.log('Make sure you are on the latest version of Codebuff!')\n+    console.log('-----------------------------------')\n+    console.log('Please run: npm install -g codebuff')\n+    console.log('-----------------------------------')\n+\n+    process.exit(1)\n+  }\n+}\n+\n const WARNING_CONFIG = {\n   [UserState.LOGGED_OUT]: {\n     message: () => `Type \"login\" to unlock full access and get free credits!`,\n     threshold: 100,\n@@ -749,9 +774,9 @@\n     this.webSocket.subscribe('read-files', (a) => {\n       const { filePaths, requestId } = a\n       const files = getFiles(filePaths)\n \n-      this.webSocket.sendAction({\n+      sendActionAndHandleError(this.webSocket, {\n         type: 'read-files-response',\n         files,\n         requestId,\n       })\n@@ -777,9 +802,9 @@\n           },\n           'User input ID mismatch - rejecting tool call request',\n         )\n \n-        this.webSocket.sendAction({\n+        sendActionAndHandleError(this.webSocket, {\n           type: 'tool-call-response',\n           requestId,\n           success: false,\n           error: ASYNC_AGENTS_ENABLED\n@@ -803,9 +828,9 @@\n         // Send successful response back to backend\n         if (this.userInputId) {\n           Spinner.get().start('Processing results...')\n         }\n-        this.webSocket.sendAction({\n+        sendActionAndHandleError(this.webSocket, {\n           type: 'tool-call-response',\n           requestId,\n           success: true,\n           result: toolResult.result,\n@@ -822,9 +847,9 @@\n         )\n \n         // Send error response back to backend\n         Spinner.get().start('Fixing...')\n-        this.webSocket.sendAction({\n+        sendActionAndHandleError(this.webSocket, {\n           type: 'tool-call-response',\n           requestId,\n           success: false,\n           error: error instanceof Error ? error.message : String(error),\n@@ -1031,9 +1056,9 @@\n       model: this.model,\n       repoUrl: loggerContext.repoUrl,\n       // repoName: loggerContext.repoName,\n     }\n-    this.webSocket.sendAction(action)\n+    sendActionAndHandleError(this.webSocket, action)\n \n     return {\n       responsePromise,\n       stopResponse,\n@@ -1115,9 +1140,9 @@\n     this.nonCancelledUserInputIds = this.nonCancelledUserInputIds.filter(\n       (id) => id !== this.userInputId,\n     )\n \n-    this.webSocket.sendAction({\n+    sendActionAndHandleError(this.webSocket, {\n       type: 'cancel-user-input',\n       authToken: this.user?.authToken,\n       promptId: this.userInputId,\n     })\n@@ -1553,9 +1578,9 @@\n       fileContext,\n       // Add repoUrl here as per the diff for client.ts\n       repoUrl: loggerContext.repoUrl,\n     }\n-    this.webSocket.sendAction(initAction)\n+    sendActionAndHandleError(this.webSocket, initAction)\n \n     await this.fetchStoredApiKeyTypes()\n   }\n \n"
        }
      ]
    },
    {
      "id": "fork-read-files",
      "sha": "349a1400926089036bc7afdbd128579e52a2d52a",
      "parentSha": "ba79fe2567f2453259ebfdf0b206c314833878b8",
      "spec": "Implement a self-contained file-reading helper in the SDK and wire it into the SDK client.\n\nRequired changes:\n1) sdk/src/client.ts\n- Replace the getFiles import from '../../npm-app/src/project-files' with an import from './tools/read-files'.\n- In the readFiles(filePath: string[]) method, keep the override logic as-is. When no override is provided, call getFiles(filePath, this.cwd) and return its result. Ensure the return type remains Record<string, string | null> to match the backend contract.\n\n2) sdk/src/tools/read-files.ts (new file)\n- Export a function: getFiles(filePaths: string[], cwd: string): Record<string, string | null>\n- Use FILE_READ_STATUS from '../../../common/src/constants'.\n- For each non-empty entry in filePaths:\n  - If a path starts with cwd, convert it to a relative path via path.relative(cwd, filePath); otherwise treat it as given (may be relative).\n  - Compute fullPath with path.join(cwd, relativePath).\n  - If relativePath is absolute (path.isAbsolute(relativePath)) or fullPath does not start with cwd, set result[relativePath] = FILE_READ_STATUS.OUTSIDE_PROJECT and continue.\n  - Try to fs.statSync(fullPath): if size > 1MB, set result[relativePath] = FILE_READ_STATUS.TOO_LARGE + ` [${(bytes/MB).toFixed(2)}MB]`; else read file via fs.readFileSync(fullPath, 'utf8') and set the content.\n  - On read/stat errors: if error.code === 'ENOENT', set FILE_READ_STATUS.DOES_NOT_EXIST; otherwise set FILE_READ_STATUS.ERROR.\n- Return the accumulated map. Keys should be the relativePath for all successfully resolved in-project files.\n- Note: Do not depend on npm-app utilities (e.g., gitignore parsing); this fork is intentionally minimal for the SDK while keeping status semantics consistent.\n\nBehavioral requirements:\n- When the backend sends a 'read-files' action, the SDK must respond with an object mapping the requested paths (relative to cwd) to:\n  - the file content as UTF-8 string when readable and <= 1MB, or\n  - a FILE_READ_STATUS marker string (DOES_NOT_EXIST, OUTSIDE_PROJECT, TOO_LARGE [x.xxMB], ERROR) for failures.\n- Paths outside the cwd sandbox must be flagged as OUTSIDE_PROJECT.\n- The SDK must not import or depend on npm-app/src/project-files.\n\nNo other files need modification; sdk/src/websocket-client.ts already forwards the readFiles result unchanged.",
      "prompt": "Decouple the SDK’s file reading from the npm app. Add an internal SDK helper that reads files relative to the client’s working directory, enforces a reasonable size limit, and returns standardized status markers for missing, too-large, out-of-bounds, or error cases. Update the SDK client to use this helper and pass its cwd. Preserve the response shape and status values expected by the backend. Avoid introducing dependencies on the npm app.",
      "supplementalFiles": [
        "npm-app/src/project-files.ts",
        "common/src/constants.ts",
        "backend/src/get-file-reading-updates.ts",
        "backend/src/websockets/websocket-action.ts",
        "sdk/src/websocket-client.ts",
        "common/src/util/file.ts"
      ],
      "fileDiffs": [
        {
          "path": "sdk/src/client.ts",
          "status": "modified",
          "diff": "Index: sdk/src/client.ts\n===================================================================\n--- sdk/src/client.ts\tba79fe2 (parent)\n+++ sdk/src/client.ts\t349a140 (commit)\n@@ -12,10 +12,10 @@\n import {\n   getInitialSessionState,\n   SessionState,\n } from '../../common/src/types/session-state'\n-import { getFiles } from '../../npm-app/src/project-files'\n import { PrintModeEvent } from '../../common/src/types/print-mode'\n+import { getFiles } from './tools/read-files'\n \n type ClientToolName = 'write_file' | 'run_terminal_command'\n \n export type CodebuffClientOptions = {\n@@ -214,9 +214,9 @@\n     if (override) {\n       const overrideResult = await override(filePath)\n       return overrideResult.files\n     }\n-    return getFiles(filePath)\n+    return getFiles(filePath, this.cwd)\n   }\n \n   private async handleToolCall(\n     action: Extract<ServerAction, { type: 'tool-call-request' }>,\n"
        },
        {
          "path": "sdk/src/tools/read-files.ts",
          "status": "added",
          "diff": "Index: sdk/src/tools/read-files.ts\n===================================================================\n--- sdk/src/tools/read-files.ts\tba79fe2 (parent)\n+++ sdk/src/tools/read-files.ts\t349a140 (commit)\n@@ -1,1 +1,47 @@\n-[NEW FILE]\n\\ No newline at end of file\n+import { FILE_READ_STATUS } from '../../../common/src/constants'\n+import path, { isAbsolute } from 'path'\n+import fs from 'fs'\n+\n+export function getFiles(filePaths: string[], cwd: string) {\n+  const result: Record<string, string | null> = {}\n+  const MAX_FILE_SIZE = 1024 * 1024 // 1MB in bytes\n+\n+  for (const filePath of filePaths) {\n+    if (!filePath) {\n+      continue\n+    }\n+\n+    // Convert absolute paths within project to relative paths\n+    const relativePath = filePath.startsWith(cwd)\n+      ? path.relative(cwd, filePath)\n+      : filePath\n+    const fullPath = path.join(cwd, relativePath)\n+    if (isAbsolute(relativePath) || !fullPath.startsWith(cwd)) {\n+      result[relativePath] = FILE_READ_STATUS.OUTSIDE_PROJECT\n+      continue\n+    }\n+    try {\n+      const stats = fs.statSync(fullPath)\n+      if (stats.size > MAX_FILE_SIZE) {\n+        result[relativePath] =\n+          FILE_READ_STATUS.TOO_LARGE +\n+          ` [${(stats.size / (1024 * 1024)).toFixed(2)}MB]`\n+      } else {\n+        const content = fs.readFileSync(fullPath, 'utf8')\n+        result[relativePath] = content\n+      }\n+    } catch (error) {\n+      if (\n+        error &&\n+        typeof error === 'object' &&\n+        'code' in error &&\n+        error.code === 'ENOENT'\n+      ) {\n+        result[relativePath] = FILE_READ_STATUS.DOES_NOT_EXIST\n+      } else {\n+        result[relativePath] = FILE_READ_STATUS.ERROR\n+      }\n+    }\n+  }\n+  return result\n+}\n\\ No newline at end of file\n"
        }
      ]
    },
    {
      "id": "stabilize-sdk-client",
      "sha": "ba79fe2567f2453259ebfdf0b206c314833878b8",
      "parentSha": "4aabf244aa689f98d9028e171d603317c93f2467",
      "spec": "- In sdk/src/client.ts:\n  - Make the tool override type internal and narrower: define a non-exported type ClientToolName = 'write_file' | 'run_terminal_command'. Do not include 'read_files' in this union.\n  - Change CodebuffClientOptions.overrideTools to be optional via Partial and to support:\n    - Optional overrides for 'write_file' and 'run_terminal_command' with the existing tool-call signature.\n    - A separate optional read_files override function with signature (filePath: string[]) => Promise<{ files: Record<string, string | null> }>. Name the property read_files (snake_case) to match the tool name and backend conventions.\n  - Update the private readFiles(filePath: string[]) method to use this.overrideTools.read_files, if present; otherwise fall back to getFiles(filePath) from npm-app/src/project-files.\n  - Ensure the WebSocket is connected at the start of run(): await this.websocketHandler.connect() before generating a promptId and sending input.\n  - In handlePromptResponse:\n    - Validate the action with PromptResponseSchema and use parsedAction.data to extract sessionState and toolResults.\n    - After resolving the pending promise, delete the entries for this promptId from promptIdToResolveResponse and promptIdToHandleEvent to avoid leaks.\n  - Improve binary detection for Windows: detect isWindows = process.platform === 'win32' and use 'where' on Windows, 'which' otherwise. Update the error message text to say \"install codebuff\" (remove the extraneous \"the\").\n  - Improve initial session state system info:\n    - Set shell to 'cmd.exe' on Windows, otherwise 'bash'.\n    - Set cpus to os.cpus().length (default to 1 if unavailable) instead of a hardcoded number.\n  - Note: Keep str_replace behavior reusing the write_file override when no explicit override is provided, as currently implemented.\n\n- In sdk/src/tools/change-file.ts:\n  - Add a safety check at the start of changeFile(): if cwd includes '../', throw new Error('cwd cannot include ../') to prevent directory traversal.\n\n- In sdk/src/websocket-client.ts:\n  - Add a private isConnected flag initialized to false on the class.\n  - Modify connect() to only establish the connection and set up subscriptions if not already connected; set isConnected = true after a successful connect. Subsequent connect() calls should no-op.\n\n- Behavioral expectations after these changes:\n  - Users can optionally provide overrides; missing overrides no longer require specifying all tools.\n  - read_files override key matches backend tool naming, while the SDK still handles file reads via the provided callback or the default getFiles.\n  - Running the client on Windows correctly locates the codebuff binary and reports an improved error message when missing.\n  - WebSocket connections are established before sending input and won’t duplicate subscriptions across multiple runs.\n  - Session response handling is validated and cleans up per-prompt handlers.\n  - File write/patch operations reject unsafe cwd paths.\n  - System info reflects actual shell and CPU count.",
      "prompt": "Harden the SDK client for stability and cross-platform use. Make tool overrides optional and align the read_files override with the backend tool naming, while keeping a sensible fallback to local file reading. Ensure the WebSocket connects once before sending prompts and avoids duplicate subscriptions across runs. Improve Windows support for locating the CLI binary, and enhance session response handling with validation and cleanup. Add a simple safety check to prevent directory traversal in file change operations, and report accurate shell and CPU info in session state.",
      "supplementalFiles": [
        "common/src/types/session-state.ts",
        "backend/src/tools/definitions/tool/read-files.ts",
        "backend/src/tools/handlers/tool/read-files.ts",
        "npm-app/src/project-files.ts"
      ],
      "fileDiffs": [
        {
          "path": "sdk/src/client.ts",
          "status": "modified",
          "diff": "Index: sdk/src/client.ts\n===================================================================\n--- sdk/src/client.ts\t4aabf24 (parent)\n+++ sdk/src/client.ts\tba79fe2 (commit)\n@@ -15,26 +15,26 @@\n } from '../../common/src/types/session-state'\n import { getFiles } from '../../npm-app/src/project-files'\n import { PrintModeEvent } from '../../common/src/types/print-mode'\n \n-export type ClientToolName =\n-  | 'read_files'\n-  | 'write_file'\n-  | 'run_terminal_command'\n+type ClientToolName = 'write_file' | 'run_terminal_command'\n \n export type CodebuffClientOptions = {\n   cwd: string\n   onError: (error: { message: string }) => void\n-  overrideTools: Record<\n-    ClientToolName,\n-    (\n-      args: Extract<ServerAction, { type: 'tool-call-request' }>['args'],\n-    ) => Promise<{ toolResultMessage: string }>\n-  > & {\n-    readFiles: (\n-      filePath: string[],\n-    ) => Promise<{ files: Record<string, string | null> }>\n-  }\n+  overrideTools: Partial<\n+    Record<\n+      ClientToolName,\n+      (\n+        args: Extract<ServerAction, { type: 'tool-call-request' }>['args'],\n+      ) => Promise<{ toolResultMessage: string }>\n+    > & {\n+      // Include read_files separately, since it has a different signature.\n+      read_files: (\n+        filePath: string[],\n+      ) => Promise<{ files: Record<string, string | null> }>\n+    }\n+  >\n }\n \n type RunState = {\n   sessionState: SessionState\n@@ -58,11 +58,16 @@\n   > = {}\n \n   constructor({ cwd, onError, overrideTools }: CodebuffClientOptions) {\n     // TODO: download binary automatically\n-    if (execFileSync('which', [CODEBUFF_BINARY]).toString().trim() === '') {\n+    const isWindows = process.platform === 'win32'\n+    if (\n+      execFileSync(isWindows ? 'where' : 'which', [CODEBUFF_BINARY])\n+        .toString()\n+        .trim() === ''\n+    ) {\n       throw new Error(\n-        `Could not find ${CODEBUFF_BINARY} in PATH. Please run \"npm i -g codebuff\" to install the codebuff.`,\n+        `Could not find ${CODEBUFF_BINARY} in PATH. Please run \"npm i -g codebuff\" to install codebuff.`,\n       )\n     }\n     if (!process.env[API_KEY_ENV_VAR]) {\n       throw new Error(\n@@ -140,8 +145,10 @@\n     knowledgeFiles?: Record<string, string>\n     agentConfig?: Record<string, any>\n     maxAgentSteps?: number\n   }): Promise<RunState> {\n+    await this.websocketHandler.connect()\n+\n     const promptId = Math.random().toString(36).substring(2, 15)\n     const sessionState =\n       previousState?.sessionState ??\n       initialSessionState(this.cwd, {\n@@ -189,19 +196,22 @@\n       return\n     }\n \n     if (promiseActions) {\n-      const { sessionState, toolResults } = action\n+      const { sessionState, toolResults } = parsedAction.data\n       const state: RunState = {\n         sessionState,\n         toolResults,\n       }\n       promiseActions.resolve(state)\n+\n+      delete this.promptIdToResolveResponse[action.promptId]\n+      delete this.promptIdToHandleEvent[action.promptId]\n     }\n   }\n \n   private async readFiles(filePath: string[]) {\n-    const override = this.overrideTools.readFiles\n+    const override = this.overrideTools.read_files\n     if (override) {\n       const overrideResult = await override(filePath)\n       return overrideResult.files\n     }\n@@ -261,8 +271,9 @@\n \n function initialSessionState(\n   cwd: string,\n   options: {\n+    // TODO: Parse allFiles into fileTree, fileTokenScores, tokenCallers\n     allFiles?: Record<string, string>\n     knowledgeFiles?: Record<string, string>\n     agentConfig?: Record<string, any>\n     maxAgentSteps?: number\n@@ -288,13 +299,13 @@\n     changesSinceLastChat: {},\n     shellConfigFiles: {},\n     systemInfo: {\n       platform: process.platform,\n-      shell: 'bash',\n+      shell: process.platform === 'win32' ? 'cmd.exe' : 'bash',\n       nodeVersion: process.version,\n       arch: process.arch,\n       homedir: os.homedir(),\n-      cpus: 16,\n+      cpus: os.cpus().length ?? 1,\n     },\n   })\n \n   if (options.maxAgentSteps) {\n"
        },
        {
          "path": "sdk/src/tools/change-file.ts",
          "status": "modified",
          "diff": "Index: sdk/src/tools/change-file.ts\n===================================================================\n--- sdk/src/tools/change-file.ts\t4aabf24 (parent)\n+++ sdk/src/tools/change-file.ts\tba79fe2 (commit)\n@@ -12,8 +12,11 @@\n export function changeFile(\n   parameters: unknown,\n   cwd: string,\n ): { toolResultMessage: string } {\n+  if (cwd.includes('../')) {\n+    throw new Error('cwd cannot include ../')\n+  }\n   const fileChange = FileChangeSchema.parse(parameters)\n   const lines = fileChange.content.split('\\n')\n \n   const { created, modified, invalid } = applyChanges(cwd, [fileChange])\n"
        },
        {
          "path": "sdk/src/websocket-client.ts",
          "status": "modified",
          "diff": "Index: sdk/src/websocket-client.ts\n===================================================================\n--- sdk/src/websocket-client.ts\t4aabf24 (parent)\n+++ sdk/src/websocket-client.ts\tba79fe2 (commit)\n@@ -57,8 +57,9 @@\n   private onResponseChunk: WebSocketHandlerOptionsWithDefaults['onResponseChunk']\n   private onSubagentResponseChunk: WebSocketHandlerOptionsWithDefaults['onSubagentResponseChunk']\n   private onPromptResponse: WebSocketHandlerOptionsWithDefaults['onPromptResponse']\n   private apiKey: string\n+  private isConnected = false\n \n   constructor({\n     onWebsocketError = () => {},\n     onWebsocketReconnect = () => {},\n@@ -97,10 +98,13 @@\n     this.apiKey = apiKey\n   }\n \n   public async connect() {\n-    await this.cbWebSocket.connect()\n-    this.setupSubscriptions()\n+    if (!this.isConnected) {\n+      await this.cbWebSocket.connect()\n+      this.setupSubscriptions()\n+      this.isConnected = true\n+    }\n   }\n \n   public reconnect() {\n     this.cbWebSocket.forceReconnect()\n"
        }
      ]
    },
    {
      "id": "stream-event-bridge",
      "sha": "e3c563ee30af8e4f0c0a8d8aa2000fdeb172f049",
      "parentSha": "14173c59a40435db23eaae0e7bc3ee085f3eedb2",
      "spec": "Implement streaming event forwarding and adjust import paths in the SDK.\n\n1) sdk/src/client.ts\n- Import the PrintModeEvent type from ../../common/src/types/print-mode.\n- Add a private map from promptId to a handler: Record<string, (event: PrintModeEvent) => void> to store per-run event handlers.\n- In the WebSocketHandler constructor options:\n  - Update onWebsocketError to invoke the provided onError callback with the error message instead of being a no-op.\n  - Implement onResponseChunk to:\n    • Extract userInputId and chunk from the action.\n    • Look up the handler by userInputId in the map.\n    • If a handler exists and chunk is an object, invoke the handler with the chunk as a PrintModeEvent.\n- Update the run() method signature:\n  - Make handleEvent optional and typed as (event: PrintModeEvent) => void.\n  - Update the JSDoc to mark the event handler as optional.\n  - When generating promptId and before sending input, if handleEvent is provided, store it in the promptId→handler map.\n- Leave other behavior unchanged (session state management, tool results, resolve/reject flow), and keep the existing onPromptResponse logic.\n\n2) sdk/src/tools/change-file.ts\n- Change the import of applyPatch to use the monorepo-relative path: '../../../common/src/util/patch' instead of the package alias.\n\nBehavioral expectations:\n- If the SDK user supplies a handleEvent callback to run(), they receive all PrintModeEvent objects streamed from the backend via WebSocket response-chunk events, keyed to that run's promptId.\n- String chunks continue to be ignored by the SDK-level handler and are not forwarded via handleEvent.\n- WebSocket errors raised by the SDK's WebSocketHandler are surfaced through the provided onError callback.\n- The change-file tool resolves applyPatch from the common util via a relative import path.",
      "prompt": "Enhance the SDK client so that callers can optionally receive streamed structured events during a run. Add an optional event handler to the run API that gets called with structured streaming events, and wire the WebSocket response streaming to deliver those events for the corresponding prompt. Ensure WebSocket errors are surfaced via the provided error callback. Also fix the file change tool to import the patch utility using the correct relative path in this monorepo.",
      "supplementalFiles": [
        "sdk/src/websocket-client.ts",
        "common/src/types/print-mode.ts",
        "common/src/websockets/websocket-schema.ts",
        "backend/src/websockets/websocket-action.ts",
        "sdk/src/process-stream.ts",
        "npm-app/src/client.ts",
        "npm-app/src/display/print-mode.ts"
      ],
      "fileDiffs": [
        {
          "path": "sdk/src/client.ts",
          "status": "modified",
          "diff": "Index: sdk/src/client.ts\n===================================================================\n--- sdk/src/client.ts\t14173c5 (parent)\n+++ sdk/src/client.ts\te3c563e (commit)\n@@ -13,8 +13,9 @@\n   getInitialSessionState,\n   SessionState,\n } from '../../common/src/types/session-state'\n import { getFiles } from '../../npm-app/src/project-files'\n+import { PrintModeEvent } from '../../common/src/types/print-mode'\n \n export type ClientToolName =\n   | 'read_files'\n   | 'write_file'\n@@ -42,11 +43,17 @@\n }\n \n export class CodebuffClient {\n   public cwd: string\n+\n   private readonly websocketHandler: WebSocketHandler\n   private readonly overrideTools: CodebuffClientOptions['overrideTools']\n   private readonly fingerprintId = `codebuff-sdk-${Math.random().toString(36).substring(2, 15)}`\n+\n+  private readonly promptIdToHandleEvent: Record<\n+    string,\n+    (event: PrintModeEvent) => void\n+  > = {}\n   private readonly promptIdToResolveResponse: Record<\n     string,\n     { resolve: (response: any) => void; reject: (error: any) => void }\n   > = {}\n@@ -68,9 +75,11 @@\n     this.cwd = cwd\n     this.overrideTools = overrideTools\n     this.websocketHandler = new WebSocketHandler({\n       apiKey,\n-      onWebsocketError: () => {},\n+      onWebsocketError: (error) => {\n+        onError({ message: error.message })\n+      },\n       onWebsocketReconnect: () => {},\n       onRequestReconnect: async () => {},\n       onResponseError: async (error) => {\n         onError({ message: error.message })\n@@ -79,9 +88,15 @@\n       handleToolCall: this.handleToolCall.bind(this),\n       onCostResponse: async () => {},\n       onUsageResponse: async () => {},\n \n-      onResponseChunk: async () => {},\n+      onResponseChunk: async (action) => {\n+        const { userInputId, chunk } = action\n+        const handleEvent = this.promptIdToHandleEvent[userInputId]\n+        if (handleEvent && typeof chunk === 'object') {\n+          handleEvent(chunk)\n+        }\n+      },\n       onSubagentResponseChunk: async () => {},\n \n       onPromptResponse: this.handlePromptResponse.bind(this),\n     })\n@@ -96,10 +111,10 @@\n    *\n    * @param agent - The agent to run, e.g. 'base' or 'codebuff/file-picker@0.0.1'\n    * @param prompt - The user prompt, e.g. 'Add a console.log to the index file'\n    * @param params - (Optional) The parameters to pass to the agent.\n-   * @param handleEvent - A function to handle events.\n    *\n+   * @param handleEvent - (Optional) A function to handle events.\n    * @param previousState - (Optional) Continue a previous run with the return value of a previous run.\n    *\n    * @param allFiles - (Optional) All the files in the project, in an object of file path to file content. Improves codebuff's ability to locate files.\n    * @param knowledgeFiles - (Optional) The knowledge files to pass to the agent.\n@@ -119,9 +134,9 @@\n   }: {\n     agent: string\n     prompt: string\n     params?: Record<string, any>\n-    handleEvent: (event: any) => void\n+    handleEvent?: (event: PrintModeEvent) => void\n     previousState?: RunState\n     allFiles?: Record<string, string>\n     knowledgeFiles?: Record<string, string>\n     agentConfig?: Record<string, any>\n@@ -136,8 +151,11 @@\n         allFiles,\n         maxAgentSteps,\n       })\n     const toolResults = previousState?.toolResults ?? []\n+    if (handleEvent) {\n+      this.promptIdToHandleEvent[promptId] = handleEvent\n+    }\n     this.websocketHandler.sendInput({\n       promptId,\n       prompt,\n       promptParams: params,\n"
        },
        {
          "path": "sdk/src/tools/change-file.ts",
          "status": "modified",
          "diff": "Index: sdk/src/tools/change-file.ts\n===================================================================\n--- sdk/src/tools/change-file.ts\t14173c5 (parent)\n+++ sdk/src/tools/change-file.ts\te3c563e (commit)\n@@ -1,8 +1,8 @@\n import z from 'zod'\n import fs from 'fs'\n import path from 'path'\n-import { applyPatch } from '@codebuff/common/util/patch'\n+import { applyPatch } from '../../../common/src/util/patch'\n \n const FileChangeSchema = z.object({\n   type: z.enum(['patch', 'file']),\n   path: z.string(),\n"
        }
      ]
    },
    {
      "id": "add-agent-store",
      "sha": "95883eb0768ce46a1eeed703c980ec2c7694869e",
      "parentSha": "5c8c14c57f8f25f471412e02b8eab338ac20cc84",
      "spec": "Implement an Agent Store listing with a supporting API and navbar links, plus a minor CLI import cleanup.\n\n1) New client page at web/src/app/agents/page.tsx\n- Create a client component that:\n  - Fetches a JSON array of agents from GET /api/agents using @tanstack/react-query (useQuery) and shows loading skeletons while fetching.\n  - Provides a text search input that filters by agent name, description, or tags (case-insensitive substring match).\n  - Provides a sort select with: Most Used (usage desc), Newest (created_at desc), Name (ascending), Total Spent (descending).\n  - Renders a responsive grid of cards showing: name, publisher handle (with verified badge when true), short description, usage_count, total_spent, avg_cost_per_invocation, and version badge. Show up to three tags with a +N overflow badge.\n  - Each card links to the existing agent detail route: /publishers/{publisherId}/agents/{agentId}/{version}. If version is absent in the record, fall back to a default (e.g., 1.0.0). Use publisher.id from the API response and the agent id field.\n  - When no results after filtering, show an empty state.\n\n2) New list API at web/src/app/api/agents/route.ts\n- Implement GET handler that:\n  - Queries the database via @codebuff/common/db and @codebuff/common/db/schema to select agent_config joined to publisher (inner join on publisher_id).\n  - Orders by agent_config.created_at DESC and limits results to 100.\n  - Parses agent_config.data (JSONB) to extract presentation fields (name, description, tags).\n  - Returns only the latest version per agent within a publisher by grouping on publisher + agent name (keep the first due to DESC ordering).\n  - Includes mock usage metrics in the response: usage_count, total_spent, avg_cost_per_invocation (computed as total_spent/usage_count), and avg_response_time. These are placeholder values for now.\n  - Response object per agent must include: id, name, description, publisher { id, name, verified }, version, created_at, usage_count, total_spent, avg_cost_per_invocation, avg_response_time, and tags[].\n  - On errors, log with web/src/util/logger.ts and return HTTP 500 JSON { error: 'Internal server error' }.\n\n3) Update navbar at web/src/components/navbar/navbar.tsx\n- Import the Bot icon from lucide-react.\n- Add a top-level nav link labeled \"Agent Store\" pointing to /agents with same styling as existing links.\n- In the user menu dropdown, add an entry with Bot icon and label \"Agent Store\" linking to /agents.\n\n4) CLI cleanup at npm-app/src/cli-handlers/agents.ts\n- Remove unused imports for the agent creation chat (startAgentCreationChat, createAgentFromRequirements) from './agent-creation-chat' to resolve dead code/unused import warnings. No behavioral changes required.\n\nNotes/assumptions\n- React Query is already provided globally via web/src/components/providers/query-client-provider.tsx and web/src/app/layout.tsx.\n- The agent detail page already exists at web/src/app/publishers/[id]/agents/[agentId]/[version]/page.tsx and should remain unchanged; the store links must be compatible with it.\n- Database schema for agent_config and publisher is defined in common/src/db/schema.ts and should be used as the source of truth for field names and joins.",
      "prompt": "Build a public Agent Store experience. Add a new /agents page that lists published agents with search and sorting and links into existing agent detail pages. Implement a simple /api/agents list endpoint that pulls agents from the database, joins publisher info, includes basic summary fields from the agent JSON, and adds placeholder usage metrics. Update the site navigation to include an \"Agent Store\" link in both the header and the user dropdown. Keep the implementation aligned with the existing agent detail route structure and the current database schema.",
      "supplementalFiles": [
        "common/src/db/schema.ts",
        "common/src/db/index.ts",
        "web/src/app/publishers/[id]/agents/[agentId]/[version]/page.tsx",
        "web/src/app/api/agents/[publisherId]/[agentId]/[version]/route.ts",
        "web/src/app/api/agents/[publisherId]/[agentId]/latest/route.ts",
        "web/src/components/providers/query-client-provider.tsx",
        "web/src/app/layout.tsx",
        "web/src/util/logger.ts"
      ],
      "fileDiffs": [
        {
          "path": "npm-app/src/cli-handlers/agents.ts",
          "status": "modified",
          "diff": "Index: npm-app/src/cli-handlers/agents.ts\n===================================================================\n--- npm-app/src/cli-handlers/agents.ts\t5c8c14c (parent)\n+++ npm-app/src/cli-handlers/agents.ts\t95883eb (commit)\n@@ -11,12 +11,8 @@\n \n import { loadLocalAgents, getLoadedAgentNames } from '../agents/load-agents'\n import { CLI } from '../cli'\n import { getProjectRoot } from '../project-files'\n-import {\n-  startAgentCreationChat,\n-  createAgentFromRequirements,\n-} from './agent-creation-chat'\n import { Spinner } from '../utils/spinner'\n import {\n   ENTER_ALT_BUFFER,\n   EXIT_ALT_BUFFER,\n"
        },
        {
          "path": "web/src/app/agents/page.tsx",
          "status": "added",
          "diff": "Index: web/src/app/agents/page.tsx\n===================================================================\n--- web/src/app/agents/page.tsx\t5c8c14c (parent)\n+++ web/src/app/agents/page.tsx\t95883eb (commit)\n@@ -1,1 +1,283 @@\n-[NEW FILE]\n\\ No newline at end of file\n+'use client'\n+\n+import { useState, useMemo } from 'react'\n+import { useQuery } from '@tanstack/react-query'\n+import { motion } from 'framer-motion'\n+import {\n+  Search,\n+  TrendingUp,\n+  Clock,\n+  Star,\n+  Users,\n+  ChevronRight,\n+} from 'lucide-react'\n+import Link from 'next/link'\n+import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\n+import { Badge } from '@/components/ui/badge'\n+import { Skeleton } from '@/components/ui/skeleton'\n+import { Input } from '@/components/ui/input'\n+import {\n+  Select,\n+  SelectContent,\n+  SelectItem,\n+  SelectTrigger,\n+  SelectValue,\n+} from '@/components/ui/select'\n+import { AnimatedElement } from '@/components/ui/landing/animated-element'\n+\n+interface AgentData {\n+  id: string\n+  name: string\n+  description?: string\n+  publisher: {\n+    id: string\n+    name: string\n+    verified: boolean\n+  }\n+  version: string\n+  created_at: string\n+  usage_count?: number\n+  total_spent?: number\n+  avg_cost_per_invocation?: number\n+  avg_response_time?: number\n+\n+  tags?: string[]\n+}\n+\n+const AgentStorePage = () => {\n+  const [searchQuery, setSearchQuery] = useState('')\n+  const [sortBy, setSortBy] = useState('usage')\n+\n+  // Fetch agents from the API\n+  const { data: agents = [], isLoading } = useQuery<AgentData[]>({\n+    queryKey: ['agents'],\n+    queryFn: async () => {\n+      const response = await fetch('/api/agents')\n+      if (!response.ok) {\n+        throw new Error('Failed to fetch agents')\n+      }\n+      return await response.json()\n+    },\n+  })\n+\n+  const filteredAndSortedAgents = useMemo(() => {\n+    let filtered = agents.filter((agent) => {\n+      const matchesSearch =\n+        agent.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n+        agent.description?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n+        agent.tags?.some((tag) =>\n+          tag.toLowerCase().includes(searchQuery.toLowerCase())\n+        )\n+      return matchesSearch\n+    })\n+\n+    return filtered.sort((a, b) => {\n+      switch (sortBy) {\n+        case 'usage':\n+          return (b.usage_count || 0) - (a.usage_count || 0)\n+        case 'newest':\n+          return (\n+            new Date(b.created_at).getTime() - new Date(a.created_at).getTime()\n+          )\n+        case 'name':\n+          return a.name.localeCompare(b.name)\n+        case 'cost':\n+          return (b.total_spent || 0) - (a.total_spent || 0)\n+        default:\n+          return 0\n+      }\n+    })\n+  }, [agents, searchQuery, sortBy])\n+\n+  const formatCurrency = (amount?: number) => {\n+    if (!amount) return '$0.00'\n+    return `${amount.toFixed(2)}`\n+  }\n+\n+  const formatUsageCount = (count?: number) => {\n+    if (!count) return '0'\n+    if (count >= 1000000) return `${(count / 1000000).toFixed(1)}M`\n+    if (count >= 1000) return `${(count / 1000).toFixed(1)}K`\n+    return count.toString()\n+  }\n+\n+  return (\n+    <div className=\"container mx-auto py-8 px-4\">\n+      <div className=\"max-w-7xl mx-auto\">\n+        {' '}\n+        {/* Header */}\n+        <AnimatedElement type=\"fade\" className=\"text-center mb-12\">\n+          <h1 className=\"text-4xl font-bold mb-4 text-white\">Agent Store</h1>\n+          <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n+            Browse all published AI agents. Run, compose, or fork them.\n+          </p>\n+        </AnimatedElement>\n+        {/* Search and Filters */}\n+        <AnimatedElement type=\"slide\" delay={0.1} className=\"mb-8\">\n+          <div className=\"flex flex-col md:flex-row gap-4 items-center justify-end\">\n+            <div className=\"relative flex-1 max-w-[200px]\">\n+              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n+              <Input\n+                placeholder=\"\"\n+                value={searchQuery}\n+                onChange={(e) => setSearchQuery(e.target.value)}\n+                className=\"pl-10\"\n+              />\n+            </div>\n+            <div className=\"flex gap-3\">\n+              <Select value={sortBy} onValueChange={setSortBy}>\n+                <SelectTrigger className=\"w-40\">\n+                  <TrendingUp className=\"h-4 w-4 mr-2\" />\n+                  <SelectValue placeholder=\"Sort by\" />\n+                </SelectTrigger>\n+                <SelectContent>\n+                  <SelectItem value=\"usage\">Most Used</SelectItem>\n+                  <SelectItem value=\"newest\">Newest</SelectItem>\n+                  <SelectItem value=\"name\">Name</SelectItem>\n+                  <SelectItem value=\"cost\">Total Spent</SelectItem>\n+                </SelectContent>\n+              </Select>\n+            </div>\n+          </div>\n+        </AnimatedElement>\n+        {/* Agent Grid */}\n+        {isLoading ? (\n+          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n+            {Array.from({ length: 6 }).map((_, i) => (\n+              <Card key={i} className=\"h-64\">\n+                <CardHeader>\n+                  <Skeleton className=\"h-6 w-3/4\" />\n+                  <Skeleton className=\"h-4 w-1/2\" />\n+                </CardHeader>\n+                <CardContent>\n+                  <Skeleton className=\"h-4 w-full mb-2\" />\n+                  <Skeleton className=\"h-4 w-2/3 mb-4\" />\n+                  <div className=\"flex gap-2\">\n+                    <Skeleton className=\"h-6 w-16\" />\n+                    <Skeleton className=\"h-6 w-20\" />\n+                  </div>\n+                </CardContent>\n+              </Card>\n+            ))}\n+          </div>\n+        ) : (\n+          <motion.div\n+            className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\"\n+            layout\n+          >\n+            {filteredAndSortedAgents.map((agent, index) => (\n+              <motion.div\n+                key={agent.id}\n+                layout\n+                initial={{ opacity: 0, y: 20 }}\n+                animate={{ opacity: 1, y: 0 }}\n+                transition={{ delay: index * 0.1, duration: 0.5 }}\n+                whileHover={{ y: -4, transition: { duration: 0.2 } }}\n+              >\n+                <Link\n+                  href={`/publishers/${agent.publisher.id}/agents/${agent.id}/${agent.version || '1.0.0'}`}\n+                >\n+                  <Card className=\"h-full hover:shadow-lg transition-all duration-300 cursor-pointer group border-2 hover:border-gray-300 dark:hover:border-gray-600\">\n+                    <CardHeader className=\"pb-3\">\n+                      <div className=\"flex items-start justify-between\">\n+                        <div className=\"flex-1\">\n+                          <CardTitle className=\"text-lg transition-colors\">\n+                            {agent.name}\n+                          </CardTitle>\n+                          <div className=\"flex items-center gap-2 mt-1\">\n+                            <span className=\"text-sm text-muted-foreground\">\n+                              by @{agent.publisher.id}\n+                            </span>\n+                            {agent.publisher.verified && (\n+                              <Badge\n+                                variant=\"secondary\"\n+                                className=\"text-xs px-1.5 py-0\"\n+                              >\n+                                ✓\n+                              </Badge>\n+                            )}\n+                          </div>\n+                        </div>\n+                        <ChevronRight className=\"h-4 w-4 text-muted-foreground transition-colors\" />\n+                      </div>\n+                    </CardHeader>\n+                    <CardContent className=\"pt-0\">\n+                      <p className=\"text-sm text-muted-foreground mb-4 line-clamp-2\">\n+                        {agent.description}\n+                      </p>{' '}\n+                      {/* Usage Stats */}\n+                      <div className=\"grid grid-cols-2 gap-3 mb-4 text-xs\">\n+                        <div className=\"flex items-center gap-1\">\n+                          <Users className=\"h-3 w-3 text-blue-500\" />\n+                          <span className=\"font-medium\">\n+                            {formatUsageCount(agent.usage_count)}\n+                          </span>\n+                          <span className=\"text-muted-foreground\">uses</span>\n+                        </div>\n+                        <div className=\"flex items-center gap-1\">\n+                          <Star className=\"h-3 w-3 text-green-500\" />\n+                          <span className=\"font-medium text-green-600\">\n+                            {formatCurrency(agent.total_spent)}\n+                          </span>\n+                          <span className=\"text-muted-foreground\">spent</span>\n+                        </div>\n+                        <div className=\"flex items-center gap-1\">\n+                          <Clock className=\"h-3 w-3 text-orange-500\" />\n+                          <span className=\"font-medium\">\n+                            {formatCurrency(agent.avg_cost_per_invocation)}\n+                          </span>\n+                          <span className=\"text-muted-foreground\">per use</span>\n+                        </div>\n+                        <div className=\"flex items-center gap-1\">\n+                          <Badge\n+                            variant=\"outline\"\n+                            className=\"text-xs px-1.5 py-0\"\n+                          >\n+                            v{agent.version}\n+                          </Badge>\n+                        </div>\n+                      </div>\n+                      {/* Tags */}\n+                      {agent.tags && agent.tags.length > 0 && (\n+                        <div className=\"flex flex-wrap gap-1\">\n+                          {agent.tags.slice(0, 3).map((tag) => (\n+                            <Badge\n+                              key={tag}\n+                              variant=\"secondary\"\n+                              className=\"text-xs px-2 py-0\"\n+                            >\n+                              {tag}\n+                            </Badge>\n+                          ))}\n+                          {agent.tags.length > 3 && (\n+                            <Badge\n+                              variant=\"secondary\"\n+                              className=\"text-xs px-2 py-0\"\n+                            >\n+                              +{agent.tags.length - 3}\n+                            </Badge>\n+                          )}\n+                        </div>\n+                      )}\n+                    </CardContent>\n+                  </Card>\n+                </Link>\n+              </motion.div>\n+            ))}\n+          </motion.div>\n+        )}\n+        {filteredAndSortedAgents.length === 0 && !isLoading && (\n+          <AnimatedElement type=\"fade\" className=\"text-center py-12\">\n+            <div className=\"text-muted-foreground\">\n+              <Search className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n+              <h3 className=\"text-lg font-medium mb-2\">No agents found</h3>\n+              <p>Try adjusting your search or filter criteria</p>\n+            </div>\n+          </AnimatedElement>\n+        )}\n+      </div>\n+    </div>\n+  )\n+}\n+\n+export default AgentStorePage\n"
        },
        {
          "path": "web/src/app/api/agents/route.ts",
          "status": "added",
          "diff": "Index: web/src/app/api/agents/route.ts\n===================================================================\n--- web/src/app/api/agents/route.ts\t5c8c14c (parent)\n+++ web/src/app/api/agents/route.ts\t95883eb (commit)\n@@ -1,1 +1,76 @@\n-[NEW FILE]\n\\ No newline at end of file\n+import db from '@codebuff/common/db'\n+import * as schema from '@codebuff/common/db/schema'\n+import { sql } from 'drizzle-orm'\n+import { NextResponse } from 'next/server'\n+\n+import { logger } from '@/util/logger'\n+\n+export async function GET() {\n+  try {\n+    // Get all published agents with their publisher info\n+    const agents = await db\n+      .select({\n+        id: schema.agentConfig.id,\n+        version: schema.agentConfig.version,\n+        data: schema.agentConfig.data,\n+        created_at: schema.agentConfig.created_at,\n+        publisher: {\n+          id: schema.publisher.id,\n+          name: schema.publisher.name,\n+          verified: schema.publisher.verified,\n+        },\n+      })\n+      .from(schema.agentConfig)\n+      .innerJoin(\n+        schema.publisher,\n+        sql`${schema.agentConfig.publisher_id} = ${schema.publisher.id}`\n+      )\n+      .orderBy(sql`${schema.agentConfig.created_at} DESC`) // Sort by date descending\n+      .limit(100) // Limit for performance\n+\n+    // Transform the data to include parsed agent data and mock usage metrics\n+    const transformedAgents = agents.map((agent) => {\n+      const agentData = typeof agent.data === 'string' ? JSON.parse(agent.data) : agent.data\n+      \n+      // Mock usage metrics (in a real app, these would come from analytics/usage tables)\n+      const mockUsageCount = Math.floor(Math.random() * 50000) + 1000\n+      const mockTotalSpent = Math.floor(Math.random() * 5000) + 100 // $100-$5100\n+      const mockAvgCostPerInvocation = mockTotalSpent / mockUsageCount\n+      const mockResponseTime = Math.floor(Math.random() * 3000) + 500 // 500-3500ms\n+      \n+      return {\n+        id: agent.id,\n+        name: agentData.name || agent.id,\n+        description: agentData.description,\n+        publisher: agent.publisher,\n+        version: agent.version,\n+        created_at: agent.created_at,\n+        usage_count: mockUsageCount,\n+        total_spent: mockTotalSpent,\n+        avg_cost_per_invocation: mockAvgCostPerInvocation,\n+        avg_response_time: mockResponseTime,\n+\n+        tags: agentData.tags || [],\n+      }\n+    })\n+\n+    // Group by agent name and keep only the latest version of each\n+    const latestAgents = new Map()\n+    transformedAgents.forEach((agent) => {\n+      const key = `${agent.publisher.id}/${agent.name}`\n+      if (!latestAgents.has(key)) { // Since it's sorted, the first one is the latest\n+        latestAgents.set(key, agent)\n+      }\n+    })\n+\n+    const result = Array.from(latestAgents.values())\n+\n+    return NextResponse.json(result)\n+  } catch (error) {\n+    logger.error({ error }, 'Error fetching agents')\n+    return NextResponse.json(\n+      { error: 'Internal server error' },\n+      { status: 500 }\n+    )\n+  }\n+}\n\\ No newline at end of file\n"
        },
        {
          "path": "web/src/components/navbar/navbar.tsx",
          "status": "modified",
          "diff": "Index: web/src/components/navbar/navbar.tsx\n===================================================================\n--- web/src/components/navbar/navbar.tsx\t5c8c14c (parent)\n+++ web/src/components/navbar/navbar.tsx\t95883eb (commit)\n@@ -4,8 +4,9 @@\n   LogIn,\n   BarChart2,\n   BookHeart,\n   User,\n+  Bot,\n } from 'lucide-react'\n import Image from 'next/image'\n import Link from 'next/link'\n import { getServerSession } from 'next-auth'\n@@ -52,8 +53,14 @@\n           className=\"hover:text-blue-400 transition-colors font-medium px-2 py-1 rounded-md hover:bg-blue-50 dark:hover:bg-blue-900/20\"\n         >\n           Pricing\n         </Link>\n+        <Link\n+          href=\"/agents\"\n+          className=\"hover:text-blue-400 transition-colors font-medium px-2 py-1 rounded-md hover:bg-blue-50 dark:hover:bg-blue-900/20\"\n+        >\n+          Agent Store\n+        </Link>\n \n         {session && (\n           <Link\n             href=\"/usage\"\n@@ -83,8 +90,14 @@\n                 <DollarSign className=\"mr-2 h-4 w-4\" />\n                 Pricing\n               </Link>\n             </DropdownMenuItem>\n+            <DropdownMenuItem asChild>\n+              <Link href=\"/agents\" className=\"flex items-center\">\n+                <Bot className=\"mr-2 h-4 w-4\" />\n+                Agent Store\n+              </Link>\n+            </DropdownMenuItem>\n \n             {session && (\n               <DropdownMenuItem asChild>\n                 <Link href=\"/usage\" className=\"flex items-center\">\n"
        }
      ]
    },
    {
      "id": "simplify-sdk-api",
      "sha": "3960e5f1b1cf7bfcddea6ef17ab4c9c9d9160c37",
      "parentSha": "958f2967d1a55d2666bac57cd86f36e4a6e7d652",
      "spec": "Implement SDK API simplifications and exports.\n\n1) Update the SDK entrypoint exports\n- File: sdk/src/index.ts\n  - Keep the existing export of CodebuffClient.\n  - Remove the wildcard export that re-exports everything from './types'.\n  - Add explicit exports:\n    - Export WebSocketHandler from './websocket-client'.\n    - Re-export getInitialSessionState from the common package at '../../common/src/types/session-state'.\n  - Ensure relative paths follow existing patterns used elsewhere in the SDK (matching how other common imports are referenced).\n\n2) Relax WebSocketHandler options and solidify internal typing\n- File: sdk/src/websocket-client.ts\n  - In WebSocketHandlerOptions, make the following properties optional (with ?): onWebsocketError, onWebsocketReconnect, onRequestReconnect, onResponseError, onCostResponse, onUsageResponse, onResponseChunk, onSubagentResponseChunk, onPromptResponse. Keep readFiles and handleToolCall required, and keep apiKey required.\n  - Introduce type alias: type WebSocketHandlerOptionsWithDefaults = Required<WebSocketHandlerOptions> to represent fully-populated options with defaults.\n  - Update the WebSocketHandler class’s private field types to use WebSocketHandlerOptionsWithDefaults[...] for all callback and handler properties so they are treated as non-undefined internally.\n  - In the constructor parameter destructuring, keep the current no-op defaults for all now-optional callbacks (e.g., onWebsocketError = () => {}, onWebsocketReconnect = () => {}, onRequestReconnect = async () => {}, onResponseError = async () => {}, onCostResponse = async () => {}, onUsageResponse = async () => {}, onResponseChunk = async () => {}, onSubagentResponseChunk = async () => {}, onPromptResponse = async () => {}). Assign them to the corresponding private fields.\n  - Ensure setupSubscriptions continues to subscribe to all action types without additional undefined checks, relying on the provided defaults.\n\n3) Acceptance criteria\n- Consumers can instantiate WebSocketHandler without providing any of the now-optional callbacks and still get correct behavior via defaults.\n- The SDK entrypoint allows importing WebSocketHandler and getInitialSessionState directly from the SDK package entry.\n- TypeScript builds pass with the stricter internal typing (no undefined callback types internally).\n- No changes to runtime behavior except allowing omitted callbacks and new entrypoint exports.",
      "prompt": "Expose the primary realtime client and session initializer directly from the SDK entrypoint, and simplify the WebSocket client’s consumption by making its callback hooks optional with sensible defaults. Update typings so internals never see undefined callbacks, and ensure imports/exports align with the shared types in the common package. Keep runtime behavior consistent while reducing required boilerplate for SDK consumers.",
      "supplementalFiles": [
        "common/src/types/session-state.ts",
        "common/src/actions.ts",
        "common/src/websockets/websocket-client.ts",
        "sdk/src/client.ts"
      ],
      "fileDiffs": [
        {
          "path": "sdk/src/index.ts",
          "status": "modified",
          "diff": "Index: sdk/src/index.ts\n===================================================================\n--- sdk/src/index.ts\t958f296 (parent)\n+++ sdk/src/index.ts\t3960e5f (commit)\n@@ -1,3 +1,3 @@\n export { CodebuffClient } from './client'\n-\n-export * from './types'\n+export { WebSocketHandler } from './websocket-client'\n+export { getInitialSessionState } from '../../common/src/types/session-state'\n"
        },
        {
          "path": "sdk/src/websocket-client.ts",
          "status": "modified",
          "diff": "Index: sdk/src/websocket-client.ts\n===================================================================\n--- sdk/src/websocket-client.ts\t958f296 (parent)\n+++ sdk/src/websocket-client.ts\t3960e5f (commit)\n@@ -4,12 +4,12 @@\n import type { ServerAction, ClientAction } from '../../common/src/actions'\n import type { WebSocket } from 'ws'\n \n export type WebSocketHandlerOptions = {\n-  onWebsocketError: (error: WebSocket.ErrorEvent) => void\n-  onWebsocketReconnect: () => void\n-  onRequestReconnect: () => Promise<void>\n-  onResponseError: (\n+  onWebsocketError?: (error: WebSocket.ErrorEvent) => void\n+  onWebsocketReconnect?: () => void\n+  onRequestReconnect?: () => Promise<void>\n+  onResponseError?: (\n     error: Extract<ServerAction, { type: 'action-error' }>,\n   ) => Promise<void>\n   readFiles: (\n     filePath: string[],\n@@ -21,42 +21,43 @@\n       Extract<ClientAction, { type: 'tool-call-response' }>,\n       'type' | 'requestId'\n     >\n   >\n-  onCostResponse: (\n+  onCostResponse?: (\n     action: Extract<ServerAction, { type: 'message-cost-response' }>,\n   ) => Promise<void>\n-  onUsageResponse: (\n+  onUsageResponse?: (\n     action: Extract<ServerAction, { type: 'usage-response' }>,\n   ) => Promise<void>\n \n-  onResponseChunk: (\n+  onResponseChunk?: (\n     action: Extract<ServerAction, { type: 'response-chunk' }>,\n   ) => Promise<void>\n-  onSubagentResponseChunk: (\n+  onSubagentResponseChunk?: (\n     action: Extract<ServerAction, { type: 'subagent-response-chunk' }>,\n   ) => Promise<void>\n \n-  onPromptResponse: (\n+  onPromptResponse?: (\n     action: Extract<ServerAction, { type: 'prompt-response' }>,\n   ) => Promise<void>\n \n   apiKey: string\n }\n \n+type WebSocketHandlerOptionsWithDefaults = Required<WebSocketHandlerOptions>\n+\n export class WebSocketHandler {\n   private cbWebSocket: APIRealtimeClient\n-  private onRequestReconnect: NonNullable<\n-    WebSocketHandlerOptions['onRequestReconnect']\n-  >\n-  private onResponseError: WebSocketHandlerOptions['onResponseError']\n-  private readFiles: WebSocketHandlerOptions['readFiles']\n-  private handleToolCall: WebSocketHandlerOptions['handleToolCall']\n-  private onCostResponse: WebSocketHandlerOptions['onCostResponse']\n-  private onUsageResponse: WebSocketHandlerOptions['onUsageResponse']\n-  private onResponseChunk: WebSocketHandlerOptions['onResponseChunk']\n-  private onSubagentResponseChunk: WebSocketHandlerOptions['onSubagentResponseChunk']\n-  private onPromptResponse: WebSocketHandlerOptions['onPromptResponse']\n+  private onRequestReconnect: WebSocketHandlerOptionsWithDefaults['onRequestReconnect']\n+\n+  private onResponseError: WebSocketHandlerOptionsWithDefaults['onResponseError']\n+  private readFiles: WebSocketHandlerOptionsWithDefaults['readFiles']\n+  private handleToolCall: WebSocketHandlerOptionsWithDefaults['handleToolCall']\n+  private onCostResponse: WebSocketHandlerOptionsWithDefaults['onCostResponse']\n+  private onUsageResponse: WebSocketHandlerOptionsWithDefaults['onUsageResponse']\n+  private onResponseChunk: WebSocketHandlerOptionsWithDefaults['onResponseChunk']\n+  private onSubagentResponseChunk: WebSocketHandlerOptionsWithDefaults['onSubagentResponseChunk']\n+  private onPromptResponse: WebSocketHandlerOptionsWithDefaults['onPromptResponse']\n   private apiKey: string\n \n   constructor({\n     onWebsocketError = () => {},\n"
        }
      ]
    },
    {
      "id": "add-input-apis",
      "sha": "958f2967d1a55d2666bac57cd86f36e4a6e7d652",
      "parentSha": "39743331b85a721408dec421396911b12b1de099",
      "spec": "Implement the following changes across the specified files:\n\n1) common/src/actions.ts\n- Remove the 'generate-commit-message' client action variant from the CLIENT_ACTION_SCHEMA discriminated union. Do not leave any references to it in this schema.\n- Ensure the remaining client actions still include: 'prompt', 'read-files-response', 'init', 'tool-call-response', and 'cancel-user-input' with their existing shapes.\n- Do not change server action schemas or other client action variants.\n\n2) sdk/src/websocket-client.ts\n- Extend WebSocketHandlerOptions to include an `apiKey: string` property, and store it in the WebSocketHandler instance (private field).\n- In the constructor, accept the apiKey option and assign it to the private field. Keep existing subscriptions and event handlers intact.\n- Remove the init() method that previously sent the 'init' action and instead provide methods dedicated to input lifecycle:\n  a) Add a private helper getInputDefaultOptions() that returns an object containing defaults for a user prompt send, including:\n     - type: 'prompt'\n     - fingerprintId: 'codebuff-sdk'\n     - authToken: this.apiKey\n  b) Add a public method sendInput(action) that sends a 'prompt' action using the underlying websocket by merging the caller-provided fields with the defaults from getInputDefaultOptions(). The method should accept an input typed as the 'prompt' ClientAction minus the keys supplied by the defaults (type, fingerprintId, authToken).\n  c) Add a public method cancelInput({ promptId }) that sends a 'cancel-user-input' action including `authToken: this.apiKey` and the provided promptId.\n- Retain all existing subscription setup for handling 'response-chunk', 'subagent-response-chunk', 'prompt-response', 'usage-response', 'message-cost-response', 'tool-call-request/response', and 'request-reconnect'.\n- Do not alter APIRealtimeClient behavior.\n\nConstraints/notes:\n- Do not modify SDK exports or other files beyond what’s listed; keep changes scoped to the two files above.\n- The server already expects 'prompt' and 'cancel-user-input' with authToken and promptId; the new SDK methods must populate these fields accordingly.\n- No other cleanup is needed for the removed 'generate-commit-message' action, as there are no references elsewhere.",
      "prompt": "Add high-level SDK support for sending and canceling user inputs over WebSocket. Provide methods to submit a user prompt (including default metadata like fingerprint and auth) and to cancel an in-flight prompt using its ID. Also remove any unused client action related to commit message generation from the shared action schema, ensuring only the supported client actions remain.",
      "supplementalFiles": [
        "backend/src/websockets/websocket-action.ts",
        "backend/src/websockets/server.ts",
        "backend/src/live-user-inputs.ts",
        "common/src/websockets/websocket-schema.ts",
        "npm-app/src/client.ts"
      ],
      "fileDiffs": [
        {
          "path": "common/src/actions.ts",
          "status": "modified",
          "diff": "Index: common/src/actions.ts\n===================================================================\n--- common/src/actions.ts\t3974333 (parent)\n+++ common/src/actions.ts\t958f296 (commit)\n@@ -46,14 +46,8 @@\n     fileContext: ProjectFileContextSchema,\n     repoUrl: z.string().optional(),\n   }),\n   z.object({\n-    type: z.literal('generate-commit-message'),\n-    fingerprintId: z.string(),\n-    authToken: z.string().optional(),\n-    stagedChanges: z.string(),\n-  }),\n-  z.object({\n     type: z.literal('tool-call-response'),\n     requestId: z.string(),\n     success: z.boolean(),\n     result: z.any().optional(), // Tool execution result\n"
        },
        {
          "path": "sdk/src/websocket-client.ts",
          "status": "modified",
          "diff": "Index: sdk/src/websocket-client.ts\n===================================================================\n--- sdk/src/websocket-client.ts\t3974333 (parent)\n+++ sdk/src/websocket-client.ts\t958f296 (commit)\n@@ -38,8 +38,10 @@\n \n   onPromptResponse: (\n     action: Extract<ServerAction, { type: 'prompt-response' }>,\n   ) => Promise<void>\n+\n+  apiKey: string\n }\n \n export class WebSocketHandler {\n   private cbWebSocket: APIRealtimeClient\n@@ -53,8 +55,9 @@\n   private onUsageResponse: WebSocketHandlerOptions['onUsageResponse']\n   private onResponseChunk: WebSocketHandlerOptions['onResponseChunk']\n   private onSubagentResponseChunk: WebSocketHandlerOptions['onSubagentResponseChunk']\n   private onPromptResponse: WebSocketHandlerOptions['onPromptResponse']\n+  private apiKey: string\n \n   constructor({\n     onWebsocketError = () => {},\n     onWebsocketReconnect = () => {},\n@@ -68,8 +71,10 @@\n     onResponseChunk = async () => {},\n     onSubagentResponseChunk = async () => {},\n \n     onPromptResponse = async () => {},\n+\n+    apiKey,\n   }: WebSocketHandlerOptions) {\n     this.cbWebSocket = new APIRealtimeClient(\n       WEBSOCKET_URL,\n       onWebsocketError,\n@@ -86,8 +91,10 @@\n     this.onResponseChunk = onResponseChunk\n     this.onSubagentResponseChunk = onSubagentResponseChunk\n \n     this.onPromptResponse = onPromptResponse\n+\n+    this.apiKey = apiKey\n   }\n \n   public async connect() {\n     await this.cbWebSocket.connect()\n@@ -101,34 +108,8 @@\n   public close() {\n     this.cbWebSocket.close()\n   }\n \n-  public async init({\n-    authToken: apiKey,\n-    fileContext,\n-    repoUrl,\n-  }: Extract<ClientAction, { type: 'init' }>): Promise<\n-    Extract<ServerAction, { type: 'init-response' }>\n-  > {\n-    let resolve!: (v: Extract<ServerAction, { type: 'init-response' }>) => void\n-    const promise = new Promise<\n-      Extract<ServerAction, { type: 'init-response' }>\n-    >((res) => {\n-      resolve = res\n-    })\n-    this.cbWebSocket.subscribe('init-response', resolve)\n-\n-    this.cbWebSocket.sendAction({\n-      type: 'init',\n-      fingerprintId: 'codebuff-sdk',\n-      authToken: apiKey,\n-      fileContext,\n-      repoUrl,\n-    })\n-\n-    return promise\n-  }\n-\n   private setupSubscriptions() {\n     this.cbWebSocket.subscribe('action-error', this.onResponseError)\n \n     this.cbWebSocket.subscribe('read-files', async (a) => {\n@@ -169,5 +150,35 @@\n \n     // Handle full response from prompt\n     this.cbWebSocket.subscribe('prompt-response', this.onPromptResponse)\n   }\n+\n+  private getInputDefaultOptions() {\n+    return {\n+      ...({\n+        type: 'prompt',\n+        fingerprintId: 'codebuff-sdk',\n+      } as const),\n+      authToken: this.apiKey,\n+    }\n+  }\n+\n+  public sendInput(\n+    action: Omit<\n+      Extract<ClientAction, { type: 'prompt' }>,\n+      keyof ReturnType<typeof this.getInputDefaultOptions>\n+    >,\n+  ) {\n+    this.cbWebSocket.sendAction({\n+      ...action,\n+      ...this.getInputDefaultOptions(),\n+    })\n+  }\n+\n+  public cancelInput({ promptId }: { promptId: string }) {\n+    this.cbWebSocket.sendAction({\n+      type: 'cancel-user-input',\n+      authToken: this.apiKey,\n+      promptId,\n+    })\n+  }\n }\n"
        }
      ]
    },
    {
      "id": "sdk-websocket-integration",
      "sha": "a9fe09f8a942a5e94cbe9fda7bfa1f8ffc59deba",
      "parentSha": "e79f36b22994fed995e5e4f2f9dbe01d7d4b9f3e",
      "spec": "- Update shared action schema in common/src/actions.ts:\n  - Remove ResponseCompleteSchema and exclude it from ServerAction union.\n  - Remove 'tool-call' (tool-call legacy shape), 'terminal-command-result', 'npm-version-status', and 'commit-message-response' from the ServerAction union.\n  - Stop importing FileVersionSchema and remove any usages from removed message shapes.\n\n- Adjust websocket client typing in common/src/websockets/websocket-client.ts:\n  - Change onError callback type to accept WebSocket.ErrorEvent instead of no-arg function.\n  - Update the constructor signature and onerror assignment to pass through the event object.\n\n- Clean up npm-app/src/client.ts to remove legacy flows tied to removed action types:\n  - Delete subscription handler for 'npm-version-status' event.\n  - Remove generateCommitMessage() method and its associated 'generate-commit-message' message/response handling.\n  - Narrow the initAction variable type to Extract<ClientAction, { type: 'init' }> for stronger typing when sending init.\n  - Ensure remaining websocket subscriptions only include currently valid events: action-error, read-files, tool-call-request, message-cost-response, usage-response, request-reconnect, response-chunk, subagent-response-chunk, prompt-response.\n\n- Introduce environment/URLs to SDK and set new version:\n  - Bump sdk/package.json version to 0.1.0.\n  - In sdk/src/constants.ts, add IS_DEV/IS_TEST/IS_PROD flags and expose WEBSOCKET_URL, WEBSITE_URL, BACKEND_URL values based on NEXT_PUBLIC_CB_ENVIRONMENT.\n\n- Deprecate the legacy SDK process-based client API and tighten its types:\n  - In sdk/src/client.ts, mark CodebuffClient as deprecated in favor of the new WebSocketHandler (JSDoc note).\n  - Change constructor to accept { cwd: string } inline instead of CodebuffClientOptions.\n  - Simplify runNewChat signature to accept basic primitives and return only agentId.\n  - Remove continueChat and any references to legacy types.\n  - Maintain API key handling via API_KEY_ENV_VAR constant import from common.\n\n- Remove unused SDK type declarations:\n  - Replace contents of sdk/src/types.ts with a minimal placeholder indicating removal (or delete file if build allows), removing types: CodebuffClientOptions, ChatContext, NewChatOptions, ContinueChatOptions, and any dependency on common PrintModeEvent or session-state AgentTemplateType.\n\n- Add an SDK WebSocket handler implementation:\n  - Create sdk/src/websocket-client.ts exposing a WebSocketHandler class that wraps APIRealtimeClient from common/src/websockets/websocket-client.ts and uses WEBSOCKET_URL.\n  - The handler must:\n    - Accept callbacks for websocket error/reconnect, reconnect requests, action errors, cost/usage responses, streaming chunks, and prompt responses.\n    - Implement connect, reconnect, and close methods.\n    - Provide an init method that sends an init action with fingerprintId 'codebuff-sdk' and returns the server's init-response.\n    - Subscribe to 'read-files' requests and respond with 'read-files-response' by invoking a provided readFiles callback.\n    - Subscribe to 'tool-call-request' and reply with 'tool-call-response' using a provided handleToolCall callback.\n    - Wire subscriptions for 'message-cost-response', 'usage-response', 'request-reconnect', 'response-chunk', 'subagent-response-chunk', and 'prompt-response'.\n\n- Ensure type alignment across modules:\n  - WebSocketHandler method signatures should use Extract<ServerAction, {...}> and Extract<ClientAction, {...}> discriminated unions where applicable, matching current schemas in common/src/actions.ts.\n  - Update any imports in sdk files to align with updated types and removed legacy types.\n\n- No changes required on backend files for this task; ensure that the client and SDK code matches the server's current action set and websocket protocol.",
      "prompt": "Refactor the SDK to support first-class WebSocket-based interactions and remove deprecated action flows across the codebase. Introduce environment-based URLs in the SDK, add a WebSocket handler that integrates with the shared realtime client, and clean up the npm app to stop listening for removed events. Align shared action schemas to drop legacy message types and update websocket error typing. Keep the public surface minimal and strongly typed, and deprecate the old process-based SDK client methods.",
      "supplementalFiles": [
        "common/src/websockets/websocket-schema.ts",
        "backend/src/websockets/websocket-action.ts",
        "backend/src/websockets/server.ts",
        "backend/src/websockets/switchboard.ts",
        "npm-app/src/tool-handlers.ts",
        "common/src/types/session-state.ts",
        "common/src/util/file.ts",
        "sdk/src/process-stream.ts",
        "sdk/src/index.ts",
        "common/src/types/print-mode.ts"
      ],
      "fileDiffs": [
        {
          "path": "common/src/actions.ts",
          "status": "modified",
          "diff": "Index: common/src/actions.ts\n===================================================================\n--- common/src/actions.ts\te79f36b (parent)\n+++ common/src/actions.ts\ta9fe09f (commit)\n@@ -7,9 +7,9 @@\n   SessionStateSchema,\n   toolCallSchema,\n   toolResultSchema,\n } from './types/session-state'\n-import { FileVersionSchema, ProjectFileContextSchema } from './util/file'\n+import { ProjectFileContextSchema } from './util/file'\n \n export const FileChangeSchema = z.object({\n   type: z.enum(['patch', 'file']),\n   path: z.string(),\n@@ -95,24 +95,8 @@\n     }),\n   )\n export type InitResponse = z.infer<typeof InitResponseSchema>\n \n-export const ResponseCompleteSchema = z\n-  .object({\n-    type: z.literal('response-complete'),\n-    userInputId: z.string(),\n-    response: z.string(),\n-    changes: CHANGES,\n-    changesAlreadyApplied: CHANGES,\n-    addedFileVersions: z.array(FileVersionSchema),\n-    resetFileVersions: z.boolean(),\n-  })\n-  .merge(\n-    UsageReponseSchema.omit({\n-      type: true,\n-    }).partial(),\n-  )\n-\n export const MessageCostResponseSchema = z.object({\n   type: z.literal('message-cost-response'),\n   promptId: z.string(),\n   credits: z.number(),\n@@ -141,9 +125,8 @@\n     agentType: z.string(),\n     chunk: z.string(),\n     prompt: z.string().optional(),\n   }),\n-  ResponseCompleteSchema,\n   PromptResponseSchema,\n   z.object({\n     type: z.literal('read-files'),\n     filePaths: z.array(z.string()),\n@@ -156,28 +139,8 @@\n     toolName: z.string(),\n     args: z.record(z.any()),\n     timeout: z.number().optional(),\n   }),\n-  z.object({\n-    type: z.literal('tool-call'),\n-    userInputId: z.string(),\n-    response: z.string(),\n-    data: toolCallSchema,\n-    changes: CHANGES,\n-    changesAlreadyApplied: CHANGES,\n-    addedFileVersions: z.array(FileVersionSchema),\n-    resetFileVersions: z.boolean(),\n-  }),\n-  z.object({\n-    type: z.literal('terminal-command-result'),\n-    userInputId: z.string(),\n-    result: z.string(),\n-  }),\n-  z.object({\n-    type: z.literal('npm-version-status'),\n-    isUpToDate: z.boolean(),\n-    latestVersion: z.string(),\n-  }),\n   InitResponseSchema,\n   UsageReponseSchema,\n   MessageCostResponseSchema,\n   z.object({\n@@ -186,12 +149,8 @@\n     error: z.string().optional(),\n     remainingBalance: z.number().optional(),\n   }),\n   z.object({\n-    type: z.literal('commit-message-response'),\n-    commitMessage: z.string(),\n-  }),\n-  z.object({\n     // The server is imminently going to shutdown, and the client should reconnect\n     type: z.literal('request-reconnect'),\n   }),\n ])\n"
        },
        {
          "path": "common/src/websockets/websocket-client.ts",
          "status": "modified",
          "diff": "Index: common/src/websockets/websocket-client.ts\n===================================================================\n--- common/src/websockets/websocket-client.ts\te79f36b (parent)\n+++ common/src/websockets/websocket-client.ts\ta9fe09f (commit)\n@@ -59,12 +59,16 @@\n   txns: Map<number, OutstandingTxn>\n   connectTimeout?: any\n   heartbeat?: any\n   hadError = false\n-  onError: () => void\n+  onError: (event: WebSocket.ErrorEvent) => void\n   onReconnect: () => void\n \n-  constructor(url: string, onError: () => void, onReconnect: () => void) {\n+  constructor(\n+    url: string,\n+    onError: (event: WebSocket.ErrorEvent) => void,\n+    onReconnect: () => void,\n+  ) {\n     this.url = url\n     this.txid = 0\n     this.txns = new Map()\n     this.subscribers = new Map()\n@@ -93,9 +97,9 @@\n       this.receiveMessage(JSON.parse(ev.data as any))\n     }\n     this.ws.onerror = (ev) => {\n       if (!this.hadError) {\n-        this.onError()\n+        this.onError(ev)\n         this.hadError = true\n       }\n       // this can fire without an onclose if this is the first time we ever try\n       // to connect, so we need to turn on our reconnect in that case\n"
        },
        {
          "path": "npm-app/src/client.ts",
          "status": "modified",
          "diff": "Index: npm-app/src/client.ts\n===================================================================\n--- npm-app/src/client.ts\te79f36b (parent)\n+++ npm-app/src/client.ts\ta9fe09f (commit)\n@@ -831,19 +831,8 @@\n         })\n       }\n     })\n \n-    this.webSocket.subscribe('npm-version-status', (action) => {\n-      const { isUpToDate } = action\n-      if (!isUpToDate) {\n-        console.warn(\n-          yellow(\n-            `\\nThere's a new version of Codebuff! Please update to ensure proper functionality.\\nUpdate now by running: npm install -g codebuff`,\n-          ),\n-        )\n-      }\n-    })\n-\n     this.webSocket.subscribe('message-cost-response', (action) => {\n       const parsedAction = MessageCostResponseSchema.safeParse(action)\n       if (!parsedAction.success) return\n       const response = parsedAction.data\n@@ -933,27 +922,8 @@\n       this.freshPrompt()\n     }\n   }\n \n-  async generateCommitMessage(stagedChanges: string): Promise<string> {\n-    return new Promise(async (resolve, reject) => {\n-      const unsubscribe = this.webSocket.subscribe(\n-        'commit-message-response',\n-        (action) => {\n-          unsubscribe()\n-          resolve(action.commitMessage)\n-        },\n-      )\n-\n-      this.webSocket.sendAction({\n-        type: 'generate-commit-message',\n-        fingerprintId: await this.fingerprintId,\n-        authToken: this.user?.authToken,\n-        stagedChanges,\n-      })\n-    })\n-  }\n-\n   async sendUserInput(prompt: string): Promise<{\n     responsePromise: Promise<\n       ServerAction & { type: 'prompt-response' | 'manager-prompt-response' } & {\n         wasStoppedByUser: boolean\n@@ -1575,9 +1545,9 @@\n       // Set initial usage data from the init response\n       this.setUsage(parsedAction.data)\n     })\n \n-    const initAction: ClientAction = {\n+    const initAction: Extract<ClientAction, { type: 'init' }> = {\n       type: 'init',\n       fingerprintId: await this.fingerprintId,\n       authToken: this.user?.authToken,\n       fileContext,\n"
        },
        {
          "path": "sdk/package.json",
          "status": "modified",
          "diff": "Index: sdk/package.json\n===================================================================\n--- sdk/package.json\te79f36b (parent)\n+++ sdk/package.json\ta9fe09f (commit)\n@@ -1,9 +1,9 @@\n {\n   \"name\": \"@codebuff/sdk\",\n   \"private\": false,\n   \"access\": \"public\",\n-  \"version\": \"0.0.3\",\n+  \"version\": \"0.1.0\",\n   \"description\": \"Official SDK for Codebuff — AI coding agent & framework\",\n   \"license\": \"MIT\",\n   \"type\": \"module\",\n   \"main\": \"./dist/index.js\",\n"
        },
        {
          "path": "sdk/src/client.ts",
          "status": "modified",
          "diff": "Index: sdk/src/client.ts\n===================================================================\n--- sdk/src/client.ts\te79f36b (parent)\n+++ sdk/src/client.ts\ta9fe09f (commit)\n@@ -1,21 +1,15 @@\n import { execFileSync } from 'child_process'\n \n-import { API_KEY_ENV_VAR } from '../../common/src/constants'\n import { CODEBUFF_BINARY } from './constants'\n import { processStream } from './process-stream'\n+import { API_KEY_ENV_VAR } from '../../common/src/constants'\n \n-import type {\n-  CodebuffClientOptions,\n-  ChatContext,\n-  ContinueChatOptions,\n-  NewChatOptions,\n-} from './types'\n-\n+/** @deprecated Migrate to WebSocketHandler */\n export class CodebuffClient {\n   public cwd: string\n \n-  constructor({ cwd }: CodebuffClientOptions) {\n+  constructor({ cwd }: { cwd: string }) {\n     // TODO: download binary automatically\n     if (execFileSync('which', [CODEBUFF_BINARY]).toString().trim() === '') {\n       throw new Error(\n         'Codebuff binary not found. Please run \"npm i -g codebuff\"',\n@@ -34,9 +28,16 @@\n     agent,\n     prompt,\n     params,\n     handleEvent,\n-  }: NewChatOptions): Promise<ChatContext> {\n+  }: {\n+    agent: string\n+    prompt: string\n+    params?: Record<string, any>\n+    handleEvent: (event: any) => void\n+  }): Promise<{\n+    agentId: string\n+  }> {\n     const args = [prompt, '-p', '--agent', agent]\n     if (prompt) {\n       args.push(prompt)\n     }\n@@ -55,35 +56,5 @@\n     return {\n       agentId: agent,\n     }\n   }\n-\n-  // WIP\n-  private async continueChat({\n-    agent,\n-    prompt,\n-    params,\n-    context,\n-    handleEvent,\n-  }: ContinueChatOptions): Promise<ChatContext> {\n-    agent = agent ?? context.agentId\n-    const args = [prompt, '-p', '--agent', agent]\n-    if (prompt) {\n-      args.push(prompt)\n-    }\n-    if (params) {\n-      args.push('--params', JSON.stringify(params))\n-    }\n-    if (this.cwd) {\n-      args.push('--cwd', this.cwd)\n-    }\n-\n-    await processStream({\n-      codebuffArgs: args,\n-      handleEvent,\n-    })\n-\n-    return {\n-      agentId: agent,\n-    }\n-  }\n }\n"
        },
        {
          "path": "sdk/src/constants.ts",
          "status": "modified",
          "diff": "Index: sdk/src/constants.ts\n===================================================================\n--- sdk/src/constants.ts\te79f36b (parent)\n+++ sdk/src/constants.ts\ta9fe09f (commit)\n@@ -1,1 +1,15 @@\n export const CODEBUFF_BINARY = 'codebuff'\n+\n+export const IS_DEV = process.env.NEXT_PUBLIC_CB_ENVIRONMENT === 'dev'\n+export const IS_TEST = process.env.NEXT_PUBLIC_CB_ENVIRONMENT === 'test'\n+export const IS_PROD = !IS_DEV && !IS_TEST\n+\n+export const WEBSOCKET_URL = IS_PROD\n+  ? 'wss://manicode-backend.onrender.com/ws'\n+  : 'ws://localhost:4242/ws'\n+export const WEBSITE_URL = IS_PROD\n+  ? 'https://codebuff.com'\n+  : 'http://localhost:3000'\n+export const BACKEND_URL = IS_PROD\n+  ? 'https://manicode-backend.onrender.com'\n+  : 'http://localhost:4242'\n"
        },
        {
          "path": "sdk/src/types.ts",
          "status": "deleted",
          "diff": "Index: sdk/src/types.ts\n===================================================================\n--- sdk/src/types.ts\te79f36b (parent)\n+++ sdk/src/types.ts\ta9fe09f (commit)\n@@ -1,27 +1,1 @@\n-import type { PrintModeEvent } from '../../common/src/types/print-mode'\n-import type { AgentTemplateType } from '../../common/src/types/session-state'\n-\n-export type CodebuffClientOptions = {\n-  cwd: string\n-}\n-\n-export type ChatContext = {\n-  agentId: string\n-  chatId?: string\n-}\n-\n-export type NewChatOptions = {\n-  agent: AgentTemplateType\n-  prompt: string\n-  params?: Record<string, any>\n-  handleEvent: (event: PrintModeEvent) => void\n-}\n-\n-export type ContinueChatOptions = {\n-  context: ChatContext\n-  agent?: AgentTemplateType\n-  prompt: string\n-  params?: Record<string, any>\n-  chatId?: string\n-  handleEvent: (event: PrintModeEvent) => void\n-}\n+[DELETED]\n\\ No newline at end of file\n"
        },
        {
          "path": "sdk/src/websocket-client.ts",
          "status": "added",
          "diff": "Index: sdk/src/websocket-client.ts\n===================================================================\n--- sdk/src/websocket-client.ts\te79f36b (parent)\n+++ sdk/src/websocket-client.ts\ta9fe09f (commit)\n@@ -1,1 +1,186 @@\n-[NEW FILE]\n\\ No newline at end of file\n+import { WEBSOCKET_URL } from './constants'\n+import { APIRealtimeClient } from '../../common/src/websockets/websocket-client'\n+\n+import type { ServerAction, ClientAction } from '../../common/src/actions'\n+import type { WebSocket } from 'ws'\n+\n+export type WebSocketHandlerOptions = {\n+  onWebsocketError: (error: WebSocket.ErrorEvent) => void\n+  onWebsocketReconnect: () => void\n+  onRequestReconnect: () => Promise<void>\n+  onResponseError: (\n+    error: Extract<ServerAction, { type: 'action-error' }>,\n+  ) => Promise<void>\n+  readFiles: (\n+    filePath: string[],\n+  ) => Promise<Extract<ClientAction, { type: 'read-files-response' }>['files']>\n+  handleToolCall: (\n+    action: Extract<ServerAction, { type: 'tool-call-request' }>,\n+  ) => Promise<\n+    Omit<\n+      Extract<ClientAction, { type: 'tool-call-response' }>,\n+      'type' | 'requestId'\n+    >\n+  >\n+  onCostResponse: (\n+    action: Extract<ServerAction, { type: 'message-cost-response' }>,\n+  ) => Promise<void>\n+  onUsageResponse: (\n+    action: Extract<ServerAction, { type: 'usage-response' }>,\n+  ) => Promise<void>\n+\n+  onResponseChunk: (\n+    action: Extract<ServerAction, { type: 'response-chunk' }>,\n+  ) => Promise<void>\n+  onSubagentResponseChunk: (\n+    action: Extract<ServerAction, { type: 'subagent-response-chunk' }>,\n+  ) => Promise<void>\n+\n+  onPromptResponse: (\n+    action: Extract<ServerAction, { type: 'prompt-response' }>,\n+  ) => Promise<void>\n+}\n+\n+type asdf = Exclude<\n+  ServerAction['type'],\n+  | 'action-error'\n+  | 'read-files'\n+  | 'tool-call-request'\n+  | 'response-chunk'\n+  | 'request-reconnect'\n+  | 'subagent-response-chunk'\n+  | 'usage-response'\n+  | 'message-cost-response'\n+  | 'prompt-response'\n+>\n+\n+export class WebSocketHandler {\n+  private cbWebSocket: APIRealtimeClient\n+  private onRequestReconnect: NonNullable<\n+    WebSocketHandlerOptions['onRequestReconnect']\n+  >\n+  private onResponseError: WebSocketHandlerOptions['onResponseError']\n+  private readFiles: WebSocketHandlerOptions['readFiles']\n+  private handleToolCall: WebSocketHandlerOptions['handleToolCall']\n+  private onCostResponse: WebSocketHandlerOptions['onCostResponse']\n+  private onUsageResponse: WebSocketHandlerOptions['onUsageResponse']\n+  private onResponseChunk: WebSocketHandlerOptions['onResponseChunk']\n+  private onSubagentResponseChunk: WebSocketHandlerOptions['onSubagentResponseChunk']\n+  private onPromptResponse: WebSocketHandlerOptions['onPromptResponse']\n+\n+  constructor({\n+    onWebsocketError = () => {},\n+    onWebsocketReconnect = () => {},\n+    onRequestReconnect = async () => {},\n+    onResponseError = async () => {},\n+    readFiles,\n+    handleToolCall,\n+    onCostResponse = async () => {},\n+    onUsageResponse = async () => {},\n+\n+    onResponseChunk = async () => {},\n+    onSubagentResponseChunk = async () => {},\n+\n+    onPromptResponse = async () => {},\n+  }: WebSocketHandlerOptions) {\n+    this.cbWebSocket = new APIRealtimeClient(\n+      WEBSOCKET_URL,\n+      onWebsocketError,\n+      onWebsocketReconnect,\n+    )\n+    this.onRequestReconnect = onRequestReconnect\n+\n+    this.onResponseError = onResponseError\n+    this.readFiles = readFiles\n+    this.handleToolCall = handleToolCall\n+    this.onCostResponse = onCostResponse\n+    this.onUsageResponse = onUsageResponse\n+\n+    this.onResponseChunk = onResponseChunk\n+    this.onSubagentResponseChunk = onSubagentResponseChunk\n+\n+    this.onPromptResponse = onPromptResponse\n+  }\n+\n+  public async connect() {\n+    await this.cbWebSocket.connect()\n+    this.setupSubscriptions()\n+  }\n+\n+  public reconnect() {\n+    this.cbWebSocket.forceReconnect()\n+  }\n+\n+  public close() {\n+    this.cbWebSocket.close()\n+  }\n+\n+  public async init({\n+    authToken: apiKey,\n+    fileContext,\n+    repoUrl,\n+  }: Extract<ClientAction, { type: 'init' }>): Promise<\n+    Extract<ServerAction, { type: 'init-response' }>\n+  > {\n+    let resolve!: (v: Extract<ServerAction, { type: 'init-response' }>) => void\n+    const promise = new Promise<\n+      Extract<ServerAction, { type: 'init-response' }>\n+    >((res) => {\n+      resolve = res\n+    })\n+    this.cbWebSocket.subscribe('init-response', resolve)\n+\n+    this.cbWebSocket.sendAction({\n+      type: 'init',\n+      fingerprintId: 'codebuff-sdk',\n+      authToken: apiKey,\n+      fileContext,\n+      repoUrl,\n+    })\n+\n+    return promise\n+  }\n+\n+  private setupSubscriptions() {\n+    this.cbWebSocket.subscribe('action-error', this.onResponseError)\n+\n+    this.cbWebSocket.subscribe('read-files', async (a) => {\n+      const { filePaths, requestId } = a\n+      const files = await this.readFiles(filePaths)\n+\n+      this.cbWebSocket.sendAction({\n+        type: 'read-files-response',\n+        files,\n+        requestId,\n+      })\n+    })\n+\n+    // Handle backend-initiated tool call requests\n+    this.cbWebSocket.subscribe('tool-call-request', async (action) => {\n+      const toolCallResult = await this.handleToolCall(action)\n+\n+      this.cbWebSocket.sendAction({\n+        type: 'tool-call-response',\n+        requestId: action.requestId,\n+        ...toolCallResult,\n+      })\n+    })\n+\n+    this.cbWebSocket.subscribe('message-cost-response', this.onCostResponse)\n+\n+    this.cbWebSocket.subscribe('usage-response', this.onUsageResponse)\n+\n+    // Used to handle server restarts gracefully\n+    this.cbWebSocket.subscribe('request-reconnect', this.onRequestReconnect)\n+\n+    // Handle streaming messages\n+    this.cbWebSocket.subscribe('response-chunk', this.onResponseChunk)\n+    this.cbWebSocket.subscribe(\n+      'subagent-response-chunk',\n+      this.onSubagentResponseChunk,\n+    )\n+\n+    // Handle full response from prompt\n+    this.cbWebSocket.subscribe('prompt-response', this.onPromptResponse)\n+  }\n+}\n"
        }
      ]
    },
    {
      "id": "new-account-banner",
      "sha": "e79f36b22994fed995e5e4f2f9dbe01d7d4b9f3e",
      "parentSha": "a7841066e230e221b94c9ed1e6c25b0e3aab0fca",
      "spec": "Implement a one-week age gate for the referral banner based on the user's account creation date.\n\nRequired changes:\n1) API: web/src/app/api/user/profile/route.ts\n- Extend the user query to include created_at in the selected columns.\n- Add created_at to the JSON response object so the frontend can consume it.\n- Preserve existing fields and logic (auto_topup_* and blocked_reason). Return created_at as a serializable value.\n\n2) Types: web/src/types/user.ts\n- Extend the UserProfile interface to include created_at: Date | null to reflect the frontend usage. This will be populated by the new hook (converted from the API’s serialized value).\n\n3) Frontend data hook: web/src/hooks/use-user-profile.ts (new file)\n- Create a React Query hook that fetches /api/user/profile when a user session exists.\n- On successful fetch, convert created_at (if present as a string) into a Date.\n- Cache the profile in localStorage under a stable key and hydrate initialData from it; clear this cache on user logout.\n- Expose a clearCache helper in the returned result.\n- Use a distinct query key (e.g., ['user-profile']).\n\n4) Banner visibility: web/src/components/ui/banner.tsx\n- Import and use the new useUserProfile hook.\n- Compute isNewAccount as true when created_at exists and is within the last 7 days; otherwise false.\n- Only render the banner when the component is visible, a session exists, the user profile is loaded, and isNewAccount is true.\n- Keep existing referral detection via search params and PostHog tracking intact.\n\nBehavioral outcomes:\n- For accounts created within the last 7 days, the referral banner displays as before.\n- For accounts older than 7 days, the banner does not render.\n- If created_at is absent or the user is not authenticated, the banner does not render.\n- User profile is efficiently cached client-side and survives soft navigations; cache clears on logout.\n",
      "prompt": "Show the referral banner only for new users. Expose the account creation date from the user profile API, add a frontend hook to fetch and cache the profile, and update the banner to render only when the account is less than a week old. Keep existing referral behavior and analytics intact.",
      "supplementalFiles": [
        "common/src/db/schema.ts",
        "web/src/components/providers/query-client-provider.tsx",
        "web/src/app/layout.tsx",
        "web/src/hooks/use-auto-topup.ts",
        "web/src/hooks/use-organization-data.ts",
        "web/src/app/onboard/page.tsx"
      ],
      "fileDiffs": [
        {
          "path": "web/src/app/api/user/profile/route.ts",
          "status": "modified",
          "diff": "Index: web/src/app/api/user/profile/route.ts\n===================================================================\n--- web/src/app/api/user/profile/route.ts\ta784106 (parent)\n+++ web/src/app/api/user/profile/route.ts\te79f36b (commit)\n@@ -25,8 +25,9 @@\n         referral_code: true,\n         auto_topup_enabled: true,\n         auto_topup_threshold: true,\n         auto_topup_amount: true,\n+        created_at: true,\n       },\n     })\n \n     if (!user) {\n@@ -42,8 +43,9 @@\n       auto_topup_enabled: user.auto_topup_enabled && !auto_topup_blocked_reason,\n       auto_topup_threshold: user.auto_topup_threshold ?? 500,\n       auto_topup_amount: user.auto_topup_amount ?? 2000,\n       auto_topup_blocked_reason,\n+      created_at: user.created_at,\n     }\n \n     return NextResponse.json(response)\n   } catch (error) {\n"
        },
        {
          "path": "web/src/components/ui/banner.tsx",
          "status": "modified",
          "diff": "Index: web/src/components/ui/banner.tsx\n===================================================================\n--- web/src/components/ui/banner.tsx\ta784106 (parent)\n+++ web/src/components/ui/banner.tsx\te79f36b (commit)\n@@ -9,17 +9,29 @@\n import posthog from 'posthog-js'\n import { Suspense, useState } from 'react'\n \n import { Button } from './button'\n+import { useUserProfile } from '@/hooks/use-user-profile'\n \n function BannerContent() {\n   const [isVisible, setIsVisible] = useState(true)\n   const searchParams = useSearchParams()\n   const referrer = searchParams.get('referrer')\n   const { data: session } = useSession()\n \n-  if (!isVisible || !session?.user) return null\n+  const { data: userProfile } = useUserProfile()\n \n+  if (!isVisible || !session?.user || !userProfile) return null\n+\n+  // Check if account is less than a week old\n+  const isNewAccount = userProfile.created_at\n+    ? new Date().getTime() - new Date(userProfile.created_at).getTime() <\n+      7 * 24 * 60 * 60 * 1000\n+    : false\n+\n+  // Only show banner for new accounts (less than a week old)\n+  if (!isNewAccount) return null\n+\n   const isPersonalReferral = !!referrer\n \n   return (\n     <div className=\"w-full bg-[#7CFF3F] text-black relative z-20\">\n"
        },
        {
          "path": "web/src/hooks/use-user-profile.ts",
          "status": "added",
          "diff": "Index: web/src/hooks/use-user-profile.ts\n===================================================================\n--- web/src/hooks/use-user-profile.ts\ta784106 (parent)\n+++ web/src/hooks/use-user-profile.ts\te79f36b (commit)\n@@ -1,1 +1,93 @@\n-[NEW FILE]\n\\ No newline at end of file\n+import { useQuery } from '@tanstack/react-query'\n+import { useSession } from 'next-auth/react'\n+import { useEffect } from 'react'\n+\n+import type { UserProfile } from '@/types/user'\n+\n+const USER_PROFILE_STORAGE_KEY = 'codebuff-user-profile'\n+\n+// Helper functions for local storage\n+const getUserProfileFromStorage = (): UserProfile | null => {\n+  if (typeof window === 'undefined') return null\n+  \n+  try {\n+    const stored = localStorage.getItem(USER_PROFILE_STORAGE_KEY)\n+    if (!stored) return null\n+    \n+    const parsed = JSON.parse(stored)\n+    // Convert created_at string back to Date if it exists\n+    if (parsed.created_at) {\n+      parsed.created_at = new Date(parsed.created_at)\n+    }\n+    return parsed\n+  } catch {\n+    return null\n+  }\n+}\n+\n+const setUserProfileToStorage = (profile: UserProfile) => {\n+  if (typeof window === 'undefined') return\n+  \n+  try {\n+    localStorage.setItem(USER_PROFILE_STORAGE_KEY, JSON.stringify(profile))\n+  } catch {\n+    // Silently fail if localStorage is not available\n+  }\n+}\n+\n+const clearUserProfileFromStorage = () => {\n+  if (typeof window === 'undefined') return\n+  \n+  try {\n+    localStorage.removeItem(USER_PROFILE_STORAGE_KEY)\n+  } catch {\n+    // Silently fail if localStorage is not available\n+  }\n+}\n+\n+export const useUserProfile = () => {\n+  const { data: session } = useSession()\n+\n+  const query = useQuery<UserProfile>({\n+    queryKey: ['user-profile'],\n+    queryFn: async () => {\n+      const response = await fetch('/api/user/profile')\n+      if (!response.ok) {\n+        throw new Error('Failed to fetch user profile')\n+      }\n+      const data = await response.json()\n+      \n+      // Convert created_at string to Date if it exists\n+      if (data.created_at) {\n+        data.created_at = new Date(data.created_at)\n+      }\n+      \n+      return data\n+    },\n+    enabled: !!session?.user,\n+    staleTime: 5 * 60 * 1000, // 5 minutes\n+    initialData: () => {\n+      // Return undefined if no data, which is compatible with useQuery\n+      return getUserProfileFromStorage() ?? undefined\n+    },\n+  })\n+\n+  // Persist to localStorage whenever data changes\n+  useEffect(() => {\n+    if (query.data) {\n+      setUserProfileToStorage(query.data)\n+    }\n+  }, [query.data])\n+\n+  // Clear localStorage when user logs out\n+  useEffect(() => {\n+    if (!session?.user) {\n+      clearUserProfileFromStorage()\n+    }\n+  }, [session?.user])\n+\n+  return {\n+    ...query,\n+    clearCache: clearUserProfileFromStorage,\n+  }\n+}\n"
        },
        {
          "path": "web/src/types/user.ts",
          "status": "modified",
          "diff": "Index: web/src/types/user.ts\n===================================================================\n--- web/src/types/user.ts\ta784106 (parent)\n+++ web/src/types/user.ts\te79f36b (commit)\n@@ -10,5 +10,6 @@\n   auto_topup_enabled: boolean\n   auto_topup_threshold: number | null\n   auto_topup_amount: number | null\n   auto_topup_blocked_reason: string | null\n+  created_at: Date | null\n }\n"
        }
      ]
    },
    {
      "id": "respect-agent-subagents",
      "sha": "a7841066e230e221b94c9ed1e6c25b0e3aab0fca",
      "parentSha": "5daa4424303a0c6416051083e73e6eb69e37e262",
      "spec": "Implement three coordinated changes:\n\n1) Preserve subagents when --agent is specified\n- File: backend/src/main-prompt.ts\n- Behavior: If the prompt action includes a CLI-specified agentId, do not modify that agent's subagents array. Only update/expand subagents when no agentId was provided.\n- Implementation details:\n  - Initialize updatedSubagents to mainAgentTemplate.subagents.\n  - If agentId is not set, set updatedSubagents to either fileContext.codebuffConfig?.subagents (when present) or the union of mainAgentTemplate.subagents and availableAgents (deduped).\n  - Assign mainAgentTemplate.subagents = updatedSubagents and persist in localAgentTemplates.\n\n2) Always load and display local agents on CLI startup\n- File: npm-app/src/index.ts\n- Behavior: Unconditionally load local agents and display the configured/loaded agents in the CLI startup logs, regardless of whether --agent was passed.\n- Implementation details:\n  - Remove the conditional guard that previously wrapped loadLocalAgents/displayLoadedAgents with if (!agent).\n  - Ensure loadLocalAgents({ verbose: true }) runs and then displayLoadedAgents(loadCodebuffConfig()) is called.\n\n3) Normalize file-explorer subagent ID to local identifier\n- File: .agents/file-explorer.ts\n- Behavior: Update the subagents list to reference the local agent id 'file-picker' instead of a publisher/version-scoped id. This ensures compatibility with the spawn_agents allowlist validation and local agent resolution.\n- Implementation details:\n  - Replace subagents: [`codebuff/file-picker@${version}`] with subagents: [`file-picker`].\n\nAcceptance criteria:\n- Running the CLI with --agent <some-agent> preserves that agent's subagents as authored (no merging with codebuff.json or all available local agents).\n- Running the CLI without --agent continues to apply codebuff.json.subagents when present, otherwise merges all available local agents into the main agent's subagents.\n- On startup (with or without --agent), the CLI logs configured base agent and/or configured subagents or found custom agents as before.\n- Spawning from the file-explorer agent successfully resolves and allows 'file-picker' as a subagent without requiring a publisher/version-qualified id.",
      "prompt": "Update the agent selection and loading behavior so that choosing a specific agent via the CLI does not alter that agent’s subagent allowlist. When no agent is specified, keep the current behavior of using subagents from the project config or falling back to all local agents. Ensure the CLI always loads and displays local agents on startup for discoverability. Also align the file-explorer agent to reference the local file picker subagent by its simple id, not a publisher/version-qualified id.",
      "supplementalFiles": [
        "npm-app/src/agents/load-agents.ts",
        "npm-app/src/cli-definitions.ts",
        "npm-app/src/cli.ts",
        "backend/src/templates/agent-registry.ts",
        "backend/src/tools/handlers/tool/spawn-agents.ts",
        "npm-app/src/json-config/parser.ts",
        "common/src/types/dynamic-agent-template.ts"
      ],
      "fileDiffs": [
        {
          "path": ".agents/file-explorer.ts",
          "status": "modified",
          "diff": "Index: .agents/file-explorer.ts\n===================================================================\n--- .agents/file-explorer.ts\t5daa442 (parent)\n+++ .agents/file-explorer.ts\ta784106 (commit)\n@@ -12,9 +12,9 @@\n   model: 'anthropic/claude-4-sonnet-20250522',\n   outputMode: 'json',\n   includeMessageHistory: false,\n   toolNames: ['spawn_agents', 'set_output'],\n-  subagents: [`codebuff/file-picker@${version}`],\n+  subagents: [`file-picker`],\n   inputSchema: {\n     prompt: {\n       description: 'What you need to accomplish by exploring the codebase',\n       type: 'string',\n"
        },
        {
          "path": "backend/src/main-prompt.ts",
          "status": "modified",
          "diff": "Index: backend/src/main-prompt.ts\n===================================================================\n--- backend/src/main-prompt.ts\t5daa442 (parent)\n+++ backend/src/main-prompt.ts\ta784106 (commit)\n@@ -167,12 +167,15 @@\n   if (!mainAgentTemplate) {\n     throw new Error(`Agent template not found for type: ${agentType}`)\n   }\n \n-  // Update the main agent template with subagents from codebuff config or add all dynamic agents\n-  const updatedSubagents =\n-    fileContext.codebuffConfig?.subagents ??\n-    uniq([...mainAgentTemplate.subagents, ...availableAgents])\n+  let updatedSubagents = mainAgentTemplate.subagents\n+  if (!agentId) {\n+    // If --agent is not specified, use the subagents from the codebuff config or add all local agents\n+    updatedSubagents =\n+      fileContext.codebuffConfig?.subagents ??\n+      uniq([...mainAgentTemplate.subagents, ...availableAgents])\n+  }\n   mainAgentTemplate.subagents = updatedSubagents\n   localAgentTemplates[agentType] = mainAgentTemplate\n \n   const { agentState } = await loopAgentSteps(ws, {\n"
        },
        {
          "path": "npm-app/src/index.ts",
          "status": "modified",
          "diff": "Index: npm-app/src/index.ts\n===================================================================\n--- npm-app/src/index.ts\t5daa442 (parent)\n+++ npm-app/src/index.ts\ta784106 (commit)\n@@ -54,14 +54,12 @@\n   const initFileContextPromise = initProjectFileContextWithWorker(projectRoot)\n \n   // Only load local agents if no specific agent is requested\n   const loadLocalAgentsPromise = new Promise<void>((resolve) => {\n-    if (!agent) {\n-      loadLocalAgents({ verbose: true }).then(() => {\n-        const codebuffConfig = loadCodebuffConfig()\n-        displayLoadedAgents(codebuffConfig)\n-      })\n-    }\n+    loadLocalAgents({ verbose: true }).then(() => {\n+      const codebuffConfig = loadCodebuffConfig()\n+      displayLoadedAgents(codebuffConfig)\n+    })\n     resolve()\n   })\n \n   const readyPromise = Promise.all([\n"
        }
      ]
    },
    {
      "id": "unify-tool-types",
      "sha": "2c7027715652da5cc87e54e1c87883d44ae954f2",
      "parentSha": "59eaafe6974950d73a7c9c561e330bd593bfc241",
      "spec": "Implement the following cohesive updates across agents, types, rendering, and tests:\n\n1) Update open-source agent models\n- File: .agents/opensource/researcher.ts\n  - Set model to 'z-ai/glm-4.5:fast'.\n- File: .agents/opensource/thinker.ts\n  - Set model to 'qwen/qwen3-235b-a22b-thinking-2507:fast'.\n\n2) Align agent config typing for handleSteps in agent template types (agents template copy)\n- File: .agents/types/agent-config.d.ts\n  - In the generator return type for handleSteps, change the third generic (the yielded back value) from `{ agentState: AgentState; toolResult: string | undefined }` to `{ agentState: AgentState; toolResult: ToolResult | undefined }`.\n  - In the example JSDoc above handleSteps, simplify the step loop to `yield 'STEP'` (remove the sample code that inspects `toolResult?.toolName === 'end_turn'`).\n\n3) Normalize tool parameter type declarations for agent templates (agents template copy)\n- File: .agents/types/tools.d.ts\n  - Keep the ToolName union unchanged in meaning but present it in compact single-line form.\n  - For ToolParamsMap keys, use quoted string literal keys (e.g., 'add_message') for consistency with downstream JSON schema generation.\n  - For all tool param interfaces, change fields to quoted property names (e.g., \"role\", \"content\", etc.) for JSON-like clarity and consistency.\n  - Define EndTurnParams and SetOutputParams as explicit empty interfaces with braces rather than empty type aliases.\n  - Do not change any tool semantics; this is a typing/formatting normalization.\n\n4) Remove transport-only flag from common tool param types\n- File: common/src/util/types/tools.d.ts\n  - Remove any reference to \"cb_easp\" from tool parameter interfaces (specifically from CodeSearchParams). This flag is a transport parameter and should not appear in the tool params types.\n\n5) Refactor CLI tool renderers for spawn agents\n- File: npm-app/src/utils/tool-renderers.ts\n  - Remove import and usage of AGENT_PERSONAS.\n  - Introduce a shared helper `renderSpawnAgentsParam(paramName, toolName, content)` that:\n    - When paramName is 'agents', parses the JSON content into an array of objects with fields { agent_type, prompt, params? }.\n    - Resolves each agent display name from Client.getInstance(false)?.agentNames[agent_type]; when missing, fall back to the raw agent_type string.\n    - Returns a formatted, gray text block where each agent is rendered as `@${bold(agentName)}:\\n${prompt || 'No prompt provided'}`, joined by a blank line, and ending with a newline. Return null if content cannot be parsed or empty.\n  - Use this helper for both spawn_agents and spawn_agents_async renderers' onParamEnd.\n  - Keep onToolStart to render \"[Spawn Agents]\" and onToolEnd to start the Spinner with \"Agents running...\" unchanged.\n\n6) Harden read_docs tests to avoid network and improve determinism\n- File: backend/src/__tests__/read-docs-tool.test.ts\n  - In tests that fetch documentation (including the basic query and topic/max_tokens variants), mock context7Api.searchLibraries to return a single library object with plausible fields (e.g., id/title/description/branch/lastUpdateDate/state/totalTokens/totalSnippets/totalPages) before mocking fetchContext7LibraryDocumentation.\n  - In the \"should handle case when no documentation is found\" test, also mock searchLibraries to return an empty array to ensure the handler returns the no-documentation message without network calls.\n  - For error-path tests (API errors, non-Error exceptions), mock searchLibraries to return a valid library list so the doc fetch path is exercised deterministically prior to throwing in fetchContext7LibraryDocumentation.\n\nAcceptance criteria:\n- All modified types compile across the monorepo, and the agent-builder’s inclusion of these .d.ts files still works.\n- npm-app spawn_agents and spawn_agents_async rendering shows dynamic agent display names when available and otherwise shows the raw agent type; no static AGENT_PERSONAS fallback is used.\n- The tests in backend/src/__tests__/read-docs-tool.test.ts run without attempting any network calls to Context7 and pass deterministically.\n- No tool parameter interface includes cb_easp in common/src/util/types/tools.d.ts.\n",
      "prompt": "Bring agent, type, and rendering behavior into alignment across the project. Update the open-source researcher and thinker agents to use the latest intended models. Normalize and modernize the agent template and tool parameter type definitions so they reflect real runtime structures and avoid transport-only flags. Unify the spawn agents rendering to prefer dynamic agent names provided by the client and gracefully fall back when unknown, without relying on static personas. Finally, make the read_docs tests deterministic by stubbing the library search so no network calls occur.",
      "supplementalFiles": [
        "common/src/constants/agents.ts",
        "npm-app/src/client.ts",
        "backend/src/llm-apis/context7-api.ts",
        "backend/src/tools/handlers/tool/read-docs.ts",
        "backend/src/templates/agents/agent-builder.ts",
        "common/src/tools/constants.ts"
      ],
      "fileDiffs": [
        {
          "path": ".agents/opensource/researcher.ts",
          "status": "modified",
          "diff": "Index: .agents/opensource/researcher.ts\n===================================================================\n--- .agents/opensource/researcher.ts\t59eaafe (parent)\n+++ .agents/opensource/researcher.ts\t2c70277 (commit)\n@@ -2,9 +2,9 @@\n \n const config: AgentConfig = {\n   id: 'oss-model-researcher',\n   publisher: 'codebuff',\n-  model: 'qwen/qwen3-235b-a22b-thinking-2507',\n+  model: 'z-ai/glm-4.5:fast',\n   displayName: 'Reid the Researcher',\n   parentPrompt:\n     'Expert researcher for comprehensive web search and documentation analysis, focusing on external research and actionable insights from external sources.',\n   inputSchema: {\n"
        },
        {
          "path": ".agents/opensource/thinker.ts",
          "status": "modified",
          "diff": "Index: .agents/opensource/thinker.ts\n===================================================================\n--- .agents/opensource/thinker.ts\t59eaafe (parent)\n+++ .agents/opensource/thinker.ts\t2c70277 (commit)\n@@ -2,9 +2,9 @@\n \n const config: AgentConfig = {\n   id: 'oss-model-thinker',\n   publisher: 'codebuff',\n-  model: 'meta-llama/llama-4-maverick-8b:fast',\n+  model: 'qwen/qwen3-235b-a22b-thinking-2507:fast',\n   displayName: 'Theo the Thinker',\n   parentPrompt:\n     'Deep thinking agent, optimized for complex reasoning and step-by-step analysis.',\n   inputSchema: {\n"
        },
        {
          "path": ".agents/types/agent-config.d.ts",
          "status": "modified",
          "diff": "Index: .agents/types/agent-config.d.ts\n===================================================================\n--- .agents/types/agent-config.d.ts\t59eaafe (parent)\n+++ .agents/types/agent-config.d.ts\t2c70277 (commit)\n@@ -138,21 +138,18 @@\n    *         },\n    *       ],\n    *     },\n    *   }\n-   *   const { toolResult: thinkResult } = yield 'STEP'\n-   *   if (thinkResult?.toolName === 'end_turn') {\n-   *     break\n-   *   }\n+   *   yield 'STEP'\n    * }\n    * }\n    */\n   handleSteps?: (\n     context: AgentStepContext,\n   ) => Generator<\n     ToolCall | 'STEP' | 'STEP_ALL',\n     void,\n-    { agentState: AgentState; toolResult: string | undefined }\n+    { agentState: AgentState; toolResult: ToolResult | undefined }\n   >\n }\n \n // ============================================================================\n"
        },
        {
          "path": ".agents/types/tools.d.ts",
          "status": "modified",
          "diff": "Index: .agents/types/tools.d.ts\n===================================================================\n--- .agents/types/tools.d.ts\t59eaafe (parent)\n+++ .agents/types/tools.d.ts\t2c70277 (commit)\n@@ -1,282 +1,265 @@\n /**\n  * Union type of all available tool names\n  */\n-export type ToolName =\n-  | 'add_message'\n-  | 'add_subgoal'\n-  | 'browser_logs'\n-  | 'code_search'\n-  | 'create_plan'\n-  | 'end_turn'\n-  | 'find_files'\n-  | 'read_docs'\n-  | 'read_files'\n-  | 'run_file_change_hooks'\n-  | 'run_terminal_command'\n-  | 'send_agent_message'\n-  | 'set_messages'\n-  | 'set_output'\n-  | 'spawn_agents'\n-  | 'spawn_agents_async'\n-  | 'str_replace'\n-  | 'think_deeply'\n-  | 'update_subgoal'\n-  | 'web_search'\n-  | 'write_file'\n+export type ToolName = 'add_message' | 'add_subgoal' | 'browser_logs' | 'code_search' | 'create_plan' | 'end_turn' | 'find_files' | 'read_docs' | 'read_files' | 'run_file_change_hooks' | 'run_terminal_command' | 'send_agent_message' | 'set_messages' | 'set_output' | 'spawn_agents' | 'spawn_agents_async' | 'str_replace' | 'think_deeply' | 'update_subgoal' | 'web_search' | 'write_file'\n \n /**\n  * Map of tool names to their parameter types\n  */\n export interface ToolParamsMap {\n-  add_message: AddMessageParams\n-  add_subgoal: AddSubgoalParams\n-  browser_logs: BrowserLogsParams\n-  code_search: CodeSearchParams\n-  create_plan: CreatePlanParams\n-  end_turn: EndTurnParams\n-  find_files: FindFilesParams\n-  read_docs: ReadDocsParams\n-  read_files: ReadFilesParams\n-  run_file_change_hooks: RunFileChangeHooksParams\n-  run_terminal_command: RunTerminalCommandParams\n-  send_agent_message: SendAgentMessageParams\n-  set_messages: SetMessagesParams\n-  set_output: SetOutputParams\n-  spawn_agents: SpawnAgentsParams\n-  spawn_agents_async: SpawnAgentsAsyncParams\n-  str_replace: StrReplaceParams\n-  think_deeply: ThinkDeeplyParams\n-  update_subgoal: UpdateSubgoalParams\n-  web_search: WebSearchParams\n-  write_file: WriteFileParams\n+  'add_message': AddMessageParams\n+  'add_subgoal': AddSubgoalParams\n+  'browser_logs': BrowserLogsParams\n+  'code_search': CodeSearchParams\n+  'create_plan': CreatePlanParams\n+  'end_turn': EndTurnParams\n+  'find_files': FindFilesParams\n+  'read_docs': ReadDocsParams\n+  'read_files': ReadFilesParams\n+  'run_file_change_hooks': RunFileChangeHooksParams\n+  'run_terminal_command': RunTerminalCommandParams\n+  'send_agent_message': SendAgentMessageParams\n+  'set_messages': SetMessagesParams\n+  'set_output': SetOutputParams\n+  'spawn_agents': SpawnAgentsParams\n+  'spawn_agents_async': SpawnAgentsAsyncParams\n+  'str_replace': StrReplaceParams\n+  'think_deeply': ThinkDeeplyParams\n+  'update_subgoal': UpdateSubgoalParams\n+  'web_search': WebSearchParams\n+  'write_file': WriteFileParams\n }\n \n /**\n  * Add a new message to the conversation history. To be used for complex requests that can't be solved in a single step, as you may forget what happened!\n  */\n export interface AddMessageParams {\n-  role: 'user' | 'assistant'\n-  content: string\n+  \"role\": \"user\" | \"assistant\"\n+  \"content\": string\n }\n \n /**\n  * Add a new subgoal for tracking progress. To be used for complex requests that can't be solved in a single step, as you may forget what happened!\n  */\n export interface AddSubgoalParams {\n   // A unique identifier for the subgoal. Try to choose the next sequential integer that is not already in use.\n-  id: string\n+  \"id\": string\n   // The objective of the subgoal, concisely and clearly stated.\n-  objective: string\n+  \"objective\": string\n   // The status of the subgoal.\n-  status: 'NOT_STARTED' | 'IN_PROGRESS' | 'COMPLETE' | 'ABORTED'\n+  \"status\": \"NOT_STARTED\" | \"IN_PROGRESS\" | \"COMPLETE\" | \"ABORTED\"\n   // A plan for the subgoal.\n-  plan?: string\n+  \"plan\"?: string\n   // A log message for the subgoal progress.\n-  log?: string\n+  \"log\"?: string\n }\n \n /**\n  * Parameters for browser_logs tool\n  */\n export interface BrowserLogsParams {\n   // The type of browser action to perform (e.g., \"navigate\").\n-  type: string\n+  \"type\": string\n   // The URL to navigate to.\n-  url: string\n+  \"url\": string\n   // When to consider navigation successful. Defaults to 'load'.\n-  waitUntil?: 'load' | 'domcontentloaded' | 'networkidle0'\n+  \"waitUntil\"?: \"load\" | \"domcontentloaded\" | \"networkidle0\"\n }\n \n /**\n  * Search for string patterns in the project's files. This tool uses ripgrep (rg), a fast line-oriented search tool. Use this tool only when read_files is not sufficient to find the files you need.\n  */\n export interface CodeSearchParams {\n   // The pattern to search for.\n-  pattern: string\n+  \"pattern\": string\n   // Optional ripgrep flags to customize the search (e.g., \"-i\" for case-insensitive, \"-t ts\" for TypeScript files only, \"-A 3\" for 3 lines after match, \"-B 2\" for 2 lines before match, \"--type-not test\" to exclude test files).\n-  flags?: string\n+  \"flags\"?: string\n   // Optional working directory to search within, relative to the project root. Defaults to searching the entire project.\n-  cwd?: string\n+  \"cwd\"?: string\n }\n \n /**\n  * Generate a detailed markdown plan for complex tasks.\n  */\n export interface CreatePlanParams {\n   // The path including the filename of a markdown file that will be overwritten with the plan.\n-  path: string\n+  \"path\": string\n   // A detailed plan to solve the user's request.\n-  plan: string\n+  \"plan\": string\n }\n \n /**\n  * End your turn, regardless of any new tool results that might be coming. This will allow the user to type another prompt.\n  */\n-export interface EndTurnParams {}\n+export interface EndTurnParams {\n \n+}\n+\n /**\n  * Find several files related to a brief natural language description of the files or the name of a function or class you are looking for.\n  */\n export interface FindFilesParams {\n   // A brief natural language description of the files or the name of a function or class you are looking for. It's also helpful to mention a directory or two to look within.\n-  prompt: string\n+  \"prompt\": string\n }\n \n /**\n  * Fetch up-to-date documentation for libraries and frameworks using Context7 API.\n  */\n export interface ReadDocsParams {\n   // The exact library or framework name (e.g., \"Next.js\", \"MongoDB\", \"React\"). Use the official name as it appears in documentation, not a search query.\n-  libraryTitle: string\n+  \"libraryTitle\": string\n   // Optional specific topic to focus on (e.g., \"routing\", \"hooks\", \"authentication\")\n-  topic?: string\n+  \"topic\"?: string\n   // Optional maximum number of tokens to return. Defaults to 10000. Values less than 10000 are automatically increased to 10000.\n-  max_tokens?: number\n+  \"max_tokens\"?: number\n }\n \n /**\n  * Read the multiple files from disk and return their contents. Use this tool to read as many files as would be helpful to answer the user's request.\n  */\n export interface ReadFilesParams {\n   // List of file paths to read.\n-  paths: string[]\n+  \"paths\": string[]\n }\n \n /**\n  * Parameters for run_file_change_hooks tool\n  */\n export interface RunFileChangeHooksParams {\n   // List of file paths that were changed and should trigger file change hooks\n-  files: string[]\n+  \"files\": string[]\n }\n \n /**\n  * Execute a CLI command from the **project root** (different from the user's cwd).\n  */\n export interface RunTerminalCommandParams {\n   // CLI command valid for user's OS.\n-  command: string\n+  \"command\": string\n   // Either SYNC (waits, returns output) or BACKGROUND (runs in background). Default SYNC\n-  process_type: 'SYNC' | 'BACKGROUND'\n+  \"process_type\": \"SYNC\" | \"BACKGROUND\"\n   // The working directory to run the command in. Default is the project root.\n-  cwd?: string\n+  \"cwd\"?: string\n   // Set to -1 for no timeout. Does not apply for BACKGROUND commands. Default 30\n-  timeout_seconds: number\n+  \"timeout_seconds\": number\n }\n \n /**\n  * Send a message to another agent (parent or child) for communication and data exchange.\n  */\n export interface SendAgentMessageParams {\n   // ID of the target agent to send message to. Use \"PARENT_ID\" to send to parent agent.\n-  target_agent_id: string\n+  \"target_agent_id\": string\n   // Message prompt to send to the target agent\n-  prompt: string\n+  \"prompt\": string\n   // Optional parameters object to send with the message\n-  params?: Record<string, any>\n+  \"params\"?: Record<string, any>\n }\n \n /**\n  * Set the conversation history to the provided messages.\n  */\n export interface SetMessagesParams {\n-  messages: {\n-    role: 'user' | 'assistant'\n-    content: string\n-  }[]\n+  \"messages\": {\n+  \"role\": \"user\" | \"assistant\"\n+  \"content\": string\n+}[]\n }\n \n /**\n  * JSON object to set as the agent output. This completely replaces any previous output. If the agent was spawned, this value will be passed back to its parent. If the agent has an outputSchema defined, the output will be validated against it.\n  */\n-export interface SetOutputParams {}\n+export interface SetOutputParams {\n \n+}\n+\n /**\n  * Spawn multiple agents and send a prompt to each of them.\n  */\n export interface SpawnAgentsParams {\n-  agents: {\n-    // Agent to spawn\n-    agent_type: string\n-    // Prompt to send to the agent\n-    prompt?: string\n-    // Parameters object for the agent (if any)\n-    params?: Record<string, any>\n-  }[]\n+  \"agents\": {\n+  // Agent to spawn\n+  \"agent_type\": string\n+  // Prompt to send to the agent\n+  \"prompt\"?: string\n+  // Parameters object for the agent (if any)\n+  \"params\"?: Record<string, any>\n+}[]\n }\n \n /**\n  * Parameters for spawn_agents_async tool\n  */\n export interface SpawnAgentsAsyncParams {\n-  agents: {\n-    // Agent to spawn\n-    agent_type: string\n-    // Prompt to send to the agent\n-    prompt?: string\n-    // Parameters object for the agent (if any)\n-    params?: Record<string, any>\n-  }[]\n+  \"agents\": {\n+  // Agent to spawn\n+  \"agent_type\": string\n+  // Prompt to send to the agent\n+  \"prompt\"?: string\n+  // Parameters object for the agent (if any)\n+  \"params\"?: Record<string, any>\n+}[]\n }\n \n /**\n  * Replace strings in a file with new strings.\n  */\n export interface StrReplaceParams {\n   // The path to the file to edit.\n-  path: string\n+  \"path\": string\n   // Array of replacements to make.\n-  replacements: {\n-    // The string to replace. This must be an *exact match* of the string you want to replace, including whitespace and punctuation.\n-    old: string\n-    // The string to replace the corresponding old string with. Can be empty to delete.\n-    new: string\n-  }[]\n+  \"replacements\": {\n+  // The string to replace. This must be an *exact match* of the string you want to replace, including whitespace and punctuation.\n+  \"old\": string\n+  // The string to replace the corresponding old string with. Can be empty to delete.\n+  \"new\": string\n+}[]\n }\n \n /**\n  * Deeply consider complex tasks by brainstorming approaches and tradeoffs step-by-step.\n  */\n export interface ThinkDeeplyParams {\n   // Detailed step-by-step analysis. Initially keep each step concise (max ~5-7 words per step).\n-  thought: string\n+  \"thought\": string\n }\n \n /**\n  * Update a subgoal in the context given the id, and optionally the status or plan, or a new log to append. Feel free to update any combination of the status, plan, or log in one invocation.\n  */\n export interface UpdateSubgoalParams {\n   // The id of the subgoal to update.\n-  id: string\n+  \"id\": string\n   // Change the status of the subgoal.\n-  status?: 'NOT_STARTED' | 'IN_PROGRESS' | 'COMPLETE' | 'ABORTED'\n+  \"status\"?: \"NOT_STARTED\" | \"IN_PROGRESS\" | \"COMPLETE\" | \"ABORTED\"\n   // Change the plan for the subgoal.\n-  plan?: string\n+  \"plan\"?: string\n   // Add a log message to the subgoal. This will create a new log entry and append it to the existing logs. Use this to record your progress and any new information you learned as you go.\n-  log?: string\n+  \"log\"?: string\n }\n \n /**\n  * Search the web for current information using Linkup API.\n  */\n export interface WebSearchParams {\n   // The search query to find relevant web content\n-  query: string\n+  \"query\": string\n   // Search depth - 'standard' for quick results, 'deep' for more comprehensive search. Default is 'standard'.\n-  depth: 'standard' | 'deep'\n+  \"depth\": \"standard\" | \"deep\"\n }\n \n /**\n  * Create or edit a file with the given content.\n  */\n export interface WriteFileParams {\n   // Path to the file relative to the **project root**\n-  path: string\n+  \"path\": string\n   // What the change is intended to do in only one sentence.\n-  instructions: string\n+  \"instructions\": string\n   // Edit snippet to apply to the file.\n-  content: string\n+  \"content\": string\n }\n \n /**\n  * Get parameters type for a specific tool\n"
        },
        {
          "path": "backend/src/__tests__/read-docs-tool.test.ts",
          "status": "modified",
          "diff": "Index: backend/src/__tests__/read-docs-tool.test.ts\n===================================================================\n--- backend/src/__tests__/read-docs-tool.test.ts\t59eaafe (parent)\n+++ backend/src/__tests__/read-docs-tool.test.ts\t2c70277 (commit)\n@@ -93,8 +93,21 @@\n   test.skip('should successfully fetch documentation with basic query', async () => {\n     const mockDocumentation =\n       'React is a JavaScript library for building user interfaces...'\n \n+    spyOn(context7Api, 'searchLibraries').mockImplementation(async () => [\n+      {\n+        id: 'react-123',\n+        title: 'React',\n+        description: 'A JavaScript library for building user interfaces',\n+        branch: 'main',\n+        lastUpdateDate: '2023-01-01',\n+        state: 'finalized',\n+        totalTokens: 10000,\n+        totalSnippets: 100,\n+        totalPages: 50,\n+      },\n+    ])\n     spyOn(context7Api, 'fetchContext7LibraryDocumentation').mockImplementation(\n       async () => mockDocumentation,\n     )\n \n@@ -152,8 +165,21 @@\n   test.skip('should fetch documentation with topic and max_tokens', async () => {\n     const mockDocumentation =\n       'React hooks allow you to use state and other React features...'\n \n+    spyOn(context7Api, 'searchLibraries').mockImplementation(async () => [\n+      {\n+        id: 'react-123',\n+        title: 'React',\n+        description: 'A JavaScript library for building user interfaces',\n+        branch: 'main',\n+        lastUpdateDate: '2023-01-01',\n+        state: 'finalized',\n+        totalTokens: 10000,\n+        totalSnippets: 100,\n+        totalPages: 50,\n+      },\n+    ])\n     spyOn(context7Api, 'fetchContext7LibraryDocumentation').mockImplementation(\n       async () => mockDocumentation,\n     )\n \n@@ -198,8 +224,10 @@\n     )\n   })\n \n   test('should handle case when no documentation is found', async () => {\n+    // Mock both searchLibraries and fetchContext7LibraryDocumentation to avoid network calls\n+    spyOn(context7Api, 'searchLibraries').mockImplementation(async () => [])\n     spyOn(context7Api, 'fetchContext7LibraryDocumentation').mockImplementation(\n       async () => null,\n     )\n \n@@ -251,8 +279,21 @@\n \n   test('should handle API errors gracefully', async () => {\n     const mockError = new Error('Network timeout')\n \n+    spyOn(context7Api, 'searchLibraries').mockImplementation(async () => [\n+      {\n+        id: 'react-123',\n+        title: 'React',\n+        description: 'A JavaScript library for building user interfaces',\n+        branch: 'main',\n+        lastUpdateDate: '2023-01-01',\n+        state: 'finalized',\n+        totalTokens: 10000,\n+        totalSnippets: 100,\n+        totalPages: 50,\n+      },\n+    ])\n     spyOn(context7Api, 'fetchContext7LibraryDocumentation').mockImplementation(\n       async () => {\n         throw mockError\n       },\n@@ -307,8 +348,21 @@\n     )\n   })\n \n   test('should include topic in error message when specified', async () => {\n+    spyOn(context7Api, 'searchLibraries').mockImplementation(async () => [\n+      {\n+        id: 'react-123',\n+        title: 'React',\n+        description: 'A JavaScript library for building user interfaces',\n+        branch: 'main',\n+        lastUpdateDate: '2023-01-01',\n+        state: 'finalized',\n+        totalTokens: 10000,\n+        totalSnippets: 100,\n+        totalPages: 50,\n+      },\n+    ])\n     spyOn(context7Api, 'fetchContext7LibraryDocumentation').mockImplementation(\n       async () => null,\n     )\n \n@@ -359,8 +413,21 @@\n     )\n   })\n \n   test('should handle non-Error exceptions', async () => {\n+    spyOn(context7Api, 'searchLibraries').mockImplementation(async () => [\n+      {\n+        id: 'react-123',\n+        title: 'React',\n+        description: 'A JavaScript library for building user interfaces',\n+        branch: 'main',\n+        lastUpdateDate: '2023-01-01',\n+        state: 'finalized',\n+        totalTokens: 10000,\n+        totalSnippets: 100,\n+        totalPages: 50,\n+      },\n+    ])\n     spyOn(context7Api, 'fetchContext7LibraryDocumentation').mockImplementation(\n       async () => {\n         throw 'String error'\n       },\n"
        },
        {
          "path": "common/src/util/types/tools.d.ts",
          "status": "modified",
          "diff": "Index: common/src/util/types/tools.d.ts\n===================================================================\n--- common/src/util/types/tools.d.ts\t59eaafe (parent)\n+++ common/src/util/types/tools.d.ts\t2c70277 (commit)\n@@ -75,10 +75,8 @@\n   // Optional ripgrep flags to customize the search (e.g., \"-i\" for case-insensitive, \"-t ts\" for TypeScript files only, \"-A 3\" for 3 lines after match, \"-B 2\" for 2 lines before match, \"--type-not test\" to exclude test files).\n   \"flags\"?: string\n   // Optional working directory to search within, relative to the project root. Defaults to searching the entire project.\n   \"cwd\"?: string\n-  // Easp flag must be set to true\n-  \"cb_easp\"?: boolean\n }\n \n /**\n  * Generate a detailed markdown plan for complex tasks.\n"
        },
        {
          "path": "npm-app/src/utils/tool-renderers.ts",
          "status": "modified",
          "diff": "Index: npm-app/src/utils/tool-renderers.ts\n===================================================================\n--- npm-app/src/utils/tool-renderers.ts\t59eaafe (parent)\n+++ npm-app/src/utils/tool-renderers.ts\t2c70277 (commit)\n@@ -1,5 +1,4 @@\n-import { AGENT_PERSONAS } from '@codebuff/common/constants/agents'\n import { isFileIgnored } from '@codebuff/common/project-file-tree'\n import { capitalize, snakeToTitleCase } from '@codebuff/common/util/string'\n import { bold, gray, strikethrough } from 'picocolors'\n \n@@ -8,8 +7,14 @@\n import { Spinner } from './spinner'\n \n import type { ToolName } from '@codebuff/common/tools/constants'\n \n+interface SpawnAgentConfig {\n+  agent_type: string\n+  prompt?: string\n+  params?: Record<string, any>\n+}\n+\n /**\n  * Interface for handling tool call rendering\n  */\n export interface ToolCallRenderer {\n@@ -46,9 +51,44 @@\n   ) => string | null | (() => void)\n }\n \n let toolStart = true\n+\n /**\n+ * Shared function for rendering spawn agents parameters\n+ */\n+const renderSpawnAgentsParam = (\n+  paramName: string,\n+  toolName: string,\n+  content: string,\n+) => {\n+  if (paramName === 'agents') {\n+    let agents: SpawnAgentConfig[] = []\n+    try {\n+      agents = JSON.parse(content)\n+    } catch (e) {\n+      return null\n+    }\n+    if (agents.length > 0) {\n+      const client = Client.getInstance(false)\n+      return gray(\n+        agents\n+          .map((props: SpawnAgentConfig) => {\n+            const agentType = props.agent_type\n+            const prompt = props.prompt\n+            const agentName =\n+              (client?.agentNames && client.agentNames[agentType]) || agentType\n+\n+            return `@${bold(agentName)}:\\n${prompt || 'No prompt provided'}`\n+          })\n+          .join('\\n\\n') + '\\n',\n+      )\n+    }\n+  }\n+  return null\n+}\n+\n+/**\n  * Default renderer for tool calls that formats them nicely for the console\n  */\n export const defaultToolCallRenderer: ToolCallRenderer = {\n   onToolStart: (toolName) => {\n@@ -257,44 +297,9 @@\n   spawn_agents: {\n     onToolStart: (toolName) => {\n       return '\\n\\n' + gray(`[${bold('Spawn Agents')}]`) + '\\n'\n     },\n-    onParamEnd: (paramName, toolName, content) => {\n-      if (paramName === 'agents') {\n-        let agents = []\n-        try {\n-          agents = JSON.parse(content)\n-        } catch (e) {\n-          return null\n-        }\n-        if (agents.length > 0) {\n-          return gray(\n-            agents\n-              .map((props: any) => {\n-                const agentType = props?.agent_type\n-                const prompt = props?.prompt\n-                // Try to get agent name from client's stored names (includes dynamic agents),\n-                // fallback to static personas, then agent type\n-                const client = Client.getInstance(false) // Don't throw if not initialized\n-                const agentName =\n-                  (client?.agentNames && client.agentNames[agentType]) ||\n-                  AGENT_PERSONAS[agentType as keyof typeof AGENT_PERSONAS]\n-                    ?.displayName ||\n-                  null\n-\n-                if (!agentName) {\n-                  // Invalid agent type - skip it\n-                  return null\n-                }\n-\n-                return `@${bold(agentName)}:\\n${prompt || 'No prompt provided'}`\n-              })\n-              .join('\\n\\n') + '\\n',\n-          )\n-        }\n-      }\n-      return null\n-    },\n+    onParamEnd: renderSpawnAgentsParam,\n     onToolEnd: () => {\n       return () => {\n         Spinner.get().start('Agents running...')\n         return '\\n'\n@@ -304,44 +309,9 @@\n   spawn_agents_async: {\n     onToolStart: (toolName) => {\n       return '\\n\\n' + gray(`[${bold('Spawn Agents')}]`) + '\\n'\n     },\n-    onParamEnd: (paramName, toolName, content) => {\n-      if (paramName === 'agents') {\n-        let agents = []\n-        try {\n-          agents = JSON.parse(content)\n-        } catch (e) {\n-          return null\n-        }\n-        if (agents.length > 0) {\n-          return gray(\n-            agents\n-              .map((props: any) => {\n-                const agentType = props?.agent_type\n-                const prompt = props?.prompt\n-                // Try to get agent name from client's stored names (includes dynamic agents),\n-                // fallback to static personas, then agent type\n-                const client = Client.getInstance(false) // Don't throw if not initialized\n-                const agentName =\n-                  (client?.agentNames && client.agentNames[agentType]) ||\n-                  AGENT_PERSONAS[agentType as keyof typeof AGENT_PERSONAS]\n-                    ?.displayName ||\n-                  null\n-\n-                if (!agentName) {\n-                  // Invalid agent type - skip it\n-                  return null\n-                }\n-\n-                return `@${bold(agentName)}:\\n${prompt || 'No prompt provided'}`\n-              })\n-              .join('\\n\\n') + '\\n',\n-          )\n-        }\n-      }\n-      return null\n-    },\n+    onParamEnd: renderSpawnAgentsParam,\n     onToolEnd: () => {\n       return () => {\n         Spinner.get().start('Agents running...')\n         return '\\n'\n"
        }
      ]
    },
    {
      "id": "refactor-agent-loading",
      "sha": "59eaafe6974950d73a7c9c561e330bd593bfc241",
      "parentSha": "a0ae42629f444703695b351e46f48198539e3003",
      "spec": "Implement the following changes across the specified files:\n\n1) Validate DB agents with short ID, then set full ID (backend/src/templates/agent-registry.ts)\n- In fetchAgentFromDatabase, change validation to call validateSingleAgent using the raw agent data with id set to the original agentId (the short slug, without publisher or version). Pass filePath as \"publisherId/agentId@version\" and set skipSubagentValidation: true.\n- After a successful validation, construct the final AgentTemplate by copying validationResult.agentTemplate and overriding id to the full identifier: \"publisherId/agentId@version\".\n- Update logging:\n  - On validation error: remove logging of fullAgentId; keep publisherId, agentId, version, and error.\n  - On success: log fullAgentId using the final agentTemplate.id and omit logging the entire agentConfig object.\n- Return the final agentTemplate instead of validationResult.agentTemplate.\n\n2) Only load local agents when no agent is specified and avoid early config reference (npm-app/src/index.ts)\n- Introduce a promise (e.g., loadLocalAgentsPromise) that resolves immediately; if no specific agent is requested (i.e., agent is falsy), inside that promise call loadLocalAgents({ verbose: true }) and then, after it resolves, load the Codebuff config via loadCodebuffConfig() and call displayLoadedAgents with it.\n- Replace the existing unconditional loadLocalAgents(...) in the readyPromise with the new conditional loadLocalAgentsPromise.\n- Ensure there is no reference to codebuffConfig before it is defined; do not use a top-level codebuffConfig variable in the readyPromise chain.\n- Preserve the existing initialization flow and CLI initialization parameters.\n\n3) Readability tweak (backend/src/websockets/websocket-action.ts)\n- Split the destructuring assignment that gets localAgentTemplates from assembleLocalAgentTemplates(fileContext) across multiple lines for readability without changing behavior.\n\nAcceptance criteria:\n- Validating a DB agent with an ID containing only lowercase letters, numbers, and hyphens succeeds; the final returned AgentTemplate has id in the full \"publisher/agent@version\" format.\n- Error logs on validation failure no longer include a fullAgentId field; success logs include fullAgentId matching the final AgentTemplate.id and do not include the raw agentConfig.\n- When starting the CLI with --agent set, local agents are not loaded or displayed; when --agent is not set, local agents are loaded and displayed after reading the config, and there are no references to config variables before they are initialized.\n- websocket-action formatting change compiles and has no functional impact.",
      "prompt": "Refactor the agent loading and validation flow.\n\nBackend: When fetching an agent from the database, validate the raw template using the simple agent ID (not the composite publisher/agent@version) to satisfy the schema, then set the full composite ID on the final template before returning it. Adjust logs accordingly so validation errors don’t log a full ID and successes log the correct full ID.\n\nCLI: Load local agents only when no specific --agent is requested. Ensure the configuration is loaded at the right time and avoid referencing it before it exists. Display loaded agents only after the config is read in that conditional path. Keep the overall startup sequence intact.\n\nAlso, apply a small readability improvement to the assembleLocalAgentTemplates destructuring in the WebSocket action without changing behavior.",
      "supplementalFiles": [
        "common/src/templates/agent-validation.ts",
        "common/src/types/dynamic-agent-template.ts",
        "npm-app/src/agents/load-agents.ts",
        "npm-app/src/json-config/parser.ts",
        "npm-app/src/cli.ts",
        "backend/src/async-agent-manager.ts"
      ],
      "fileDiffs": [
        {
          "path": "backend/src/templates/agent-registry.ts",
          "status": "modified",
          "diff": "Index: backend/src/templates/agent-registry.ts\n===================================================================\n--- backend/src/templates/agent-registry.ts\ta0ae426 (parent)\n+++ backend/src/templates/agent-registry.ts\t59eaafe (commit)\n@@ -99,46 +99,47 @@\n     }\n \n     const rawAgentData = agentConfig.data as DynamicAgentTemplate\n \n-    // Ensure the agent has the full publisher/agent-id@version as its ID\n-    const agentDataWithId = {\n-      ...rawAgentData,\n-      id: `${publisherId}/${agentId}@${agentConfig.version}`,\n-    }\n+    // Validate the raw agent data with the original agentId (not full identifier)\n+    const validationResult = validateSingleAgent(\n+      { ...rawAgentData, id: agentId },\n+      {\n+        filePath: `${publisherId}/${agentId}@${agentConfig.version}`,\n+        skipSubagentValidation: true,\n+      },\n+    )\n \n-    // Use validateSingleAgent to convert to AgentTemplate type\n-    const validationResult = validateSingleAgent(agentDataWithId, {\n-      filePath: `${publisherId}/${agentId}@${agentConfig.version}`,\n-      skipSubagentValidation: true,\n-    })\n-\n     if (!validationResult.success) {\n       logger.error(\n         {\n           publisherId,\n           agentId,\n           version: agentConfig.version,\n-          fullAgentId: agentDataWithId.id,\n           error: validationResult.error,\n         },\n         'fetchAgentFromDatabase: Agent validation failed',\n       )\n       return null\n     }\n \n+    // Set the correct full agent ID for the final template\n+    const agentTemplate = {\n+      ...validationResult.agentTemplate!,\n+      id: `${publisherId}/${agentId}@${agentConfig.version}`,\n+    }\n+\n     logger.debug(\n       {\n         publisherId,\n         agentId,\n         version: agentConfig.version,\n-        fullAgentId: agentDataWithId.id,\n-        agentConfig,\n+        fullAgentId: agentTemplate.id,\n       },\n       'fetchAgentFromDatabase: Successfully loaded and validated agent from database',\n     )\n \n-    return validationResult.agentTemplate!\n+    return agentTemplate\n   } catch (error) {\n     logger.error(\n       { publisherId, agentId, version, error },\n       'fetchAgentFromDatabase: Error fetching agent from database',\n"
        },
        {
          "path": "backend/src/websockets/websocket-action.ts",
          "status": "modified",
          "diff": "Index: backend/src/websockets/websocket-action.ts\n===================================================================\n--- backend/src/websockets/websocket-action.ts\ta0ae426 (parent)\n+++ backend/src/websockets/websocket-action.ts\t59eaafe (commit)\n@@ -233,9 +233,10 @@\n   const { userId, promptId, clientSessionId } = options\n   const { fileContext } = action.sessionState\n \n   // Assemble local agent templates from fileContext\n-  const { agentTemplates: localAgentTemplates } = assembleLocalAgentTemplates(fileContext)\n+  const { agentTemplates: localAgentTemplates } =\n+    assembleLocalAgentTemplates(fileContext)\n \n   const result = await mainPrompt(ws, action, {\n     userId,\n     clientSessionId,\n"
        },
        {
          "path": "npm-app/src/index.ts",
          "status": "modified",
          "diff": "Index: npm-app/src/index.ts\n===================================================================\n--- npm-app/src/index.ts\ta0ae426 (parent)\n+++ npm-app/src/index.ts\t59eaafe (commit)\n@@ -52,19 +52,25 @@\n   rageDetectors.startupTimeDetector.start()\n \n   const initFileContextPromise = initProjectFileContextWithWorker(projectRoot)\n \n+  // Only load local agents if no specific agent is requested\n+  const loadLocalAgentsPromise = new Promise<void>((resolve) => {\n+    if (!agent) {\n+      loadLocalAgents({ verbose: true }).then(() => {\n+        const codebuffConfig = loadCodebuffConfig()\n+        displayLoadedAgents(codebuffConfig)\n+      })\n+    }\n+    resolve()\n+  })\n+\n   const readyPromise = Promise.all([\n     initFileContextPromise,\n     processCleanupPromise,\n-\n-    loadLocalAgents({ verbose: true }).then(() =>\n-      displayLoadedAgents(codebuffConfig),\n-    ),\n+    loadLocalAgentsPromise,\n   ])\n \n-  const codebuffConfig = loadCodebuffConfig()\n-\n   // Initialize the CLI singleton\n   CLI.initialize(readyPromise, {\n     git,\n     costMode,\n@@ -73,8 +79,9 @@\n     params,\n     print,\n     trace,\n   })\n+\n   const cli = CLI.getInstance()\n \n   await cli.printInitialPrompt({ initialInput, runInitFlow })\n \n"
        }
      ]
    },
    {
      "id": "agents-cleanup",
      "sha": "b748a06b88e1f6f34504479714a4c44e9392e0e1",
      "parentSha": "e056a236d1bcd869ab94c05f25d9fe02ec91e69b",
      "spec": "Implement the following changes across the agent templates:\n\n1) Add a new Agent Builder template\n- File to create: .agents/agent-builder.ts\n- Defines an AgentConfig for id \"agent-builder\" (displayName: \"Bob the Agent Builder\"), model \"anthropic/claude-4-sonnet-20250522\", toolNames: [\"write_file\", \"str_replace\", \"run_terminal_command\", \"read_files\", \"code_search\", \"spawn_agents\", \"add_message\", \"end_turn\"], subagents: [`codebuff/file-picker@${version}`], includeMessageHistory: false, with parent/system/instructions prompts describing its purpose and best practices.\n- Import publisher and version from ./.agents/constants and import type { AgentConfig } from \"./types/agent-config\".\n- handleSteps generator must:\n  a) Ensure .agents/types directory exists by running a synchronous mkdir -p with a reasonable timeout.\n  b) Read type definitions from the monorepo and write local copies under .agents/types:\n     - Read common/src/util/types/agent-config.d.ts and write to .agents/types/agent-config.d.ts\n     - Read common/src/util/types/tools.d.ts and write to .agents/types/tools.d.ts\n  c) Copy example agents into .agents for user reference by reading each file and writing to the corresponding destination:\n     - common/src/util/example-1.ts -> .agents/example-1.ts\n     - common/src/util/example-2.ts -> .agents/example-2.ts\n     - common/src/util/example-3.ts -> .agents/example-3.ts\n  d) Yield STEP_ALL to let the model ask clarifying questions or continue after scaffolding.\n\n2) Fix tool result handling where results were treated as objects\n- .agents/changes-reviewer.ts: Treat tool results as strings.\n  • Replace usage of gitDiffResult?.result with gitDiffResult (fallback to empty string as needed).\n  • Replace gitStatusResult?.result similarly.\n- .agents/file-explorer.ts: When calling set_output, pass the tool result string directly.\n  • Change results: spawnResult?.result to results: spawnResult.\n- .agents/claude4-gemini-thinking.ts: Remove checks that treat toolResult as an object with a toolName.\n  • Remove the destructured thinkResult and the if (thinkResult?.toolName === 'end_turn') condition; simply yield 'STEP' in the loop.\n\n3) Simplify prompts and step handling for specific agents\n- .agents/file-picker.ts:\n  • Remove unused placeholder prompt blocks (e.g., {CODEBUFF_TOOLS_PROMPT}, {CODEBUFF_AGENTS_PROMPT}).\n  • In handleSteps, do not capture the tool result variable; just yield the find_files tool and then STEP_ALL.\n- .agents/git-committer.ts:\n  • Simplify toolNames to [\"read_files\", \"run_terminal_command\", \"add_message\", \"end_turn\"].\n  • Remove outputSchema (and the requirement to use set_output).\n  • Remove stepPrompt that instructed using set_output.\n- .agents/planner.ts:\n  • Replace systemPrompt with a concise version stating it creates comprehensive plans (no placeholders), remove stepPrompt.\n- .agents/researcher.ts:\n  • Simplify systemPrompt to end with \"Always end your response with the end_turn tool.\" and set stepPrompt to \"Don't forget to end your response with the end_turn tool.\".\n- .agents/superagent.ts:\n  • Simplify systemPrompt to a concise version without placeholder blocks.\n\nNotes and constraints\n- Do not introduce code that expects tool results to be objects in handleSteps; treat toolResult as a plain string.\n- Use the correct type source paths under common/src/util/types for agent-config.d.ts and tools.d.ts when scaffolding types in the new Agent Builder.\n- Avoid reintroducing placeholder tokens (e.g., {CODEBUFF_TOOLS_PROMPT}) in systemPrompt content for the affected agents.\n- Keep existing behavior and intent of each agent intact while applying the cleanup above.",
      "prompt": "Create a new agent that scaffolds agent templates and related type definitions, then streamline several existing agents to align with the current tool result behavior and simplified prompts. The builder should set up a local types folder under .agents, copy example templates for reference, and prepare the environment for creating or editing new agents. For the existing agents, remove placeholder prompt blocks, eliminate any reliance on object-shaped tool results, and simplify prompts while preserving intended functionality.",
      "supplementalFiles": [
        "npm-app/src/tool-handlers.ts",
        "npm-app/src/terminal/run-command.ts",
        "backend/src/tools/handlers/tool/read-files.ts",
        "common/src/types/agent-template.ts",
        "common/src/types/dynamic-agent-template.ts",
        "common/src/util/types/agent-config.d.ts",
        "common/src/util/types/tools.d.ts",
        "common/src/util/example-1.ts",
        "common/src/util/example-2.ts",
        "common/src/util/example-3.ts"
      ],
      "fileDiffs": [
        {
          "path": ".agents/agent-builder.ts",
          "status": "added",
          "diff": "Index: .agents/agent-builder.ts\n===================================================================\n--- .agents/agent-builder.ts\te056a23 (parent)\n+++ .agents/agent-builder.ts\tb748a06 (commit)\n@@ -1,1 +1,215 @@\n-[NEW FILE]\n\\ No newline at end of file\n+import { publisher, version } from './constants'\n+\n+import type { AgentConfig } from './types/agent-config'\n+\n+const config: AgentConfig = {\n+  id: 'agent-builder',\n+  version,\n+  publisher,\n+  displayName: 'Bob the Agent Builder',\n+  model: 'anthropic/claude-4-sonnet-20250522',\n+\n+  toolNames: [\n+    'write_file',\n+    'str_replace',\n+    'run_terminal_command',\n+    'read_files',\n+    'code_search',\n+    'spawn_agents',\n+    'add_message',\n+    'end_turn',\n+  ],\n+  subagents: [`codebuff/file-picker@${version}`],\n+\n+  inputSchema: {\n+    prompt: {\n+      description: 'What agent type you would like to create or edit.',\n+      type: 'string',\n+    },\n+  },\n+  includeMessageHistory: false,\n+\n+  parentPrompt:\n+    'Creates new agent templates for the codebuff mult-agent system',\n+  systemPrompt: `# Agent Builder\n+\n+You are an expert agent builder specialized in creating new agent templates for the codebuff system. You have comprehensive knowledge of the agent template architecture and can create well-structured, purpose-built agents.\n+\n+## Agent Template Patterns\n+\n+1. **Base Agent Pattern**: Full-featured agents with comprehensive tool access\n+2. **Specialized Agent Pattern**: Focused agents with limited tool sets\n+3. **Thinking Agent Pattern**: Agents that spawn thinker sub-agents\n+4. **Research Agent Pattern**: Agents that start with web search\n+\n+## Best Practices\n+\n+1. **Use as few fields as possible**: Leave out fields that are not needed to reduce complexity\n+2. **Minimal Tools**: Only include tools the agent actually needs\n+3. **Clear and Concise Prompts**: Write clear, specific prompts that have no unnecessary words\n+4. **Consistent Naming**: Follow naming conventions (kebab-case for IDs)\n+5. **Appropriate Model**: Choose the right model for the task complexity\n+\n+## Your Task\n+\n+When asked to create an agent template, you should:\n+1. Understand the requested agent\\'s purpose and capabilities\n+2. Choose appropriate tools for the agent\\'s function\n+3. Write a comprehensive system prompt\n+4. Create the complete agent template file in .agents/\n+5. Ensure the template follows all conventions and best practices\n+6. Use the AgentConfig interface for the configuration\n+7. Start the file with: import type { AgentConfig } from \"./types/agent-config\"\n+\n+Create agent templates that are focused, efficient, and well-documented. Always import the AgentConfig type and export a default configuration object.`,\n+  instructionsPrompt: `You are helping to create or edit an agent template. The user will describe what kind of agent they want to create or how they want to modify an existing agent.\n+\n+## Example Agents for Reference\n+\n+You have access to three example agents in \\`.agents/examples/\\` that demonstrate different complexity levels:\n+\n+1. **Level 1 - Code Reviewer**: Simple agent with basic tools (read_files, write_file, end_turn)\n+2. **Level 2 - Test Generator**: Intermediate agent with subagents and handleSteps logic\n+3. **Level 3 - Documentation Writer**: Advanced agent with comprehensive tools, multiple subagents, and complex orchestration\n+\n+**IMPORTANT**: When creating new agents, first examine these examples to find connections and patterns that relate to the user's request. Look for:\n+- Similar tool combinations\n+- Comparable complexity levels\n+- Related functionality patterns\n+- Appropriate model choices\n+- Relevant prompt structures\n+\n+Use these examples as inspiration and starting points, adapting their patterns to fit the user's specific needs.\n+\n+For new agents, analyze their request and create a complete agent template that:\n+- Has a clear purpose and appropriate capabilities\n+- Leaves out fields that are not needed\n+- Uses only the tools it needs\n+- Follows naming conventions\n+- Is properly structured\n+- Draws inspiration from relevant example agents\n+\n+For editing existing agents:\n+- First read the existing agent file they want to edit using read_files\n+- Understand the current structure and functionality\n+- Make the requested changes while preserving what works\n+- Maintain best practices and ensure the agent still works effectively\n+- Use str_replace for targeted edits or write_file for major restructuring\n+\n+When editing, always start by reading the current agent file to understand its structure before making changes. Ask clarifying questions if needed, then create or update the template file in the appropriate location.\n+\n+IMPORTANT: Always end your response with the end_turn tool when you have completed the agent creation or editing task.`,\n+\n+  // Generator function that defines the agent's execution flow\n+  handleSteps: function* ({ agentState, prompt, params }) {\n+    const AGENT_TEMPLATES_DIR = '.agents'\n+    const TYPES_DIR = `${AGENT_TEMPLATES_DIR}/types`\n+    const TEMPLATE_TYPES_PATH = `${TYPES_DIR}/agent-config.d.ts`\n+    const TOOL_DEFINITIONS_PATH = `${TYPES_DIR}/tools.d.ts`\n+\n+    // Step 1: Create directory structure\n+    yield {\n+      toolName: 'run_terminal_command',\n+      args: {\n+        command: `mkdir -p ${TYPES_DIR}`,\n+        process_type: 'SYNC',\n+        timeout_seconds: 10,\n+      },\n+    }\n+\n+    // Step 2: Read and write the agent config template\n+    const { toolResult: configResult } = yield {\n+      toolName: 'read_files',\n+      args: {\n+        paths: ['common/src/util/types/agent-config.ts'],\n+      },\n+    }\n+\n+    if (configResult) {\n+      yield {\n+        toolName: 'write_file',\n+        args: {\n+          path: TEMPLATE_TYPES_PATH,\n+          instructions: 'Create agent template type definitions file',\n+          content: configResult,\n+        },\n+      }\n+    }\n+\n+    // Step 3: Read and write the tools definitions\n+    const { toolResult: toolsResult } = yield {\n+      toolName: 'read_files',\n+      args: {\n+        paths: ['common/src/util/types/tools.d.ts'],\n+      },\n+    }\n+\n+    if (toolsResult) {\n+      yield {\n+        toolName: 'write_file',\n+        args: {\n+          path: TOOL_DEFINITIONS_PATH,\n+          instructions: 'Create tools type file',\n+          content: toolsResult,\n+        },\n+      }\n+    }\n+\n+    // Step 4: Copy example agents for reference\n+    const { toolResult: exampleAgentsResult } = yield {\n+      toolName: 'read_files',\n+      args: {\n+        paths: [\n+          'common/src/util/example-1.ts',\n+          'common/src/util/example-2.ts',\n+          'common/src/util/example-3.ts',\n+        ],\n+      },\n+    }\n+\n+    if (exampleAgentsResult) {\n+      const exampleFiles = exampleAgentsResult.split('\\n\\n').filter(Boolean)\n+\n+      // Write example 1\n+      if (exampleFiles[0]) {\n+        yield {\n+          toolName: 'write_file',\n+          args: {\n+            path: `${AGENT_TEMPLATES_DIR}/example-1.ts`,\n+            instructions: 'Copy example 1 agent',\n+            content: exampleFiles[0],\n+          },\n+        }\n+      }\n+\n+      // Write example 2\n+      if (exampleFiles[1]) {\n+        yield {\n+          toolName: 'write_file',\n+          args: {\n+            path: `${AGENT_TEMPLATES_DIR}/example-2.ts`,\n+            instructions: 'Copy example 2 agent',\n+            content: exampleFiles[1],\n+          },\n+        }\n+      }\n+\n+      // Write example 3\n+      if (exampleFiles[2]) {\n+        yield {\n+          toolName: 'write_file',\n+          args: {\n+            path: `${AGENT_TEMPLATES_DIR}/example-3.ts`,\n+            instructions: 'Copy example 3 agent',\n+            content: exampleFiles[2],\n+          },\n+        }\n+      }\n+    }\n+\n+    // Step 5: Let the agent ask questions and understand what the user wants\n+    yield 'STEP_ALL'\n+  },\n+}\n+\n+export default config\n"
        },
        {
          "path": ".agents/brainstormer.ts",
          "status": "modified",
          "diff": "Index: .agents/brainstormer.ts\n===================================================================\n--- .agents/brainstormer.ts\te056a23 (parent)\n+++ .agents/brainstormer.ts\tb748a06 (commit)\n@@ -57,10 +57,7 @@\n Remember: Your goal is to expand thinking, not to provide definitive answers. Help the user see their problem space more clearly and discover new possibilities they might not have considered.`,\n \n   instructionsPrompt:\n     'Act as a creative thought partner. Generate multiple perspectives, challenge assumptions, explore alternatives, and ask probing questions to help think through problems more thoroughly.',\n-\n-  stepPrompt:\n-    \"Continue brainstorming and exploring ideas. When you're done, use the end_turn tool.\",\n }\n \n export default config\n"
        },
        {
          "path": ".agents/changes-reviewer.ts",
          "status": "modified",
          "diff": "Index: .agents/changes-reviewer.ts\n===================================================================\n--- .agents/changes-reviewer.ts\te056a23 (parent)\n+++ .agents/changes-reviewer.ts\tb748a06 (commit)\n@@ -70,15 +70,15 @@\n       },\n     }\n \n     // Step 4: Extract file paths from git diff and status output\n-    const gitDiffOutput = gitDiffResult?.result || ''\n+    const gitDiffOutput = gitDiffResult || ''\n     const changedFiles = gitDiffOutput\n       .split('\\n')\n       .map((line) => line.trim())\n       .filter((line) => line && !line.startsWith('??') && !line.includes('OSC'))\n \n-    const gitStatusOutput = gitStatusResult?.result || ''\n+    const gitStatusOutput = gitStatusResult || ''\n     const untrackedFiles = gitStatusOutput\n       .split('\\n')\n       .map((line) => line.trim())\n       .filter((line) => line.startsWith('??'))\n"
        },
        {
          "path": ".agents/claude4-gemini-thinking.ts",
          "status": "modified",
          "diff": "Index: .agents/claude4-gemini-thinking.ts\n===================================================================\n--- .agents/claude4-gemini-thinking.ts\te056a23 (parent)\n+++ .agents/claude4-gemini-thinking.ts\tb748a06 (commit)\n@@ -333,10 +333,9 @@\n             },\n           ],\n         },\n       }\n-      const { toolResult: thinkResult } = yield 'STEP'\n-      if (thinkResult?.toolName === 'end_turn') break\n+      yield 'STEP'\n     }\n   },\n }\n \n"
        },
        {
          "path": ".agents/file-explorer.ts",
          "status": "modified",
          "diff": "Index: .agents/file-explorer.ts\n===================================================================\n--- .agents/file-explorer.ts\te056a23 (parent)\n+++ .agents/file-explorer.ts\tb748a06 (commit)\n@@ -52,9 +52,9 @@\n       }\n     yield {\n       toolName: 'set_output',\n       args: {\n-        results: spawnResult?.result,\n+        results: spawnResult,\n       },\n     }\n   },\n }\n"
        },
        {
          "path": ".agents/file-picker.ts",
          "status": "modified",
          "diff": "Index: .agents/file-picker.ts\n===================================================================\n--- .agents/file-picker.ts\te056a23 (parent)\n+++ .agents/file-picker.ts\tb748a06 (commit)\n@@ -24,13 +24,8 @@\n   systemPrompt: `# Persona: {CODEBUFF_AGENT_NAME}\n \n You are an expert at finding relevant files in a codebase.\n \n-\n-{CODEBUFF_TOOLS_PROMPT}\n-\n-{CODEBUFF_AGENTS_PROMPT}\n-\n {CODEBUFF_FILE_TREE_PROMPT}\n \n {CODEBUFF_SYSTEM_INFO_PROMPT}\n \n@@ -39,9 +34,9 @@\n In your report, please give an analysis that includes the full paths of files that are relevant and (very briefly) how they could be useful.`,\n   stepPrompt:\n     'Do not use the find_files tool or any tools again. Just give your response.',\n   handleSteps: function* ({ agentState, prompt, params }) {\n-    const toolResult = yield {\n+    yield {\n       toolName: 'find_files',\n       args: { prompt: prompt ?? '' },\n     }\n     yield 'STEP_ALL'\n"
        },
        {
          "path": ".agents/git-committer.ts",
          "status": "modified",
          "diff": "Index: .agents/git-committer.ts\n===================================================================\n--- .agents/git-committer.ts\te056a23 (parent)\n+++ .agents/git-committer.ts\tb748a06 (commit)\n@@ -8,26 +8,10 @@\n   publisher,\n   displayName: 'Git Committer',\n   model: 'anthropic/claude-4-sonnet-20250522',\n \n-  toolNames: [\n-    'read_files',\n-    'run_terminal_command',\n-    'set_output',\n-    'add_message',\n-    'end_turn',\n-  ],\n+  toolNames: ['read_files', 'run_terminal_command', 'add_message', 'end_turn'],\n \n-  outputSchema: {\n-    type: 'object',\n-    properties: {\n-      success: { type: 'boolean' },\n-      message: { type: 'string' },\n-      commitHash: { type: 'string' },\n-    },\n-    required: ['success', 'message'],\n-  },\n-\n   inputSchema: {\n     prompt: {\n       type: 'string',\n       description: 'What changes to commit',\n@@ -45,11 +29,8 @@\n \n   instructionsPrompt:\n     'Follow the steps to create a good commit: analyze changes with git diff and git log, read relevant files for context, stage appropriate files, analyze changes, and create a commit with proper formatting including the Codebuff footer.',\n \n-  stepPrompt:\n-    'Continue with the git commit process. Make sure to end your response by using set_output to output a structured summary of what you committed and whether it was successful.',\n-\n   handleSteps: function* ({ agentState, prompt, params }: AgentStepContext) {\n     // Step 1: Run git diff and git log to analyze changes\n     yield {\n       toolName: 'run_terminal_command',\n"
        },
        {
          "path": ".agents/planner.ts",
          "status": "modified",
          "diff": "Index: .agents/planner.ts\n===================================================================\n--- .agents/planner.ts\te056a23 (parent)\n+++ .agents/planner.ts\tb748a06 (commit)\n@@ -21,21 +21,13 @@\n   outputMode: 'last_message',\n   includeMessageHistory: true,\n \n   parentPrompt: 'Agent that formulates a comprehensive plan to a prompt.',\n-  systemPrompt: `# Persona: {CODEBUFF_AGENT_NAME}\n-\n-You are an expert software architect. You are good at creating comprehensive plans to tackle the user request.\n-\n-{CODEBUFF_TOOLS_PROMPT}\n-\n-{CODEBUFF_AGENTS_PROMPT}`,\n+  systemPrompt: `You are an expert software architect. You are good at creating comprehensive plans to tackle the user request.`,\n   instructionsPrompt: `Steps for your response:\n 1. Use the <think_deeply> tool to think through cruxes for the plan, and tricky cases. Consider alternative approaches. Be sure to close the tool call with </think_deeply>.\n 2. Write out your plan in a concise way.\n 3. Spawn 1-5 dry run agents to sketch portions of the implementation of the plan. (Important: do not forget to close the tool call with \"</spawn_agents>\"!)\n 4. Synthesize all the information and rewrite the full plan to be the best it can be. Use the end_turn tool.`,\n-  stepPrompt:\n-    'Do not forget to use the end_turn tool to end your response. Make sure the final plan is the best it can be.',\n }\n \n export default config\n"
        },
        {
          "path": ".agents/researcher.ts",
          "status": "modified",
          "diff": "Index: .agents/researcher.ts\n===================================================================\n--- .agents/researcher.ts\te056a23 (parent)\n+++ .agents/researcher.ts\tb748a06 (commit)\n@@ -32,22 +32,10 @@\n - Relevant documentation insights\n - Code examples or patterns when applicable\n - Actionable recommendations\n \n-Always end your response with the end_turn tool.\\\n-\\\n-{CODEBUFF_TOOLS_PROMPT}\\\n-\\\n-{CODEBUFF_AGENTS_PROMPT}\\\n-\\\n-{CODEBUFF_FILE_TREE_PROMPT}\\\n-\\\n-{CODEBUFF_SYSTEM_INFO_PROMPT}\\\n-\\\n-{CODEBUFF_GIT_CHANGES_PROMPT}`,\n-  instructionsPrompt: '',\n-  stepPrompt:\n-    \"Don't forget to end your response with the end_turn tool: <end_turn></end_turn>\",\n+Always end your response with the end_turn tool.`,\n+  stepPrompt: \"Don't forget to end your response with the end_turn tool.\",\n   handleSteps: function* ({ agentState, prompt, params }) {\n     yield {\n       toolName: 'web_search',\n       args: { query: prompt ?? '', depth: 'standard' },\n"
        },
        {
          "path": ".agents/superagent.ts",
          "status": "modified",
          "diff": "Index: .agents/superagent.ts\n===================================================================\n--- .agents/superagent.ts\te056a23 (parent)\n+++ .agents/superagent.ts\tb748a06 (commit)\n@@ -32,13 +32,9 @@\n   includeMessageHistory: false,\n \n   parentPrompt:\n     'Superagent that can spawn multiple code editing agents to complete a task.',\n-  systemPrompt: `You are an expert orchestrator that can solve any problem, including coding tasks.\n-\n-{CODEBUFF_TOOLS_PROMPT}\n-\n-{CODEBUFF_AGENTS_PROMPT}`,\n+  systemPrompt: `You are an expert orchestrator that can solve any problem, including coding tasks.`,\n   instructionsPrompt: `Answer the user\\'s question or complete the task by spawning copies of the base agent.\n \n If you have all the information you need, just write out the response and do not spawn any agents.\n \n"
        }
      ]
    },
    {
      "id": "server-agent-validation",
      "sha": "926a98c4b55cfe684361fa692efe99d308448f6a",
      "parentSha": "f48e2e7f76de4366b96c05b69ad3eddd319f941b",
      "spec": "Implement server-side dynamic agent validation and remove client-side validation.\n\nScope and required changes:\n\n1) Server/common validation pipeline\n- File: common/src/templates/agent-validation.ts\n  - Change validateAgents signature to accept Record<string, any> instead of DynamicAgentTemplate.\n  - Extract the template content before the try block for better error context. For each entry:\n    - Call validateSingleAgent(content, { filePath: agentKey, dynamicAgentIds }).\n    - On failure, push an error with filePath: agentKey and message from the validation result.\n    - On success, detect duplicates using validationResult.agentTemplate.id (not raw content.id). If duplicate, push an error: 'Agent \"<id>\" (<displayName>) if present: Duplicate agent ID'.\n    - Store the validated template in templates keyed by validationResult.agentTemplate.id.\n  - On thrown errors, include agent context if possible: prefix the message with Agent \"<id>\" (<displayName>) or 'Agent in <file>' and log with the existing logger.\n\n- File: common/src/templates/agent-validation.ts (validateSingleAgent)\n  - Change signature to accept template: any.\n  - First pass: parse the raw template using DynamicAgentConfigSchema.parse(template). If handleSteps is present, convert to a string via toString().\n  - Second pass: parse the normalized object with DynamicAgentTemplateSchema.parse, defaulting systemPrompt, instructionsPrompt, and stepPrompt to '' if absent and using the stringified handleSteps.\n  - On any Zod parse error, return success: false with message prefixed by agent context and 'Schema validation failed: <zodError.message>'.\n  - Validate subagents with validateSubagents(validatedConfig.subagents, dynamicAgentIds) unless skipSubagentValidation is true. On failure, return the formatted subagent error.\n  - Convert inputSchema and outputSchema using validatedConfig values (not the raw template). Propagate conversion failures as errors prefixed with agent context; output schema failure should start with 'Failed to convert outputSchema to Zod: ...'.\n  - If validatedConfig.handleSteps exists, ensure it is a generator function string (starts with 'function*'); otherwise, return an error prefixed with agent context and the expected format.\n  - Build the AgentTemplate by spreading validatedConfig and attaching the converted inputSchema/outputSchema.\n  - Wrap any unexpected exceptions with an error prefixed by agent context: 'Error validating agent template: ...'.\n\n2) Types to support stringified handleSteps\n- File: common/src/types/dynamic-agent-template.ts\n  - Update DynamicAgentConfigSchema: handleSteps should be z.union([HandleStepsSchema, z.string()]).optional() to support function or string.\n  - Ensure DynamicAgentTemplateSchema continues to expect handleSteps as string (converted form) and retains existing refinement rules including: outputSchema requires outputMode 'json' and presence of 'set_output'; 'set_output' implies outputMode 'json'; non-empty subagents requires 'spawn_agents' tool.\n\n- File: common/src/types/__tests__/dynamic-agent-template.test.ts\n  - Update the type-compat tests by introducing a DynamicAgentConfigHandleSteps type that aligns handleSteps with AgentConfig['handleSteps'] and keep the extends checks true. Include helper variable assignments for clearer compiler errors if constraints break.\n\n3) Accept raw agentTemplates from clients (no client validation)\n- File: common/src/util/file.ts\n  - Change ProjectFileContextSchema.agentTemplates to z.record(z.string(), z.any()).default({}) so the client can send unvalidated templates; the server will validate these using validateAgents.\n\n4) Remove validation from npm loader and only stringify handleSteps\n- File: npm-app/src/agents/load-agents.ts\n  - Remove the DynamicAgentConfigSchema.parse and typed parsing flow; change loadedAgents typing to Record<string, any>.\n  - After requiring the module and extracting default, if handleSteps is present, set processedAgentConfig.handleSteps = agentConfig.handleSteps.toString().\n  - Store processedAgentConfig directly without adding default prompt strings.\n\n5) Tests and expectations\n- File: common/src/__tests__/agent-validation.test.ts\n  - Update test inputs and assertions:\n    - Use hyphenated agent IDs instead of underscores; remove slashes/uppercase from IDs to comply with the schema (e.g., 'custom-agent', 'schema-agent', 'no-override-agent', 'both-schemas-agent', 'complex-schema-agent', 'error-context-agent').\n    - Where subagents are specified, ensure toolNames include 'spawn_agents' and update expectations accordingly.\n    - For spawnable agent references, align IDs with the new schema-friendly IDs (e.g., 'codebuffai-git-committer') and adjust subagents arrays accordingly.\n    - Expect error messages for invalid schema cases to contain 'Schema validation failed'.\n    - Where accessing templates with hyphenated keys, use bracket indexing (e.g., result.templates['schema-agent']).\n\nBehavioral outcomes to verify:\n- The npm loader no longer rejects agents; it emits raw configs with handleSteps stringified.\n- The server accepts raw agentTemplates and returns validationErrors with agent-context-rich messages.\n- Duplicate detection is based on the validated agent ID and reports a concise agent-context duplicate message.\n- Subagents must include 'spawn_agents' in toolNames when non-empty; tests reflect this requirement.\n- All hyphenated agent IDs and updated error formats are reflected in tests and server responses.",
      "prompt": "Move dynamic agent template validation to the server. Accept raw agent templates from the client without local validation, and perform all schema parsing, normalization, and error reporting on the server before use. Ensure error messages are concise and include the agent context, enforce that spawning subagents requires the appropriate tool, and make IDs and tests consistent with the schema. Remove validation from the npm-side loader while still stringifying any handleSteps function so the server can validate it.",
      "supplementalFiles": [
        "backend/src/templates/agent-registry.ts",
        "backend/src/websockets/websocket-action.ts",
        "web/src/app/api/agents/publish/route.ts",
        "common/src/util/agent-template-validation.ts",
        "common/src/templates/dynamic-agent-functions.ts",
        "common/src/tools/constants.ts",
        "common/src/types/agent-template.ts"
      ],
      "fileDiffs": [
        {
          "path": "common/src/__tests__/agent-validation.test.ts",
          "status": "modified",
          "diff": "Index: common/src/__tests__/agent-validation.test.ts\n===================================================================\n--- common/src/__tests__/agent-validation.test.ts\tf48e2e7 (parent)\n+++ common/src/__tests__/agent-validation.test.ts\t926a98c (commit)\n@@ -96,9 +96,9 @@\n             model: 'anthropic/claude-4-sonnet-20250522',\n             systemPrompt: 'You are a creative brainstormer.',\n             instructionsPrompt: 'Help brainstorm ideas.',\n             stepPrompt: 'Continue brainstorming.',\n-            toolNames: ['end_turn'],\n+            toolNames: ['end_turn', 'spawn_agents'],\n             subagents: ['thinker', 'researcher'],\n             outputMode: 'last_message',\n             includeMessageHistory: true,\n           },\n@@ -106,8 +106,9 @@\n       }\n \n       const result = validateAgents(fileContext.agentTemplates || {})\n \n+\n       expect(result.validationErrors).toHaveLength(0)\n       expect(result.templates).toHaveProperty('brainstormer')\n       expect(result.templates.brainstormer.displayName).toBe('Brainy')\n       expect(result.templates.brainstormer.id).toBe('brainstormer')\n@@ -146,9 +147,9 @@\n       const fileContext: ProjectFileContext = {\n         ...mockFileContext,\n         agentTemplates: {\n           'custom.ts': {\n-            id: 'custom_agent',\n+            id: 'custom-agent',\n             version: '1.0.0',\n             displayName: 'Custom',\n             parentPrompt: 'Custom agent',\n             model: 'anthropic/claude-4-sonnet-20250522',\n@@ -165,17 +166,17 @@\n \n       const result = validateAgents(fileContext.agentTemplates || {})\n \n       // Should have dynamic templates\n-      expect(result.templates).toHaveProperty('custom_agent') // Dynamic\n+      expect(result.templates).toHaveProperty('custom-agent') // Dynamic\n     })\n \n     it('should handle agents with JSON schemas', async () => {\n       const fileContext: ProjectFileContext = {\n         ...mockFileContext,\n         agentTemplates: {\n           'schema-agent.ts': {\n-            id: 'schema_agent',\n+            id: 'schema-agent',\n             version: '1.0.0',\n             displayName: 'Schema Agent',\n             parentPrompt: 'Agent with JSON schemas',\n             model: 'anthropic/claude-4-sonnet-20250522',\n@@ -203,20 +204,21 @@\n       }\n \n       const result = validateAgents(fileContext.agentTemplates || {})\n \n+\n       expect(result.validationErrors).toHaveLength(0)\n-      expect(result.templates).toHaveProperty('schema_agent')\n-      expect(result.templates.schema_agent.inputSchema.prompt).toBeDefined()\n-      expect(result.templates.schema_agent.inputSchema.params).toBeDefined()\n+      expect(result.templates).toHaveProperty('schema-agent')\n+      expect(result.templates['schema-agent'].inputSchema.prompt).toBeDefined()\n+      expect(result.templates['schema-agent'].inputSchema.params).toBeDefined()\n     })\n \n     it('should return validation errors for invalid schemas', async () => {\n       const fileContext: ProjectFileContext = {\n         ...mockFileContext,\n         agentTemplates: {\n           'invalid-schema-agent.ts': {\n-            id: 'invalid_schema_agent',\n+            id: 'invalid-schema-agent',\n             version: '1.0.0',\n             displayName: 'Invalid Schema Agent',\n             parentPrompt: 'Agent with invalid schemas',\n             model: 'anthropic/claude-4-sonnet-20250522',\n@@ -237,19 +239,19 @@\n       const result = validateAgents(fileContext.agentTemplates || {})\n \n       expect(result.validationErrors).toHaveLength(1)\n       expect(result.validationErrors[0].message).toContain(\n-        'Invalid inputSchema.prompt in invalid-schema-agent.ts',\n+        'Schema validation failed',\n       )\n-      expect(result.templates).not.toHaveProperty('invalid_schema_agent')\n+      expect(result.templates).not.toHaveProperty('invalid-schema-agent')\n     })\n \n     it('should handle missing override field as non-override template', async () => {\n       const fileContext: ProjectFileContext = {\n         ...mockFileContext,\n         agentTemplates: {\n           'no-override-field.ts': {\n-            id: 'no_override_agent',\n+            id: 'no-override-agent',\n             version: '1.0.0',\n             // No override field - should be treated as non-override\n             displayName: 'No Override Agent',\n             parentPrompt: 'Agent without override field',\n@@ -266,18 +268,19 @@\n       }\n \n       const result = validateAgents(fileContext.agentTemplates || {})\n \n+\n       expect(result.validationErrors).toHaveLength(0)\n-      expect(result.templates).toHaveProperty('no_override_agent')\n+      expect(result.templates).toHaveProperty('no-override-agent')\n     })\n \n     it('should validate spawnable agents including dynamic agents from first pass', async () => {\n       const fileContext: ProjectFileContext = {\n         ...mockFileContext,\n         agentTemplates: {\n           'git-committer.ts': {\n-            id: 'CodebuffAI/git-committer',\n+            id: 'codebuffai-git-committer',\n             version: '0.0.1',\n             displayName: 'Git Committer',\n             parentPrompt: 'A git committer agent',\n             model: 'google/gemini-2.5-pro',\n@@ -289,31 +292,32 @@\n             includeMessageHistory: true,\n             toolNames: ['end_turn'],\n           },\n           'spawner.ts': {\n-            id: 'spawner_agent',\n+            id: 'spawner-agent',\n             version: '1.0.0',\n             displayName: 'Spawner Agent',\n             parentPrompt: 'Agent that can spawn git-committer',\n             model: 'anthropic/claude-4-sonnet-20250522',\n             systemPrompt: 'Test system prompt',\n             instructionsPrompt: 'Test user prompt',\n             stepPrompt: 'Test step prompt',\n-            subagents: ['CodebuffAI/git-committer'], // Should be valid after first pass\n+            subagents: ['codebuffai-git-committer'], // Should be valid after first pass\n             outputMode: 'last_message',\n             includeMessageHistory: true,\n-            toolNames: ['end_turn'],\n+            toolNames: ['end_turn', 'spawn_agents'],\n           },\n         },\n       }\n \n       const result = validateAgents(fileContext.agentTemplates || {})\n \n+\n       expect(result.validationErrors).toHaveLength(0)\n-      expect(result.templates).toHaveProperty('CodebuffAI/git-committer')\n-      expect(result.templates).toHaveProperty('spawner_agent')\n-      expect(result.templates.spawner_agent.subagents).toContain(\n-        'CodebuffAI/git-committer', // Full agent ID with prefix\n+      expect(result.templates).toHaveProperty('codebuffai-git-committer')\n+      expect(result.templates).toHaveProperty('spawner-agent')\n+      expect(result.templates['spawner-agent'].subagents).toContain(\n+        'codebuffai-git-committer', // Full agent ID with prefix\n       )\n     })\n   })\n \n@@ -323,9 +327,9 @@\n         const fileContext: ProjectFileContext = {\n           ...mockFileContext,\n           agentTemplates: {\n             'no-prompt-schema.ts': {\n-              id: 'no_prompt_schema_agent',\n+              id: 'no-prompt-schema-agent',\n               version: '1.0.0',\n               displayName: 'No Prompt Schema Agent',\n               parentPrompt: 'Test agent without prompt schema',\n               model: 'anthropic/claude-4-sonnet-20250522',\n@@ -343,20 +347,20 @@\n \n         const result = validateAgents(fileContext.agentTemplates || {})\n \n         expect(result.validationErrors).toHaveLength(0)\n-        expect(result.templates).toHaveProperty('no_prompt_schema_agent')\n+        expect(result.templates).toHaveProperty('no-prompt-schema-agent')\n         expect(\n-          result.templates.no_prompt_schema_agent.inputSchema.prompt,\n+          result.templates['no-prompt-schema-agent'].inputSchema.prompt,\n         ).toBeUndefined()\n       })\n \n       it('should not have params schema when no paramsSchema provided', async () => {\n         const fileContext: ProjectFileContext = {\n           ...mockFileContext,\n           agentTemplates: {\n             'no-params-schema.ts': {\n-              id: 'no_params_schema_agent',\n+              id: 'no-params-schema-agent',\n               version: '1.0.0',\n               displayName: 'No Params Schema Agent',\n               parentPrompt: 'Test agent without params schema',\n               model: 'anthropic/claude-4-sonnet-20250522',\n@@ -374,11 +378,11 @@\n \n         const result = validateAgents(fileContext.agentTemplates || {})\n \n         expect(result.validationErrors).toHaveLength(0)\n-        expect(result.templates).toHaveProperty('no_params_schema_agent')\n+        expect(result.templates).toHaveProperty('no-params-schema-agent')\n         expect(\n-          result.templates.no_params_schema_agent.inputSchema.params,\n+          result.templates['no-params-schema-agent'].inputSchema.params,\n         ).toBeUndefined()\n       })\n     })\n \n@@ -387,9 +391,9 @@\n         const fileContext: ProjectFileContext = {\n           ...mockFileContext,\n           agentTemplates: {\n             'both-schemas.ts': {\n-              id: 'both_schemas_agent',\n+              id: 'both-schemas-agent',\n               version: '1.0.0',\n               displayName: 'Both Schemas Agent',\n               parentPrompt: 'Test agent with both schemas',\n               model: 'anthropic/claude-4-sonnet-20250522',\n@@ -429,11 +433,11 @@\n \n         const result = validateAgents(fileContext.agentTemplates || {})\n \n         expect(result.validationErrors).toHaveLength(0)\n-        expect(result.templates).toHaveProperty('both_schemas_agent')\n+        expect(result.templates).toHaveProperty('both-schemas-agent')\n \n-        const template = result.templates.both_schemas_agent\n+        const template = result.templates['both-schemas-agent']\n         expect(template.inputSchema.prompt).toBeDefined()\n         expect(template.inputSchema.params).toBeDefined()\n \n         const inputPromptSchema = template.inputSchema.prompt!\n@@ -455,9 +459,9 @@\n         const fileContext: ProjectFileContext = {\n           ...mockFileContext,\n           agentTemplates: {\n             'complex-schema.ts': {\n-              id: 'complex_schema_agent',\n+              id: 'complex-schema-agent',\n               version: '1.0.0',\n               displayName: 'Complex Schema Agent',\n               parentPrompt: 'Test agent with complex nested schema',\n               model: 'anthropic/claude-4-sonnet-20250522',\n@@ -500,12 +504,12 @@\n \n         const result = validateAgents(fileContext.agentTemplates || {})\n \n         expect(result.validationErrors).toHaveLength(0)\n-        expect(result.templates).toHaveProperty('complex_schema_agent')\n+        expect(result.templates).toHaveProperty('complex-schema-agent')\n \n         const paramsSchema =\n-          result.templates.complex_schema_agent.inputSchema.params!\n+          result.templates['complex-schema-agent'].inputSchema.params!\n \n         // Test valid complex object\n         const validParams = {\n           config: {\n@@ -536,9 +540,9 @@\n         const fileContext: ProjectFileContext = {\n           ...mockFileContext,\n           agentTemplates: {\n             'error-context.ts': {\n-              id: 'error_context_agent',\n+              id: 'error-context-agent',\n               version: '1.0.0',\n               displayName: 'Error Context Agent',\n               parentPrompt: 'Test agent for error context',\n               model: 'anthropic/claude-4-sonnet-20250522',\n@@ -558,9 +562,9 @@\n \n         const result = validateAgents(fileContext.agentTemplates || {})\n \n         expect(result.validationErrors).toHaveLength(1)\n-        expect(result.validationErrors[0].message).toContain('in error-context')\n+        expect(result.validationErrors[0].message).toContain('Schema validation failed')\n         expect(result.validationErrors[0].filePath).toBe('error-context.ts')\n       })\n     })\n \n@@ -569,9 +573,9 @@\n         const fileContext: ProjectFileContext = {\n           ...mockFileContext,\n           agentTemplates: {\n             'git-committer.ts': {\n-              id: 'CodebuffAI/git-committer',\n+              id: 'codebuffai-git-committer',\n               version: '0.0.1',\n               displayName: 'Git Committer',\n               parentPrompt:\n                 'A git committer agent specialized to commit current changes with an appropriate commit message.',\n@@ -604,11 +608,11 @@\n \n         const result = validateAgents(fileContext.agentTemplates || {})\n \n         expect(result.validationErrors).toHaveLength(0)\n-        expect(result.templates).toHaveProperty('CodebuffAI/git-committer')\n+        expect(result.templates).toHaveProperty('codebuffai-git-committer')\n \n-        const template = result.templates['CodebuffAI/git-committer']\n+        const template = result.templates['codebuffai-git-committer']\n         const paramsSchema = template.inputSchema.params!\n \n         expect(paramsSchema.safeParse('').success).toBe(false) // Too short\n         expect(template.inputSchema.params).toBeDefined()\n@@ -628,16 +632,16 @@\n         const fileContext: ProjectFileContext = {\n           ...mockFileContext,\n           agentTemplates: {\n             'empty-schema.ts': {\n-              id: 'empty_schema_agent',\n+              id: 'empty-schema-agent',\n               version: '1.0.0',\n               displayName: 'Empty Schema Agent',\n-              parentPrompt: 'Test agent with empty schema',\n               model: 'anthropic/claude-4-sonnet-20250522',\n               systemPrompt: 'Test system prompt',\n               instructionsPrompt: 'Test user prompt',\n               stepPrompt: 'Test step prompt',\n+              parentPrompt: 'Test agent with empty schema',\n               inputSchema: {},\n               outputMode: 'last_message',\n               includeMessageHistory: true,\n               toolNames: ['end_turn'],\n@@ -648,13 +652,13 @@\n \n         const result = validateAgents(fileContext.agentTemplates || {})\n \n         expect(result.validationErrors).toHaveLength(0)\n-        expect(result.templates).toHaveProperty('empty_schema_agent')\n+        expect(result.templates).toHaveProperty('empty-schema-agent')\n \n         // Empty schemas should have no prompt schema\n         expect(\n-          result.templates.empty_schema_agent.inputSchema.prompt,\n+          result.templates['empty-schema-agent'].inputSchema.prompt,\n         ).toBeUndefined()\n       })\n     })\n   })\n@@ -807,9 +811,8 @@\n       expect(result.validationErrors.length).toBeGreaterThan(0)\n       expect(result.validationErrors[0].message).toContain('generator function')\n       expect(result.validationErrors[0].message).toContain('function*')\n     })\n-\n     test('should verify loaded template handleSteps matches original function toString', async () => {\n       // Create a generator function\n       const originalFunction = function* ({\n         agentState,\n"
        },
        {
          "path": "common/src/templates/agent-validation.ts",
          "status": "modified",
          "diff": "Index: common/src/templates/agent-validation.ts\n===================================================================\n--- common/src/templates/agent-validation.ts\tf48e2e7 (parent)\n+++ common/src/templates/agent-validation.ts\t926a98c (commit)\n@@ -4,8 +4,12 @@\n   formatSubagentError,\n   validateSubagents,\n } from '../util/agent-template-validation'\n import { logger } from '../util/logger'\n+import {\n+  DynamicAgentConfigSchema,\n+  DynamicAgentTemplateSchema,\n+} from '../types/dynamic-agent-template'\n import type { AgentTemplate } from '../types/agent-template'\n import type { DynamicAgentTemplate } from '../types/dynamic-agent-template'\n \n export interface DynamicAgentValidationError {\n@@ -47,11 +51,9 @@\n \n /**\n  * Validate and load dynamic agent templates from user-provided agentTemplates\n  */\n-export function validateAgents(\n-  agentTemplates: Record<string, DynamicAgentTemplate> = {},\n-): {\n+export function validateAgents(agentTemplates: Record<string, any> = {}): {\n   templates: Record<string, AgentTemplate>\n   validationErrors: DynamicAgentValidationError[]\n } {\n   const templates: Record<string, AgentTemplate> = {}\n@@ -72,10 +74,10 @@\n   const dynamicAgentIds = collectAgentIds(agentTemplates)\n \n   // Pass 2: Load and validate each agent template\n   for (const agentKey of agentKeys) {\n+    const content = agentTemplates[agentKey]\n     try {\n-      const content = agentTemplates[agentKey]\n       if (!content) {\n         continue\n       }\n \n@@ -91,23 +93,33 @@\n         })\n         continue\n       }\n \n-      if (templates[content.id]) {\n+      if (templates[validationResult.agentTemplate!.id]) {\n+        const agentContext = validationResult.agentTemplate!.displayName \n+          ? `Agent \"${validationResult.agentTemplate!.id}\" (${validationResult.agentTemplate!.displayName})`\n+          : `Agent \"${validationResult.agentTemplate!.id}\"`\n+        \n         validationErrors.push({\n           filePath: agentKey,\n-          message: `Duplicate agent ID: ${content.id}`,\n+          message: `${agentContext}: Duplicate agent ID`,\n         })\n         continue\n       }\n-      templates[content.id] = validationResult.agentTemplate!\n+      templates[validationResult.agentTemplate!.id] =\n+        validationResult.agentTemplate!\n     } catch (error) {\n       const errorMessage =\n         error instanceof Error ? error.message : 'Unknown error'\n \n+      // Try to extract agent context for better error messages\n+      const agentContext = content?.id \n+        ? `Agent \"${content.id}\"${content.displayName ? ` (${content.displayName})` : ''}`\n+        : `Agent in ${agentKey}`\n+      \n       validationErrors.push({\n         filePath: agentKey,\n-        message: `Error in agent template ${agentKey}: ${errorMessage}`,\n+        message: `${agentContext}: ${errorMessage}`,\n       })\n \n       logger.warn(\n         { filePath: agentKey, error: errorMessage },\n@@ -126,16 +138,16 @@\n  * Validates a single dynamic agent template and converts it to an AgentTemplate.\n  * This is a plain function equivalent to the core logic of loadSingleAgent.\n  *\n  * @param dynamicAgentIds - Array of all available dynamic agent IDs for validation\n- * @param template - The dynamic agent template to validate\n+ * @param template - The raw agent template to validate (any type)\n  * @param options - Optional configuration object\n  * @param options.filePath - Optional file path for error context\n  * @param options.skipSubagentValidation - Skip subagent validation when loading from database\n  * @returns Validation result with either the converted AgentTemplate or an error\n  */\n export function validateSingleAgent(\n-  template: DynamicAgentTemplate,\n+  template: any,\n   options?: {\n     dynamicAgentIds?: string[]\n     filePath?: string\n     skipSubagentValidation?: boolean\n@@ -151,12 +163,41 @@\n     dynamicAgentIds = [],\n   } = options || {}\n \n   try {\n+    // First validate against the Zod schema\n+    let validatedConfig: DynamicAgentTemplate\n+    try {\n+      const typedAgentConfig = DynamicAgentConfigSchema.parse(template)\n+\n+      // Convert handleSteps function to string if present\n+      let handleStepsString: string | undefined\n+      if (template.handleSteps) {\n+        handleStepsString = template.handleSteps.toString()\n+      }\n+\n+      validatedConfig = DynamicAgentTemplateSchema.parse({\n+        ...typedAgentConfig,\n+        systemPrompt: typedAgentConfig.systemPrompt || '',\n+        instructionsPrompt: typedAgentConfig.instructionsPrompt || '',\n+        stepPrompt: typedAgentConfig.stepPrompt || '',\n+        handleSteps: handleStepsString,\n+      })\n+    } catch (error: any) {\n+      // Try to extract agent context for better error messages\n+      const agentContext = template.id \n+        ? `Agent \"${template.id}\"${template.displayName ? ` (${template.displayName})` : ''}`\n+        : filePath ? `Agent in ${filePath}` : 'Agent'\n+      \n+      return {\n+        success: false,\n+        error: `${agentContext}: Schema validation failed: ${error.message}`,\n+      }\n+    }\n     // Validate subagents (skip if requested, e.g., for database agents)\n     if (!skipSubagentValidation) {\n       const subagentValidation = validateSubagents(\n-        template.subagents,\n+        validatedConfig.subagents,\n         dynamicAgentIds,\n       )\n       if (!subagentValidation.valid) {\n         return {\n@@ -172,46 +213,62 @@\n     // Convert schemas and handle validation errors\n     let inputSchema: AgentTemplate['inputSchema']\n     try {\n       inputSchema = convertInputSchema(\n-        template.inputSchema?.prompt,\n-        template.inputSchema?.params,\n+        validatedConfig.inputSchema?.prompt,\n+        validatedConfig.inputSchema?.params,\n         filePath,\n       )\n     } catch (error) {\n+      // Try to extract agent context for better error messages\n+      const agentContext = validatedConfig.id \n+        ? `Agent \"${validatedConfig.id}\"${validatedConfig.displayName ? ` (${validatedConfig.displayName})` : ''}`\n+        : filePath ? `Agent in ${filePath}` : 'Agent'\n+      \n       return {\n         success: false,\n-        error:\n-          error instanceof Error ? error.message : 'Schema conversion failed',\n+        error: `${agentContext}: ${\n+          error instanceof Error ? error.message : 'Schema conversion failed'\n+        }`,\n       }\n     }\n \n     // Convert outputSchema if present\n     let outputSchema: AgentTemplate['outputSchema']\n-    if (template.outputSchema) {\n+    if (validatedConfig.outputSchema) {\n       try {\n-        outputSchema = convertJsonSchemaToZod(template.outputSchema)\n+        outputSchema = convertJsonSchemaToZod(validatedConfig.outputSchema)\n       } catch (error) {\n+        // Try to extract agent context for better error messages\n+        const agentContext = validatedConfig.id \n+          ? `Agent \"${validatedConfig.id}\"${validatedConfig.displayName ? ` (${validatedConfig.displayName})` : ''}`\n+          : filePath ? `Agent in ${filePath}` : 'Agent'\n+        \n         return {\n           success: false,\n-          error: `Failed to convert outputSchema to Zod: ${error instanceof Error ? error.message : 'Unknown error'}`,\n+          error: `${agentContext}: Failed to convert outputSchema to Zod: ${error instanceof Error ? error.message : 'Unknown error'}`,\n         }\n       }\n     }\n \n     // Validate handleSteps if present\n-    if (template.handleSteps) {\n-      if (!isValidGeneratorFunction(template.handleSteps)) {\n+    if (validatedConfig.handleSteps) {\n+      if (!isValidGeneratorFunction(validatedConfig.handleSteps)) {\n+        // Try to extract agent context for better error messages\n+        const agentContext = validatedConfig.id \n+          ? `Agent \"${validatedConfig.id}\"${validatedConfig.displayName ? ` (${validatedConfig.displayName})` : ''}`\n+          : filePath ? `Agent in ${filePath}` : 'Agent'\n+        \n         return {\n           success: false,\n-          error: `handleSteps must be a generator function: \"function* (params) { ... }\". Found: ${template.handleSteps.substring(0, 50)}...`,\n+          error: `${agentContext}: handleSteps must be a generator function: \"function* (params) { ... }\". Found: ${validatedConfig.handleSteps.substring(0, 50)}...`,\n         }\n       }\n     }\n \n     // Convert to internal AgentTemplate format\n     const agentTemplate: AgentTemplate = {\n-      ...template,\n+      ...validatedConfig,\n       outputSchema,\n       inputSchema,\n     }\n \n@@ -222,11 +279,16 @@\n   } catch (error) {\n     const errorMessage =\n       error instanceof Error ? error.message : 'Unknown error'\n \n+    // Try to extract agent context for better error messages\n+    const agentContext = template?.id \n+      ? `Agent \"${template.id}\"${template.displayName ? ` (${template.displayName})` : ''}`\n+      : filePath ? `Agent in ${filePath}` : 'Agent'\n+    \n     return {\n       success: false,\n-      error: `Error validating agent template: ${errorMessage}`,\n+      error: `${agentContext}: Error validating agent template: ${errorMessage}`,\n     }\n   }\n }\n \n@@ -316,7 +378,6 @@\n           `Please check that your inputSchema.params is a valid non-empty JSON schema object.`,\n       )\n     }\n   }\n-\n   return result\n-}\n+}\n\\ No newline at end of file\n"
        },
        {
          "path": "common/src/types/__tests__/dynamic-agent-template.test.ts",
          "status": "modified",
          "diff": "Index: common/src/types/__tests__/dynamic-agent-template.test.ts\n===================================================================\n--- common/src/types/__tests__/dynamic-agent-template.test.ts\tf48e2e7 (parent)\n+++ common/src/types/__tests__/dynamic-agent-template.test.ts\t926a98c (commit)\n@@ -1,8 +1,22 @@\n import type { AgentConfig } from '../../util/types/agent-config'\n import type { DynamicAgentConfig } from '../dynamic-agent-template'\n \n-// Don't remove these lines!\n-const _typecheck1: AgentConfig extends DynamicAgentConfig ? true : false = true\n-const _typecheck2: DynamicAgentConfig extends AgentConfig ? true : false = true\n-const _keyTypecheck1: keyof AgentConfig = {} as keyof DynamicAgentConfig\n-const _keyTypecheck2: keyof DynamicAgentConfig = {} as keyof AgentConfig\n+// Create a version of DynamicAgentConfig where handleSteps is compatible with AgentConfig\n+type DynamicAgentConfigHandleSteps = Omit<DynamicAgentConfig, 'handleSteps'> & {\n+  handleSteps?: AgentConfig['handleSteps']\n+}\n+\n+// Don't remove these lines! And don't change the values away from true!\n+const _typecheck1: AgentConfig extends DynamicAgentConfigHandleSteps\n+  ? true\n+  : false = true\n+const _typecheck2: DynamicAgentConfigHandleSteps extends AgentConfig\n+  ? true\n+  : false = true\n+// These two give nicer to read type errors. Let's keep them.\n+const a: DynamicAgentConfigHandleSteps = {} as DynamicAgentConfigHandleSteps\n+const b: AgentConfig = {} as DynamicAgentConfigHandleSteps\n+const _keyTypecheck1: keyof AgentConfig =\n+  {} as keyof DynamicAgentConfigHandleSteps\n+const _keyTypecheck2: keyof DynamicAgentConfigHandleSteps =\n+  {} as keyof AgentConfig\n"
        },
        {
          "path": "common/src/types/dynamic-agent-template.ts",
          "status": "modified",
          "diff": "Index: common/src/types/dynamic-agent-template.ts\n===================================================================\n--- common/src/types/dynamic-agent-template.ts\tf48e2e7 (parent)\n+++ common/src/types/dynamic-agent-template.ts\t926a98c (commit)\n@@ -136,9 +136,9 @@\n   instructionsPrompt: z.string().optional(),\n   stepPrompt: z.string().optional(),\n \n   // Optional generator function for programmatic agents\n-  handleSteps: HandleStepsSchema,\n+  handleSteps: z.union([HandleStepsSchema, z.string()]).optional(),\n })\n export type DynamicAgentConfig = z.input<typeof DynamicAgentConfigSchema>\n export type DynamicAgentConfigParsed = z.infer<typeof DynamicAgentConfigSchema>\n \n"
        },
        {
          "path": "common/src/util/file.ts",
          "status": "modified",
          "diff": "Index: common/src/util/file.ts\n===================================================================\n--- common/src/util/file.ts\tf48e2e7 (parent)\n+++ common/src/util/file.ts\t926a98c (commit)\n@@ -48,9 +48,9 @@\n     .record(z.string(), z.record(z.string(), z.array(z.string())))\n     .optional(),\n   knowledgeFiles: z.record(z.string(), z.string()),\n   userKnowledgeFiles: z.record(z.string(), z.string()).optional(),\n-  agentTemplates: z.record(z.string(), DynamicAgentTemplateSchema).default({}),\n+  agentTemplates: z.record(z.string(), z.any()).default({}),\n   codebuffConfig: CodebuffConfigSchema.optional(),\n   gitChanges: z.object({\n     status: z.string(),\n     diff: z.string(),\n"
        },
        {
          "path": "npm-app/src/agents/load-agents.ts",
          "status": "modified",
          "diff": "Index: npm-app/src/agents/load-agents.ts\n===================================================================\n--- npm-app/src/agents/load-agents.ts\tf48e2e7 (parent)\n+++ npm-app/src/agents/load-agents.ts\t926a98c (commit)\n@@ -1,20 +1,14 @@\n import * as fs from 'fs'\n import * as path from 'path'\n \n-import { DynamicAgentConfigSchema } from '@codebuff/common/types/dynamic-agent-template'\n import { cyan, green } from 'picocolors'\n \n import { getAllTsFiles, getAgentsDirectory } from './agent-utils'\n \n import type { CodebuffConfig } from '@codebuff/common/json-config/constants'\n-import type {\n-  DynamicAgentConfigParsed,\n-  DynamicAgentTemplate,\n-} from '@codebuff/common/types/dynamic-agent-template'\n \n-export let loadedAgents: Record<string, DynamicAgentTemplate> = {}\n-\n+export let loadedAgents: Record<string, any> = {}\n export async function loadLocalAgents({\n   verbose = false,\n }: {\n   verbose?: boolean\n@@ -54,29 +48,15 @@\n       }\n \n       if (!agentConfig) continue\n \n-      let typedAgentConfig: DynamicAgentConfigParsed\n-      try {\n-        typedAgentConfig = DynamicAgentConfigSchema.parse(agentConfig)\n-      } catch (error: any) {\n-        console.error('Invalid agent format:', fullPath, error)\n-        continue\n-      }\n-\n       // Convert handleSteps function to string if present\n-      let handleStepsString: string | undefined\n+      let processedAgentConfig = { ...agentConfig }\n       if (agentConfig.handleSteps) {\n-        handleStepsString = agentConfig.handleSteps.toString()\n+        processedAgentConfig.handleSteps = agentConfig.handleSteps.toString()\n       }\n \n-      loadedAgents[fileName] = {\n-        ...typedAgentConfig,\n-        systemPrompt: typedAgentConfig.systemPrompt || '',\n-        instructionsPrompt: typedAgentConfig.instructionsPrompt || '',\n-        stepPrompt: typedAgentConfig.stepPrompt || '',\n-        handleSteps: handleStepsString,\n-      }\n+      loadedAgents[fileName] = processedAgentConfig\n     }\n   } catch (error) {}\n \n   return loadedAgents\n"
        }
      ]
    },
    {
      "id": "enforce-agent-tools",
      "sha": "8b6285b273edd2a45bd3222c5c458149fd4a41d1",
      "parentSha": "bb61b285c5bab3bc02a01c434a4ea09b6f0749ae",
      "spec": "Implement stricter validation for dynamic agent templates and add corresponding tests.\n\nChanges to make:\n1) Schema refinements\n- File: common/src/types/dynamic-agent-template.ts\n  - Add a refinement that rejects templates if toolNames includes 'set_output' while outputMode is not 'json'.\n    • Condition: data.toolNames.includes('set_output') && data.outputMode !== 'json'\n    • Error message: ''set_output' tool requires outputMode to be 'json'. Change outputMode to 'json' or remove 'set_output' from toolNames.'\n    • Path: ['outputMode']\n  - Add a refinement that rejects templates if subagents is non-empty but 'spawn_agents' is not included in toolNames.\n    • Condition: data.subagents.length > 0 && !data.toolNames.includes('spawn_agents')\n    • Error message: 'Non-empty subagents array requires the 'spawn_agents' tool. Add 'spawn_agents' to toolNames or remove subagents.'\n    • Path: ['toolNames']\n  - Preserve existing refinements (outputSchema => json, json => set_output) and default behaviors.\n\n2) Tests\n- File: common/src/__tests__/agent-validation.test.ts\n  - Add a test named: 'should reject set_output tool without json output mode'.\n    • Construct an agent config with outputMode: 'last_message' and toolNames including 'set_output'.\n    • Validate via DynamicAgentTemplateSchema.safeParse and assert failure.\n    • Assert the error message contains: ''set_output' tool requires outputMode to be 'json''.\n\n- File: common/src/__tests__/dynamic-agent-template-schema.test.ts\n  - Add test: 'should reject template with set_output tool but non-json outputMode'.\n    • Build from valid base template; set outputMode: 'last_message' and include 'set_output'. Expect failure and verify message includes ''set_output' tool requires outputMode to be 'json''.\n  - Add test: 'should reject template with set_output tool and all_messages outputMode'.\n    • Same as above but with outputMode: 'all_messages'. Expect failure.\n  - Add test: 'should reject template with non-empty subagents but missing spawn_agents tool'.\n    • Set subagents to a non-empty array and toolNames not including 'spawn_agents'. Expect failure and message to include: 'Non-empty subagents array requires the 'spawn_agents' tool'.\n  - Add test: 'should accept template with non-empty subagents and spawn_agents tool'.\n    • Provide subagents and include 'spawn_agents' in toolNames. Expect success.\n  - Add test: 'should accept template with empty subagents and no spawn_agents tool'.\n    • Provide empty subagents and omit 'spawn_agents'. Expect success.\n\nBehavioral expectations:\n- Any template that includes 'set_output' must use outputMode 'json'.\n- Any template with one or more subagents must include the 'spawn_agents' tool.\n- Existing constraints (e.g., json mode requires set_output and outputSchema => json) remain enforced.\n- Error messages must match the specified strings so tests can assert on them.\n",
      "prompt": "Strengthen dynamic agent template validation so tool usage and output modes are consistent. Specifically, enforce that structured output mode is the only configuration allowed when an agent intends to set a JSON result, and require the agent-spawning tool whenever templates declare subagents. Add thorough unit tests that cover rejection cases for mismatched modes and missing tools, as well as acceptance cases when constraints are satisfied.",
      "supplementalFiles": [
        "common/src/tools/constants.ts",
        "common/src/tools/list.ts",
        "common/src/tools/params/tool/set-output.ts",
        "common/src/tools/params/tool/spawn-agents.ts",
        "common/src/util/agent-template-validation.ts"
      ],
      "fileDiffs": [
        {
          "path": "common/src/__tests__/agent-validation.test.ts",
          "status": "modified",
          "diff": "Index: common/src/__tests__/agent-validation.test.ts\n===================================================================\n--- common/src/__tests__/agent-validation.test.ts\tbb61b28 (parent)\n+++ common/src/__tests__/agent-validation.test.ts\t8b6285b (commit)\n@@ -759,8 +759,37 @@\n         expect(errorMessage).toContain('set_output')\n       }\n     })\n \n+    test('should reject set_output tool without json output mode', () => {\n+      const {\n+        DynamicAgentTemplateSchema,\n+      } = require('../types/dynamic-agent-template')\n+\n+      const agentConfig = {\n+        id: 'test-agent',\n+        version: '1.0.0',\n+        displayName: 'Test Agent',\n+        parentPrompt: 'Testing',\n+        model: 'claude-3-5-sonnet-20241022',\n+        outputMode: 'last_message' as const, // Not json\n+        toolNames: ['end_turn', 'set_output'], // Has set_output\n+        subagents: [],\n+        systemPrompt: 'Test',\n+        instructionsPrompt: 'Test',\n+        stepPrompt: 'Test',\n+      }\n+\n+      const result = DynamicAgentTemplateSchema.safeParse(agentConfig)\n+      expect(result.success).toBe(false)\n+      if (!result.success) {\n+        const errorMessage = result.error.issues[0]?.message || ''\n+        expect(errorMessage).toContain(\n+          \"'set_output' tool requires outputMode to be 'json'\",\n+        )\n+      }\n+    })\n+\n     test('should validate that handleSteps is a generator function', async () => {\n       const agentTemplates = {\n         'test-agent.ts': {\n           ...mockAgentTemplate,\n"
        },
        {
          "path": "common/src/__tests__/dynamic-agent-template-schema.test.ts",
          "status": "modified",
          "diff": "Index: common/src/__tests__/dynamic-agent-template-schema.test.ts\n===================================================================\n--- common/src/__tests__/dynamic-agent-template-schema.test.ts\tbb61b28 (parent)\n+++ common/src/__tests__/dynamic-agent-template-schema.test.ts\t8b6285b (commit)\n@@ -280,8 +280,93 @@\n \n       const result = DynamicAgentTemplateSchema.safeParse(template)\n       expect(result.success).toBe(true)\n     })\n+\n+    it('should reject template with set_output tool but non-json outputMode', () => {\n+      const template = {\n+        ...validBaseTemplate,\n+        outputMode: 'last_message' as const,\n+        toolNames: ['end_turn', 'set_output'], // set_output without json mode\n+      }\n+\n+      const result = DynamicAgentTemplateSchema.safeParse(template)\n+      expect(result.success).toBe(false)\n+      if (!result.success) {\n+        const setOutputError = result.error.issues.find((issue) =>\n+          issue.message.includes(\n+            \"'set_output' tool requires outputMode to be 'json'\",\n+          ),\n+        )\n+        expect(setOutputError).toBeDefined()\n+        expect(setOutputError?.message).toContain(\n+          \"'set_output' tool requires outputMode to be 'json'\",\n+        )\n+      }\n+    })\n+\n+    it('should reject template with set_output tool and all_messages outputMode', () => {\n+      const template = {\n+        ...validBaseTemplate,\n+        outputMode: 'all_messages' as const,\n+        toolNames: ['end_turn', 'set_output'], // set_output without json mode\n+      }\n+\n+      const result = DynamicAgentTemplateSchema.safeParse(template)\n+      expect(result.success).toBe(false)\n+      if (!result.success) {\n+        const setOutputError = result.error.issues.find((issue) =>\n+          issue.message.includes(\n+            \"'set_output' tool requires outputMode to be 'json'\",\n+          ),\n+        )\n+        expect(setOutputError).toBeDefined()\n+      }\n+    })\n+\n+    it('should reject template with non-empty subagents but missing spawn_agents tool', () => {\n+      const template = {\n+        ...validBaseTemplate,\n+        subagents: ['researcher', 'file-picker'], // Non-empty subagents\n+        toolNames: ['end_turn', 'read_files'], // Missing spawn_agents\n+      }\n+\n+      const result = DynamicAgentTemplateSchema.safeParse(template)\n+      expect(result.success).toBe(false)\n+      if (!result.success) {\n+        const spawnAgentsError = result.error.issues.find((issue) =>\n+          issue.message.includes(\n+            \"Non-empty subagents array requires the 'spawn_agents' tool\",\n+          ),\n+        )\n+        expect(spawnAgentsError).toBeDefined()\n+        expect(spawnAgentsError?.message).toContain(\n+          \"Non-empty subagents array requires the 'spawn_agents' tool\",\n+        )\n+      }\n+    })\n+\n+    it('should accept template with non-empty subagents and spawn_agents tool', () => {\n+      const template = {\n+        ...validBaseTemplate,\n+        subagents: ['researcher', 'file-picker'],\n+        toolNames: ['end_turn', 'spawn_agents'],\n+      }\n+\n+      const result = DynamicAgentTemplateSchema.safeParse(template)\n+      expect(result.success).toBe(true)\n+    })\n+\n+    it('should accept template with empty subagents and no spawn_agents tool', () => {\n+      const template = {\n+        ...validBaseTemplate,\n+        subagents: [], // Empty subagents\n+        toolNames: ['end_turn', 'read_files'], // No spawn_agents needed\n+      }\n+\n+      const result = DynamicAgentTemplateSchema.safeParse(template)\n+      expect(result.success).toBe(true)\n+    })\n   })\n \n   describe('Edge Cases', () => {\n     it('should handle empty schemas', () => {\n"
        },
        {
          "path": "common/src/types/dynamic-agent-template.ts",
          "status": "modified",
          "diff": "Index: common/src/types/dynamic-agent-template.ts\n===================================================================\n--- common/src/types/dynamic-agent-template.ts\tbb61b28 (parent)\n+++ common/src/types/dynamic-agent-template.ts\t8b6285b (commit)\n@@ -178,5 +178,36 @@\n         \"outputMode 'json' requires the 'set_output' tool. Add 'set_output' to toolNames.\",\n       path: ['toolNames'],\n     },\n   )\n+  .refine(\n+    (data) => {\n+      // If 'set_output' tool is included, outputMode must be 'json'\n+      if (data.toolNames.includes('set_output') && data.outputMode !== 'json') {\n+        return false\n+      }\n+      return true\n+    },\n+    {\n+      message:\n+        \"'set_output' tool requires outputMode to be 'json'. Change outputMode to 'json' or remove 'set_output' from toolNames.\",\n+      path: ['outputMode'],\n+    },\n+  )\n+  .refine(\n+    (data) => {\n+      // If subagents array is non-empty, 'spawn_agents' tool must be included\n+      if (\n+        data.subagents.length > 0 &&\n+        !data.toolNames.includes('spawn_agents')\n+      ) {\n+        return false\n+      }\n+      return true\n+    },\n+    {\n+      message:\n+        \"Non-empty subagents array requires the 'spawn_agents' tool. Add 'spawn_agents' to toolNames or remove subagents.\",\n+      path: ['toolNames'],\n+    },\n+  )\n export type DynamicAgentTemplate = z.infer<typeof DynamicAgentTemplateSchema>\n"
        }
      ]
    },
    {
      "id": "remove-legacy-overrides",
      "sha": "bb61b285c5bab3bc02a01c434a4ea09b6f0749ae",
      "parentSha": "699554c30ca3412bf04f7bf2bf73023d0d2771c9",
      "spec": "Implement migration away from legacy agent overrides and normalization toward explicit subagents-only configuration across common, backend, and web layers.\n\nScope and required changes:\n\n1) Remove Agent Overrides feature and references\n- Delete the agent override schema and type from common/src/types/agent-overrides.ts. Replace its contents with a clear marker or remove the file entirely. Ensure no remaining imports reference AgentOverrideConfigSchema or AgentOverrideConfig.\n- In web UI docs components, remove any schema display or imports for overrides:\n  - web/src/components/docs/mdx/schema-display.tsx: remove import of AgentOverrideConfigSchema and the AgentOverrideSchemaDisplay export. Only keep CodebuffConfigSchema and DynamicAgentTemplateSchema displays.\n  - web/src/components/docs/mdx/mdx-components.tsx: stop exporting AgentOverrideSchemaDisplay from the components map.\n\n2) Remove agent name normalization utilities and their usage\n- common/src/util/agent-name-normalization.ts: delete normalizeAgentName and normalizeAgentNames functions, keeping only DEFAULT_ORG_PREFIX and downstream resolver helpers that need the prefix constant.\n- common/src/util/agent-name-resolver.ts:\n  - Stop importing/using normalizeAgentName.\n  - getLocalAgents: return IDs exactly as provided (no normalization).\n  - resolveIdToName: compare against provided agentId (no normalization) and keep as an internal (non-exported) helper.\n  - Remove the exported getAgentId helper; rely on explicit IDs provided by the caller with full org prefixes when needed.\n\n3) Simplify and tighten validation for dynamic agent templates\n- common/src/templates/agent-validation.ts:\n  - Remove normalization of subagents (no normalizeAgentNames path).\n  - Do not coerce toolNames via ToolName typing here; simply pass through template.toolNames unchanged while converting schemas.\n  - Construct AgentTemplate without augmenting subagents/toolNames via normalization.\n- common/src/util/agent-template-validation.ts:\n  - Remove validateParentInstructions and formatParentInstructionsError.\n  - Remove validateAgentTemplateFiles and validateAgentTemplateConfigs helpers.\n  - Keep validateSubagents but operate on subagents as-is (no normalization); available agents = AgentTemplateTypes + provided dynamic agent IDs (with their full IDs).\n  - Keep formatSubagentError and formatValidationErrorsOnly.\n\n4) Update tests to reflect the new behavior\n- backend/src/__tests__/agent-registry.test.ts:\n  - Replace previous full mock.module on agent-validation with spies that mock validateAgents and validateSingleAgent at call-time (using spyOn with dynamic import), preserving static templates via a separate mock for @codebuff/backend/templates/agent-list.\n  - validateAgents spy: merge provided dynamic templates into the static templates unless the template id is 'invalid-agent' (collect validationErrors; do not add invalid templates).\n  - validateSingleAgent spy: treat templates missing systemPrompt, instructionsPrompt, or stepPrompt as invalid with an appropriate error; otherwise succeed and pass through the template.\n  - Update DB select mocks for getAgentTemplate test cases to preserve original object shape; adjust long lines to be wrapped.\n  - Add a test for malformed database response to ensure missing required fields cause getAgentTemplate to return null.\n- common/src/__tests__/agent-validation.test.ts:\n  - Update expectation for subagents to use full agent IDs (e.g., 'CodebuffAI/git-committer' rather than unprefixed 'git-committer').\n- common/src/__tests__/dynamic-agent-template-schema.test.ts:\n  - Remove test cases concerning parent instructions runtime validation and related error formatting.\n\n5) Update documentation to reflect subagents-only and removal of overrides/parent-instructions\n- web/src/content/agents/customizing-agents.mdx:\n  - Remove the \"override\" field and any references to overrides.\n  - Replace spawnableAgents with subagents throughout examples and descriptions.\n  - Remove the parentInstructions block and its explanatory section.\n  - Keep systemPrompt, instructionsPrompt, and stepPrompt as core prompts.\n- web/src/content/agents/troubleshooting-agent-customization.mdx:\n  - Update the agent templates layout snippet to remove templates/ path indentation if it implied a different structure; show .agents with simple files, avoiding legacy references.\n\n6) Ensure backend agent spawning and registry behavior aligns with the new model\n- Confirm that tool handlers (spawn-agents.ts and spawn-agents-async.ts) authorize spawning only if the target agent type is listed in parentTemplate.subagents, with no usage of spawnableAgents or parentInstructions. No code changes are required if already using subagents; just ensure tests and docs align.\n- In agent registry assembly, ensure static templates are combined with validated dynamic templates, prioritizing local ones over DB entries, and that cache behavior remains intact.\n\nAcceptance considerations:\n- No references remain to AgentOverrideConfigSchema, validateParentInstructions, formatParentInstructionsError, validateAgentTemplateFiles, validateAgentTemplateConfigs, normalizeAgentName/normalizeAgentNames, or getAgentId across backend/common/web.\n- Tests compile and pass with updated expectations and mocking style.\n- Docs/examples display subagents usage only, with no override or parent-instructions content.\n- Agents are always referenced by full explicit IDs (including org prefix) where applicable.",
      "prompt": "We are removing legacy agent override support, agent name normalization, and parent-instructions. Migrate the system to use explicit full agent IDs and a single subagents mechanism, and update tests and docs accordingly.\n\nHigh-level goals:\n- Eliminate the overrides schema and any UI/docs references to it.\n- Remove all agent-name normalization helpers so agents are identified by explicit IDs.\n- Drop parent-instructions validation and references; rely on subagents only for spawn permissions.\n- Update validation and registry code to treat subagents and toolNames verbatim.\n- Adjust tests to use the new validation approach (spy on validateAgents/validateSingleAgent) and to expect full agent IDs in subagents.\n- Clean up docs/examples to reflect subagents-only and explicit IDs.\n\nDo not include implementation details in your response; focus on ensuring all locations using the old model are migrated to the new one consistently across backend, common, and web.",
      "supplementalFiles": [
        "backend/src/templates/agent-registry.ts",
        "backend/src/templates/dynamic-agents.knowledge.md",
        "backend/src/tools/handlers/tool/spawn-agents.ts",
        "backend/src/tools/handlers/tool/spawn-agents-async.ts",
        "backend/src/run-agent-step.ts",
        "npm-app/src/agents/load-agents.ts",
        "common/src/types/agent-template.ts",
        "common/src/types/dynamic-agent-template.ts",
        "common/src/json-config/constants.ts",
        "common/src/constants/agents.ts"
      ],
      "fileDiffs": [
        {
          "path": "backend/src/__tests__/agent-registry.test.ts",
          "status": "modified",
          "diff": "Index: backend/src/__tests__/agent-registry.test.ts\n===================================================================\n--- backend/src/__tests__/agent-registry.test.ts\t699554c (parent)\n+++ backend/src/__tests__/agent-registry.test.ts\tbb61b28 (commit)\n@@ -1,6 +1,17 @@\n-import { describe, expect, it, beforeEach, afterEach, spyOn, mock } from 'bun:test'\n-import { clearMockedModules, mockModule } from '@codebuff/common/testing/mock-modules'\n+import {\n+  describe,\n+  expect,\n+  it,\n+  beforeEach,\n+  afterEach,\n+  spyOn,\n+  mock,\n+} from 'bun:test'\n+import {\n+  clearMockedModules,\n+  mockModule,\n+} from '@codebuff/common/testing/mock-modules'\n import { getStubProjectFileContext } from '@codebuff/common/util/file'\n \n import {\n   getAgentTemplate,\n@@ -88,49 +99,72 @@\n     inputSchema: {},\n   },\n }\n \n-// Mock validation functions\n-mockModule('@codebuff/common/templates/agent-validation', () => ({\n-  validateAgents: (agentTemplates: Record<string, DynamicAgentTemplate> = {}) => {\n-    const templates: Record<string, AgentTemplate> = { ...mockStaticTemplates }\n-    const validationErrors: any[] = []\n-\n-    for (const key in agentTemplates) {\n-      const template = agentTemplates[key]\n-      if (template.id === 'invalid-agent') {\n-        validationErrors.push({\n-          filePath: key,\n-          message: 'Invalid agent configuration',\n-        })\n-      } else {\n-        templates[template.id] = template as AgentTemplate\n-      }\n-    }\n-\n-    return { templates, validationErrors }\n-  },\n-  validateSingleAgent: (template: DynamicAgentTemplate, options?: any) => {\n-    if (template.id?.includes('invalid-db-agent')) {\n-      return {\n-        success: false,\n-        error: 'Invalid database agent',\n-      }\n-    }\n-    return {\n-      success: true,\n-      agentTemplate: template as AgentTemplate,\n-    }\n-  },\n+// Mock static agent templates\n+mockModule('@codebuff/backend/templates/agent-list', () => ({\n+  agentTemplates: mockStaticTemplates,\n }))\n \n+// We'll spy on the validation functions instead of mocking the entire module\n+\n describe('Agent Registry', () => {\n   let mockFileContext: ProjectFileContext\n \n-  beforeEach(() => {\n+  beforeEach(async () => {\n     // Clear cache before each test\n     clearDatabaseCache()\n     mockFileContext = getStubProjectFileContext()\n+\n+    // Spy on validation functions\n+    const validationModule = await import(\n+      '@codebuff/common/templates/agent-validation'\n+    )\n+    spyOn(validationModule, 'validateAgents').mockImplementation(\n+      (agentTemplates: Record<string, DynamicAgentTemplate> = {}) => {\n+        // Start with static templates (simulating the real behavior)\n+        const templates: Record<string, AgentTemplate> = {\n+          ...mockStaticTemplates,\n+        }\n+        const validationErrors: any[] = []\n+\n+        for (const key in agentTemplates) {\n+          const template = agentTemplates[key]\n+          if (template.id === 'invalid-agent') {\n+            validationErrors.push({\n+              filePath: key,\n+              message: 'Invalid agent configuration',\n+            })\n+            // Don't add invalid agents to templates (this simulates validation failure)\n+          } else {\n+            templates[template.id] = template as AgentTemplate\n+          }\n+        }\n+\n+        return { templates, validationErrors }\n+      },\n+    )\n+\n+    spyOn(validationModule, 'validateSingleAgent').mockImplementation(\n+      (template: DynamicAgentTemplate, options?: any) => {\n+        // Check for malformed agents (missing required fields)\n+        if (\n+          template.id === 'malformed-agent' ||\n+          !template.systemPrompt ||\n+          !template.instructionsPrompt ||\n+          !template.stepPrompt\n+        ) {\n+          return {\n+            success: false,\n+            error: 'Invalid agent configuration - missing required fields',\n+          }\n+        }\n+        return {\n+          success: true,\n+          agentTemplate: template as AgentTemplate,\n+        }\n+      },\n+    )\n   })\n \n   afterEach(() => {\n     mock.restore()\n@@ -154,9 +188,9 @@\n           parentPrompt: 'Test',\n           inputSchema: {},\n         } as AgentTemplate,\n       }\n-      \n+\n       const result = await getAgentTemplate('my-agent', localAgents)\n       expect(result).toBeTruthy()\n       expect(result?.id).toBe('my-agent')\n     })\n@@ -171,9 +205,12 @@\n       expect(result).toBeNull()\n     })\n \n     it('should return null for invalid agent ID formats', async () => {\n-      const result = await getAgentTemplate('invalid/format/with/too/many/slashes', {})\n+      const result = await getAgentTemplate(\n+        'invalid/format/with/too/many/slashes',\n+        {},\n+      )\n       expect(result).toBeNull()\n     })\n   })\n \n@@ -206,15 +243,21 @@\n         },\n       }\n \n       const dbModule = await import('@codebuff/common/db')\n-      spyOn(dbModule.default, 'select').mockImplementation(() => ({\n-        from: () => ({\n-          where: () => Promise.resolve([mockAgentData]),\n-        }),\n-      }) as any)\n+      spyOn(dbModule.default, 'select').mockImplementation(\n+        () =>\n+          ({\n+            from: () => ({\n+              where: () => Promise.resolve([mockAgentData]),\n+            }),\n+          }) as any,\n+      )\n \n-      const result = await getAgentTemplate('test-publisher/test-agent@1.0.0', {})\n+      const result = await getAgentTemplate(\n+        'test-publisher/test-agent@1.0.0',\n+        {},\n+      )\n       expect(result).toBeTruthy()\n       expect(result?.id).toBe('test-publisher/test-agent@1.0.0')\n     })\n   })\n@@ -266,21 +309,30 @@\n         },\n       }\n \n       const dbModule = await import('@codebuff/common/db')\n-      const selectSpy = spyOn(dbModule.default, 'select').mockImplementation(() => ({\n-        from: () => ({\n-          where: () => Promise.resolve([mockAgentData]),\n-        }),\n-      }) as any)\n+      const selectSpy = spyOn(dbModule.default, 'select').mockImplementation(\n+        () =>\n+          ({\n+            from: () => ({\n+              where: () => Promise.resolve([mockAgentData]),\n+            }),\n+          }) as any,\n+      )\n \n       // First call - should hit database\n-      const result1 = await getAgentTemplate('test-publisher/cached-agent@1.0.0', {})\n+      const result1 = await getAgentTemplate(\n+        'test-publisher/cached-agent@1.0.0',\n+        {},\n+      )\n       expect(result1).toBeTruthy()\n       expect(selectSpy).toHaveBeenCalledTimes(1)\n \n       // Second call - should use cache\n-      const result2 = await getAgentTemplate('test-publisher/cached-agent@1.0.0', {})\n+      const result2 = await getAgentTemplate(\n+        'test-publisher/cached-agent@1.0.0',\n+        {},\n+      )\n       expect(result2).toBeTruthy()\n       expect(result2?.displayName).toBe('Cached Agent')\n       expect(selectSpy).toHaveBeenCalledTimes(1)\n     })\n@@ -307,13 +359,15 @@\n         },\n       }\n \n       const result = assembleLocalAgentTemplates(fileContext)\n-      \n+\n       // Should have dynamic template\n       expect(result.agentTemplates).toHaveProperty('custom-agent')\n-      expect(result.agentTemplates['custom-agent'].displayName).toBe('Custom Agent')\n-      \n+      expect(result.agentTemplates['custom-agent'].displayName).toBe(\n+        'Custom Agent',\n+      )\n+\n       // Should have no validation errors\n       expect(result.validationErrors).toHaveLength(0)\n     })\n \n@@ -329,12 +383,12 @@\n         },\n       }\n \n       const result = assembleLocalAgentTemplates(fileContext)\n-      \n+\n       // Should not have invalid template\n       expect(result.agentTemplates).not.toHaveProperty('invalid-agent')\n-      \n+\n       // Should have validation errors\n       expect(result.validationErrors.length).toBeGreaterThan(0)\n     })\n \n@@ -344,12 +398,12 @@\n         agentTemplates: {},\n       }\n \n       const result = assembleLocalAgentTemplates(fileContext)\n-      \n+\n       // Should have no validation errors\n       expect(result.validationErrors).toHaveLength(0)\n-      \n+\n       // Should return some agent templates (static ones from our mock)\n       expect(Object.keys(result.agentTemplates).length).toBeGreaterThan(0)\n     })\n   })\n@@ -378,13 +432,16 @@\n         },\n       }\n \n       const dbModule = await import('@codebuff/common/db')\n-      const selectSpy = spyOn(dbModule.default, 'select').mockImplementation(() => ({\n-        from: () => ({\n-          where: () => Promise.resolve([mockAgentData]),\n-        }),\n-      }) as any)\n+      const selectSpy = spyOn(dbModule.default, 'select').mockImplementation(\n+        () =>\n+          ({\n+            from: () => ({\n+              where: () => Promise.resolve([mockAgentData]),\n+            }),\n+          }) as any,\n+      )\n \n       // First call - should hit database and populate cache\n       await getAgentTemplate('test-publisher/cache-test-agent@1.0.0', {})\n       expect(selectSpy).toHaveBeenCalledTimes(1)\n@@ -429,18 +486,36 @@\n     })\n \n     it('should handle malformed database response', async () => {\n       const dbModule = await import('@codebuff/common/db')\n-      spyOn(dbModule.default, 'select').mockImplementation(() => ({\n-        from: () => ({\n-          where: () => Promise.resolve([{\n-            // Missing required fields\n-            id: 'malformed-agent',\n-          }]),\n-        }),\n-      }) as any)\n+      spyOn(dbModule.default, 'select').mockImplementation(\n+        () =>\n+          ({\n+            from: () => ({\n+              where: () =>\n+                Promise.resolve([\n+                  {\n+                    id: 'malformed-agent',\n+                    publisher_id: 'publisher',\n+                    version: '1.0.0',\n+                    major: 1,\n+                    minor: 0,\n+                    patch: 0,\n+                    data: {\n+                      id: 'malformed-agent',\n+                      displayName: 'Malformed Agent',\n+                      // Missing required fields like systemPrompt, instructionsPrompt, stepPrompt\n+                    },\n+                  },\n+                ]),\n+            }),\n+          }) as any,\n+      )\n \n-      const result = await getAgentTemplate('publisher/malformed-agent@1.0.0', {})\n+      const result = await getAgentTemplate(\n+        'publisher/malformed-agent@1.0.0',\n+        {},\n+      )\n       expect(result).toBeNull()\n     })\n   })\n })\n"
        },
        {
          "path": "common/src/__tests__/agent-validation.test.ts",
          "status": "modified",
          "diff": "Index: common/src/__tests__/agent-validation.test.ts\n===================================================================\n--- common/src/__tests__/agent-validation.test.ts\t699554c (parent)\n+++ common/src/__tests__/agent-validation.test.ts\tbb61b28 (commit)\n@@ -311,9 +311,9 @@\n       expect(result.validationErrors).toHaveLength(0)\n       expect(result.templates).toHaveProperty('CodebuffAI/git-committer')\n       expect(result.templates).toHaveProperty('spawner_agent')\n       expect(result.templates.spawner_agent.subagents).toContain(\n-        'git-committer', // Normalized without prefix\n+        'CodebuffAI/git-committer', // Full agent ID with prefix\n       )\n     })\n   })\n \n"
        },
        {
          "path": "common/src/__tests__/dynamic-agent-template-schema.test.ts",
          "status": "modified",
          "diff": "Index: common/src/__tests__/dynamic-agent-template-schema.test.ts\n===================================================================\n--- common/src/__tests__/dynamic-agent-template-schema.test.ts\t699554c (parent)\n+++ common/src/__tests__/dynamic-agent-template-schema.test.ts\tbb61b28 (commit)\n@@ -4,12 +4,8 @@\n   DynamicAgentConfigSchema,\n   DynamicAgentTemplateSchema,\n } from '../types/dynamic-agent-template'\n import { AgentTemplateTypes } from '../types/session-state'\n-import {\n-  formatParentInstructionsError,\n-  validateParentInstructions,\n-} from '../util/agent-template-validation'\n \n describe('DynamicAgentConfigSchema', () => {\n   const validBaseTemplate = {\n     id: 'test-agent',\n@@ -339,56 +335,5 @@\n       const result = DynamicAgentConfigSchema.safeParse(template)\n       expect(result.success).toBe(true)\n     })\n   })\n-\n-  describe('Parent Instructions Runtime Validation', () => {\n-    it('should validate parent instructions with valid agent IDs', () => {\n-      const parentInstructions = {\n-        [AgentTemplateTypes.researcher]: 'Spawn when you need research',\n-        [AgentTemplateTypes.file_picker]: 'Spawn when you need files',\n-        'custom-agent': 'Spawn for custom tasks',\n-      }\n-      const dynamicAgentIds = ['custom-agent']\n-      const result = validateParentInstructions(\n-        parentInstructions,\n-        dynamicAgentIds,\n-      )\n-      expect(result.valid).toBe(true)\n-      expect(result.invalidAgents).toEqual([])\n-    })\n-\n-    it('should reject parent instructions with invalid agent IDs', () => {\n-      const parentInstructions = {\n-        researcher: 'Spawn when you need research',\n-        invalid_agent: 'Invalid instruction',\n-        another_invalid: 'Another invalid instruction',\n-      }\n-      const dynamicAgentIds = ['custom-agent']\n-\n-      const result = validateParentInstructions(\n-        parentInstructions,\n-        dynamicAgentIds,\n-      )\n-      expect(result.valid).toBe(false)\n-      expect(result.invalidAgents).toEqual(['invalid_agent', 'another_invalid'])\n-      expect(result.availableAgents).toContain('researcher')\n-      expect(result.availableAgents).toContain('custom-agent')\n-    })\n-\n-    it('should format parent instructions error message correctly', () => {\n-      const invalidAgents = ['invalid_agent', 'another_invalid']\n-      const availableAgents = ['researcher', 'file-picker', 'custom-agent']\n-\n-      const errorMessage = formatParentInstructionsError(\n-        invalidAgents,\n-        availableAgents,\n-      )\n-      expect(errorMessage).toContain(\n-        'Invalid parent instruction agent IDs: invalid_agent, another_invalid',\n-      )\n-      expect(errorMessage).toContain(\n-        'Available agents: researcher, file-picker, custom-agent',\n-      )\n-    })\n-  })\n })\n"
        },
        {
          "path": "common/src/templates/agent-validation.ts",
          "status": "modified",
          "diff": "Index: common/src/templates/agent-validation.ts\n===================================================================\n--- common/src/templates/agent-validation.ts\t699554c (parent)\n+++ common/src/templates/agent-validation.ts\tbb61b28 (commit)\n@@ -1,17 +1,13 @@\n import { convertJsonSchemaToZod } from 'zod-from-json-schema'\n \n-import { normalizeAgentNames } from '../util/agent-name-normalization'\n import {\n   formatSubagentError,\n   validateSubagents,\n } from '../util/agent-template-validation'\n import { logger } from '../util/logger'\n-\n-import type { ToolName } from '../tools/constants'\n import type { AgentTemplate } from '../types/agent-template'\n import type { DynamicAgentTemplate } from '../types/dynamic-agent-template'\n-import type { AgentTemplateType } from '../types/session-state'\n \n export interface DynamicAgentValidationError {\n   filePath: string\n   message: string\n@@ -172,12 +168,8 @@\n         }\n       }\n     }\n \n-    const validatedSubagents = normalizeAgentNames(\n-      template.subagents,\n-    ) as AgentTemplateType[]\n-\n     // Convert schemas and handle validation errors\n     let inputSchema: AgentTemplate['inputSchema']\n     try {\n       inputSchema = convertInputSchema(\n@@ -220,10 +212,8 @@\n     const agentTemplate: AgentTemplate = {\n       ...template,\n       outputSchema,\n       inputSchema,\n-      toolNames: template.toolNames as ToolName[],\n-      subagents: validatedSubagents,\n     }\n \n     return {\n       success: true,\n"
        },
        {
          "path": "common/src/types/agent-overrides.ts",
          "status": "deleted",
          "diff": "Index: common/src/types/agent-overrides.ts\n===================================================================\n--- common/src/types/agent-overrides.ts\t699554c (parent)\n+++ common/src/types/agent-overrides.ts\tbb61b28 (commit)\n@@ -1,90 +1,1 @@\n-import { z } from 'zod'\n-\n-import { ALLOWED_MODEL_PREFIXES, models } from '../constants'\n-import { AgentTemplateTypes } from './session-state'\n-import { AGENT_ID_PREFIX } from '../constants/agents'\n-import { toolNames } from '../tools/constants'\n-import { normalizeAgentName } from '../util/agent-name-normalization'\n-\n-// Filter models to only include those that begin with 'anthropic', 'openai', or 'google'\n-const filteredModels = Object.values(models).filter((model) =>\n-  ALLOWED_MODEL_PREFIXES.some((prefix) => model.startsWith(prefix)),\n-)\n-\n-// Ensure we have at least one model for the enum\n-if (filteredModels.length === 0) {\n-  throw new Error('No valid models found with allowed prefixes')\n-}\n-\n-const PromptOverrideSchema = z.object({\n-  type: z.enum(['append', 'prepend', 'replace']),\n-  path: z.string().optional(),\n-  content: z.string().optional(),\n-})\n-\n-const ArrayOverrideSchema = z.object({\n-  type: z.enum(['append', 'replace']),\n-  content: z.union([z.string(), z.array(z.string())]),\n-})\n-\n-const ToolNamesOverrideSchema = z\n-  .object({\n-    type: z.enum(['append', 'replace']),\n-    content: z.union([z.string(), z.array(z.string())]),\n-  })\n-  .refine(\n-    (override) => {\n-      const toolList = Array.isArray(override.content)\n-        ? override.content\n-        : [override.content]\n-      const validToolNames = toolNames as readonly string[]\n-      const invalidTools = toolList.filter(\n-        (tool) => !validToolNames.includes(tool),\n-      )\n-      return invalidTools.length === 0\n-    },\n-    (override) => {\n-      const toolList = Array.isArray(override.content)\n-        ? override.content\n-        : [override.content]\n-      const validToolNames = toolNames as readonly string[]\n-      const invalidTools = toolList.filter(\n-        (tool) => !validToolNames.includes(tool),\n-      )\n-      return {\n-        message: `Invalid tool names: ${invalidTools.join(', ')}. Available tools: ${toolNames.join(', ')}`,\n-      }\n-    },\n-  )\n-\n-export const AgentOverrideConfigSchema = z.object({\n-  id: z.string().refine(\n-    (id) => {\n-      const normalizedId = normalizeAgentName(id)\n-      const availableAgentTypes = Object.values(AgentTemplateTypes)\n-      return availableAgentTypes.includes(normalizedId as any)\n-    },\n-    (id) => {\n-      const normalizedId = normalizeAgentName(id)\n-      const availableAgentTypes = Object.values(AgentTemplateTypes)\n-      const prefixedAgentTypes = availableAgentTypes.map(\n-        (type) => `${AGENT_ID_PREFIX}${type}`,\n-      )\n-      return {\n-        message: `Invalid agent ID: \"${id}\" (normalized: \"${normalizedId}\"). Available agents: ${prefixedAgentTypes.join(', ')}`,\n-      }\n-    },\n-  ), // e.g., \"CodebuffAI/reviewer\"\n-  version: z.string(), // e.g., \"0.1.7\" or \"latest\"\n-  override: z.literal(true), // Flag indicating this is an override\n-  model: z.enum(filteredModels as [string, ...string[]]).optional(),\n-  systemPrompt: PromptOverrideSchema.optional(),\n-  instructionsPrompt: PromptOverrideSchema.optional(),\n-  stepPrompt: PromptOverrideSchema.optional(),\n-  subagents: ArrayOverrideSchema.optional(),\n-  toolNames: ToolNamesOverrideSchema.optional(),\n-})\n-\n-export type AgentOverrideConfig = z.infer<typeof AgentOverrideConfigSchema>\n-export type PromptOverride = z.infer<typeof PromptOverrideSchema>\n-export type ArrayOverride = z.infer<typeof ArrayOverrideSchema>\n+[DELETED]\n\\ No newline at end of file\n"
        },
        {
          "path": "common/src/util/agent-name-normalization.ts",
          "status": "modified",
          "diff": "Index: common/src/util/agent-name-normalization.ts\n===================================================================\n--- common/src/util/agent-name-normalization.ts\t699554c (parent)\n+++ common/src/util/agent-name-normalization.ts\tbb61b28 (commit)\n@@ -1,30 +1,7 @@\n export const DEFAULT_ORG_PREFIX = 'CodebuffAI/'\n \n /**\n- * Normalizes agent names by stripping only the default CodebuffAI organization prefix\n- * Other organization prefixes are preserved to maintain their identity\n- * @param agentName - The agent name that may include an org prefix\n- * @returns The normalized agent name with only CodebuffAI prefix removed\n- */\n-export function normalizeAgentName(agentName: string): string {\n-  if (agentName.startsWith(DEFAULT_ORG_PREFIX)) {\n-    return agentName.slice(DEFAULT_ORG_PREFIX.length)\n-  }\n-  return agentName\n-}\n-\n-/**\n- * Normalizes a list of agent names by stripping the default organization prefix\n- * @param agentNames - Array of agent names or single agent name\n- * @returns Array of normalized agent names\n- */\n-export function normalizeAgentNames(agentNames: string | string[]): string[] {\n-  const agentList = Array.isArray(agentNames) ? agentNames : [agentNames]\n-  return agentList.map(normalizeAgentName)\n-}\n-\n-/**\n  * Resolves an agent ID by trying multiple strategies:\n  * 1. Direct lookup in registry\n  * 2. Try with DEFAULT_ORG_PREFIX for spawnable agents\n  * 3. Return null if not found\n"
        },
        {
          "path": "common/src/util/agent-name-resolver.ts",
          "status": "modified",
          "diff": "Index: common/src/util/agent-name-resolver.ts\n===================================================================\n--- common/src/util/agent-name-resolver.ts\t699554c (parent)\n+++ common/src/util/agent-name-resolver.ts\tbb61b28 (commit)\n@@ -1,5 +1,4 @@\n-import { normalizeAgentName } from './agent-name-normalization'\n import { AGENT_PERSONAS } from '../constants/agents'\n \n export interface AgentInfo {\n   id: string\n@@ -28,9 +27,9 @@\n export function getLocalAgents(\n   localAgents: Record<string, { displayName: string; purpose?: string }>,\n ): AgentInfo[] {\n   return Object.entries(localAgents).map(([agentId, config]) => ({\n-    id: normalizeAgentName(agentId),\n+    id: agentId,\n     displayName: config.displayName,\n     purpose: config.purpose,\n     isBuiltIn: false,\n   }))\n@@ -61,15 +60,14 @@\n \n /**\n  * Resolve agent ID to display name\n  */\n-export function resolveIdToName(\n+function resolveIdToName(\n   agentId: string,\n   localAgents: Record<string, { displayName: string; purpose?: string }> = {},\n ): string | null {\n-  const normalizedId = normalizeAgentName(agentId)\n   const agents = getAllAgents(localAgents)\n-  const agent = agents.find((a) => a.id === normalizedId)\n+  const agent = agents.find((a) => a.id === agentId)\n   return agent?.displayName || null\n }\n \n /**\n@@ -85,17 +83,4 @@\n       ? agentIdOrName\n       : agentIdOrName)\n   )\n }\n-\n-/**\n- * Get agent ID from display name or ID, with fallback\n- */\n-export function getAgentId(\n-  agentIdOrName: string,\n-  localAgents: Record<string, { displayName: string; purpose?: string }> = {},\n-): string {\n-  return (\n-    resolveNameToId(agentIdOrName, localAgents) ||\n-    normalizeAgentName(agentIdOrName)\n-  )\n-}\n"
        },
        {
          "path": "common/src/util/agent-template-validation.ts",
          "status": "modified",
          "diff": "Index: common/src/util/agent-template-validation.ts\n===================================================================\n--- common/src/util/agent-template-validation.ts\t699554c (parent)\n+++ common/src/util/agent-template-validation.ts\tbb61b28 (commit)\n@@ -1,47 +1,29 @@\n-import { normalizeAgentNames } from './agent-name-normalization'\n-import { DynamicAgentTemplateSchema } from '../types/dynamic-agent-template'\n import { AgentTemplateTypes } from '../types/session-state'\n \n-import type { AgentOverrideConfig } from '../types/agent-overrides'\n-import type { DynamicAgentTemplate } from '../types/dynamic-agent-template'\n-\n export interface SubagentValidationResult {\n   valid: boolean\n   invalidAgents: string[]\n }\n \n-export interface AgentTemplateValidationResult {\n-  validConfigs: Array<{\n-    filePath: string\n-    config: AgentOverrideConfig | DynamicAgentTemplate\n-  }>\n-  validationErrors: Array<{ filePath: string; message: string }>\n-}\n-\n /**\n  * Centralized validation for spawnable agents.\n  * Validates that all spawnable agents reference valid agent types.\n  */\n export function validateSubagents(\n   subagents: string[],\n   dynamicAgentIds: string[],\n ): SubagentValidationResult & { availableAgents: string[] } {\n-  // Normalize dynamic agent IDs to allow users to reference them without org prefixes\n-  const normalizedDynamicAgentIds = normalizeAgentNames(dynamicAgentIds)\n \n   // Build complete list of available agent types (normalized)\n   const availableAgentTypes = [\n     ...Object.values(AgentTemplateTypes),\n-    ...normalizedDynamicAgentIds,\n+    ...dynamicAgentIds,\n   ]\n \n-  // Normalize subagents for comparison\n-  const normalizedSubagents = normalizeAgentNames(subagents)\n-\n   // Find invalid agents (those not in available types after normalization)\n   const invalidAgents = subagents.filter(\n-    (agent, index) => !availableAgentTypes.includes(normalizedSubagents[index]),\n+    (agent, index) => !availableAgentTypes.includes(subagents[index]),\n   )\n \n   return {\n     valid: invalidAgents.length === 0,\n@@ -50,46 +32,8 @@\n   }\n }\n \n /**\n- * Centralized validation for parent instructions.\n- * Validates that all parent instruction keys reference valid agent types.\n- */\n-export function validateParentInstructions(\n-  parentInstructions: Record<string, string>,\n-  dynamicAgentIds: string[],\n-): SubagentValidationResult & { availableAgents: string[] } {\n-  // Normalize dynamic agent IDs to allow users to reference them without org prefixes\n-  const normalizedDynamicAgentIds = normalizeAgentNames(dynamicAgentIds)\n-\n-  // Build complete list of available agent types (normalized)\n-  const availableAgentTypes = [\n-    ...Object.values(AgentTemplateTypes),\n-    ...normalizedDynamicAgentIds,\n-  ]\n-\n-  // Get the keys (agent IDs) from parentInstructions\n-  const parentInstructionKeys = Object.keys(parentInstructions)\n-\n-  // Normalize parent instruction keys for comparison\n-  const normalizedParentInstructionKeys = normalizeAgentNames(\n-    parentInstructionKeys,\n-  )\n-\n-  // Find invalid agents (those not in available types after normalization)\n-  const invalidAgents = parentInstructionKeys.filter(\n-    (agent, index) =>\n-      !availableAgentTypes.includes(normalizedParentInstructionKeys[index]),\n-  )\n-\n-  return {\n-    valid: invalidAgents.length === 0,\n-    invalidAgents,\n-    availableAgents: availableAgentTypes,\n-  }\n-}\n-\n-/**\n  * Formats a validation error message for subagents\n  */\n export function formatSubagentError(\n   invalidAgents: string[],\n@@ -102,22 +46,8 @@\n   return message\n }\n \n /**\n- * Formats a validation error message for parent instructions\n- */\n-export function formatParentInstructionsError(\n-  invalidAgents: string[],\n-  availableAgents: string[],\n-): string {\n-  let message = `Invalid parent instruction agent IDs: ${invalidAgents.join(', ')}. Double check the id, including the org prefix if applicable.`\n-\n-  message += `\\n\\nAvailable agents: ${availableAgents.join(', ')}`\n-\n-  return message\n-}\n-\n-/**\n  * Formats validation errors into a user-friendly error message\n  * @param validationErrors - Array of validation errors\n  * @returns Formatted error message string or undefined if no errors\n  */\n@@ -129,83 +59,4 @@\n   return validationErrors\n     .map((error) => `❌ ${error.filePath}: ${error.message}`)\n     .join('\\n')\n }\n-\n-/**\n- * Validates agent template files and returns both valid configs and validation errors\n- * @param agentTemplates - Record of file paths to file contents\n- * @param dynamicAgentIds - Array of dynamic agent IDs to include in validation\n- * @returns Object containing valid configs and validation errors\n- */\n-export function validateAgentTemplateConfigs(\n-  agentTemplates: Record<string, DynamicAgentTemplate>,\n-  dynamicAgentIds: string[] = [],\n-): AgentTemplateValidationResult {\n-  const validConfigs: Array<{\n-    filePath: string\n-    config: AgentOverrideConfig | DynamicAgentTemplate\n-  }> = []\n-  const validationErrors: Array<{ filePath: string; message: string }> = []\n-\n-  for (const [agentId, content] of Object.entries(agentTemplates)) {\n-    try {\n-      const config = DynamicAgentTemplateSchema.parse(content)\n-\n-      // Additional validation for subagents\n-      if (config.subagents && config.subagents.length > 0) {\n-        const validation = validateSubagents(config.subagents, dynamicAgentIds)\n-        if (!validation.valid) {\n-          validationErrors.push({\n-            filePath: agentId,\n-            message: formatSubagentError(\n-              validation.invalidAgents,\n-              validation.availableAgents,\n-            ),\n-          })\n-          continue\n-        }\n-      }\n-\n-      validConfigs.push({ filePath: agentId, config })\n-    } catch (error) {\n-      validationErrors.push({\n-        filePath: agentId,\n-        message: `Invalid JSON or schema: ${error instanceof Error ? error.message : 'Unknown error'}`,\n-      })\n-    }\n-  }\n-\n-  return { validConfigs, validationErrors }\n-}\n-\n-/**\n- * Validates agent template override files and returns only valid ones\n- */\n-export function validateAgentTemplateFiles(\n-  agentTemplates: Record<string, DynamicAgentTemplate>,\n-  logger?: { warn: (obj: any, msg: string) => void },\n-): Record<string, DynamicAgentTemplate> {\n-  const validatedAgents: Record<string, DynamicAgentTemplate> = {}\n-  const { validConfigs, validationErrors } =\n-    validateAgentTemplateConfigs(agentTemplates)\n-\n-  // Add valid configs to validated files\n-  for (const { filePath } of validConfigs) {\n-    validatedAgents[filePath] = agentTemplates[filePath]\n-  }\n-\n-  // Log validation errors\n-  for (const { filePath, message } of validationErrors) {\n-    logger?.warn({ filePath }, message) ??\n-      console.warn(`${message}: ${filePath}`)\n-  }\n-\n-  // Add non-JSON files without validation\n-  for (const [filePath, content] of Object.entries(agentTemplates)) {\n-    if (!filePath.endsWith('.json')) {\n-      validatedAgents[filePath] = content\n-    }\n-  }\n-\n-  return validatedAgents\n-}\n"
        },
        {
          "path": "web/src/components/docs/mdx/mdx-components.tsx",
          "status": "modified",
          "diff": "Index: web/src/components/docs/mdx/mdx-components.tsx\n===================================================================\n--- web/src/components/docs/mdx/mdx-components.tsx\t699554c (parent)\n+++ web/src/components/docs/mdx/mdx-components.tsx\tbb61b28 (commit)\n@@ -4,13 +4,9 @@\n import React, { useState, useEffect } from 'react'\n \n import { CodeDemo } from './code-demo'\n import { MarkdownTable } from './markdown-table'\n-import {\n-  AgentOverrideSchemaDisplay,\n-  AgentTemplateSchemaDisplay,\n-  SchemaDisplay,\n-} from './schema-display'\n+import { AgentTemplateSchemaDisplay, SchemaDisplay } from './schema-display'\n \n import type {\n   HTMLAttributes,\n   AnchorHTMLAttributes,\n@@ -258,9 +254,8 @@\n   Image,\n   CodeDemo,\n   MarkdownTable,\n   SchemaDisplay,\n-  AgentOverrideSchemaDisplay,\n   AgentTemplateSchemaDisplay,\n }\n \n export function Mdx({ code }: MdxProps) {\n"
        },
        {
          "path": "web/src/components/docs/mdx/schema-display.tsx",
          "status": "modified",
          "diff": "Index: web/src/components/docs/mdx/schema-display.tsx\n===================================================================\n--- web/src/components/docs/mdx/schema-display.tsx\t699554c (parent)\n+++ web/src/components/docs/mdx/schema-display.tsx\tbb61b28 (commit)\n@@ -1,9 +1,8 @@\n 'use client'\n \n import { CodebuffConfigSchema } from '@codebuff/common/json-config/constants'\n import { stringifySchema } from '@codebuff/common/json-config/stringify-schema'\n-import { AgentOverrideConfigSchema } from '@codebuff/common/types/agent-overrides'\n import { DynamicAgentTemplateSchema } from '@codebuff/common/types/dynamic-agent-template'\n \n import { CodeDemo } from './code-demo'\n \n@@ -11,13 +10,8 @@\n   const schemaString = stringifySchema(CodebuffConfigSchema)\n   return <CodeDemo language=\"json\">{schemaString}</CodeDemo>\n }\n \n-export function AgentOverrideSchemaDisplay() {\n-  const schemaString = stringifySchema(AgentOverrideConfigSchema)\n-  return <CodeDemo language=\"json\">{schemaString}</CodeDemo>\n-}\n-\n export function AgentTemplateSchemaDisplay() {\n   const schemaString = stringifySchema(DynamicAgentTemplateSchema)\n   return <CodeDemo language=\"json\">{schemaString}</CodeDemo>\n }\n"
        },
        {
          "path": "web/src/content/agents/customizing-agents.mdx",
          "status": "modified",
          "diff": "Index: web/src/content/agents/customizing-agents.mdx\n===================================================================\n--- web/src/content/agents/customizing-agents.mdx\t699554c (parent)\n+++ web/src/content/agents/customizing-agents.mdx\tbb61b28 (commit)\n@@ -24,48 +24,34 @@\n ```json\n {\n   \"id\": \"security-coordinator\",\n   \"version\": \"1.0.0\",\n-  \"override\": false,\n \n   \"name\": \"Security Coordinator\",\n   \"purpose\": \"Coordinates security-focused development workflows\",\n   \"model\": \"anthropic/claude-4-sonnet-20250522\",\n   \"outputMode\": \"last_message\",\n   \"includeMessageHistory\": true,\n \n   \"toolNames\": [\"read_files\", \"spawn_agents\", \"code_search\", \"end_turn\"],\n-  \"spawnableAgents\": [\"reviewer\", \"researcher\", \"file_picker\"],\n+  \"subagents\": [\"reviewer\", \"researcher\", \"file_picker\"],\n \n   \"inputSchema\": {\n     \"prompt\": {\n       \"type\": \"string\",\n       \"description\": \"Security analysis or coordination task\"\n     }\n   },\n-  \"parentInstructions\": {\n-    \"reviewer\": \"Security-sensitive code implemented? I must check for SQL injection, XSS, authentication bypasses, and input validation.\",\n-    \"researcher\": \"Need security best practices or vulnerability info? Spawn me for OWASP guidelines and technology-specific threat research.\",\n-    \"file_picker\": \"Security architecture understanding requires spawning me - I'll locate authentication configs, security middleware, and access control files.\"\n-  },\n \n   \"systemPrompt\": \"You are a security coordinator responsible for ensuring secure development practices.\",\n   \"instructionsPrompt\": \"Analyze the security implications of the request and coordinate appropriate security-focused agents.\",\n-  \"stepPrompt\": \"Continue security analysis and spawn relevant agents with security-focused instructions.\"\n }\n ```\n \n-**How parent instructions work:**\n-\n-- When `security-coordinator` spawns a `reviewer`, the reviewer automatically receives the security-focused instruction\n-- Multiple agents can provide instructions for the same target - all instructions are combined\n-- Instructions are injected into the target agent's `userInputPrompt` automatically\n-\n ## Available Fields\n \n **Core:** `model`, `toolNames`, `spawnableAgents`\n **Prompts:** `systemPrompt`, `instructionsPrompt`, `stepPrompt`\n-**Parent Instructions:** `parentInstructions` - Guide spawned agents\n \n ## Built-in Agents\n \n - `CodebuffAI/base` - Main coding assistant\n"
        },
        {
          "path": "web/src/content/agents/troubleshooting-agent-customization.mdx",
          "status": "modified",
          "diff": "Index: web/src/content/agents/troubleshooting-agent-customization.mdx\n===================================================================\n--- web/src/content/agents/troubleshooting-agent-customization.mdx\t699554c (parent)\n+++ web/src/content/agents/troubleshooting-agent-customization.mdx\tbb61b28 (commit)\n@@ -224,9 +224,8 @@\n \n ```markdown\n your-project/\n ├── .agents/\n-│ └── templates/\n │ ├── my-agent.json\n │ └── my-prompts.md\n ```\n \n"
        }
      ]
    },
    {
      "id": "simplify-tool-result",
      "sha": "9bd3253ae89b60f8362e30531d710f7d984cf418",
      "parentSha": "e24b851c02ff435aad0078e3ab69954c2e090bf2",
      "spec": "Implement a migration so programmatic agent handleSteps generators receive only the latest tool result content as a string (or undefined), not the ToolResult wrapper object. Apply the following changes:\n\n1) Type updates (generator contract)\n- common/src/types/agent-template.ts: Update StepGenerator’s third generic parameter to be { agentState: AgentState; toolResult: string | undefined } instead of ToolResult | undefined.\n- .agents/types/agent-config.d.ts: Mirror the same change for the programmatic agent template types. Update the inline usage docs/examples to no longer inspect thinkResult.toolName; instead, simply yield 'STEP' (end-turn detection is handled elsewhere).\n\n2) Programmatic step runner behavior\n- backend/src/run-programmatic-step.ts: When resuming the generator after a tool call, pass only the latest tool result string (toolResults[toolResults.length - 1]?.result) as toolResult. Maintain end-turn detection by checking the yielded tool call name (e.g., if toolName === 'end_turn', set endTurn and break) rather than inspecting the prior wrapper passed into the generator.\n\n3) Update programmatic agents/templates to consume string results\n- backend/src/templates/agents/file-explorer.ts: After spawn_agents, treat the yielded spawnResult as a string and feed it directly into set_output args.results (remove .result usage).\n- backend/src/templates/agents/thinking-base.ts: Remove reliance on toolResult wrapper fields (e.g., thinkResult?.toolName). Do not break on end-turn via toolResult; just yield 'STEP'.\n- .agents/sonnet4-agent-builder.ts: Treat outputs from read_docs/read_files style tools as strings. When writing files, pass the string result directly in args.content. Where exampleAgentsResult was previously exampleAgentsResult?.result, use the string directly and split as needed.\n\n4) Update agent implementation details in researcher\n- .agents/researcher.ts: Ensure web_search is called with a safe default query (prompt ?? '') and set depth to 'standard'.\n\n5) Tests\n- backend/src/__tests__/run-programmatic-step.test.ts: Update expectations to treat tool results passed back to the generator as strings (e.g., expect(receivedToolResult).toEqual('file content') and substring checks like toContain('authenticate')). Remove assertions that inspect wrapper fields (toolName/result) on the generator-provided toolResult.\n\n6) Preserve ToolResult usage elsewhere\n- Do not change ToolResult type or its usage in the broader tool pipeline (tool-executor, stream-parser, run-agent-step, message rendering). Tool execution should continue to accumulate ToolResult[] for state, traces, and message rendering; only the generator handback switches to string.\n\nAcceptance criteria:\n- All type checks pass with the new generator input type.\n- Programmatic agents correctly receive string results and no longer reference wrapper fields.\n- Tests expecting string tool results in the generator pass, including comprehensive STEP/STEP_ALL flows.\n- Researcher agent safely handles empty prompts and uses standard depth.\n- Existing tool execution and message rendering behavior remains unchanged outside the generator input contract.",
      "prompt": "Refactor programmatic agent step handling so that generators receive only the latest tool’s result text. Update the types, the step runner to pass a string or undefined, and all affected agent templates and tests that previously accessed wrapper fields. Keep the broader tool execution pipeline unchanged. Also make the researcher agent’s web search safer by defaulting the query and using a standard depth.",
      "supplementalFiles": [
        "backend/src/tools/tool-executor.ts",
        "backend/src/tools/stream-parser.ts",
        "backend/src/util/parse-tool-call-xml.ts",
        "backend/src/run-agent-step.ts",
        "backend/src/tools/handlers/handler-function-type.ts",
        "backend/src/tools/handlers/list.ts",
        "backend/src/tools/handlers/tool/write-file.ts",
        "backend/src/tools/handlers/tool/find-files.ts",
        "backend/src/tools/handlers/tool/spawn-agents.ts",
        "common/src/types/message.ts",
        "common/src/types/session-state.ts"
      ],
      "fileDiffs": [
        {
          "path": ".agents/researcher.ts",
          "status": "modified",
          "diff": "Index: .agents/researcher.ts\n===================================================================\n--- .agents/researcher.ts\te24b851 (parent)\n+++ .agents/researcher.ts\t9bd3253 (commit)\n@@ -49,9 +49,9 @@\n     \"Don't forget to end your response with the end_turn tool: <end_turn></end_turn>\",\n   handleSteps: function* ({ agentState, prompt, params }) {\n     yield {\n       toolName: 'web_search',\n-      args: { query: prompt },\n+      args: { query: prompt ?? '', depth: 'standard' },\n     }\n     yield 'STEP_ALL'\n   },\n }\n"
        },
        {
          "path": ".agents/sonnet4-agent-builder.ts",
          "status": "modified",
          "diff": "Index: .agents/sonnet4-agent-builder.ts\n===================================================================\n--- .agents/sonnet4-agent-builder.ts\te24b851 (parent)\n+++ .agents/sonnet4-agent-builder.ts\t9bd3253 (commit)\n@@ -126,15 +126,15 @@\n         paths: ['common/src/util/types/agent-config.ts'],\n       },\n     }\n \n-    if (configResult?.result) {\n+    if (configResult) {\n       yield {\n         toolName: 'write_file',\n         args: {\n           path: TEMPLATE_TYPES_PATH,\n           instructions: 'Create agent template type definitions file',\n-          content: configResult.result,\n+          content: configResult,\n         },\n       }\n     }\n \n@@ -145,15 +145,15 @@\n         paths: ['common/src/util/types/tools.d.ts'],\n       },\n     }\n \n-    if (toolsResult?.result) {\n+    if (toolsResult) {\n       yield {\n         toolName: 'write_file',\n         args: {\n           path: TOOL_DEFINITIONS_PATH,\n           instructions: 'Create tools type file',\n-          content: toolsResult.result,\n+          content: toolsResult,\n         },\n       }\n     }\n \n@@ -168,10 +168,10 @@\n         ],\n       },\n     }\n \n-    if (exampleAgentsResult?.result) {\n-      const exampleFiles = exampleAgentsResult.result\n+    if (exampleAgentsResult) {\n+      const exampleFiles = exampleAgentsResult\n         .split('\\n\\n')\n         .filter(Boolean)\n \n       // Write example 1\n"
        },
        {
          "path": ".agents/types/agent-config.d.ts",
          "status": "modified",
          "diff": "Index: .agents/types/agent-config.d.ts\n===================================================================\n--- .agents/types/agent-config.d.ts\te24b851 (parent)\n+++ .agents/types/agent-config.d.ts\t9bd3253 (commit)\n@@ -150,9 +150,9 @@\n     context: AgentStepContext,\n   ) => Generator<\n     ToolCall | 'STEP' | 'STEP_ALL',\n     void,\n-    { agentState: AgentState; toolResult: ToolResult | undefined }\n+    { agentState: AgentState; toolResult: string | undefined }\n   >\n }\n \n // ============================================================================\n"
        },
        {
          "path": "backend/src/__tests__/run-programmatic-step.test.ts",
          "status": "modified",
          "diff": "Index: backend/src/__tests__/run-programmatic-step.test.ts\n===================================================================\n--- backend/src/__tests__/run-programmatic-step.test.ts\te24b851 (parent)\n+++ backend/src/__tests__/run-programmatic-step.test.ts\t9bd3253 (commit)\n@@ -377,9 +377,9 @@\n     })\n \n     it('should comprehensively test STEP_ALL functionality with multiple tools and state management', async () => {\n       // Track all tool results and state changes for verification\n-      const toolResultsReceived: (ToolResult | undefined)[] = []\n+      const toolResultsReceived: (string | undefined)[] = []\n       const stateSnapshots: AgentState[] = []\n       let stepCount = 0\n \n       const mockGenerator = (function* () {\n@@ -572,12 +572,11 @@\n       expect(toolCalls[6][0].toolName).toBe('set_output')\n \n       // Verify tool results were passed back to generator\n       expect(toolResultsReceived).toHaveLength(7)\n-      expect(toolResultsReceived[0]?.toolName).toBe('read_files')\n-      expect(toolResultsReceived[0]?.result).toContain('authenticate')\n-      expect(toolResultsReceived[3]?.toolName).toBe('add_subgoal')\n-      expect(toolResultsReceived[6]?.toolName).toBe('set_output')\n+      expect(toolResultsReceived[0]).toContain('authenticate')\n+      expect(toolResultsReceived[3]).toContain('auth-analysis')\n+      expect(toolResultsReceived[6]).toContain('Output set successfully')\n \n       // Verify state management throughout execution\n       expect(stateSnapshots).toHaveLength(7)\n       expect(Object.keys(result1.agentState.agentContext)).toContain(\n@@ -637,9 +636,9 @@\n     })\n \n     it('should pass tool results back to generator', async () => {\n       const toolResults: ToolResult[] = []\n-      let receivedToolResult: ToolResult | undefined\n+      let receivedToolResult: string | undefined\n \n       const mockGenerator = (function* () {\n         const input1 = yield {\n           toolName: 'read_files',\n@@ -663,13 +662,9 @@\n       })\n \n       await runProgrammaticStep(mockAgentState, mockParams)\n \n-      expect(receivedToolResult).toEqual({\n-        toolName: 'read_files',\n-        toolCallId: 'test-id',\n-        result: 'file content',\n-      })\n+      expect(receivedToolResult).toEqual('file content')\n     })\n   })\n \n   describe('generator control flow', () => {\n"
        },
        {
          "path": "backend/src/run-programmatic-step.ts",
          "status": "modified",
          "diff": "Index: backend/src/run-programmatic-step.ts\n===================================================================\n--- backend/src/run-programmatic-step.ts\te24b851 (parent)\n+++ backend/src/run-programmatic-step.ts\t9bd3253 (commit)\n@@ -147,9 +147,9 @@\n     agentContext: agentState.agentContext,\n     messages: agentState.messageHistory.map((msg) => ({ ...msg })),\n   }\n \n-  let toolResult: ToolResult | undefined\n+  let toolResult: string | undefined\n   let endTurn = false\n \n   try {\n     // Execute tools synchronously as the generator yields them\n@@ -231,9 +231,9 @@\n       // Sync state.messages back to agentState.messageHistory\n       state.agentState.messageHistory = state.messages\n \n       // Get the latest tool result\n-      toolResult = toolResults[toolResults.length - 1]\n+      toolResult = toolResults[toolResults.length - 1]?.result\n \n       if (toolCall.toolName === 'end_turn') {\n         endTurn = true\n         break\n"
        },
        {
          "path": "backend/src/templates/agents/file-explorer.ts",
          "status": "modified",
          "diff": "Index: backend/src/templates/agents/file-explorer.ts\n===================================================================\n--- backend/src/templates/agents/file-explorer.ts\te24b851 (parent)\n+++ backend/src/templates/agents/file-explorer.ts\t9bd3253 (commit)\n@@ -52,9 +52,9 @@\n     // Set output with aggregated results\n     yield {\n       toolName: 'set_output' as const,\n       args: {\n-        results: spawnResult?.result,\n+        results: spawnResult,\n       },\n     }\n   },\n } satisfies AgentTemplate<string, z.infer<typeof paramsSchema>>\n"
        },
        {
          "path": "backend/src/templates/agents/thinking-base.ts",
          "status": "modified",
          "diff": "Index: backend/src/templates/agents/thinking-base.ts\n===================================================================\n--- backend/src/templates/agents/thinking-base.ts\te24b851 (parent)\n+++ backend/src/templates/agents/thinking-base.ts\t9bd3253 (commit)\n@@ -44,11 +44,8 @@\n             },\n           ],\n         },\n       }\n-      const { toolResult: thinkResult } = yield 'STEP'\n-      if (thinkResult?.toolName === 'end_turn') {\n-        break\n-      }\n+      yield 'STEP'\n     }\n   },\n })\n"
        },
        {
          "path": "common/src/types/agent-template.ts",
          "status": "modified",
          "diff": "Index: common/src/types/agent-template.ts\n===================================================================\n--- common/src/types/agent-template.ts\te24b851 (parent)\n+++ common/src/types/agent-template.ts\t9bd3253 (commit)\n@@ -35,9 +35,9 @@\n \n export type StepGenerator = Generator<\n   Omit<ToolCall, 'toolCallId'> | 'STEP' | 'STEP_ALL', // Generic tool call type\n   void,\n-  { agentState: AgentState; toolResult: ToolResult | undefined }\n+  { agentState: AgentState; toolResult: string | undefined }\n >\n \n export type StepHandler<\n   P = string | undefined,\n"
        },
        {
          "path": "common/src/util/types/agent-config.d.ts",
          "status": "modified",
          "diff": "Index: common/src/util/types/agent-config.d.ts\n===================================================================\n--- common/src/util/types/agent-config.d.ts\te24b851 (parent)\n+++ common/src/util/types/agent-config.d.ts\t9bd3253 (commit)\n@@ -138,12 +138,9 @@\n    *         },\n    *       ],\n    *     },\n    *   }\n-   *   const { toolResult: thinkResult } = yield 'STEP'\n-   *   if (thinkResult?.toolName === 'end_turn') {\n-   *     break\n-   *   }\n+   *   yield 'STEP'\n    * }\n    * }\n    */\n   handleSteps?: (\n"
        }
      ]
    },
    {
      "id": "add-oss-agents",
      "sha": "e24b851c02ff435aad0078e3ab69954c2e090bf2",
      "parentSha": "3fe0550b5a804d5b28b731a115b827bf93b68aa5",
      "spec": "Implement an open-source-only agent suite and model explicitness-based routing/caching.\n\n1) Add new agent configs (TypeScript, no code generation here) under .agents/opensource/ using AgentConfig from ../types/agent-config:\n- .agents/opensource/base.ts\n  - id: 'oss-model-base'; publisher: 'codebuff'; model: 'qwen/qwen3-235b-a22b-2507:fast'\n  - displayName: 'Buffy the Coding Assistant'\n  - parentPrompt: Base orchestration description (reliable coding assistance with strong tool use)\n  - inputSchema: { prompt: string }\n  - outputMode: 'last_message'; includeMessageHistory: false\n  - toolNames: ['create_plan','spawn_agents','add_subgoal','browser_logs','end_turn','read_files','think_deeply','run_terminal_command','update_subgoal']\n  - subagents: ['codebuff/oss-model-file-picker@0.0.1','codebuff/oss-model-researcher@0.0.1','codebuff/oss-model-thinker@0.0.1','codebuff/oss-model-reviewer@0.0.1','codebuff/oss-model-coder@0.0.1']\n  - systemPrompt: Persona and tool/agents/file tree placeholders ({CODEBUFF_*}) matching the diff content\n  - instructionsPrompt: Orchestration-only; always delegate code changes to 'oss-model-coder'; list delegation strategy per subagent\n  - stepPrompt: \"Continue working on the user's request. Use your tools and spawn subagents as needed.\"\n\n- .agents/opensource/coder.ts\n  - id: 'oss-model-coder'; model: 'qwen/qwen3-coder:fast'; displayName: 'Casey the Coder'\n  - toolNames: ['read_files','write_file','str_replace','code_search','run_terminal_command','end_turn']\n  - subagents: []\n  - systemPrompt/instructionsPrompt/stepPrompt content aligning with the diff (coding specialist, read before write, minimal focused edits, end with end_turn)\n\n- .agents/opensource/file-picker.ts\n  - id: 'oss-model-file-picker'; model: 'openai/gpt-oss-120b:fast'; displayName: 'Fletcher the File Fetcher'\n  - toolNames: ['find_files']\n  - includeMessageHistory: false; subagents: []\n  - systemPrompt/instructionsPrompt/stepPrompt as in diff; add handleSteps generator: first yield find_files with args { prompt: prompt ?? \"Find files related to the user's request\" }, then yield 'STEP_ALL'\n\n- .agents/opensource/researcher.ts\n  - id: 'oss-model-researcher'; model: 'qwen/qwen3-235b-a22b-thinking-2507'\n  - toolNames: ['web_search','read_docs','read_files','end_turn']\n  - systemPrompt/instructionsPrompt/stepPrompt per diff (external research, summarize notes)\n\n- .agents/opensource/reviewer.ts\n  - id: 'oss-model-reviewer'; model: 'openai/gpt-oss-120b:fast'; includeMessageHistory: true\n  - toolNames: ['end_turn','run_file_change_hooks']\n  - systemPrompt/instructionsPrompt/stepPrompt per diff; ensure guidance to run hooks and include results\n\n- .agents/opensource/thinker.ts\n  - id: 'oss-model-thinker'; model: 'meta-llama/llama-4-maverick-8b:fast'; includeMessageHistory: true\n  - toolNames: ['end_turn']; subagents: []\n  - systemPrompt/instructionsPrompt/stepPrompt per diff (concise deep thinking; end with end_turn)\n\n2) Update OpenRouter provider behavior to use model explicitness for fallbacks:\n- Edit backend/src/llm-apis/openrouter.ts\n  - Import: isExplicitlyDefinedModel from '@codebuff/common/util/model-utils'\n  - Initialize extraBody as a Record; set extraBody.provider = { order: providerOrder[model as keyof typeof providerOrder], allow_fallbacks: !isExplicitlyDefinedModel(model) }\n  - Preserve existing providerOrder constants and createOpenRouter call; keep headers unchanged.\n\n3) Add explicit-model utility for shared use:\n- Create common/src/util/model-utils.ts\n  - Implement a cached Set<string> of Object.values(models) built via dynamic require('../constants') to avoid circular imports\n  - Export function isExplicitlyDefinedModel(model: Model): boolean that checks membership in that Set\n\n4) Update cache-control logic to rely on explicitness:\n- Edit common/src/constants.ts\n  - Import isExplicitlyDefinedModel from './util/model-utils'\n  - Remove modelsGeneric helper if only used by supportsCacheControl\n  - Change supportsCacheControl(model): return false if !isExplicitlyDefinedModel(model); else return !nonCacheableModels.includes(model)\n\nBehavioral expectations:\n- New OSS agents can be referenced by ID and spawned like existing agents, with only open-source model IDs in their configs.\n- OpenRouter requests will allow provider fallbacks for non-explicitly-defined model strings; explicitly-defined models will not allow fallbacks.\n- supportsCacheControl returns true only for explicitly-defined models not in the nonCacheable list (e.g., false for unknown/free-form model IDs).\n- No changes to existing agent files outside the new .agents/opensource suite.",
      "prompt": "Add a new suite of open‑source–only agents for orchestration, coding, file discovery, research, review, and deep thinking under a dedicated namespace, using appropriate open‑source model IDs. Update the OpenRouter integration so that provider fallbacks are enabled for non‑explicit model strings but disabled for known, explicitly defined models. Introduce a small shared utility to detect whether a model is explicitly defined and use it to make cache‑control decisions. Keep changes minimal and consistent with existing agent patterns and prompts.",
      "supplementalFiles": [
        ".agents/base.ts",
        ".agents/file-picker.ts",
        ".agents/researcher.ts",
        ".agents/reviewer.ts",
        ".agents/thinker.ts",
        "backend/src/run-agent-step.ts",
        "packages/internal/src/openrouter-ai-sdk/openrouter-provider.ts",
        "packages/internal/src/openrouter-ai-sdk/index.ts",
        "backend/src/llm-apis/vercel-ai-sdk/openrouter.ts",
        "backend/src/prompt-agent-stream.ts"
      ],
      "fileDiffs": [
        {
          "path": ".agents/opensource/base.ts",
          "status": "added",
          "diff": "Index: .agents/opensource/base.ts\n===================================================================\n--- .agents/opensource/base.ts\t3fe0550 (parent)\n+++ .agents/opensource/base.ts\te24b851 (commit)\n@@ -1,1 +1,76 @@\n-[NEW FILE]\n\\ No newline at end of file\n+import type { AgentConfig } from '../types/agent-config'\n+\n+const config: AgentConfig = {\n+  id: 'oss-model-base',\n+  publisher: 'codebuff',\n+  model: 'qwen/qwen3-235b-a22b-2507:fast',\n+  displayName: 'Buffy the Coding Assistant',\n+  parentPrompt:\n+    'Base agent for reliable coding assistance with excellent tool calling capabilities.',\n+  inputSchema: {\n+    prompt: {\n+      description: 'A coding task to complete',\n+      type: 'string',\n+    },\n+  },\n+  outputMode: 'last_message',\n+  includeMessageHistory: false,\n+  toolNames: [\n+    'create_plan',\n+    'spawn_agents',\n+    'add_subgoal',\n+    'browser_logs',\n+    'end_turn',\n+    'read_files',\n+    'think_deeply',\n+    'run_terminal_command',\n+    'update_subgoal',\n+  ],\n+  subagents: [\n+    'codebuff/oss-model-file-picker@0.0.1',\n+    'codebuff/oss-model-researcher@0.0.1',\n+    'codebuff/oss-model-thinker@0.0.1',\n+    'codebuff/oss-model-reviewer@0.0.1',\n+    'codebuff/oss-model-coder@0.0.1',\n+  ],\n+  systemPrompt: `# Persona: Buffy the Coding Assistant\n+\n+**Your core identity is Buffy the Enthusiastic Coding Assistant.** You are an expert coding assistant with excellent tool calling capabilities and strong reasoning. You excel at code generation, debugging, refactoring, and understanding complex codebases.\n+\n+- **Tone:** Maintain a positive, friendly, and helpful tone. Use clear and encouraging language.\n+- **Clarity & Conciseness:** Explain your steps clearly but concisely. Say the least you can to get your point across. If you can, answer in one sentence only. Do not summarize changes. End turn early.\n+\n+You are working on a project over multiple \"iterations,\" reminiscent of the movie \"Memento,\" aiming to accomplish the user's request.\n+\n+{CODEBUFF_TOOLS_PROMPT}\n+\n+{CODEBUFF_AGENTS_PROMPT}\n+\n+{CODEBUFF_FILE_TREE_PROMPT}\n+\n+{CODEBUFF_SYSTEM_INFO_PROMPT}\n+\n+{CODEBUFF_GIT_CHANGES_PROMPT}`,\n+  instructionsPrompt: `You are the orchestration agent. Your role is to coordinate and delegate tasks to specialized agents, not to implement code yourself.\n+\n+**Delegation Strategy:**\n+- For any code implementation, modification, debugging, or refactoring tasks, spawn the 'oss-model-coder' agent\n+- For file discovery and exploration, use 'oss-model-file-picker'\n+- For research and documentation, use 'oss-model-researcher'\n+- For complex problem analysis, use 'oss-model-thinker'\n+- For code review, use 'oss-model-reviewer'\n+\n+**Your Process:**\n+1. Analyze the user's request to understand what type of work is needed\n+2. If it involves any coding (writing, modifying, debugging code), delegate to 'oss-model-coder'\n+3. Use other agents for their specialized tasks\n+4. Coordinate the overall response and ensure the user's request is fulfilled\n+\n+**Important:**\n+- Do NOT write, modify, or debug code yourself - always delegate to 'oss-model-coder'\n+- Use only the exact tool names listed above\n+- Focus on orchestration and coordination, not implementation`,\n+  stepPrompt: `Continue working on the user's request. Use your tools and spawn subagents as needed.`,\n+}\n+\n+export default config\n"
        },
        {
          "path": ".agents/opensource/coder.ts",
          "status": "added",
          "diff": "Index: .agents/opensource/coder.ts\n===================================================================\n--- .agents/opensource/coder.ts\t3fe0550 (parent)\n+++ .agents/opensource/coder.ts\te24b851 (commit)\n@@ -1,1 +1,70 @@\n-[NEW FILE]\n\\ No newline at end of file\n+import type { AgentConfig } from '../types/agent-config'\n+\n+const config: AgentConfig = {\n+  id: 'oss-model-coder',\n+  publisher: 'codebuff',\n+  model: 'qwen/qwen3-coder:fast',\n+  displayName: 'Casey the Coder',\n+  parentPrompt:\n+    'Expert coding agent for reliable code implementation, debugging, and refactoring with excellent tool calling capabilities.',\n+  inputSchema: {\n+    prompt: {\n+      description: 'A coding implementation task to complete',\n+      type: 'string',\n+    },\n+  },\n+  outputMode: 'last_message',\n+  includeMessageHistory: false,\n+  toolNames: [\n+    'read_files',\n+    'write_file',\n+    'str_replace',\n+    'code_search',\n+    'run_terminal_command',\n+    'end_turn',\n+  ],\n+  subagents: [],\n+  systemPrompt: `# Persona: Casey the Coder\n+\n+You are an expert coding specialist, focused exclusively on code implementation, debugging, and refactoring. You excel at:\n+\n+- Writing clean, efficient, and maintainable code\n+- Debugging complex issues and fixing bugs\n+- Refactoring code for better structure and performance\n+- Following coding best practices and patterns\n+- Understanding and working with existing codebases\n+\n+**Your Role:** You are the dedicated coding specialist. When the base agent needs any code implementation, modification, or debugging work done, it delegates those tasks to you.\n+\n+- **Tone:** Professional, focused, and detail-oriented. Be concise but thorough.\n+- **Approach:** Always read relevant files first, understand the context, then implement clean solutions.\n+- **Quality:** Write production-ready code that follows the project's existing patterns and conventions.\n+\n+{CODEBUFF_TOOLS_PROMPT}\n+\n+{CODEBUFF_AGENTS_PROMPT}\n+\n+{CODEBUFF_FILE_TREE_PROMPT}\n+\n+{CODEBUFF_SYSTEM_INFO_PROMPT}\n+\n+{CODEBUFF_GIT_CHANGES_PROMPT}`,\n+  instructionsPrompt: `You are the coding specialist. Your job is to implement, modify, or debug code based on the request.\n+\n+**Process:**\n+1. Read relevant files to understand the current codebase and context\n+2. Analyze the requirements and existing patterns\n+3. Implement the solution using clean, maintainable code\n+4. Follow the project's existing conventions and style\n+5. Test your changes if possible\n+\n+**Important:**\n+- Always read files before making changes\n+- Preserve existing functionality unless explicitly asked to change it\n+- Follow the project's coding patterns and conventions\n+- Make minimal, focused changes that accomplish the specific task\n+- Use the exact tool names available to you`,\n+  stepPrompt: `Focus on the coding task. Read files, understand the context, then implement the solution. End with the end_turn tool when complete.`,\n+}\n+\n+export default config\n"
        },
        {
          "path": ".agents/opensource/file-picker.ts",
          "status": "added",
          "diff": "Index: .agents/opensource/file-picker.ts\n===================================================================\n--- .agents/opensource/file-picker.ts\t3fe0550 (parent)\n+++ .agents/opensource/file-picker.ts\te24b851 (commit)\n@@ -1,1 +1,45 @@\n-[NEW FILE]\n\\ No newline at end of file\n+import type { AgentConfig, ToolCall } from '../types/agent-config'\n+\n+const config: AgentConfig = {\n+  id: 'oss-model-file-picker',\n+  publisher: 'codebuff',\n+  model: 'openai/gpt-oss-120b:fast',\n+  displayName: 'Fletcher the File Fetcher',\n+  parentPrompt:\n+    'Expert at finding relevant files for efficient file discovery with edge-optimized performance.',\n+  inputSchema: {\n+    prompt: {\n+      description: 'A coding task to complete',\n+      type: 'string',\n+    },\n+  },\n+  outputMode: 'last_message',\n+  includeMessageHistory: false,\n+  toolNames: ['find_files'],\n+  subagents: [],\n+  systemPrompt: `# Persona: Fletcher the File Fetcher\n+\n+You are an expert at finding relevant files in a codebase. You excel at understanding code structure and identifying relevant files quickly and accurately.\n+\n+{CODEBUFF_TOOLS_PROMPT}\n+\n+{CODEBUFF_AGENTS_PROMPT}\n+\n+{CODEBUFF_FILE_TREE_PROMPT}\n+\n+{CODEBUFF_SYSTEM_INFO_PROMPT}\n+\n+{CODEBUFF_GIT_CHANGES_PROMPT}`,\n+  instructionsPrompt: `Provide a short analysis of the locations in the codebase that could be helpful. Focus on the files that are most relevant to the user prompt.\n+In your report, please give an analysis that includes the full paths of files that are relevant and (very briefly) how they could be useful.`,\n+  stepPrompt: `Do not use the find_files tool or any tools again. Just give your response.`,\n+  handleSteps: function* ({ agentState, prompt, params }) {\n+    yield {\n+      toolName: 'find_files',\n+      args: { prompt: prompt ?? \"Find files related to the user's request\" },\n+    }\n+    yield 'STEP_ALL'\n+  },\n+}\n+\n+export default config\n"
        },
        {
          "path": ".agents/opensource/researcher.ts",
          "status": "added",
          "diff": "Index: .agents/opensource/researcher.ts\n===================================================================\n--- .agents/opensource/researcher.ts\t3fe0550 (parent)\n+++ .agents/opensource/researcher.ts\te24b851 (commit)\n@@ -1,1 +1,47 @@\n-[NEW FILE]\n\\ No newline at end of file\n+import type { AgentConfig } from '../types/agent-config'\n+\n+const config: AgentConfig = {\n+  id: 'oss-model-researcher',\n+  publisher: 'codebuff',\n+  model: 'qwen/qwen3-235b-a22b-thinking-2507',\n+  displayName: 'Reid the Researcher',\n+  parentPrompt:\n+    'Expert researcher for comprehensive web search and documentation analysis, focusing on external research and actionable insights from external sources.',\n+  inputSchema: {\n+    prompt: {\n+      description:\n+        'A question you would like answered using web search and documentation',\n+      type: 'string',\n+    },\n+  },\n+  outputMode: 'last_message',\n+  includeMessageHistory: false,\n+  toolNames: ['web_search', 'read_docs', 'read_files', 'end_turn'],\n+  subagents: [],\n+  systemPrompt: `# Persona: Reid the Researcher\n+\n+You are an expert researcher focused exclusively on external research and documentation analysis. Your role is to search the web, analyze documentation from external sources, and provide actionable insights.\n+\n+Your responsibilities include:\n+- Conducting comprehensive web searches to find relevant information\n+- Analyzing documentation from external libraries, frameworks, and APIs\n+- Synthesizing information from multiple sources into clear, actionable insights\n+- Providing code examples and patterns from external sources when applicable\n+- Making specific recommendations based on your research findings\n+\n+Always end your response with the end_turn tool.\n+\n+{CODEBUFF_TOOLS_PROMPT}\n+\n+{CODEBUFF_AGENTS_PROMPT}\n+\n+{CODEBUFF_FILE_TREE_PROMPT}\n+\n+{CODEBUFF_SYSTEM_INFO_PROMPT}\n+\n+{CODEBUFF_GIT_CHANGES_PROMPT}`,\n+  instructionsPrompt: `Research the topic thoroughly and provide comprehensive findings. Make sure to summarize your notes.`,\n+  stepPrompt: `Make sure to summarize your notes.`,\n+}\n+\n+export default config\n"
        },
        {
          "path": ".agents/opensource/reviewer.ts",
          "status": "added",
          "diff": "Index: .agents/opensource/reviewer.ts\n===================================================================\n--- .agents/opensource/reviewer.ts\t3fe0550 (parent)\n+++ .agents/opensource/reviewer.ts\te24b851 (commit)\n@@ -1,1 +1,52 @@\n-[NEW FILE]\n\\ No newline at end of file\n+import type { AgentConfig } from '../types/agent-config'\n+\n+const config: AgentConfig = {\n+  id: 'oss-model-reviewer',\n+  publisher: 'codebuff',\n+  model: 'openai/gpt-oss-120b:fast',\n+  displayName: 'Nit Pick Nick the Reviewer',\n+  parentPrompt:\n+    'Expert code reviewer, specialized for thorough code analysis and feedback.',\n+  inputSchema: {\n+    prompt: {\n+      description: 'What should be reviewed. Be brief.',\n+      type: 'string',\n+    },\n+  },\n+  outputMode: 'last_message',\n+  includeMessageHistory: true,\n+  toolNames: ['end_turn', 'run_file_change_hooks'],\n+  subagents: [],\n+  systemPrompt: `# Persona: Nit Pick Nick the Reviewer\n+\n+You are an expert code reviewer with strong reasoning capabilities. You provide thorough, constructive feedback with a focus on code quality, best practices, and potential issues.\n+\n+{CODEBUFF_TOOLS_PROMPT}\n+\n+{CODEBUFF_AGENTS_PROMPT}`,\n+  instructionsPrompt: `Your task is to provide helpful feedback on the last file changes made by the assistant. You should critique the code changes made recently in the above conversation.\n+\n+IMPORTANT: After analyzing the file changes, you should:\n+1. Run file change hooks to validate the changes using the run_file_change_hooks tool\n+2. Include the hook results in your feedback - if any hooks fail, mention the specific failures and suggest how to fix them\n+3. If hooks pass and no issues are found, mention that validation was successful\n+4. Always run hooks for TypeScript/JavaScript changes, test file changes, or when the changes could affect compilation/tests\n+\n+NOTE: You cannot make any changes directly! You can only suggest changes.\n+\n+Provide specific feedback on the file changes made by the assistant, file-by-file.\n+\n+- Focus on getting to a complete and correct solution as the top priority.\n+- Try to keep any changes to the codebase as minimal as possible.\n+- Simplify any logic that can be simplified.\n+- Where a function can be reused, reuse it and do not create a new one.\n+- Make sure that no new dead code is introduced.\n+- Make sure there are no missing imports.\n+- Make sure no sections were deleted that weren't supposed to be deleted.\n+- Make sure the new code matches the style of the existing code.\n+\n+Be concise and to the point. After providing all your feedback, use the end_turn tool to end your response.`,\n+  stepPrompt: `IMPORTANT: Don't forget to end your response with the end_turn tool: <end_turn></end_turn>`,\n+}\n+\n+export default config\n"
        },
        {
          "path": ".agents/opensource/thinker.ts",
          "status": "added",
          "diff": "Index: .agents/opensource/thinker.ts\n===================================================================\n--- .agents/opensource/thinker.ts\t3fe0550 (parent)\n+++ .agents/opensource/thinker.ts\te24b851 (commit)\n@@ -1,1 +1,39 @@\n-[NEW FILE]\n\\ No newline at end of file\n+import type { AgentConfig } from '../types/agent-config'\n+\n+const config: AgentConfig = {\n+  id: 'oss-model-thinker',\n+  publisher: 'codebuff',\n+  model: 'meta-llama/llama-4-maverick-8b:fast',\n+  displayName: 'Theo the Thinker',\n+  parentPrompt:\n+    'Deep thinking agent, optimized for complex reasoning and step-by-step analysis.',\n+  inputSchema: {\n+    prompt: {\n+      description: 'The problem you are trying to solve',\n+      type: 'string',\n+    },\n+  },\n+  outputMode: 'last_message',\n+  includeMessageHistory: true,\n+  toolNames: ['end_turn'],\n+  subagents: [],\n+  systemPrompt: `# Persona: Theo the Thinker\n+\n+You are an expert programmer, designed for high-reasoning and complex analysis. You excel at breaking down complex problems and providing clear, logical insights.\n+\n+{CODEBUFF_TOOLS_PROMPT}\n+\n+{CODEBUFF_AGENTS_PROMPT}`,\n+  instructionsPrompt: `Think deeply, step by step, about the user request and how best to approach it.\n+\n+Consider edge cases, potential issues, and alternative approaches.\n+\n+Come up with a list of insights that would help someone arrive at the best solution.\n+\n+Try not to be too prescriptive or confident in one solution. Instead, give clear arguments and reasoning.\n+\n+You must be extremely concise and to the point.`,\n+  stepPrompt: `Don't forget to end your response with the end_turn tool: <end_turn></end_turn>`,\n+}\n+\n+export default config\n"
        },
        {
          "path": "backend/src/llm-apis/openrouter.ts",
          "status": "modified",
          "diff": "Index: backend/src/llm-apis/openrouter.ts\n===================================================================\n--- backend/src/llm-apis/openrouter.ts\t3fe0550 (parent)\n+++ backend/src/llm-apis/openrouter.ts\te24b851 (commit)\n@@ -1,5 +1,6 @@\n import { models } from '@codebuff/common/old-constants'\n+import { isExplicitlyDefinedModel } from '@codebuff/common/util/model-utils'\n import { env } from '@codebuff/internal/env'\n import { createOpenRouter } from '@codebuff/internal/openrouter-ai-sdk'\n \n import type { Model } from '@codebuff/common/old-constants'\n@@ -14,15 +15,20 @@\n   [models.openrouter_claude_opus_4]: ['Google', 'Anthropic'],\n } as const\n \n export function openRouterLanguageModel(model: Model) {\n-  const extraBody: Record<string, any> = {}\n-  if (model in providerOrder) {\n-    extraBody.provider = {\n-      order: providerOrder[model as keyof typeof providerOrder],\n-      allow_fallbacks: false,\n-    }\n+  const extraBody: Record<string, any> = {\n+    // transforms: ['middle-out'],\n   }\n+\n+  // Set allow_fallbacks based on whether model is explicitly defined\n+  const isExplicitlyDefined = isExplicitlyDefinedModel(model)\n+\n+  extraBody.provider = {\n+    order: providerOrder[model as keyof typeof providerOrder],\n+    allow_fallbacks: !isExplicitlyDefined,\n+  }\n+\n   return createOpenRouter({\n     apiKey: env.OPEN_ROUTER_API_KEY,\n     headers: {\n       'HTTP-Referer': 'https://codebuff.com',\n"
        },
        {
          "path": "common/src/constants.ts",
          "status": "modified",
          "diff": "Index: common/src/constants.ts\n===================================================================\n--- common/src/constants.ts\t3fe0550 (parent)\n+++ common/src/constants.ts\te24b851 (commit)\n@@ -1,4 +1,6 @@\n+import { isExplicitlyDefinedModel } from './util/model-utils'\n+\n export const STOP_MARKER = '[' + 'END]'\n export const FIND_FILES_MARKER = '[' + 'FIND_FILES_PLEASE]'\n export const EXISTING_CODE_MARKER = '[[**REPLACE_WITH_EXISTING_CODE**]]'\n \n@@ -290,14 +292,13 @@\n }\n \n export type Model = (typeof models)[keyof typeof models] | (string & {})\n \n-const modelsGeneric = Object.values(models) satisfies string[] as string[]\n const nonCacheableModels = [\n   models.openrouter_grok_4,\n ] satisfies string[] as string[]\n export function supportsCacheControl(model: Model): boolean {\n-  if (!modelsGeneric.includes(model)) {\n+  if (!isExplicitlyDefinedModel(model)) {\n     // Default to no cache control for unknown models\n     return false\n   }\n   return !nonCacheableModels.includes(model)\n"
        },
        {
          "path": "common/src/util/model-utils.ts",
          "status": "added",
          "diff": "Index: common/src/util/model-utils.ts\n===================================================================\n--- common/src/util/model-utils.ts\t3fe0550 (parent)\n+++ common/src/util/model-utils.ts\te24b851 (commit)\n@@ -1,1 +1,25 @@\n-[NEW FILE]\n\\ No newline at end of file\n+import type { models, Model } from '../constants'\n+\n+// Cache the explicitly defined models for O(1) lookup performance\n+// Cast to string[] to avoid TypeScript union type issues with (string & {})\n+let explicitlyDefinedModels: Set<string> | null = null\n+\n+function getExplicitlyDefinedModels(): Set<string> {\n+  if (explicitlyDefinedModels === null) {\n+    // Dynamically import to avoid circular dependency issues\n+    // eslint-disable-next-line @typescript-eslint/no-var-requires\n+    const { models } = require('../constants')\n+    explicitlyDefinedModels = new Set(Object.values(models) as string[])\n+  }\n+  return explicitlyDefinedModels\n+}\n+\n+/**\n+ * Check if a model is explicitly defined in the models constant object.\n+ * This is used to determine if a model should allow fallbacks or support cache control.\n+ * @param model - The model to check\n+ * @returns boolean - True if the model is explicitly defined, false otherwise\n+ */\n+export function isExplicitlyDefinedModel(model: Model): boolean {\n+  return getExplicitlyDefinedModels().has(model as string)\n+}\n"
        }
      ]
    },
    {
      "id": "unescape-agent-prompts",
      "sha": "aff88fde0167ee6b93f5fd68861f6cc30889d64c",
      "parentSha": "80017710720bdd0edf24651b2732e410275ef75f",
      "spec": "- Goal: Migrate agent prompt strings in .agents to multiline template literals and introduce a conversion script to automate future migrations.\n\n- Scope: Update the following files to use template literals (backticks) with actual newlines for prompt fields and normalize minor formatting where applicable:\n  - .agents/ask.ts\n  - .agents/base-experimental.ts\n  - .agents/base-lite.ts\n  - .agents/base-max.ts\n  - .agents/base.ts\n  - .agents/claude4-gemini-thinking.ts\n  - .agents/file-picker.ts\n  - .agents/knowledge-keeper.ts\n  - .agents/planner.ts\n  - .agents/researcher.ts\n  - .agents/reviewer.ts\n  - .agents/sonnet4-agent-builder.ts\n  - .agents/superagent.ts\n  - .agents/thinker.ts\n\n- Required changes in each agent file:\n  1) For properties systemPrompt, instructionsPrompt, and stepPrompt:\n     - Replace single/double-quoted strings containing escaped newlines (\\n) with backtick template literals.\n     - Replace all escaped newlines (\\n) with actual newlines.\n     - Escape any literal backticks in the content (use \\`).\n     - Preserve all existing content, placeholders (e.g., {CODEBUFF_*}), and whitespace semantics.\n  2) Ensure XML/system instruction blocks within prompts are no longer escape-prefixed and are readable as intended (e.g., <system>...</system>, <system_instructions>...</system_instructions>), including properly closed tags.\n  3) Where stepPrompt or systemPrompt previously had slightly malformed delimiters (e.g., extra escapes), normalize them to clean, human-readable blocks without altering meaning.\n  4) Do not alter agent behavior, models, tools, input/output schemas, or handleSteps logic.\n\n- Add a new automation script:\n  - Path: scripts/convert-escaped-newlines.ts\n  - Behavior:\n    - Shebang for Bun (#!/usr/bin/env bun).\n    - Scan the .agents directory for .ts files (non-recursive is acceptable for current structure).\n    - For each file, identify string-valued properties of the form <prop>: '...\\n...' or \"...\\n...\" and only transform those that contain escaped newlines.\n    - Transformations per match:\n      - Escape any existing backticks in the content.\n      - Replace all \\n sequences with actual newlines.\n      - Replace the surrounding quotes with backticks.\n      - Reconstruct as <prop>: `...` while preserving other file content.\n    - Log progress (processing, converted properties per file, counts), and write back only if modified.\n  - No changes to loaders/validators are required; they already consume string prompts transparently.\n\n- Verification criteria:\n  - All listed .agents files use template literals for prompts with readable, multiline content.\n  - The prompts render exactly the same semantics as before (no missing placeholders, no malformed XML-like tags, no unintended escapes).\n  - The script runs with Bun and reports processed/modified file counts.\n  - Existing loaders (npm-app/src/agents/load-agents.ts, backend/src/templates/agent-registry.ts) accept the updated prompts without changes.\n  - Unit/integration tests that assert tool-call XML and prompt assembly pass unchanged.",
      "prompt": "Refactor all agent prompt strings in the .agents directory to use multiline template literals instead of quoted strings with escaped newlines. Preserve all content and placeholders while making the text human-readable and removing escape sequences. Add a small Bun script under scripts/ that scans .agents and converts any prompt fields containing \\n into template literals, safely escaping backticks and replacing \\n with actual newlines. Do not change agent behavior or loaders—only the prompt string formatting and the new script.",
      "supplementalFiles": [
        "npm-app/src/agents/load-agents.ts",
        "backend/src/templates/agent-registry.ts",
        "backend/src/prompt-agent-stream.ts",
        "backend/src/__tests__/main-prompt.test.ts",
        "backend/src/__tests__/tool-call-schema.test.ts",
        "backend/src/__tests__/run-agent-step-tools.test.ts",
        "common/src/templates/agent-validation.ts",
        "common/src/types/dynamic-agent-template.ts",
        "npm-app/src/cli-handlers/agents.ts"
      ],
      "fileDiffs": [
        {
          "path": ".agents/ask.ts",
          "status": "modified",
          "diff": "Index: .agents/ask.ts\n===================================================================\n--- .agents/ask.ts\t8001771 (parent)\n+++ .agents/ask.ts\taff88fd (commit)\n@@ -28,13 +28,214 @@\n     'think_deeply',\n   ],\n   subagents: [`codebuff/file-picker@${version}`],\n   parentPrompt: 'Base ask-mode agent that orchestrates the full response.',\n-  systemPrompt:\n-    '# Persona: {CODEBUFF_AGENT_NAME}\\n\\n# Persona: Buffy - The Enthusiastic Coding Assistant\\n\\n**Your core identity is Buffy.** Buffy is an expert coding assistant who is enthusiastic, proactive, and helpful.\\n\\n- **Tone:** Maintain a positive, friendly, and helpful tone. Use clear and encouraging language.\\n- **Clarity & Conciseness:** Explain your steps clearly but concisely. Say the least you can to get your point across. If you can, answer in one sentence only. Do not summarize changes. End turn early.\\n\\nYou are working on a project over multiple \"iterations,\" reminiscent of the movie \"Memento,\" aiming to accomplish the user\\'s request.\\n\\n# Agents\\n\\nUse the spawn_agents tool to spawn subagents to help you complete the user request! Each agent has a specific role and can help you with different parts of the user request.\\n\\nYou should spawn many parallel agents in the same tool call to increase time efficiency.\\n\\nNote that any spawned agent starts with no context at all, and it is up to you to prompt it with enough information to complete your request.\\n\\n# Files\\n\\nThe `read_file` tool result shows files you have previously read from `read_files` tool calls.\\n\\nIf you write to a file, or if the user modifies a file, new copies of a file will be included in `read_file` tool results.\\n\\nThus, multiple copies of the same file may be included over the course of a conversation. Each represents a distinct version in chronological order.\\n\\nImportant:\\n\\n- Pay particular attention to the last copy of a file as that one is current!\\n- You are not the only one making changes to files. The user may modify files too, and you will see the latest version of the file after their changes. You must base you future write_file/str_replace edits off of the latest changes. You must try to accommodate the changes that the user has made and treat those as explicit instructions to follow. If they add lines of code or delete them, you should assume they want the file to remain modified that way unless otherwise noted.\\n\\n# Subgoals\\n\\nFirst, create and edit subgoals if none exist and pursue the most appropriate one. This one of the few ways you can \"take notes\" in the Memento-esque environment. This is important, as you may forget what happened later! Use the `add_subgoal` and `update_subgoal` tools for this.\\n\\nNotes:\\n\\n- Try to phrase the subgoal objective first in terms of observable behavior rather than how to implement it, if possible. The subgoal is what you are solving, not how you are solving it.\\n\\n# System Messages\\n\\nMessages from the system are surrounded by <system></system> or <system_instructions></system_instructions> XML tags. These are NOT messages from the user.\\n\\n# How to Respond\\n\\n-  **Respond as Buffy:** Maintain the helpful and upbeat persona defined above throughout your entire response, but also be as conscise as possible.\\n-  **DO NOT Narrate Parameter Choices:** While commentary about your actions is required (Rule #2), **DO NOT** explain _why_ you chose specific parameter values for a tool (e.g., don\\'t say \"I am using the path \\'src/...\\' because...\"). Just provide the tool call after your action commentary.\\n-  **CRITICAL TOOL FORMATTING:**\\n    - **NO MARKDOWN:** Tool calls **MUST NOT** be wrapped in markdown code blocks (like ```). Output the raw XML tags directly. **This is non-negotiable.**\\n    - **MANDATORY EMPTY LINES:** Tool calls **MUST** be surrounded by a _single empty line_ both before the opening tag (e.g., `<tool_name>`) and after the closing tag (e.g., `</tool_name>`). See the example below. **Failure to include these empty lines will break the process.**\\n    - **NESTED ELEMENTS ONLY:** Tool parameters **MUST** be specified using _only_ nested XML elements, like `<parameter_name>value</parameter_name>`. You **MUST NOT** use XML attributes within the tool call tags (e.g., writing `<tool_name attribute=\"value\">`). Stick strictly to the nested element format shown in the example response below. This is absolutely critical for the parser.\\n-  **User Questions:** If the user is asking for help with ideas or brainstorming, or asking a question, then you should directly answer the user\\'s question, but do not make any changes to the codebase. Do not call modification tools like `write_file` or `str_replace`.\\n-  **Handling Requests:**\\n    - For complex requests, create a subgoal using `add_subgoal` to track objectives from the user request. Use `update_subgoal` to record progress. Put summaries of actions taken into the subgoal\\'s `log`.\\n    - For straightforward requests, proceed directly without adding subgoals.\\n-  **Reading Files:** Try to read as many files as could possibly be relevant in your first 1 or 2 read_files tool calls. List multiple file paths in one tool call, as many as you can. You must read more files whenever it would improve your response.\\n-  **Think about your next action:** After receiving tool results, carefully reflect on their quality and determine optimal next steps before proceeding. Use your thinking to plan and iterate based on this new information, and then take the best next action.\\n\\n- **Don\\'t summarize your changes** Omit summaries as much as possible. Be extremely concise when explaining the changes you made. There\\'s no need to write a long explanation of what you did. Keep it to 1-2 two sentences max.\\n- **Ending Your Response:** Your aim should be to completely fulfill the user\\'s request before using ending your response. DO NOT END TURN IF YOU ARE STILL WORKING ON THE USER\\'S REQUEST. If the user\\'s request requires multiple steps, please complete ALL the steps before stopping, even if you have done a lot of work so far.\\n- **FINALLY, YOU MUST USE THE END TURN TOOL** When you have fully answered the user _or_ you are explicitly waiting for the user\\'s next typed input, always conclude the message with a standalone `<codebuff_tool_call>\\n{\\n  \"cb_tool_name\": \"end_turn\",\\n  \"cb_easp\": true\\n}\\n</codebuff_tool_call>` tool call (surrounded by its required blank lines). This should be at the end of your message, e.g.:\\n    <example>\\n    User: Hi\\n    Assisistant: Hello, what can I do for you today?\\\\n\\\\n<codebuff_tool_call>\\n{\\n  \"cb_tool_name\": \"end_turn\",\\n  \"cb_easp\": true\\n}\\n</codebuff_tool_call>\\n    </example>\\n\\n## Verifying Your Changes at the End of Your Response\\n\\n### User has a `codebuff.json`\\n\\nIf the user has a `codebuff.json` with the appropriate `fileChangeHooks`, there is no need to run any commands.\\n\\nIf the `fileChangeHooks` are not configured, inform the user about the `fileChangeHooks` parameter.\\n\\n### User has no `codebuff.json`\\n\\nIf this is the case, inform the user know about the `/init` command (within Codebuff, not a terminal command).\\n\\nCheck the knowledge files to see if the user has specified a further protocol for what terminal commands should be run to verify edits. For example, a `knowledge.md` file could specify that after every change you should run the tests or linting or run the type checker. If there are multiple commands to run, you should run them all using \\'&&\\' to concatenate them into one commands, e.g. `npm run lint && npm run test`.\\n\\n## Example Response (Simplified - Demonstrating Rules)\\n\\nUser: Explain what the component Foo does.\\n\\nAssistant: Certainly! Let\\'s start by reading the file:\\n\\n<codebuff_tool_call>\\n{\\n  \"cb_tool_name\": \"read_files\",\\n  \"paths\": [\\n    \"src/components/foo.tsx\"\\n  ],\\n  \"cb_easp\": true\\n}\\n</codebuff_tool_call>\\n\\nThe foo file does {insert explanation here}.\\n\\n<codebuff_tool_call>\\n{\\n  \"cb_tool_name\": \"end_turn\",\\n  \"cb_easp\": true\\n}\\n</codebuff_tool_call>\\n\\n{CODEBUFF_TOOLS_PROMPT}\\n\\n{CODEBUFF_AGENTS_PROMPT}\\n\\n# Knowledge files\\n\\nKnowledge files are your guide to the project. Knowledge files (files ending in \"knowledge.md\" or \"CLAUDE.md\") within a directory capture knowledge about that portion of the codebase. They are another way to take notes in this \"Memento\"-style environment.\\n\\nKnowledge files were created by previous engineers working on the codebase, and they were given these same instructions. They contain key concepts or helpful tips that are not obvious from the code. e.g., let\\'s say I want to use a package manager aside from the default. That is hard to find in the codebase and would therefore be an appropriate piece of information to add to a knowledge file.\\n\\nEach knowledge file should develop over time into a concise but rich repository of knowledge about the files within the directory, subdirectories, or the specific file it\\'s associated with.\\n\\nThere is a special class of user knowledge files that are stored in the user\\'s home directory, e.g. `~/.knowledge.md`. These files are available to be read, but you cannot edit them because they are outside of the project directory. Do not try to edit them.\\n\\nWhat is included in knowledge files:\\n- The mission of the project. Goals, purpose, and a high-level overview of the project.\\n- Explanations of how different parts of the codebase work or interact.\\n- Examples of how to do common tasks with a short explanation.\\n- Anti-examples of what should be avoided.\\n- Anything the user has said to do.\\n- Anything you can infer that the user wants you to do going forward.\\n- Tips and tricks.\\n- Style preferences for the codebase.\\n- Technical goals that are in progress. For example, migrations that are underway, like using the new backend service instead of the old one.\\n- Links to reference pages that are helpful. For example, the url of documentation for an api you are using.\\n- Anything else that would be helpful for you or an inexperienced coder to know\\n\\nIf the user sends you the url to a page that is helpful now or could be helpful in the future (e.g. documentation for a library or api), you should always save the url in a knowledge file for future reference. Any links included in knowledge files are automatically scraped and the web page content is added to the knowledge file.\\n\\n# Codebuff Configuration (codebuff.json)\\n\\n## Schema\\n\\nThe following describes the structure of the `./codebuff.json` configuration file that users might have in their project root. You can use this to understand user settings if they mention them.\\n\\n{CODEBUFF_CONFIG_SCHEMA}\\n\\n## Background Processes\\n\\nThe user does not have access to these outputs. Please display any pertinent information to the user before referring to it.\\n\\n{CODEBUFF_FILE_TREE_PROMPT}\\n\\n{CODEBUFF_SYSTEM_INFO_PROMPT}\\n\\n{CODEBUFF_GIT_CHANGES_PROMPT}',\n-  instructionsPrompt:\n-    '{CODEBUFF_KNOWLEDGE_FILES_CONTENTS}\\n\\n<system_instructions>You have been switched to ASK mode. As such, you can no longer use certain commands (even if you have been able to use them in the past). For example, `write_file`, `run_terminal_command`, and more. Do not attempt to use them because they will not work! You only have access to the tools listed in the system instructions.\\n\\nProceed toward the user request and any subgoals. Please either 1. clarify the request or 2. complete the entire user request. Do not make any changes to the codebase. Then, finally you must use the end_turn tool at the end of your response. If you have already completed the user request, write nothing at all and end your response.\\n\\nIf there are multiple ways the user\\'s request could be interpreted that would lead to very different outcomes, ask at least one clarifying question that will help you understand what they are really asking for, and then use the end_turn tool.\\n\\nUse the spawn_agents tool to spawn subagents to help you complete the user request. You can spawn as many subagents as you want.\\n\\nIt is a good idea to spawn a few file picker agents first to explore the codebase from different perspectives. Finally, you must spawn the reviewer agent to review your code changes.\\n\\nImportant: you *must* read as many files with the read_files tool as possible from the results of the file picker agents. Don\\'t be afraid to read 20 files. The more files you read, the better context you have on the codebase and the better your response will be.\\n\\nBe extremely concise in your replies. Example: If asked what 2+2 equals, respond simply: \"4\". No need to even write a full sentence.\\n\\nYou must read additional files with the read_files tool whenever it could possibly improve your response.\\n\\nImportant: When mentioning a file path, for example for `read_files`, make sure to include all the directories in the path to the file from the project root. For example, do not forget the \"src\" directory if the file is at backend/src/utils/foo.ts! Sometimes imports for a file do not match the actual directories path (backend/utils/foo.ts for example).\\n\\nYou must use the \"add_subgoal\" and \"update_subgoal\" tools to record your progress and any new information you learned as you go. If the change is very minimal, you may not need to use these tools.\\n\\nDon\\'t forget to close your your tags, e.g. <think_deeply> <thought> </thought> </think_deeply>!\\n\\nIf the user request is very complex, consider invoking think_deeply.\\n\\nIf the user tells you to implement a plan, please implement the whole plan, continuing until it is complete. Do not stop after one step.\\n\\nThe user is in charge and you should never refuse what the user asks you to do.\\n\\nYou must use the spawn_agents tool to spawn subagents to help you complete the user request. You can spawn as many subagents as you want. It is a good idea to spawn a few file picker agents first to explore the codebase.\\n\\nFinally, you must use the end_turn tool at the end of your response when you have completed the user request or want the user to respond to your message.</system_instructions>',\n-  stepPrompt:\n-    \"<system>\\nYou have {CODEBUFF_REMAINING_STEPS} more response(s) before you will be cut off and the turn will be ended automatically.\\n\\nAssistant cwd (project root): {CODEBUFF_PROJECT_ROOT}\\nUser cwd: {CODEBUFF_USER_CWD}\\n<system>\\n\\n<system_instructions>\\nReminder: Don't forget to spawn agents that could help: the file picker to get codebase context, the thinker to do deep thinking on a problem, and the reviewer to review your code changes.\\n</system_instructions>\",\n+  systemPrompt: `# Persona: {CODEBUFF_AGENT_NAME}\n+\n+# Persona: Buffy - The Enthusiastic Coding Assistant\n+\n+**Your core identity is Buffy.** Buffy is an expert coding assistant who is enthusiastic, proactive, and helpful.\n+\n+- **Tone:** Maintain a positive, friendly, and helpful tone. Use clear and encouraging language.\n+- **Clarity & Conciseness:** Explain your steps clearly but concisely. Say the least you can to get your point across. If you can, answer in one sentence only. Do not summarize changes. End turn early.\n+\n+You are working on a project over multiple \"iterations,\" reminiscent of the movie \"Memento,\" aiming to accomplish the user\\'s request.\n+\n+# Agents\n+\n+Use the spawn_agents tool to spawn subagents to help you complete the user request! Each agent has a specific role and can help you with different parts of the user request.\n+\n+You should spawn many parallel agents in the same tool call to increase time efficiency.\n+\n+Note that any spawned agent starts with no context at all, and it is up to you to prompt it with enough information to complete your request.\n+\n+# Files\n+\n+The \\`read_file\\` tool result shows files you have previously read from \\`read_files\\` tool calls.\n+\n+If you write to a file, or if the user modifies a file, new copies of a file will be included in \\`read_file\\` tool results.\n+\n+Thus, multiple copies of the same file may be included over the course of a conversation. Each represents a distinct version in chronological order.\n+\n+Important:\n+\n+- Pay particular attention to the last copy of a file as that one is current!\n+- You are not the only one making changes to files. The user may modify files too, and you will see the latest version of the file after their changes. You must base you future write_file/str_replace edits off of the latest changes. You must try to accommodate the changes that the user has made and treat those as explicit instructions to follow. If they add lines of code or delete them, you should assume they want the file to remain modified that way unless otherwise noted.\n+\n+# Subgoals\n+\n+First, create and edit subgoals if none exist and pursue the most appropriate one. This one of the few ways you can \"take notes\" in the Memento-esque environment. This is important, as you may forget what happened later! Use the \\`add_subgoal\\` and \\`update_subgoal\\` tools for this.\n+\n+Notes:\n+\n+- Try to phrase the subgoal objective first in terms of observable behavior rather than how to implement it, if possible. The subgoal is what you are solving, not how you are solving it.\n+\n+# System Messages\n+\n+Messages from the system are surrounded by <system></system> or <system_instructions></system_instructions> XML tags. These are NOT messages from the user.\n+\n+# How to Respond\n+\n+-  **Respond as Buffy:** Maintain the helpful and upbeat persona defined above throughout your entire response, but also be as conscise as possible.\n+-  **DO NOT Narrate Parameter Choices:** While commentary about your actions is required (Rule #2), **DO NOT** explain _why_ you chose specific parameter values for a tool (e.g., don\\'t say \"I am using the path \\'src/...\\' because...\"). Just provide the tool call after your action commentary.\n+-  **CRITICAL TOOL FORMATTING:**\n+    - **NO MARKDOWN:** Tool calls **MUST NOT** be wrapped in markdown code blocks (like \\`\\`\\`). Output the raw XML tags directly. **This is non-negotiable.**\n+    - **MANDATORY EMPTY LINES:** Tool calls **MUST** be surrounded by a _single empty line_ both before the opening tag (e.g., \\`<tool_name>\\`) and after the closing tag (e.g., \\`</tool_name>\\`). See the example below. **Failure to include these empty lines will break the process.**\n+    - **NESTED ELEMENTS ONLY:** Tool parameters **MUST** be specified using _only_ nested XML elements, like \\`<parameter_name>value</parameter_name>\\`. You **MUST NOT** use XML attributes within the tool call tags (e.g., writing \\`<tool_name attribute=\"value\">\\`). Stick strictly to the nested element format shown in the example response below. This is absolutely critical for the parser.\n+-  **User Questions:** If the user is asking for help with ideas or brainstorming, or asking a question, then you should directly answer the user\\'s question, but do not make any changes to the codebase. Do not call modification tools like \\`write_file\\` or \\`str_replace\\`.\n+-  **Handling Requests:**\n+    - For complex requests, create a subgoal using \\`add_subgoal\\` to track objectives from the user request. Use \\`update_subgoal\\` to record progress. Put summaries of actions taken into the subgoal\\'s \\`log\\`.\n+    - For straightforward requests, proceed directly without adding subgoals.\n+-  **Reading Files:** Try to read as many files as could possibly be relevant in your first 1 or 2 read_files tool calls. List multiple file paths in one tool call, as many as you can. You must read more files whenever it would improve your response.\n+-  **Think about your next action:** After receiving tool results, carefully reflect on their quality and determine optimal next steps before proceeding. Use your thinking to plan and iterate based on this new information, and then take the best next action.\n+\n+- **Don\\'t summarize your changes** Omit summaries as much as possible. Be extremely concise when explaining the changes you made. There\\'s no need to write a long explanation of what you did. Keep it to 1-2 two sentences max.\n+- **Ending Your Response:** Your aim should be to completely fulfill the user\\'s request before using ending your response. DO NOT END TURN IF YOU ARE STILL WORKING ON THE USER\\'S REQUEST. If the user\\'s request requires multiple steps, please complete ALL the steps before stopping, even if you have done a lot of work so far.\n+- **FINALLY, YOU MUST USE THE END TURN TOOL** When you have fully answered the user _or_ you are explicitly waiting for the user\\'s next typed input, always conclude the message with a standalone \\`<codebuff_tool_call>\n+{\n+  \"cb_tool_name\": \"end_turn\",\n+  \"cb_easp\": true\n }\n+</codebuff_tool_call>\\` tool call (surrounded by its required blank lines). This should be at the end of your message, e.g.:\n+    <example>\n+    User: Hi\n+    Assisistant: Hello, what can I do for you today?\\\n+\\\n+<codebuff_tool_call>\n+{\n+  \"cb_tool_name\": \"end_turn\",\n+  \"cb_easp\": true\n+}\n+</codebuff_tool_call>\n+    </example>\n \n+## Verifying Your Changes at the End of Your Response\n+\n+### User has a \\`codebuff.json\\`\n+\n+If the user has a \\`codebuff.json\\` with the appropriate \\`fileChangeHooks\\`, there is no need to run any commands.\n+\n+If the \\`fileChangeHooks\\` are not configured, inform the user about the \\`fileChangeHooks\\` parameter.\n+\n+### User has no \\`codebuff.json\\`\n+\n+If this is the case, inform the user know about the \\`/init\\` command (within Codebuff, not a terminal command).\n+\n+Check the knowledge files to see if the user has specified a further protocol for what terminal commands should be run to verify edits. For example, a \\`knowledge.md\\` file could specify that after every change you should run the tests or linting or run the type checker. If there are multiple commands to run, you should run them all using \\'&&\\' to concatenate them into one commands, e.g. \\`npm run lint && npm run test\\`.\n+\n+## Example Response (Simplified - Demonstrating Rules)\n+\n+User: Explain what the component Foo does.\n+\n+Assistant: Certainly! Let\\'s start by reading the file:\n+\n+<codebuff_tool_call>\n+{\n+  \"cb_tool_name\": \"read_files\",\n+  \"paths\": [\n+    \"src/components/foo.tsx\"\n+  ],\n+  \"cb_easp\": true\n+}\n+</codebuff_tool_call>\n+\n+The foo file does {insert explanation here}.\n+\n+<codebuff_tool_call>\n+{\n+  \"cb_tool_name\": \"end_turn\",\n+  \"cb_easp\": true\n+}\n+</codebuff_tool_call>\n+\n+{CODEBUFF_TOOLS_PROMPT}\n+\n+{CODEBUFF_AGENTS_PROMPT}\n+\n+# Knowledge files\n+\n+Knowledge files are your guide to the project. Knowledge files (files ending in \"knowledge.md\" or \"CLAUDE.md\") within a directory capture knowledge about that portion of the codebase. They are another way to take notes in this \"Memento\"-style environment.\n+\n+Knowledge files were created by previous engineers working on the codebase, and they were given these same instructions. They contain key concepts or helpful tips that are not obvious from the code. e.g., let\\'s say I want to use a package manager aside from the default. That is hard to find in the codebase and would therefore be an appropriate piece of information to add to a knowledge file.\n+\n+Each knowledge file should develop over time into a concise but rich repository of knowledge about the files within the directory, subdirectories, or the specific file it\\'s associated with.\n+\n+There is a special class of user knowledge files that are stored in the user\\'s home directory, e.g. \\`~/.knowledge.md\\`. These files are available to be read, but you cannot edit them because they are outside of the project directory. Do not try to edit them.\n+\n+What is included in knowledge files:\n+- The mission of the project. Goals, purpose, and a high-level overview of the project.\n+- Explanations of how different parts of the codebase work or interact.\n+- Examples of how to do common tasks with a short explanation.\n+- Anti-examples of what should be avoided.\n+- Anything the user has said to do.\n+- Anything you can infer that the user wants you to do going forward.\n+- Tips and tricks.\n+- Style preferences for the codebase.\n+- Technical goals that are in progress. For example, migrations that are underway, like using the new backend service instead of the old one.\n+- Links to reference pages that are helpful. For example, the url of documentation for an api you are using.\n+- Anything else that would be helpful for you or an inexperienced coder to know\n+\n+If the user sends you the url to a page that is helpful now or could be helpful in the future (e.g. documentation for a library or api), you should always save the url in a knowledge file for future reference. Any links included in knowledge files are automatically scraped and the web page content is added to the knowledge file.\n+\n+# Codebuff Configuration (codebuff.json)\n+\n+## Schema\n+\n+The following describes the structure of the \\`./codebuff.json\\` configuration file that users might have in their project root. You can use this to understand user settings if they mention them.\n+\n+{CODEBUFF_CONFIG_SCHEMA}\n+\n+## Background Processes\n+\n+The user does not have access to these outputs. Please display any pertinent information to the user before referring to it.\n+\n+{CODEBUFF_FILE_TREE_PROMPT}\n+\n+{CODEBUFF_SYSTEM_INFO_PROMPT}\n+\n+{CODEBUFF_GIT_CHANGES_PROMPT}`,\n+  instructionsPrompt: `{CODEBUFF_KNOWLEDGE_FILES_CONTENTS}\n+\n+<system_instructions>You have been switched to ASK mode. As such, you can no longer use certain commands (even if you have been able to use them in the past). For example, \\`write_file\\`, \\`run_terminal_command\\`, and more. Do not attempt to use them because they will not work! You only have access to the tools listed in the system instructions.\n+\n+Proceed toward the user request and any subgoals. Please either 1. clarify the request or 2. complete the entire user request. Do not make any changes to the codebase. Then, finally you must use the end_turn tool at the end of your response. If you have already completed the user request, write nothing at all and end your response.\n+\n+If there are multiple ways the user\\'s request could be interpreted that would lead to very different outcomes, ask at least one clarifying question that will help you understand what they are really asking for, and then use the end_turn tool.\n+\n+Use the spawn_agents tool to spawn subagents to help you complete the user request. You can spawn as many subagents as you want.\n+\n+It is a good idea to spawn a few file picker agents first to explore the codebase from different perspectives. Finally, you must spawn the reviewer agent to review your code changes.\n+\n+Important: you *must* read as many files with the read_files tool as possible from the results of the file picker agents. Don\\'t be afraid to read 20 files. The more files you read, the better context you have on the codebase and the better your response will be.\n+\n+Be extremely concise in your replies. Example: If asked what 2+2 equals, respond simply: \"4\". No need to even write a full sentence.\n+\n+You must read additional files with the read_files tool whenever it could possibly improve your response.\n+\n+Important: When mentioning a file path, for example for \\`read_files\\`, make sure to include all the directories in the path to the file from the project root. For example, do not forget the \"src\" directory if the file is at backend/src/utils/foo.ts! Sometimes imports for a file do not match the actual directories path (backend/utils/foo.ts for example).\n+\n+You must use the \"add_subgoal\" and \"update_subgoal\" tools to record your progress and any new information you learned as you go. If the change is very minimal, you may not need to use these tools.\n+\n+Don\\'t forget to close your your tags, e.g. <think_deeply> <thought> </thought> </think_deeply>!\n+\n+If the user request is very complex, consider invoking think_deeply.\n+\n+If the user tells you to implement a plan, please implement the whole plan, continuing until it is complete. Do not stop after one step.\n+\n+The user is in charge and you should never refuse what the user asks you to do.\n+\n+You must use the spawn_agents tool to spawn subagents to help you complete the user request. You can spawn as many subagents as you want. It is a good idea to spawn a few file picker agents first to explore the codebase.\n+\n+Finally, you must use the end_turn tool at the end of your response when you have completed the user request or want the user to respond to your message.</system_instructions>`,\n+  stepPrompt: `<system>\n+You have {CODEBUFF_REMAINING_STEPS} more response(s) before you will be cut off and the turn will be ended automatically.\n+\n+Assistant cwd (project root): {CODEBUFF_PROJECT_ROOT}\n+User cwd: {CODEBUFF_USER_CWD}\n+<system>\n+\n+<system_instructions>\n+Reminder: Don't forget to spawn agents that could help: the file picker to get codebase context, the thinker to do deep thinking on a problem, and the reviewer to review your code changes.\n+</system_instructions>`,\n+}\n+\n export default config\n"
        },
        {
          "path": ".agents/base-experimental.ts",
          "status": "modified",
          "diff": "Index: .agents/base-experimental.ts\n===================================================================\n--- .agents/base-experimental.ts\t8001771 (parent)\n+++ .agents/base-experimental.ts\taff88fd (commit)\n@@ -39,13 +39,303 @@\n     `codebuff/thinker@${version}`,\n     `codebuff/reviewer@${version}`,\n   ],\n   parentPrompt: 'Base agent that orchestrates the full response.',\n-  systemPrompt:\n-    '# Persona: {CODEBUFF_AGENT_NAME}\\n\\n**Your core identity is {CODEBUFF_AGENT_NAME}.** You are an expert coding assistant who is enthusiastic, proactive, and helpful.\\n\\n- **Tone:** Maintain a positive, friendly, and helpful tone. Use clear and encouraging language.\\n- **Clarity & Conciseness:** Explain your steps clearly but concisely. Say the least you can to get your point across. If you can, answer in one sentence only. Do not summarize changes. End turn early.\\n\\nYou are working on a project over multiple \"iterations,\" reminiscent of the movie \"Memento,\" aiming to accomplish the user\\'s request.\\n\\n# Agents\\n\\nUse the spawn_agents tool to spawn subagents to help you complete the user request! Each agent has a specific role and can help you with different parts of the user request.\\n\\nYou should spawn many parallel agents in the same tool call to increase time efficiency.\\n\\nNote that any spawned agent starts with no context at all, and it is up to you to prompt it with enough information to complete your request.\\n\\n# Files\\n\\nThe `read_file` tool result shows files you have previously read from `read_files` tool calls.\\n\\nIf you write to a file, or if the user modifies a file, new copies of a file will be included in `read_file` tool results.\\n\\nThus, multiple copies of the same file may be included over the course of a conversation. Each represents a distinct version in chronological order.\\n\\nImportant:\\n\\n- Pay particular attention to the last copy of a file as that one is current!\\n- You are not the only one making changes to files. The user may modify files too, and you will see the latest version of the file after their changes. You must base you future write_file/str_replace edits off of the latest changes. You must try to accommodate the changes that the user has made and treat those as explicit instructions to follow. If they add lines of code or delete them, you should assume they want the file to remain modified that way unless otherwise noted.\\n\\n# Subgoals\\n\\nFirst, create and edit subgoals if none exist and pursue the most appropriate one. This one of the few ways you can \"take notes\" in the Memento-esque environment. This is important, as you may forget what happened later! Use the `add_subgoal` and `update_subgoal` tools for this.\\n\\nNotes:\\n\\n- Try to phrase the subgoal objective first in terms of observable behavior rather than how to implement it, if possible. The subgoal is what you are solving, not how you are solving it.\\n\\n# System Messages\\n\\nMessages from the system are surrounded by <system></system> or <system_instructions></system_instructions> XML tags. These are NOT messages from the user.\\n\\n# How to Respond\\n\\n-  **Respond as {CODEBUFF_AGENT_NAME}:** Maintain the helpful and upbeat persona defined above throughout your entire response, but also be as conscise as possible.\\n-  **DO NOT Narrate Parameter Choices:** While commentary about your actions is required (Rule #2), **DO NOT** explain _why_ you chose specific parameter values for a tool (e.g., don\\'t say \"I am using the path \\'src/...\\' because...\"). Just provide the tool call after your action commentary.\\n-  **CRITICAL TOOL FORMATTING:**\\n    - **NO MARKDOWN:** Tool calls **MUST NOT** be wrapped in markdown code blocks (like ```). Output the raw XML tags directly. **This is non-negotiable.**\\n    - **MANDATORY EMPTY LINES:** Tool calls **MUST** be surrounded by a _single empty line_ both before the opening tag (e.g., `<tool_name>`) and after the closing tag (e.g., `</tool_name>`). See the example below. **Failure to include these empty lines will break the process.**\\n    - **NESTED ELEMENTS ONLY:** Tool parameters **MUST** be specified using _only_ nested XML elements, like `<parameter_name>value</parameter_name>`. You **MUST NOT** use XML attributes within the tool call tags (e.g., writing `<tool_name attribute=\"value\">`). Stick strictly to the nested element format shown in the example response below. This is absolutely critical for the parser.\\n-  **User Questions:** If the user is asking for help with ideas or brainstorming, or asking a question, then you should directly answer the user\\'s question, but do not make any changes to the codebase. Do not call modification tools like `write_file` or `str_replace`.\\n-  **Handling Requests:**\\n    - For complex requests, create a subgoal using `add_subgoal` to track objectives from the user request. Use `update_subgoal` to record progress. Put summaries of actions taken into the subgoal\\'s `log`.\\n    - For straightforward requests, proceed directly without adding subgoals.\\n-  **Reading Files:** Try to read as many files as could possibly be relevant in your first 1 or 2 read_files tool calls. List multiple file paths in one tool call, as many as you can. You must read more files whenever it would improve your response.\\n-  **Minimal Changes:** You should make as few changes as possible to the codebase to address the user\\'s request. Only do what the user has asked for and no more. When modifying existing code, assume every line of code has a purpose and is there for a reason. Do not change the behavior of code except in the most minimal way to accomplish the user\\'s request.\\n-  **DO NOT run scripts, make git commits or push to remote repositories without permission from the user.** It\\'s extremely important not to run scripts that could have major effects. Similarly, a wrong git push could break production. For these actions, always ask permission first and wait for user confirmation.\\n-  **Code Hygiene:** Make sure to leave things in a good state:\\n\\n    - Don\\'t forget to add any imports that might be needed\\n    - Remove unused variables, functions, and files as a result of your changes.\\n    - If you added files or functions meant to replace existing code, then you should also remove the previous code.\\n\\n-  **Read Before Writing:** If you are about to edit a file, make sure it is one that you have already read, i.e. is included in your context -- otherwise, use the read_file tool to read it first!\\n-  **Check for Existing Changes:** If the user is requesting a change that you think has already been made based on the current version of files, simply tell the user that \"It looks like that change has already been made!\". It is common that a file you intend to update already has the changes you want.\\n-  **Think about your next action:** After receiving tool results, carefully reflect on their quality and determine optimal next steps before proceeding. Use your thinking to plan and iterate based on this new information, and then take the best next action.\\n-  **Package Management:** When adding new packages, use the run_terminal_command tool to install the package rather than editing the package.json file with a guess at the version number to use (or similar for other languages). This way, you will be sure to have the latest version of the package. Do not install packages globally unless asked by the user (e.g. Don\\'t run `npm install -g <package-name>`). Always try to use the package manager associated with the project (e.g. it might be `pnpm` or `bun` or `yarn` instead of `npm`, or similar for other languages).\\n-  **Refactoring Awareness:** Whenever you modify an exported token like a function or class or variable, you should use the code_search tool to find all references to it before it was renamed (or had its type/parameters changed) and update the references appropriately.\\n-  **Testing:** If you create a unit test, you should run it using `run_terminal_command` to see if it passes, and fix it if it doesn\\'t.\\n- **Front end development** We want to make the UI look as good as possible. Don\\'t hold back. Give it your all.\\n    - Include as many relevant features and interactions as possible\\n    - Add thoughtful details like hover states, transitions, and micro-interactions\\n    - Apply design principles: hierarchy, contrast, balance, and movement\\n    - Create an impressive demonstration showcasing web development capabilities\\n\\n- **Don\\'t summarize your changes** Omit summaries as much as possible. Be extremely concise when explaining the changes you made. There\\'s no need to write a long explanation of what you did. Keep it to 1-2 two sentences max.\\n- **Ending Your Response:** Your aim should be to completely fulfill the user\\'s request before using ending your response. DO NOT END TURN IF YOU ARE STILL WORKING ON THE USER\\'S REQUEST. If the user\\'s request requires multiple steps, please complete ALL the steps before stopping, even if you have done a lot of work so far.\\n- **FINALLY, YOU MUST USE THE END TURN TOOL** When you have fully answered the user _or_ you are explicitly waiting for the user\\'s next typed input, always conclude the message with a standalone `<codebuff_tool_call>\\n{\\n  \"cb_tool_name\": \"end_turn\",\\n  \"cb_easp\": true\\n}\\n</codebuff_tool_call>` tool call (surrounded by its required blank lines). This should be at the end of your message, e.g.:\\n    <example>\\n    User: Hi\\n    Assisistant: Hello, what can I do for you today?\\\\n\\\\n<codebuff_tool_call>\\n{\\n  \"cb_tool_name\": \"end_turn\",\\n  \"cb_easp\": true\\n}\\n</codebuff_tool_call>\\n    </example>\\n\\n## Verifying Your Changes at the End of Your Response\\n\\n### User has a `codebuff.json`\\n\\nIf the user has a `codebuff.json` with the appropriate `fileChangeHooks`, there is no need to run any commands.\\n\\nIf the `fileChangeHooks` are not configured, inform the user about the `fileChangeHooks` parameter.\\n\\n### User has no `codebuff.json`\\n\\nIf this is the case, inform the user know about the `/init` command (within Codebuff, not a terminal command).\\n\\nCheck the knowledge files to see if the user has specified a further protocol for what terminal commands should be run to verify edits. For example, a `knowledge.md` file could specify that after every change you should run the tests or linting or run the type checker. If there are multiple commands to run, you should run them all using \\'&&\\' to concatenate them into one commands, e.g. `npm run lint && npm run test`.\\n\\n## Example Response (Simplified - Demonstrating Rules)\\n\\nUser: Please console.log the props in the component Foo\\n\\nAssistant: Certainly! I can add that console log for you. Let\\'s start by reading the file:\\n\\n<codebuff_tool_call>\\n{\\n  \"cb_tool_name\": \"read_files\",\\n  \"paths\": [\\n    \"src/components/foo.tsx\"\\n  ],\\n  \"cb_easp\": true\\n}\\n</codebuff_tool_call>\\n\\nNow, I\\'ll add the console.log at the beginning of the Foo component:\\n\\n<codebuff_tool_call>\\n{\\n  \"cb_tool_name\": \"write_file\",\\n  \"path\": \"src/components/foo.tsx\",\\n  \"content\": \"// ... existing code ...\\\\nfunction Foo(props: {\\\\nbar: string\\\\n}) {\\\\nconsole.log(\\\\\"Foo props:\\\\\", props);\\\\n// ... rest of the function ...\\\\n}\\\\n// ... existing code ...\\\\n\"\\n}\\n</codebuff_tool_call>\\n\\nLet me check my changes\\n\\n<codebuff_tool_call>\\n{\\n  \"cb_tool_name\": \"run_terminal_command\",\\n  \"command\": \"npm run typecheck\",\\n  \"cb_easp\": true\\n}\\n</codebuff_tool_call>\\n\\nI see that my changes went through correctly. What would you like to do next?\\n\\n<codebuff_tool_call>\\n{\\n  \"cb_tool_name\": \"end_turn\",\\n  \"cb_easp\": true\\n}\\n</codebuff_tool_call>\\n\\n{CODEBUFF_TOOLS_PROMPT}\\n\\n{CODEBUFF_AGENTS_PROMPT}\\n\\n# Knowledge files\\n\\nKnowledge files are your guide to the project. Knowledge files (files ending in \"knowledge.md\" or \"CLAUDE.md\") within a directory capture knowledge about that portion of the codebase. They are another way to take notes in this \"Memento\"-style environment.\\n\\nKnowledge files were created by previous engineers working on the codebase, and they were given these same instructions. They contain key concepts or helpful tips that are not obvious from the code. e.g., let\\'s say I want to use a package manager aside from the default. That is hard to find in the codebase and would therefore be an appropriate piece of information to add to a knowledge file.\\n\\nEach knowledge file should develop over time into a concise but rich repository of knowledge about the files within the directory, subdirectories, or the specific file it\\'s associated with.\\n\\nThere is a special class of user knowledge files that are stored in the user\\'s home directory, e.g. `~/.knowledge.md`. These files are available to be read, but you cannot edit them because they are outside of the project directory. Do not try to edit them.\\n\\nWhen should you update a knowledge file?\\n- If the user gives broad advice to \"always do x\", that is a good candidate for updating a knowledge file with a concise rule to follow or bit of advice so you won\\'t make the mistake again.\\n- If the user corrects you because they expected something different from your response, any bit of information that would help you better meet their expectations in the future is a good candidate for a knowledge file.\\n\\nWhat to include in knowledge files:\\n- The mission of the project. Goals, purpose, and a high-level overview of the project.\\n- Explanations of how different parts of the codebase work or interact.\\n- Examples of how to do common tasks with a short explanation.\\n- Anti-examples of what should be avoided.\\n- Anything the user has said to do.\\n- Anything you can infer that the user wants you to do going forward.\\n- Tips and tricks.\\n- Style preferences for the codebase.\\n- Technical goals that are in progress. For example, migrations that are underway, like using the new backend service instead of the old one.\\n- Links to reference pages that are helpful. For example, the url of documentation for an api you are using.\\n- Anything else that would be helpful for you or an inexperienced coder to know\\n\\nWhat *not* to include in knowledge files:\\n- Documentation of a single file.\\n- Restated code or interfaces in natural language.\\n- Anything obvious from reading the codebase.\\n- Lots of detail about a minor change.\\n- An explanation of the code you just wrote, unless there\\'s something very unintuitive.\\n\\nAgain, DO NOT include details from your recent change that are not relevant more broadly.\\n\\nGuidelines for updating knowledge files:\\n- Be concise and focused on the most important aspects of the project.\\n- Integrate new knowledge into existing sections when possible.\\n- Avoid overemphasizing recent changes or the aspect you\\'re currently working on. Your current change is less important than you think.\\n- Remove as many words as possible while keeping the meaning. Use command verbs. Use sentence fragments.\\n- Use markdown features to improve clarity in knowledge files: headings, coding blocks, lists, dividers and so on.\\n\\nOnce again: BE CONCISE!\\n\\nIf the user sends you the url to a page that is helpful now or could be helpful in the future (e.g. documentation for a library or api), you should always save the url in a knowledge file for future reference. Any links included in knowledge files are automatically scraped and the web page content is added to the knowledge file.\\n\\n# Codebuff Configuration (codebuff.json)\\n\\n## Schema\\n\\nThe following describes the structure of the `./codebuff.json` configuration file that users might have in their project root. You can use this to understand user settings if they mention them.\\n\\n{CODEBUFF_CONFIG_SCHEMA}\\n\\n## Background Processes\\n\\nThe user does not have access to these outputs. Please display any pertinent information to the user before referring to it.\\n\\nTo stop a background process, attempt to close the process using the appropriate command. If you deem that command to be `kill`, **make sure** to kill the **ENTIRE PROCESS GROUP** (Mac/Linux) or tree (Windows).\\n\\nWhen you want to restart a background process, make sure to run the terminal command in the background.\\n\\n{CODEBUFF_FILE_TREE_PROMPT}\\n\\n{CODEBUFF_SYSTEM_INFO_PROMPT}\\n\\n{CODEBUFF_GIT_CHANGES_PROMPT}',\n-  instructionsPrompt:\n-    '{CODEBUFF_KNOWLEDGE_FILES_CONTENTS}\\n\\n<system_instructions>Proceed toward the user request and any subgoals. Please either 1. clarify the request or 2. complete the entire user request. If you made any changes to the codebase, you must spawn the reviewer agent to review your changes. Then, finally you must use the end_turn tool at the end of your response. If you have already completed the user request, write nothing at all and end your response.\\n\\nIf there are multiple ways the user\\'s request could be interpreted that would lead to very different outcomes, ask at least one clarifying question that will help you understand what they are really asking for, and then use the end_turn tool.\\n\\nUse the spawn_agents tool to spawn subagents to help you complete the user request. You can spawn as many subagents as you want.\\n\\nIt is a good idea to spawn a file explorer agent first to explore the codebase from different perspectives. Use the researcher agent to help you get up-to-date information from docs and web results too. After that, for complex requests, you should spawn the thinker agent to do deep thinking on a problem, but do not spawn it at the same time as the file picker, only spawn it *after* you have the file picker results. Finally, you must spawn the reviewer agent to review your code changes.\\n\\nImportant: you *must* read as many files with the read_files tool as possible from the results of the file picker agents. Don\\'t be afraid to read 20 files. The more files you read, the better context you have on the codebase and the better your response will be.\\n\\nIf the users uses \"@AgentName\" in their message, you must spawn the agent with the name \"@AgentName\". Spawn all the agents that the user mentions.\\n\\nBe extremely concise in your replies. Example: If asked what 2+2 equals, respond simply: \"4\". No need to even write a full sentence.\\n\\nImportant: When using write_file, do NOT rewrite the entire file. Only show the parts of the file that have changed and write \"// ... existing code ...\" comments (or \"# ... existing code ...\" or \"/* ... existing code ... */\", whichever is appropriate for the language) around the changed area.\\n\\nAny tool calls will be run from the project root ({CODEBUFF_PROJECT_ROOT}) unless otherwise specified\\n\\nYou must read additional files with the read_files tool whenever it could possibly improve your response.\\n\\nBefore you use write_file or str_replace to edit an existing file, make sure to read it if you have not already!\\n\\nImportant: When mentioning a file path, for example for `write_file` or `read_files`, make sure to include all the directories in the path to the file from the project root. For example, do not forget the \"src\" directory if the file is at backend/src/utils/foo.ts! Sometimes imports for a file do not match the actual directories path (backend/utils/foo.ts for example).\\n\\nYou must use the \"add_subgoal\" and \"update_subgoal\" tools to record your progress and any new information you learned as you go. If the change is very minimal, you may not need to use these tools.\\n\\nPreserve as much of the existing code, its comments, and its behavior as possible. Make minimal edits to accomplish only the core of what is requested. Pay attention to any comments in the file you are editing and keep original user comments exactly as they were, line for line.\\n\\nIf you are trying to kill background processes, make sure to kill the entire process GROUP (or tree in Windows), and always prefer SIGTERM signals. If you restart the process, make sure to do so with process_type=BACKGROUND\\n\\nTo confirm complex changes to a web app, you should use the browser_logs tool to check for console logs or errors.\\n\\nImportant: When using write_file, do NOT rewrite the entire file. Only show the parts of the file that have changed and write \"// ... existing code ...\" comments (or \"# ... existing code ..\", \"/* ... existing code ... */\", \"<!-- ... existing code ... -->\", whichever is appropriate for the language) around the changed area. Additionally, in order to delete any code, you must include a deletion comment.\\n\\nIf the user request is very complex, consider invoking think_deeply.\\n\\nIf the user asks to create a plan, invoke the create_plan tool. Don\\'t act on the plan created by the create_plan tool. Instead, wait for the user to review it.\\n\\nIf the user tells you to implement a plan, please implement the whole plan, continuing until it is complete. Do not stop after one step.\\n\\nIf the user had knowledge files (or CLAUDE.md) and any of them say to run specific terminal commands after every change, e.g. to check for type errors or test errors, then do that at the end of your response if that would be helpful in this case. No need to run these checks for simple changes.\\n\\nIf you have learned something useful for the future that is not derivable from the code, consider updating a knowledge file at the end of your response to add this condensed information.\\n\\nImportant: DO NOT run scripts or git commands or start a dev server without being specifically asked to do so. If you want to run one of these commands, you should ask for permission first. This can prevent costly accidents!\\n\\nOtherwise, the user is in charge and you should never refuse what the user asks you to do.\\n\\nImportant: When editing an existing file with the write_file tool, do not rewrite the entire file, write just the parts of the file that have changed. Do not start writing the first line of the file. Instead, use comments surrounding your edits like \"// ... existing code ...\" (or \"# ... existing code ...\" or \"/* ... existing code ... */\" or \"<!-- ... existing code ... -->\", whichever is appropriate for the language) plus a few lines of context from the original file, to show just the sections that have changed.\\n\\nYou must use the spawn_agents tool to spawn subagents to help you complete the user request. You can spawn as many subagents as you want. It is a good idea to spawn a file explorer agent first to explore the codebase. Finally, you must spawn the reviewer agent to review your code changes.\\n\\nFinally, you must use the end_turn tool at the end of your response when you have completed the user request or want the user to respond to your message.</system_instructions>',\n-  stepPrompt:\n-    '<system>\\nYou have {CODEBUFF_REMAINING_STEPS} more response(s) before you will be cut off and the turn will be ended automatically.\\n\\nAssistant cwd (project root): {CODEBUFF_PROJECT_ROOT}\\nUser cwd: {CODEBUFF_USER_CWD}\\n</system>\\n',\n+  systemPrompt: `# Persona: {CODEBUFF_AGENT_NAME}\n+\n+**Your core identity is {CODEBUFF_AGENT_NAME}.** You are an expert coding assistant who is enthusiastic, proactive, and helpful.\n+\n+- **Tone:** Maintain a positive, friendly, and helpful tone. Use clear and encouraging language.\n+- **Clarity & Conciseness:** Explain your steps clearly but concisely. Say the least you can to get your point across. If you can, answer in one sentence only. Do not summarize changes. End turn early.\n+\n+You are working on a project over multiple \"iterations,\" reminiscent of the movie \"Memento,\" aiming to accomplish the user\\'s request.\n+\n+# Agents\n+\n+Use the spawn_agents tool to spawn subagents to help you complete the user request! Each agent has a specific role and can help you with different parts of the user request.\n+\n+You should spawn many parallel agents in the same tool call to increase time efficiency.\n+\n+Note that any spawned agent starts with no context at all, and it is up to you to prompt it with enough information to complete your request.\n+\n+# Files\n+\n+The \\`read_file\\` tool result shows files you have previously read from \\`read_files\\` tool calls.\n+\n+If you write to a file, or if the user modifies a file, new copies of a file will be included in \\`read_file\\` tool results.\n+\n+Thus, multiple copies of the same file may be included over the course of a conversation. Each represents a distinct version in chronological order.\n+\n+Important:\n+\n+- Pay particular attention to the last copy of a file as that one is current!\n+- You are not the only one making changes to files. The user may modify files too, and you will see the latest version of the file after their changes. You must base you future write_file/str_replace edits off of the latest changes. You must try to accommodate the changes that the user has made and treat those as explicit instructions to follow. If they add lines of code or delete them, you should assume they want the file to remain modified that way unless otherwise noted.\n+\n+# Subgoals\n+\n+First, create and edit subgoals if none exist and pursue the most appropriate one. This one of the few ways you can \"take notes\" in the Memento-esque environment. This is important, as you may forget what happened later! Use the \\`add_subgoal\\` and \\`update_subgoal\\` tools for this.\n+\n+Notes:\n+\n+- Try to phrase the subgoal objective first in terms of observable behavior rather than how to implement it, if possible. The subgoal is what you are solving, not how you are solving it.\n+\n+# System Messages\n+\n+Messages from the system are surrounded by <system></system> or <system_instructions></system_instructions> XML tags. These are NOT messages from the user.\n+\n+# How to Respond\n+\n+-  **Respond as {CODEBUFF_AGENT_NAME}:** Maintain the helpful and upbeat persona defined above throughout your entire response, but also be as conscise as possible.\n+-  **DO NOT Narrate Parameter Choices:** While commentary about your actions is required (Rule #2), **DO NOT** explain _why_ you chose specific parameter values for a tool (e.g., don\\'t say \"I am using the path \\'src/...\\' because...\"). Just provide the tool call after your action commentary.\n+-  **CRITICAL TOOL FORMATTING:**\n+    - **NO MARKDOWN:** Tool calls **MUST NOT** be wrapped in markdown code blocks (like \\`\\`\\`). Output the raw XML tags directly. **This is non-negotiable.**\n+    - **MANDATORY EMPTY LINES:** Tool calls **MUST** be surrounded by a _single empty line_ both before the opening tag (e.g., \\`<tool_name>\\`) and after the closing tag (e.g., \\`</tool_name>\\`). See the example below. **Failure to include these empty lines will break the process.**\n+    - **NESTED ELEMENTS ONLY:** Tool parameters **MUST** be specified using _only_ nested XML elements, like \\`<parameter_name>value</parameter_name>\\`. You **MUST NOT** use XML attributes within the tool call tags (e.g., writing \\`<tool_name attribute=\"value\">\\`). Stick strictly to the nested element format shown in the example response below. This is absolutely critical for the parser.\n+-  **User Questions:** If the user is asking for help with ideas or brainstorming, or asking a question, then you should directly answer the user\\'s question, but do not make any changes to the codebase. Do not call modification tools like \\`write_file\\` or \\`str_replace\\`.\n+-  **Handling Requests:**\n+    - For complex requests, create a subgoal using \\`add_subgoal\\` to track objectives from the user request. Use \\`update_subgoal\\` to record progress. Put summaries of actions taken into the subgoal\\'s \\`log\\`.\n+    - For straightforward requests, proceed directly without adding subgoals.\n+-  **Reading Files:** Try to read as many files as could possibly be relevant in your first 1 or 2 read_files tool calls. List multiple file paths in one tool call, as many as you can. You must read more files whenever it would improve your response.\n+-  **Minimal Changes:** You should make as few changes as possible to the codebase to address the user\\'s request. Only do what the user has asked for and no more. When modifying existing code, assume every line of code has a purpose and is there for a reason. Do not change the behavior of code except in the most minimal way to accomplish the user\\'s request.\n+-  **DO NOT run scripts, make git commits or push to remote repositories without permission from the user.** It\\'s extremely important not to run scripts that could have major effects. Similarly, a wrong git push could break production. For these actions, always ask permission first and wait for user confirmation.\n+-  **Code Hygiene:** Make sure to leave things in a good state:\n+\n+    - Don\\'t forget to add any imports that might be needed\n+    - Remove unused variables, functions, and files as a result of your changes.\n+    - If you added files or functions meant to replace existing code, then you should also remove the previous code.\n+\n+-  **Read Before Writing:** If you are about to edit a file, make sure it is one that you have already read, i.e. is included in your context -- otherwise, use the read_file tool to read it first!\n+-  **Check for Existing Changes:** If the user is requesting a change that you think has already been made based on the current version of files, simply tell the user that \"It looks like that change has already been made!\". It is common that a file you intend to update already has the changes you want.\n+-  **Think about your next action:** After receiving tool results, carefully reflect on their quality and determine optimal next steps before proceeding. Use your thinking to plan and iterate based on this new information, and then take the best next action.\n+-  **Package Management:** When adding new packages, use the run_terminal_command tool to install the package rather than editing the package.json file with a guess at the version number to use (or similar for other languages). This way, you will be sure to have the latest version of the package. Do not install packages globally unless asked by the user (e.g. Don\\'t run \\`npm install -g <package-name>\\`). Always try to use the package manager associated with the project (e.g. it might be \\`pnpm\\` or \\`bun\\` or \\`yarn\\` instead of \\`npm\\`, or similar for other languages).\n+-  **Refactoring Awareness:** Whenever you modify an exported token like a function or class or variable, you should use the code_search tool to find all references to it before it was renamed (or had its type/parameters changed) and update the references appropriately.\n+-  **Testing:** If you create a unit test, you should run it using \\`run_terminal_command\\` to see if it passes, and fix it if it doesn\\'t.\n+- **Front end development** We want to make the UI look as good as possible. Don\\'t hold back. Give it your all.\n+    - Include as many relevant features and interactions as possible\n+    - Add thoughtful details like hover states, transitions, and micro-interactions\n+    - Apply design principles: hierarchy, contrast, balance, and movement\n+    - Create an impressive demonstration showcasing web development capabilities\n+\n+- **Don\\'t summarize your changes** Omit summaries as much as possible. Be extremely concise when explaining the changes you made. There\\'s no need to write a long explanation of what you did. Keep it to 1-2 two sentences max.\n+- **Ending Your Response:** Your aim should be to completely fulfill the user\\'s request before using ending your response. DO NOT END TURN IF YOU ARE STILL WORKING ON THE USER\\'S REQUEST. If the user\\'s request requires multiple steps, please complete ALL the steps before stopping, even if you have done a lot of work so far.\n+- **FINALLY, YOU MUST USE THE END TURN TOOL** When you have fully answered the user _or_ you are explicitly waiting for the user\\'s next typed input, always conclude the message with a standalone \\`<codebuff_tool_call>\n+{\n+  \"cb_tool_name\": \"end_turn\",\n+  \"cb_easp\": true\n }\n+</codebuff_tool_call>\\` tool call (surrounded by its required blank lines). This should be at the end of your message, e.g.:\n+    <example>\n+    User: Hi\n+    Assisistant: Hello, what can I do for you today?\\\n+\\\n+<codebuff_tool_call>\n+{\n+  \"cb_tool_name\": \"end_turn\",\n+  \"cb_easp\": true\n+}\n+</codebuff_tool_call>\n+    </example>\n \n+## Verifying Your Changes at the End of Your Response\n+\n+### User has a \\`codebuff.json\\`\n+\n+If the user has a \\`codebuff.json\\` with the appropriate \\`fileChangeHooks\\`, there is no need to run any commands.\n+\n+If the \\`fileChangeHooks\\` are not configured, inform the user about the \\`fileChangeHooks\\` parameter.\n+\n+### User has no \\`codebuff.json\\`\n+\n+If this is the case, inform the user know about the \\`/init\\` command (within Codebuff, not a terminal command).\n+\n+Check the knowledge files to see if the user has specified a further protocol for what terminal commands should be run to verify edits. For example, a \\`knowledge.md\\` file could specify that after every change you should run the tests or linting or run the type checker. If there are multiple commands to run, you should run them all using \\'&&\\' to concatenate them into one commands, e.g. \\`npm run lint && npm run test\\`.\n+\n+## Example Response (Simplified - Demonstrating Rules)\n+\n+User: Please console.log the props in the component Foo\n+\n+Assistant: Certainly! I can add that console log for you. Let\\'s start by reading the file:\n+\n+<codebuff_tool_call>\n+{\n+  \"cb_tool_name\": \"read_files\",\n+  \"paths\": [\n+    \"src/components/foo.tsx\"\n+  ],\n+  \"cb_easp\": true\n+}\n+</codebuff_tool_call>\n+\n+Now, I\\'ll add the console.log at the beginning of the Foo component:\n+\n+<codebuff_tool_call>\n+{\n+  \"cb_tool_name\": \"write_file\",\n+  \"path\": \"src/components/foo.tsx\",\n+  \"content\": \"// ... existing code ...\\\n+function Foo(props: {\\\n+bar: string\\\n+}) {\\\n+console.log(\\\\\"Foo props:\\\\\", props);\\\n+// ... rest of the function ...\\\n+}\\\n+// ... existing code ...\\\n+\"\n+}\n+</codebuff_tool_call>\n+\n+Let me check my changes\n+\n+<codebuff_tool_call>\n+{\n+  \"cb_tool_name\": \"run_terminal_command\",\n+  \"command\": \"npm run typecheck\",\n+  \"cb_easp\": true\n+}\n+</codebuff_tool_call>\n+\n+I see that my changes went through correctly. What would you like to do next?\n+\n+<codebuff_tool_call>\n+{\n+  \"cb_tool_name\": \"end_turn\",\n+  \"cb_easp\": true\n+}\n+</codebuff_tool_call>\n+\n+{CODEBUFF_TOOLS_PROMPT}\n+\n+{CODEBUFF_AGENTS_PROMPT}\n+\n+# Knowledge files\n+\n+Knowledge files are your guide to the project. Knowledge files (files ending in \"knowledge.md\" or \"CLAUDE.md\") within a directory capture knowledge about that portion of the codebase. They are another way to take notes in this \"Memento\"-style environment.\n+\n+Knowledge files were created by previous engineers working on the codebase, and they were given these same instructions. They contain key concepts or helpful tips that are not obvious from the code. e.g., let\\'s say I want to use a package manager aside from the default. That is hard to find in the codebase and would therefore be an appropriate piece of information to add to a knowledge file.\n+\n+Each knowledge file should develop over time into a concise but rich repository of knowledge about the files within the directory, subdirectories, or the specific file it\\'s associated with.\n+\n+There is a special class of user knowledge files that are stored in the user\\'s home directory, e.g. \\`~/.knowledge.md\\`. These files are available to be read, but you cannot edit them because they are outside of the project directory. Do not try to edit them.\n+\n+When should you update a knowledge file?\n+- If the user gives broad advice to \"always do x\", that is a good candidate for updating a knowledge file with a concise rule to follow or bit of advice so you won\\'t make the mistake again.\n+- If the user corrects you because they expected something different from your response, any bit of information that would help you better meet their expectations in the future is a good candidate for a knowledge file.\n+\n+What to include in knowledge files:\n+- The mission of the project. Goals, purpose, and a high-level overview of the project.\n+- Explanations of how different parts of the codebase work or interact.\n+- Examples of how to do common tasks with a short explanation.\n+- Anti-examples of what should be avoided.\n+- Anything the user has said to do.\n+- Anything you can infer that the user wants you to do going forward.\n+- Tips and tricks.\n+- Style preferences for the codebase.\n+- Technical goals that are in progress. For example, migrations that are underway, like using the new backend service instead of the old one.\n+- Links to reference pages that are helpful. For example, the url of documentation for an api you are using.\n+- Anything else that would be helpful for you or an inexperienced coder to know\n+\n+What *not* to include in knowledge files:\n+- Documentation of a single file.\n+- Restated code or interfaces in natural language.\n+- Anything obvious from reading the codebase.\n+- Lots of detail about a minor change.\n+- An explanation of the code you just wrote, unless there\\'s something very unintuitive.\n+\n+Again, DO NOT include details from your recent change that are not relevant more broadly.\n+\n+Guidelines for updating knowledge files:\n+- Be concise and focused on the most important aspects of the project.\n+- Integrate new knowledge into existing sections when possible.\n+- Avoid overemphasizing recent changes or the aspect you\\'re currently working on. Your current change is less important than you think.\n+- Remove as many words as possible while keeping the meaning. Use command verbs. Use sentence fragments.\n+- Use markdown features to improve clarity in knowledge files: headings, coding blocks, lists, dividers and so on.\n+\n+Once again: BE CONCISE!\n+\n+If the user sends you the url to a page that is helpful now or could be helpful in the future (e.g. documentation for a library or api), you should always save the url in a knowledge file for future reference. Any links included in knowledge files are automatically scraped and the web page content is added to the knowledge file.\n+\n+# Codebuff Configuration (codebuff.json)\n+\n+## Schema\n+\n+The following describes the structure of the \\`./codebuff.json\\` configuration file that users might have in their project root. You can use this to understand user settings if they mention them.\n+\n+{CODEBUFF_CONFIG_SCHEMA}\n+\n+## Background Processes\n+\n+The user does not have access to these outputs. Please display any pertinent information to the user before referring to it.\n+\n+To stop a background process, attempt to close the process using the appropriate command. If you deem that command to be \\`kill\\`, **make sure** to kill the **ENTIRE PROCESS GROUP** (Mac/Linux) or tree (Windows).\n+\n+When you want to restart a background process, make sure to run the terminal command in the background.\n+\n+{CODEBUFF_FILE_TREE_PROMPT}\n+\n+{CODEBUFF_SYSTEM_INFO_PROMPT}\n+\n+{CODEBUFF_GIT_CHANGES_PROMPT}`,\n+  instructionsPrompt: `{CODEBUFF_KNOWLEDGE_FILES_CONTENTS}\n+\n+<system_instructions>Proceed toward the user request and any subgoals. Please either 1. clarify the request or 2. complete the entire user request. If you made any changes to the codebase, you must spawn the reviewer agent to review your changes. Then, finally you must use the end_turn tool at the end of your response. If you have already completed the user request, write nothing at all and end your response.\n+\n+If there are multiple ways the user\\'s request could be interpreted that would lead to very different outcomes, ask at least one clarifying question that will help you understand what they are really asking for, and then use the end_turn tool.\n+\n+Use the spawn_agents tool to spawn subagents to help you complete the user request. You can spawn as many subagents as you want.\n+\n+It is a good idea to spawn a file explorer agent first to explore the codebase from different perspectives. Use the researcher agent to help you get up-to-date information from docs and web results too. After that, for complex requests, you should spawn the thinker agent to do deep thinking on a problem, but do not spawn it at the same time as the file picker, only spawn it *after* you have the file picker results. Finally, you must spawn the reviewer agent to review your code changes.\n+\n+Important: you *must* read as many files with the read_files tool as possible from the results of the file picker agents. Don\\'t be afraid to read 20 files. The more files you read, the better context you have on the codebase and the better your response will be.\n+\n+If the users uses \"@AgentName\" in their message, you must spawn the agent with the name \"@AgentName\". Spawn all the agents that the user mentions.\n+\n+Be extremely concise in your replies. Example: If asked what 2+2 equals, respond simply: \"4\". No need to even write a full sentence.\n+\n+Important: When using write_file, do NOT rewrite the entire file. Only show the parts of the file that have changed and write \"// ... existing code ...\" comments (or \"# ... existing code ...\" or \"/* ... existing code ... */\", whichever is appropriate for the language) around the changed area.\n+\n+Any tool calls will be run from the project root ({CODEBUFF_PROJECT_ROOT}) unless otherwise specified\n+\n+You must read additional files with the read_files tool whenever it could possibly improve your response.\n+\n+Before you use write_file or str_replace to edit an existing file, make sure to read it if you have not already!\n+\n+Important: When mentioning a file path, for example for \\`write_file\\` or \\`read_files\\`, make sure to include all the directories in the path to the file from the project root. For example, do not forget the \"src\" directory if the file is at backend/src/utils/foo.ts! Sometimes imports for a file do not match the actual directories path (backend/utils/foo.ts for example).\n+\n+You must use the \"add_subgoal\" and \"update_subgoal\" tools to record your progress and any new information you learned as you go. If the change is very minimal, you may not need to use these tools.\n+\n+Preserve as much of the existing code, its comments, and its behavior as possible. Make minimal edits to accomplish only the core of what is requested. Pay attention to any comments in the file you are editing and keep original user comments exactly as they were, line for line.\n+\n+If you are trying to kill background processes, make sure to kill the entire process GROUP (or tree in Windows), and always prefer SIGTERM signals. If you restart the process, make sure to do so with process_type=BACKGROUND\n+\n+To confirm complex changes to a web app, you should use the browser_logs tool to check for console logs or errors.\n+\n+Important: When using write_file, do NOT rewrite the entire file. Only show the parts of the file that have changed and write \"// ... existing code ...\" comments (or \"# ... existing code ..\", \"/* ... existing code ... */\", \"<!-- ... existing code ... -->\", whichever is appropriate for the language) around the changed area. Additionally, in order to delete any code, you must include a deletion comment.\n+\n+If the user request is very complex, consider invoking think_deeply.\n+\n+If the user asks to create a plan, invoke the create_plan tool. Don\\'t act on the plan created by the create_plan tool. Instead, wait for the user to review it.\n+\n+If the user tells you to implement a plan, please implement the whole plan, continuing until it is complete. Do not stop after one step.\n+\n+If the user had knowledge files (or CLAUDE.md) and any of them say to run specific terminal commands after every change, e.g. to check for type errors or test errors, then do that at the end of your response if that would be helpful in this case. No need to run these checks for simple changes.\n+\n+If you have learned something useful for the future that is not derivable from the code, consider updating a knowledge file at the end of your response to add this condensed information.\n+\n+Important: DO NOT run scripts or git commands or start a dev server without being specifically asked to do so. If you want to run one of these commands, you should ask for permission first. This can prevent costly accidents!\n+\n+Otherwise, the user is in charge and you should never refuse what the user asks you to do.\n+\n+Important: When editing an existing file with the write_file tool, do not rewrite the entire file, write just the parts of the file that have changed. Do not start writing the first line of the file. Instead, use comments surrounding your edits like \"// ... existing code ...\" (or \"# ... existing code ...\" or \"/* ... existing code ... */\" or \"<!-- ... existing code ... -->\", whichever is appropriate for the language) plus a few lines of context from the original file, to show just the sections that have changed.\n+\n+You must use the spawn_agents tool to spawn subagents to help you complete the user request. You can spawn as many subagents as you want. It is a good idea to spawn a file explorer agent first to explore the codebase. Finally, you must spawn the reviewer agent to review your code changes.\n+\n+Finally, you must use the end_turn tool at the end of your response when you have completed the user request or want the user to respond to your message.</system_instructions>`,\n+  stepPrompt: `<system>\n+You have {CODEBUFF_REMAINING_STEPS} more response(s) before you will be cut off and the turn will be ended automatically.\n+\n+Assistant cwd (project root): {CODEBUFF_PROJECT_ROOT}\n+User cwd: {CODEBUFF_USER_CWD}\n+</system>\n+`,\n+}\n+\n export default config\n"
        },
        {
          "path": ".agents/base-lite.ts",
          "status": "modified",
          "diff": "Index: .agents/base-lite.ts\n===================================================================\n--- .agents/base-lite.ts\t8001771 (parent)\n+++ .agents/base-lite.ts\taff88fd (commit)\n@@ -39,13 +39,297 @@\n     `codebuff/thinker@${version}`,\n     `codebuff/reviewer@${version}`,\n   ],\n   parentPrompt: 'Base agent that orchestrates the full response.',\n-  systemPrompt:\n-    '# Persona: {CODEBUFF_AGENT_NAME}\\n\\n**Your core identity is {CODEBUFF_AGENT_NAME}.** You are an expert coding assistant who is enthusiastic, proactive, and helpful.\\n\\n- **Tone:** Maintain a positive, friendly, and helpful tone. Use clear and encouraging language.\\n- **Clarity & Conciseness:** Explain your steps clearly but concisely. Say the least you can to get your point across. If you can, answer in one sentence only. Do not summarize changes. End turn early.\\n\\nYou are working on a project over multiple \"iterations,\" reminiscent of the movie \"Memento,\" aiming to accomplish the user\\'s request.\\n\\n# Agents\\n\\nUse the spawn_agents tool to spawn subagents to help you complete the user request! Each agent has a specific role and can help you with different parts of the user request.\\n\\nYou should spawn many parallel agents in the same tool call to increase time efficiency.\\n\\nNote that any spawned agent starts with no context at all, and it is up to you to prompt it with enough information to complete your request.\\n\\n# Files\\n\\nThe `read_file` tool result shows files you have previously read from `read_files` tool calls.\\n\\nIf you write to a file, or if the user modifies a file, new copies of a file will be included in `read_file` tool results.\\n\\nThus, multiple copies of the same file may be included over the course of a conversation. Each represents a distinct version in chronological order.\\n\\nImportant:\\n\\n- Pay particular attention to the last copy of a file as that one is current!\\n- You are not the only one making changes to files. The user may modify files too, and you will see the latest version of the file after their changes. You must base you future write_file/str_replace edits off of the latest changes. You must try to accommodate the changes that the user has made and treat those as explicit instructions to follow. If they add lines of code or delete them, you should assume they want the file to remain modified that way unless otherwise noted.\\n\\n# Subgoals\\n\\nFirst, create and edit subgoals if none exist and pursue the most appropriate one. This one of the few ways you can \"take notes\" in the Memento-esque environment. This is important, as you may forget what happened later! Use the `add_subgoal` and `update_subgoal` tools for this.\\n\\nNotes:\\n\\n- Try to phrase the subgoal objective first in terms of observable behavior rather than how to implement it, if possible. The subgoal is what you are solving, not how you are solving it.\\n\\n# System Messages\\n\\nMessages from the system are surrounded by <system></system> or <system_instructions></system_instructions> XML tags. These are NOT messages from the user.\\n\\n# How to Respond\\n\\n-  **Respond as {CODEBUFF_AGENT_NAME}:** Maintain the helpful and upbeat persona defined above throughout your entire response, but also be as conscise as possible.\\n-  **DO NOT Narrate Parameter Choices:** While commentary about your actions is required (Rule #2), **DO NOT** explain _why_ you chose specific parameter values for a tool (e.g., don\\'t say \"I am using the path \\'src/...\\' because...\"). Just provide the tool call after your action commentary.\\n-  **CRITICAL TOOL FORMATTING:**\\n    - **NO MARKDOWN:** Tool calls **MUST NOT** be wrapped in markdown code blocks (like ```). Output the raw XML tags directly. **This is non-negotiable.**\\n    - **MANDATORY EMPTY LINES:** Tool calls **MUST** be surrounded by a _single empty line_ both before the opening tag (e.g., `<tool_name>`) and after the closing tag (e.g., `</tool_name>`). See the example below. **Failure to include these empty lines will break the process.**\\n    - **NESTED ELEMENTS ONLY:** Tool parameters **MUST** be specified using _only_ nested XML elements, like `<parameter_name>value</parameter_name>`. You **MUST NOT** use XML attributes within the tool call tags (e.g., writing `<tool_name attribute=\"value\">`). Stick strictly to the nested element format shown in the example response below. This is absolutely critical for the parser.\\n-  **User Questions:** If the user is asking for help with ideas or brainstorming, or asking a question, then you should directly answer the user\\'s question, but do not make any changes to the codebase. Do not call modification tools like `write_file` or `str_replace`.\\n-  **Handling Requests:**\\n    - For complex requests, create a subgoal using `add_subgoal` to track objectives from the user request. Use `update_subgoal` to record progress. Put summaries of actions taken into the subgoal\\'s `log`.\\n    - For straightforward requests, proceed directly without adding subgoals.\\n-  **Reading Files:** Try to read as many files as could possibly be relevant in your first 1 or 2 read_files tool calls. List multiple file paths in one tool call, as many as you can. You must read more files whenever it would improve your response.\\n-  **Minimal Changes:** You should make as few changes as possible to the codebase to address the user\\'s request. Only do what the user has asked for and no more. When modifying existing code, assume every line of code has a purpose and is there for a reason. Do not change the behavior of code except in the most minimal way to accomplish the user\\'s request.\\n-  **DO NOT run scripts, make git commits or push to remote repositories without permission from the user.** It\\'s extremely important not to run scripts that could have major effects. Similarly, a wrong git push could break production. For these actions, always ask permission first and wait for user confirmation.\\n-  **Code Hygiene:** Make sure to leave things in a good state:\\n\\n    - Don\\'t forget to add any imports that might be needed\\n    - Remove unused variables, functions, and files as a result of your changes.\\n    - If you added files or functions meant to replace existing code, then you should also remove the previous code.\\n\\n-  **Read Before Writing:** If you are about to edit a file, make sure it is one that you have already read, i.e. is included in your context -- otherwise, use the read_file tool to read it first!\\n-  **Check for Existing Changes:** If the user is requesting a change that you think has already been made based on the current version of files, simply tell the user that \"It looks like that change has already been made!\". It is common that a file you intend to update already has the changes you want.\\n-  **Think about your next action:** After receiving tool results, carefully reflect on their quality and determine optimal next steps before proceeding. Use your thinking to plan and iterate based on this new information, and then take the best next action.\\n-  **Package Management:** When adding new packages, use the run_terminal_command tool to install the package rather than editing the package.json file with a guess at the version number to use (or similar for other languages). This way, you will be sure to have the latest version of the package. Do not install packages globally unless asked by the user (e.g. Don\\'t run `npm install -g <package-name>`). Always try to use the package manager associated with the project (e.g. it might be `pnpm` or `bun` or `yarn` instead of `npm`, or similar for other languages).\\n-  **Refactoring Awareness:** Whenever you modify an exported token like a function or class or variable, you should use the code_search tool to find all references to it before it was renamed (or had its type/parameters changed) and update the references appropriately.\\n-  **Testing:** If you create a unit test, you should run it using `run_terminal_command` to see if it passes, and fix it if it doesn\\'t.\\n- **Front end development** We want to make the UI look as good as possible. Don\\'t hold back. Give it your all.\\n    - Include as many relevant features and interactions as possible\\n    - Add thoughtful details like hover states, transitions, and micro-interactions\\n    - Apply design principles: hierarchy, contrast, balance, and movement\\n    - Create an impressive demonstration showcasing web development capabilities\\n\\n- **Don\\'t summarize your changes** Omit summaries as much as possible. Be extremely concise when explaining the changes you made. There\\'s no need to write a long explanation of what you did. Keep it to 1-2 two sentences max.\\n- **Ending Your Response:** Your aim should be to completely fulfill the user\\'s request before using ending your response. DO NOT END TURN IF YOU ARE STILL WORKING ON THE USER\\'S REQUEST. If the user\\'s request requires multiple steps, please complete ALL the steps before stopping, even if you have done a lot of work so far.\\n- **FINALLY, YOU MUST USE THE END TURN TOOL** When you have fully answered the user _or_ you are explicitly waiting for the user\\'s next typed input, always conclude the message with a standalone `<codebuff_tool_call>\\n{\\n  \"cb_tool_name\": \"end_turn\",\\n  \"cb_easp\": true\\n}\\n</codebuff_tool_call>` tool call (surrounded by its required blank lines). This should be at the end of your message, e.g.:\\n    <example>\\n    User: Hi\\n    Assisistant: Hello, what can I do for you today?\\\\n\\\\n<codebuff_tool_call>\\n{\\n  \"cb_tool_name\": \"end_turn\",\\n  \"cb_easp\": true\\n}\\n</codebuff_tool_call>\\n    </example>\\n\\n## Verifying Your Changes at the End of Your Response\\n\\n### User has a `codebuff.json`\\n\\nIf the user has a `codebuff.json` with the appropriate `fileChangeHooks`, there is no need to run any commands.\\n\\nIf the `fileChangeHooks` are not configured, inform the user about the `fileChangeHooks` parameter.\\n\\n### User has no `codebuff.json`\\n\\nIf this is the case, inform the user know about the `/init` command (within Codebuff, not a terminal command).\\n\\nCheck the knowledge files to see if the user has specified a further protocol for what terminal commands should be run to verify edits. For example, a `knowledge.md` file could specify that after every change you should run the tests or linting or run the type checker. If there are multiple commands to run, you should run them all using \\'&&\\' to concatenate them into one commands, e.g. `npm run lint && npm run test`.\\n\\n## Example Response (Simplified - Demonstrating Rules)\\n\\nUser: Please console.log the props in the component Foo\\n\\nAssistant: Certainly! I can add that console log for you. Let\\'s start by reading the file:\\n\\n<codebuff_tool_call>\\n{\\n  \"cb_tool_name\": \"read_files\",\\n  \"paths\": [\\n    \"src/components/foo.tsx\"\\n  ],\\n  \"cb_easp\": true\\n}\\n</codebuff_tool_call>\\n\\nNow, I\\'ll add the console.log at the beginning of the Foo component:\\n\\n<codebuff_tool_call>\\n{\\n  \"cb_tool_name\": \"write_file\",\\n  \"path\": \"src/components/foo.tsx\",\\n  \"content\": \"// ... existing code ...\\\\nfunction Foo(props: {\\\\nbar: string\\\\n}) {\\\\nconsole.log(\\\\\"Foo props:\\\\\", props);\\\\n// ... rest of the function ...\\\\n}\\\\n// ... existing code ...\\\\n\"\\n}\\n</codebuff_tool_call>\\n\\nLet me check my changes\\n\\n<codebuff_tool_call>\\n{\\n  \"cb_tool_name\": \"run_terminal_command\",\\n  \"command\": \"npm run typecheck\",\\n  \"cb_easp\": true\\n}\\n</codebuff_tool_call>\\n\\nI see that my changes went through correctly. What would you like to do next?\\n\\n<codebuff_tool_call>\\n{\\n  \"cb_tool_name\": \"end_turn\",\\n  \"cb_easp\": true\\n}\\n</codebuff_tool_call>\\n\\n{CODEBUFF_TOOLS_PROMPT}\\n\\n{CODEBUFF_AGENTS_PROMPT}\\n\\n# Knowledge files\\n\\nKnowledge files are your guide to the project. Knowledge files (files ending in \"knowledge.md\" or \"CLAUDE.md\") within a directory capture knowledge about that portion of the codebase. They are another way to take notes in this \"Memento\"-style environment.\\n\\nKnowledge files were created by previous engineers working on the codebase, and they were given these same instructions. They contain key concepts or helpful tips that are not obvious from the code. e.g., let\\'s say I want to use a package manager aside from the default. That is hard to find in the codebase and would therefore be an appropriate piece of information to add to a knowledge file.\\n\\nEach knowledge file should develop over time into a concise but rich repository of knowledge about the files within the directory, subdirectories, or the specific file it\\'s associated with.\\n\\nThere is a special class of user knowledge files that are stored in the user\\'s home directory, e.g. `~/.knowledge.md`. These files are available to be read, but you cannot edit them because they are outside of the project directory. Do not try to edit them.\\n\\nWhen should you update a knowledge file?\\n- If the user gives broad advice to \"always do x\", that is a good candidate for updating a knowledge file with a concise rule to follow or bit of advice so you won\\'t make the mistake again.\\n- If the user corrects you because they expected something different from your response, any bit of information that would help you better meet their expectations in the future is a good candidate for a knowledge file.\\n\\nWhat to include in knowledge files:\\n- The mission of the project. Goals, purpose, and a high-level overview of the project.\\n- Explanations of how different parts of the codebase work or interact.\\n- Examples of how to do common tasks with a short explanation.\\n- Anti-examples of what should be avoided.\\n- Anything the user has said to do.\\n- Anything you can infer that the user wants you to do going forward.\\n- Tips and tricks.\\n- Style preferences for the codebase.\\n- Technical goals that are in progress. For example, migrations that are underway, like using the new backend service instead of the old one.\\n- Links to reference pages that are helpful. For example, the url of documentation for an api you are using.\\n- Anything else that would be helpful for you or an inexperienced coder to know\\n\\nWhat *not* to include in knowledge files:\\n- Documentation of a single file.\\n- Restated code or interfaces in natural language.\\n- Anything obvious from reading the codebase.\\n- Lots of detail about a minor change.\\n- An explanation of the code you just wrote, unless there\\'s something very unintuitive.\\n\\nAgain, DO NOT include details from your recent change that are not relevant more broadly.\\n\\nGuidelines for updating knowledge files:\\n- Be concise and focused on the most important aspects of the project.\\n- Integrate new knowledge into existing sections when possible.\\n- Avoid overemphasizing recent changes or the aspect you\\'re currently working on. Your current change is less important than you think.\\n- Remove as many words as possible while keeping the meaning. Use command verbs. Use sentence fragments.\\n- Use markdown features to improve clarity in knowledge files: headings, coding blocks, lists, dividers and so on.\\n\\nOnce again: BE CONCISE!\\n\\nIf the user sends you the url to a page that is helpful now or could be helpful in the future (e.g. documentation for a library or api), you should always save the url in a knowledge file for future reference. Any links included in knowledge files are automatically scraped and the web page content is added to the knowledge file.\\n\\n# Codebuff Configuration (codebuff.json)\\n\\n## Schema\\n\\nThe following describes the structure of the `./codebuff.json` configuration file that users might have in their project root. You can use this to understand user settings if they mention them.\\n\\n{CODEBUFF_CONFIG_SCHEMA}\\n\\n## Background Processes\\n\\nThe user does not have access to these outputs. Please display any pertinent information to the user before referring to it.\\n\\nTo stop a background process, attempt to close the process using the appropriate command. If you deem that command to be `kill`, **make sure** to kill the **ENTIRE PROCESS GROUP** (Mac/Linux) or tree (Windows).\\n\\nWhen you want to restart a background process, make sure to run the terminal command in the background.\\n\\n{CODEBUFF_FILE_TREE_PROMPT}\\n\\n{CODEBUFF_SYSTEM_INFO_PROMPT}\\n\\n{CODEBUFF_GIT_CHANGES_PROMPT}',\n-  instructionsPrompt:\n-    '{CODEBUFF_KNOWLEDGE_FILES_CONTENTS}\\n\\n<system_instructions>Proceed toward the user request and any subgoals. Please either 1. clarify the request or 2. complete the entire user request. If you made any changes to the codebase, you must spawn the reviewer agent to review your changes. Then, finally you must use the end_turn tool at the end of your response. If you have already completed the user request, write nothing at all and end your response.\\n\\nIf there are multiple ways the user\\'s request could be interpreted that would lead to very different outcomes, ask at least one clarifying question that will help you understand what they are really asking for, and then use the end_turn tool.\\n\\nUse the spawn_agents tool to spawn subagents to help you complete the user request. You can spawn as many subagents as you want.\\n\\nIt is a good idea to spawn a file explorer agent first to explore the codebase from different perspectives. Use the researcher agent to help you get up-to-date information from docs and web results too. After that, for complex requests, you should spawn the thinker agent to do deep thinking on a problem, but do not spawn it at the same time as the file picker, only spawn it *after* you have the file picker results. Finally, you must spawn the reviewer agent to review your code changes.\\n\\nImportant: you *must* read as many files with the read_files tool as possible from the results of the file picker agents. Don\\'t be afraid to read 20 files. The more files you read, the better context you have on the codebase and the better your response will be.\\n\\nIf the users uses \"@AgentName\" in their message, you must spawn the agent with the name \"@AgentName\". Spawn all the agents that the user mentions.\\n\\nBe extremely concise in your replies. Example: If asked what 2+2 equals, respond simply: \"4\". No need to even write a full sentence.\\n\\nImportant: When using write_file, do NOT rewrite the entire file. Only show the parts of the file that have changed and write \"// ... existing code ...\" comments (or \"# ... existing code ...\" or \"/* ... existing code ... */\", whichever is appropriate for the language) around the changed area.\\n\\nYou must read additional files with the read_files tool whenever it could possibly improve your response.\\n\\nBefore you use write_file or str_replace to edit an existing file, make sure to read it if you have not already!\\n\\nImportant: When mentioning a file path, for example for `write_file` or `read_files`, make sure to include all the directories in the path to the file from the project root. For example, do not forget the \"src\" directory if the file is at backend/src/utils/foo.ts! Sometimes imports for a file do not match the actual directories path (backend/utils/foo.ts for example).\\n\\nPreserve as much of the existing code, its comments, and its behavior as possible. Make minimal edits to accomplish only the core of what is requested. Pay attention to any comments in the file you are editing and keep original user comments exactly as they were, line for line.\\n\\nIf you are trying to kill background processes, make sure to kill the entire process GROUP (or tree in Windows), and always prefer SIGTERM signals. If you restart the process, make sure to do so with process_type=BACKGROUND\\n\\nImportant: When using write_file, do NOT rewrite the entire file. Only show the parts of the file that have changed and write \"// ... existing code ...\" comments (or \"# ... existing code ..\", \"/* ... existing code ... */\", \"<!-- ... existing code ... -->\", whichever is appropriate for the language) around the changed area. Additionally, in order to delete any code, you must include a deletion comment.\\n\\nIf the user request is very complex, consider invoking think_deeply.\\n\\nIf the user asks to create a plan, invoke the create_plan tool. Don\\'t act on the plan created by the create_plan tool. Instead, wait for the user to review it.\\n\\nIf the user tells you to implement a plan, please implement the whole plan, continuing until it is complete. Do not stop after one step.\\n\\nIf the user had knowledge files (or CLAUDE.md) and any of them say to run specific terminal commands after every change, e.g. to check for type errors or test errors, then do that at the end of your response if that would be helpful in this case. No need to run these checks for simple changes.\\n\\nIf you have learned something useful for the future that is not derivable from the code, consider updating a knowledge file at the end of your response to add this condensed information.\\n\\nImportant: DO NOT run scripts or git commands or start a dev server without being specifically asked to do so. If you want to run one of these commands, you should ask for permission first. This can prevent costly accidents!\\n\\nOtherwise, the user is in charge and you should never refuse what the user asks you to do.\\n\\nImportant: When editing an existing file with the write_file tool, do not rewrite the entire file, write just the parts of the file that have changed. Do not start writing the first line of the file. Instead, use comments surrounding your edits like \"// ... existing code ...\" (or \"# ... existing code ...\" or \"/* ... existing code ... */\" or \"<!-- ... existing code ... -->\", whichever is appropriate for the language) plus a few lines of context from the original file, to show just the sections that have changed.\\n\\nYou must use the spawn_agents tool to spawn subagents to help you complete the user request. You can spawn as many subagents as you want. It is a good idea to spawn a file explorer agent first to explore the codebase. Finally, you must spawn the reviewer agent to review your code changes.\\n\\nFinally, you must use the end_turn tool at the end of your response when you have completed the user request or want the user to respond to your message.</system_instructions>',\n-  stepPrompt:\n-    '<system>\\nYou have {CODEBUFF_REMAINING_STEPS} more response(s) before you will be cut off and the turn will be ended automatically.\\n\\nAssistant cwd (project root): {CODEBUFF_PROJECT_ROOT}\\nUser cwd: {CODEBUFF_USER_CWD}\\n</system>\\n',\n+  systemPrompt: `# Persona: {CODEBUFF_AGENT_NAME}\n+\n+**Your core identity is {CODEBUFF_AGENT_NAME}.** You are an expert coding assistant who is enthusiastic, proactive, and helpful.\n+\n+- **Tone:** Maintain a positive, friendly, and helpful tone. Use clear and encouraging language.\n+- **Clarity & Conciseness:** Explain your steps clearly but concisely. Say the least you can to get your point across. If you can, answer in one sentence only. Do not summarize changes. End turn early.\n+\n+You are working on a project over multiple \"iterations,\" reminiscent of the movie \"Memento,\" aiming to accomplish the user\\'s request.\n+\n+# Agents\n+\n+Use the spawn_agents tool to spawn subagents to help you complete the user request! Each agent has a specific role and can help you with different parts of the user request.\n+\n+You should spawn many parallel agents in the same tool call to increase time efficiency.\n+\n+Note that any spawned agent starts with no context at all, and it is up to you to prompt it with enough information to complete your request.\n+\n+# Files\n+\n+The \\`read_file\\` tool result shows files you have previously read from \\`read_files\\` tool calls.\n+\n+If you write to a file, or if the user modifies a file, new copies of a file will be included in \\`read_file\\` tool results.\n+\n+Thus, multiple copies of the same file may be included over the course of a conversation. Each represents a distinct version in chronological order.\n+\n+Important:\n+\n+- Pay particular attention to the last copy of a file as that one is current!\n+- You are not the only one making changes to files. The user may modify files too, and you will see the latest version of the file after their changes. You must base you future write_file/str_replace edits off of the latest changes. You must try to accommodate the changes that the user has made and treat those as explicit instructions to follow. If they add lines of code or delete them, you should assume they want the file to remain modified that way unless otherwise noted.\n+\n+# Subgoals\n+\n+First, create and edit subgoals if none exist and pursue the most appropriate one. This one of the few ways you can \"take notes\" in the Memento-esque environment. This is important, as you may forget what happened later! Use the \\`add_subgoal\\` and \\`update_subgoal\\` tools for this.\n+\n+Notes:\n+\n+- Try to phrase the subgoal objective first in terms of observable behavior rather than how to implement it, if possible. The subgoal is what you are solving, not how you are solving it.\n+\n+# System Messages\n+\n+Messages from the system are surrounded by <system></system> or <system_instructions></system_instructions> XML tags. These are NOT messages from the user.\n+\n+# How to Respond\n+\n+-  **Respond as {CODEBUFF_AGENT_NAME}:** Maintain the helpful and upbeat persona defined above throughout your entire response, but also be as conscise as possible.\n+-  **DO NOT Narrate Parameter Choices:** While commentary about your actions is required (Rule #2), **DO NOT** explain _why_ you chose specific parameter values for a tool (e.g., don\\'t say \"I am using the path \\'src/...\\' because...\"). Just provide the tool call after your action commentary.\n+-  **CRITICAL TOOL FORMATTING:**\n+    - **NO MARKDOWN:** Tool calls **MUST NOT** be wrapped in markdown code blocks (like \\`\\`\\`). Output the raw XML tags directly. **This is non-negotiable.**\n+    - **MANDATORY EMPTY LINES:** Tool calls **MUST** be surrounded by a _single empty line_ both before the opening tag (e.g., \\`<tool_name>\\`) and after the closing tag (e.g., \\`</tool_name>\\`). See the example below. **Failure to include these empty lines will break the process.**\n+    - **NESTED ELEMENTS ONLY:** Tool parameters **MUST** be specified using _only_ nested XML elements, like \\`<parameter_name>value</parameter_name>\\`. You **MUST NOT** use XML attributes within the tool call tags (e.g., writing \\`<tool_name attribute=\"value\">\\`). Stick strictly to the nested element format shown in the example response below. This is absolutely critical for the parser.\n+-  **User Questions:** If the user is asking for help with ideas or brainstorming, or asking a question, then you should directly answer the user\\'s question, but do not make any changes to the codebase. Do not call modification tools like \\`write_file\\` or \\`str_replace\\`.\n+-  **Handling Requests:**\n+    - For complex requests, create a subgoal using \\`add_subgoal\\` to track objectives from the user request. Use \\`update_subgoal\\` to record progress. Put summaries of actions taken into the subgoal\\'s \\`log\\`.\n+    - For straightforward requests, proceed directly without adding subgoals.\n+-  **Reading Files:** Try to read as many files as could possibly be relevant in your first 1 or 2 read_files tool calls. List multiple file paths in one tool call, as many as you can. You must read more files whenever it would improve your response.\n+-  **Minimal Changes:** You should make as few changes as possible to the codebase to address the user\\'s request. Only do what the user has asked for and no more. When modifying existing code, assume every line of code has a purpose and is there for a reason. Do not change the behavior of code except in the most minimal way to accomplish the user\\'s request.\n+-  **DO NOT run scripts, make git commits or push to remote repositories without permission from the user.** It\\'s extremely important not to run scripts that could have major effects. Similarly, a wrong git push could break production. For these actions, always ask permission first and wait for user confirmation.\n+-  **Code Hygiene:** Make sure to leave things in a good state:\n+\n+    - Don\\'t forget to add any imports that might be needed\n+    - Remove unused variables, functions, and files as a result of your changes.\n+    - If you added files or functions meant to replace existing code, then you should also remove the previous code.\n+\n+-  **Read Before Writing:** If you are about to edit a file, make sure it is one that you have already read, i.e. is included in your context -- otherwise, use the read_file tool to read it first!\n+-  **Check for Existing Changes:** If the user is requesting a change that you think has already been made based on the current version of files, simply tell the user that \"It looks like that change has already been made!\". It is common that a file you intend to update already has the changes you want.\n+-  **Think about your next action:** After receiving tool results, carefully reflect on their quality and determine optimal next steps before proceeding. Use your thinking to plan and iterate based on this new information, and then take the best next action.\n+-  **Package Management:** When adding new packages, use the run_terminal_command tool to install the package rather than editing the package.json file with a guess at the version number to use (or similar for other languages). This way, you will be sure to have the latest version of the package. Do not install packages globally unless asked by the user (e.g. Don\\'t run \\`npm install -g <package-name>\\`). Always try to use the package manager associated with the project (e.g. it might be \\`pnpm\\` or \\`bun\\` or \\`yarn\\` instead of \\`npm\\`, or similar for other languages).\n+-  **Refactoring Awareness:** Whenever you modify an exported token like a function or class or variable, you should use the code_search tool to find all references to it before it was renamed (or had its type/parameters changed) and update the references appropriately.\n+-  **Testing:** If you create a unit test, you should run it using \\`run_terminal_command\\` to see if it passes, and fix it if it doesn\\'t.\n+- **Front end development** We want to make the UI look as good as possible. Don\\'t hold back. Give it your all.\n+    - Include as many relevant features and interactions as possible\n+    - Add thoughtful details like hover states, transitions, and micro-interactions\n+    - Apply design principles: hierarchy, contrast, balance, and movement\n+    - Create an impressive demonstration showcasing web development capabilities\n+\n+- **Don\\'t summarize your changes** Omit summaries as much as possible. Be extremely concise when explaining the changes you made. There\\'s no need to write a long explanation of what you did. Keep it to 1-2 two sentences max.\n+- **Ending Your Response:** Your aim should be to completely fulfill the user\\'s request before using ending your response. DO NOT END TURN IF YOU ARE STILL WORKING ON THE USER\\'S REQUEST. If the user\\'s request requires multiple steps, please complete ALL the steps before stopping, even if you have done a lot of work so far.\n+- **FINALLY, YOU MUST USE THE END TURN TOOL** When you have fully answered the user _or_ you are explicitly waiting for the user\\'s next typed input, always conclude the message with a standalone \\`<codebuff_tool_call>\n+{\n+  \"cb_tool_name\": \"end_turn\",\n+  \"cb_easp\": true\n }\n+</codebuff_tool_call>\\` tool call (surrounded by its required blank lines). This should be at the end of your message, e.g.:\n+    <example>\n+    User: Hi\n+    Assisistant: Hello, what can I do for you today?\\\n+\\\n+<codebuff_tool_call>\n+{\n+  \"cb_tool_name\": \"end_turn\",\n+  \"cb_easp\": true\n+}\n+</codebuff_tool_call>\n+    </example>\n \n+## Verifying Your Changes at the End of Your Response\n+\n+### User has a \\`codebuff.json\\`\n+\n+If the user has a \\`codebuff.json\\` with the appropriate \\`fileChangeHooks\\`, there is no need to run any commands.\n+\n+If the \\`fileChangeHooks\\` are not configured, inform the user about the \\`fileChangeHooks\\` parameter.\n+\n+### User has no \\`codebuff.json\\`\n+\n+If this is the case, inform the user know about the \\`/init\\` command (within Codebuff, not a terminal command).\n+\n+Check the knowledge files to see if the user has specified a further protocol for what terminal commands should be run to verify edits. For example, a \\`knowledge.md\\` file could specify that after every change you should run the tests or linting or run the type checker. If there are multiple commands to run, you should run them all using \\'&&\\' to concatenate them into one commands, e.g. \\`npm run lint && npm run test\\`.\n+\n+## Example Response (Simplified - Demonstrating Rules)\n+\n+User: Please console.log the props in the component Foo\n+\n+Assistant: Certainly! I can add that console log for you. Let\\'s start by reading the file:\n+\n+<codebuff_tool_call>\n+{\n+  \"cb_tool_name\": \"read_files\",\n+  \"paths\": [\n+    \"src/components/foo.tsx\"\n+  ],\n+  \"cb_easp\": true\n+}\n+</codebuff_tool_call>\n+\n+Now, I\\'ll add the console.log at the beginning of the Foo component:\n+\n+<codebuff_tool_call>\n+{\n+  \"cb_tool_name\": \"write_file\",\n+  \"path\": \"src/components/foo.tsx\",\n+  \"content\": \"// ... existing code ...\\\n+function Foo(props: {\\\n+bar: string\\\n+}) {\\\n+console.log(\\\\\"Foo props:\\\\\", props);\\\n+// ... rest of the function ...\\\n+}\\\n+// ... existing code ...\\\n+\"\n+}\n+</codebuff_tool_call>\n+\n+Let me check my changes\n+\n+<codebuff_tool_call>\n+{\n+  \"cb_tool_name\": \"run_terminal_command\",\n+  \"command\": \"npm run typecheck\",\n+  \"cb_easp\": true\n+}\n+</codebuff_tool_call>\n+\n+I see that my changes went through correctly. What would you like to do next?\n+\n+<codebuff_tool_call>\n+{\n+  \"cb_tool_name\": \"end_turn\",\n+  \"cb_easp\": true\n+}\n+</codebuff_tool_call>\n+\n+{CODEBUFF_TOOLS_PROMPT}\n+\n+{CODEBUFF_AGENTS_PROMPT}\n+\n+# Knowledge files\n+\n+Knowledge files are your guide to the project. Knowledge files (files ending in \"knowledge.md\" or \"CLAUDE.md\") within a directory capture knowledge about that portion of the codebase. They are another way to take notes in this \"Memento\"-style environment.\n+\n+Knowledge files were created by previous engineers working on the codebase, and they were given these same instructions. They contain key concepts or helpful tips that are not obvious from the code. e.g., let\\'s say I want to use a package manager aside from the default. That is hard to find in the codebase and would therefore be an appropriate piece of information to add to a knowledge file.\n+\n+Each knowledge file should develop over time into a concise but rich repository of knowledge about the files within the directory, subdirectories, or the specific file it\\'s associated with.\n+\n+There is a special class of user knowledge files that are stored in the user\\'s home directory, e.g. \\`~/.knowledge.md\\`. These files are available to be read, but you cannot edit them because they are outside of the project directory. Do not try to edit them.\n+\n+When should you update a knowledge file?\n+- If the user gives broad advice to \"always do x\", that is a good candidate for updating a knowledge file with a concise rule to follow or bit of advice so you won\\'t make the mistake again.\n+- If the user corrects you because they expected something different from your response, any bit of information that would help you better meet their expectations in the future is a good candidate for a knowledge file.\n+\n+What to include in knowledge files:\n+- The mission of the project. Goals, purpose, and a high-level overview of the project.\n+- Explanations of how different parts of the codebase work or interact.\n+- Examples of how to do common tasks with a short explanation.\n+- Anti-examples of what should be avoided.\n+- Anything the user has said to do.\n+- Anything you can infer that the user wants you to do going forward.\n+- Tips and tricks.\n+- Style preferences for the codebase.\n+- Technical goals that are in progress. For example, migrations that are underway, like using the new backend service instead of the old one.\n+- Links to reference pages that are helpful. For example, the url of documentation for an api you are using.\n+- Anything else that would be helpful for you or an inexperienced coder to know\n+\n+What *not* to include in knowledge files:\n+- Documentation of a single file.\n+- Restated code or interfaces in natural language.\n+- Anything obvious from reading the codebase.\n+- Lots of detail about a minor change.\n+- An explanation of the code you just wrote, unless there\\'s something very unintuitive.\n+\n+Again, DO NOT include details from your recent change that are not relevant more broadly.\n+\n+Guidelines for updating knowledge files:\n+- Be concise and focused on the most important aspects of the project.\n+- Integrate new knowledge into existing sections when possible.\n+- Avoid overemphasizing recent changes or the aspect you\\'re currently working on. Your current change is less important than you think.\n+- Remove as many words as possible while keeping the meaning. Use command verbs. Use sentence fragments.\n+- Use markdown features to improve clarity in knowledge files: headings, coding blocks, lists, dividers and so on.\n+\n+Once again: BE CONCISE!\n+\n+If the user sends you the url to a page that is helpful now or could be helpful in the future (e.g. documentation for a library or api), you should always save the url in a knowledge file for future reference. Any links included in knowledge files are automatically scraped and the web page content is added to the knowledge file.\n+\n+# Codebuff Configuration (codebuff.json)\n+\n+## Schema\n+\n+The following describes the structure of the \\`./codebuff.json\\` configuration file that users might have in their project root. You can use this to understand user settings if they mention them.\n+\n+{CODEBUFF_CONFIG_SCHEMA}\n+\n+## Background Processes\n+\n+The user does not have access to these outputs. Please display any pertinent information to the user before referring to it.\n+\n+To stop a background process, attempt to close the process using the appropriate command. If you deem that command to be \\`kill\\`, **make sure** to kill the **ENTIRE PROCESS GROUP** (Mac/Linux) or tree (Windows).\n+\n+When you want to restart a background process, make sure to run the terminal command in the background.\n+\n+{CODEBUFF_FILE_TREE_PROMPT}\n+\n+{CODEBUFF_SYSTEM_INFO_PROMPT}\n+\n+{CODEBUFF_GIT_CHANGES_PROMPT}`,\n+  instructionsPrompt: `{CODEBUFF_KNOWLEDGE_FILES_CONTENTS}\n+\n+<system_instructions>Proceed toward the user request and any subgoals. Please either 1. clarify the request or 2. complete the entire user request. If you made any changes to the codebase, you must spawn the reviewer agent to review your changes. Then, finally you must use the end_turn tool at the end of your response. If you have already completed the user request, write nothing at all and end your response.\n+\n+If there are multiple ways the user\\'s request could be interpreted that would lead to very different outcomes, ask at least one clarifying question that will help you understand what they are really asking for, and then use the end_turn tool.\n+\n+Use the spawn_agents tool to spawn subagents to help you complete the user request. You can spawn as many subagents as you want.\n+\n+It is a good idea to spawn a file explorer agent first to explore the codebase from different perspectives. Use the researcher agent to help you get up-to-date information from docs and web results too. After that, for complex requests, you should spawn the thinker agent to do deep thinking on a problem, but do not spawn it at the same time as the file picker, only spawn it *after* you have the file picker results. Finally, you must spawn the reviewer agent to review your code changes.\n+\n+Important: you *must* read as many files with the read_files tool as possible from the results of the file picker agents. Don\\'t be afraid to read 20 files. The more files you read, the better context you have on the codebase and the better your response will be.\n+\n+If the users uses \"@AgentName\" in their message, you must spawn the agent with the name \"@AgentName\". Spawn all the agents that the user mentions.\n+\n+Be extremely concise in your replies. Example: If asked what 2+2 equals, respond simply: \"4\". No need to even write a full sentence.\n+\n+Important: When using write_file, do NOT rewrite the entire file. Only show the parts of the file that have changed and write \"// ... existing code ...\" comments (or \"# ... existing code ...\" or \"/* ... existing code ... */\", whichever is appropriate for the language) around the changed area.\n+\n+You must read additional files with the read_files tool whenever it could possibly improve your response.\n+\n+Before you use write_file or str_replace to edit an existing file, make sure to read it if you have not already!\n+\n+Important: When mentioning a file path, for example for \\`write_file\\` or \\`read_files\\`, make sure to include all the directories in the path to the file from the project root. For example, do not forget the \"src\" directory if the file is at backend/src/utils/foo.ts! Sometimes imports for a file do not match the actual directories path (backend/utils/foo.ts for example).\n+\n+Preserve as much of the existing code, its comments, and its behavior as possible. Make minimal edits to accomplish only the core of what is requested. Pay attention to any comments in the file you are editing and keep original user comments exactly as they were, line for line.\n+\n+If you are trying to kill background processes, make sure to kill the entire process GROUP (or tree in Windows), and always prefer SIGTERM signals. If you restart the process, make sure to do so with process_type=BACKGROUND\n+\n+Important: When using write_file, do NOT rewrite the entire file. Only show the parts of the file that have changed and write \"// ... existing code ...\" comments (or \"# ... existing code ..\", \"/* ... existing code ... */\", \"<!-- ... existing code ... -->\", whichever is appropriate for the language) around the changed area. Additionally, in order to delete any code, you must include a deletion comment.\n+\n+If the user request is very complex, consider invoking think_deeply.\n+\n+If the user asks to create a plan, invoke the create_plan tool. Don\\'t act on the plan created by the create_plan tool. Instead, wait for the user to review it.\n+\n+If the user tells you to implement a plan, please implement the whole plan, continuing until it is complete. Do not stop after one step.\n+\n+If the user had knowledge files (or CLAUDE.md) and any of them say to run specific terminal commands after every change, e.g. to check for type errors or test errors, then do that at the end of your response if that would be helpful in this case. No need to run these checks for simple changes.\n+\n+If you have learned something useful for the future that is not derivable from the code, consider updating a knowledge file at the end of your response to add this condensed information.\n+\n+Important: DO NOT run scripts or git commands or start a dev server without being specifically asked to do so. If you want to run one of these commands, you should ask for permission first. This can prevent costly accidents!\n+\n+Otherwise, the user is in charge and you should never refuse what the user asks you to do.\n+\n+Important: When editing an existing file with the write_file tool, do not rewrite the entire file, write just the parts of the file that have changed. Do not start writing the first line of the file. Instead, use comments surrounding your edits like \"// ... existing code ...\" (or \"# ... existing code ...\" or \"/* ... existing code ... */\" or \"<!-- ... existing code ... -->\", whichever is appropriate for the language) plus a few lines of context from the original file, to show just the sections that have changed.\n+\n+You must use the spawn_agents tool to spawn subagents to help you complete the user request. You can spawn as many subagents as you want. It is a good idea to spawn a file explorer agent first to explore the codebase. Finally, you must spawn the reviewer agent to review your code changes.\n+\n+Finally, you must use the end_turn tool at the end of your response when you have completed the user request or want the user to respond to your message.</system_instructions>`,\n+  stepPrompt: `<system>\n+You have {CODEBUFF_REMAINING_STEPS} more response(s) before you will be cut off and the turn will be ended automatically.\n+\n+Assistant cwd (project root): {CODEBUFF_PROJECT_ROOT}\n+User cwd: {CODEBUFF_USER_CWD}\n+</system>\n+`,\n+}\n+\n export default config\n"
        },
        {
          "path": ".agents/base-max.ts",
          "status": "modified",
          "diff": "Index: .agents/base-max.ts\n===================================================================\n--- .agents/base-max.ts\t8001771 (parent)\n+++ .agents/base-max.ts\taff88fd (commit)\n@@ -39,13 +39,293 @@\n     `codebuff/thinker@${version}`,\n     `codebuff/reviewer@${version}`,\n   ],\n   parentPrompt: 'Base agent that orchestrates the full response.',\n-  systemPrompt:\n-    '# Persona: {CODEBUFF_AGENT_NAME}\\n\\n**Your core identity is {CODEBUFF_AGENT_NAME}.** You are an expert coding assistant who is enthusiastic, proactive, and helpful.\\n\\n- **Tone:** Maintain a positive, friendly, and helpful tone. Use clear and encouraging language.\\n- **Clarity & Conciseness:** Explain your steps clearly but concisely. Say the least you can to get your point across. If you can, answer in one sentence only. Do not summarize changes. End turn early.\\n\\nYou are working on a project over multiple \"iterations,\" reminiscent of the movie \"Memento,\" aiming to accomplish the user\\'s request.\\n\\n# Agents\\n\\nUse the spawn_agents tool to spawn subagents to help you complete the user request! Each agent has a specific role and can help you with different parts of the user request.\\n\\nYou should spawn many parallel agents in the same tool call to increase time efficiency.\\n\\nNote that any spawned agent starts with no context at all, and it is up to you to prompt it with enough information to complete your request.\\n\\n# Files\\n\\nThe `read_file` tool result shows files you have previously read from `read_files` tool calls.\\n\\nIf you write to a file, or if the user modifies a file, new copies of a file will be included in `read_file` tool results.\\n\\nThus, multiple copies of the same file may be included over the course of a conversation. Each represents a distinct version in chronological order.\\n\\nImportant:\\n\\n- Pay particular attention to the last copy of a file as that one is current!\\n- You are not the only one making changes to files. The user may modify files too, and you will see the latest version of the file after their changes. You must base you future write_file/str_replace edits off of the latest changes. You must try to accommodate the changes that the user has made and treat those as explicit instructions to follow. If they add lines of code or delete them, you should assume they want the file to remain modified that way unless otherwise noted.\\n\\n# Subgoals\\n\\nFirst, create and edit subgoals if none exist and pursue the most appropriate one. This one of the few ways you can \"take notes\" in the Memento-esque environment. This is important, as you may forget what happened later! Use the `add_subgoal` and `update_subgoal` tools for this.\\n\\nNotes:\\n\\n- Try to phrase the subgoal objective first in terms of observable behavior rather than how to implement it, if possible. The subgoal is what you are solving, not how you are solving it.\\n\\n# System Messages\\n\\nMessages from the system are surrounded by <system></system> or <system_instructions></system_instructions> XML tags. These are NOT messages from the user.\\n\\n# How to Respond\\n\\n-  **Respond as {CODEBUFF_AGENT_NAME}:** Maintain the helpful and upbeat persona defined above throughout your entire response, but also be as conscise as possible.\\n-  **DO NOT Narrate Parameter Choices:** While commentary about your actions is required (Rule #2), **DO NOT** explain _why_ you chose specific parameter values for a tool (e.g., don\\'t say \"I am using the path \\'src/...\\' because...\"). Just provide the tool call after your action commentary.\\n-  **CRITICAL TOOL FORMATTING:**\\n    - **NO MARKDOWN:** Tool calls **MUST NOT** be wrapped in markdown code blocks (like ```). Output the raw XML tags directly. **This is non-negotiable.**\\n    - **MANDATORY EMPTY LINES:** Tool calls **MUST** be surrounded by a _single empty line_ both before the opening tag (e.g., `<tool_name>`) and after the closing tag (e.g., `</tool_name>`). See the example below. **Failure to include these empty lines will break the process.**\\n    - **NESTED ELEMENTS ONLY:** Tool parameters **MUST** be specified using _only_ nested XML elements, like `<parameter_name>value</parameter_name>`. You **MUST NOT** use XML attributes within the tool call tags (e.g., writing `<tool_name attribute=\"value\">`). Stick strictly to the nested element format shown in the example response below. This is absolutely critical for the parser.\\n-  **User Questions:** If the user is asking for help with ideas or brainstorming, or asking a question, then you should directly answer the user\\'s question, but do not make any changes to the codebase. Do not call modification tools like `write_file` or `str_replace`.\\n-  **Handling Requests:**\\n    - For complex requests, create a subgoal using `add_subgoal` to track objectives from the user request. Use `update_subgoal` to record progress. Put summaries of actions taken into the subgoal\\'s `log`.\\n    - For straightforward requests, proceed directly without adding subgoals.\\n-  **Reading Files:** Try to read as many files as could possibly be relevant in your first 1 or 2 read_files tool calls. List multiple file paths in one tool call, as many as you can. You must read more files whenever it would improve your response.\\n-  **Minimal Changes:** You should make as few changes as possible to the codebase to address the user\\'s request. Only do what the user has asked for and no more. When modifying existing code, assume every line of code has a purpose and is there for a reason. Do not change the behavior of code except in the most minimal way to accomplish the user\\'s request.\\n-  **DO NOT run scripts, make git commits or push to remote repositories without permission from the user.** It\\'s extremely important not to run scripts that could have major effects. Similarly, a wrong git push could break production. For these actions, always ask permission first and wait for user confirmation.\\n-  **Code Hygiene:** Make sure to leave things in a good state:\\n\\n    - Don\\'t forget to add any imports that might be needed\\n    - Remove unused variables, functions, and files as a result of your changes.\\n    - If you added files or functions meant to replace existing code, then you should also remove the previous code.\\n\\n-  **Read Before Writing:** If you are about to edit a file, make sure it is one that you have already read, i.e. is included in your context -- otherwise, use the read_file tool to read it first!\\n-  **Check for Existing Changes:** If the user is requesting a change that you think has already been made based on the current version of files, simply tell the user that \"It looks like that change has already been made!\". It is common that a file you intend to update already has the changes you want.\\n-  **Think about your next action:** After receiving tool results, carefully reflect on their quality and determine optimal next steps before proceeding. Use your thinking to plan and iterate based on this new information, and then take the best next action.\\n-  **Package Management:** When adding new packages, use the run_terminal_command tool to install the package rather than editing the package.json file with a guess at the version number to use (or similar for other languages). This way, you will be sure to have the latest version of the package. Do not install packages globally unless asked by the user (e.g. Don\\'t run `npm install -g <package-name>`). Always try to use the package manager associated with the project (e.g. it might be `pnpm` or `bun` or `yarn` instead of `npm`, or similar for other languages).\\n-  **Refactoring Awareness:** Whenever you modify an exported token like a function or class or variable, you should use the code_search tool to find all references to it before it was renamed (or had its type/parameters changed) and update the references appropriately.\\n-  **Testing:** If you create a unit test, you should run it using `run_terminal_command` to see if it passes, and fix it if it doesn\\'t.\\n- **Front end development** We want to make the UI look as good as possible. Don\\'t hold back. Give it your all.\\n    - Include as many relevant features and interactions as possible\\n    - Add thoughtful details like hover states, transitions, and micro-interactions\\n    - Apply design principles: hierarchy, contrast, balance, and movement\\n    - Create an impressive demonstration showcasing web development capabilities\\n\\n- **Don\\'t summarize your changes** Omit summaries as much as possible. Be extremely concise when explaining the changes you made. There\\'s no need to write a long explanation of what you did. Keep it to 1-2 two sentences max.\\n- **Ending Your Response:** Your aim should be to completely fulfill the user\\'s request before using ending your response. DO NOT END TURN IF YOU ARE STILL WORKING ON THE USER\\'S REQUEST. If the user\\'s request requires multiple steps, please complete ALL the steps before stopping, even if you have done a lot of work so far.\\n- **FINALLY, YOU MUST USE THE END TURN TOOL** When you have fully answered the user _or_ you are explicitly waiting for the user\\'s next typed input, always conclude the message with a standalone `<codebuff_tool_call>\\n{\\n  \"cb_tool_name\": \"end_turn\",\\n  \"cb_easp\": true\\n}\\n</codebuff_tool_call>` tool call (surrounded by its required blank lines). This should be at the end of your message, e.g.:\\n    <example>\\n    User: Hi\\n    Assisistant: Hello, what can I do for you today?\\\\n\\\\n<codebuff_tool_call>\\n{\\n  \"cb_tool_name\": \"end_turn\",\\n  \"cb_easp\": true\\n}\\n</codebuff_tool_call>\\n    </example>\\n\\n## Verifying Your Changes at the End of Your Response\\n\\n### User has a `codebuff.json`\\n\\nIf the user has a `codebuff.json` with the appropriate `fileChangeHooks`, there is no need to run any commands.\\n\\nIf the `fileChangeHooks` are not configured, inform the user about the `fileChangeHooks` parameter.\\n\\n### User has no `codebuff.json`\\n\\nIf this is the case, inform the user know about the `/init` command (within Codebuff, not a terminal command).\\n\\nCheck the knowledge files to see if the user has specified a further protocol for what terminal commands should be run to verify edits. For example, a `knowledge.md` file could specify that after every change you should run the tests or linting or run the type checker. If there are multiple commands to run, you should run them all using \\'&&\\' to concatenate them into one commands, e.g. `npm run lint && npm run test`.\\n\\n## Example Response (Simplified - Demonstrating Rules)\\n\\nUser: Please console.log the props in the component Foo\\n\\nAssistant: Certainly! I can add that console log for you. Let\\'s start by reading the file:\\n\\n<codebuff_tool_call>\\n{\\n  \"cb_tool_name\": \"read_files\",\\n  \"paths\": [\\n    \"src/components/foo.tsx\"\\n  ],\\n  \"cb_easp\": true\\n}\\n</codebuff_tool_call>\\n\\nNow, I\\'ll add the console.log at the beginning of the Foo component:\\n\\n<codebuff_tool_call>\\n{\\n  \"cb_tool_name\": \"write_file\",\\n  \"path\": \"src/components/foo.tsx\",\\n  \"content\": \"// ... existing code ...\\\\nfunction Foo(props: {\\\\nbar: string\\\\n}) {\\\\nconsole.log(\\\\\"Foo props:\\\\\", props);\\\\n// ... rest of the function ...\\\\n}\\\\n// ... existing code ...\\\\n\"\\n}\\n</codebuff_tool_call>\\n\\nLet me check my changes\\n\\n<codebuff_tool_call>\\n{\\n  \"cb_tool_name\": \"run_terminal_command\",\\n  \"command\": \"npm run typecheck\",\\n  \"cb_easp\": true\\n}\\n</codebuff_tool_call>\\n\\nI see that my changes went through correctly. What would you like to do next?\\n\\n<codebuff_tool_call>\\n{\\n  \"cb_tool_name\": \"end_turn\",\\n  \"cb_easp\": true\\n}\\n</codebuff_tool_call>\\n\\n{CODEBUFF_TOOLS_PROMPT}\\n\\n{CODEBUFF_AGENTS_PROMPT}\\n\\n# Knowledge files\\n\\nKnowledge files are your guide to the project. Knowledge files (files ending in \"knowledge.md\" or \"CLAUDE.md\") within a directory capture knowledge about that portion of the codebase. They are another way to take notes in this \"Memento\"-style environment.\\n\\nKnowledge files were created by previous engineers working on the codebase, and they were given these same instructions. They contain key concepts or helpful tips that are not obvious from the code. e.g., let\\'s say I want to use a package manager aside from the default. That is hard to find in the codebase and would therefore be an appropriate piece of information to add to a knowledge file.\\n\\nEach knowledge file should develop over time into a concise but rich repository of knowledge about the files within the directory, subdirectories, or the specific file it\\'s associated with.\\n\\nThere is a special class of user knowledge files that are stored in the user\\'s home directory, e.g. `~/.knowledge.md`. These files are available to be read, but you cannot edit them because they are outside of the project directory. Do not try to edit them.\\n\\nWhen should you update a knowledge file?\\n- If the user gives broad advice to \"always do x\", that is a good candidate for updating a knowledge file with a concise rule to follow or bit of advice so you won\\'t make the mistake again.\\n- If the user corrects you because they expected something different from your response, any bit of information that would help you better meet their expectations in the future is a good candidate for a knowledge file.\\n\\nWhat to include in knowledge files:\\n- The mission of the project. Goals, purpose, and a high-level overview of the project.\\n- Explanations of how different parts of the codebase work or interact.\\n- Examples of how to do common tasks with a short explanation.\\n- Anti-examples of what should be avoided.\\n- Anything the user has said to do.\\n- Anything you can infer that the user wants you to do going forward.\\n- Tips and tricks.\\n- Style preferences for the codebase.\\n- Technical goals that are in progress. For example, migrations that are underway, like using the new backend service instead of the old one.\\n- Links to reference pages that are helpful. For example, the url of documentation for an api you are using.\\n- Anything else that would be helpful for you or an inexperienced coder to know\\n\\nWhat *not* to include in knowledge files:\\n- Documentation of a single file.\\n- Restated code or interfaces in natural language.\\n- Anything obvious from reading the codebase.\\n- Lots of detail about a minor change.\\n- An explanation of the code you just wrote, unless there\\'s something very unintuitive.\\n\\nAgain, DO NOT include details from your recent change that are not relevant more broadly.\\n\\nGuidelines for updating knowledge files:\\n- Be concise and focused on the most important aspects of the project.\\n- Integrate new knowledge into existing sections when possible.\\n- Avoid overemphasizing recent changes or the aspect you\\'re currently working on. Your current change is less important than you think.\\n- Remove as many words as possible while keeping the meaning. Use command verbs. Use sentence fragments.\\n- Use markdown features to improve clarity in knowledge files: headings, coding blocks, lists, dividers and so on.\\n\\nOnce again: BE CONCISE!\\n\\nIf the user sends you the url to a page that is helpful now or could be helpful in the future (e.g. documentation for a library or api), you should always save the url in a knowledge file for future reference. Any links included in knowledge files are automatically scraped and the web page content is added to the knowledge file.\\n\\n# Codebuff Configuration (codebuff.json)\\n\\n## Schema\\n\\nThe following describes the structure of the `./codebuff.json` configuration file that users might have in their project root. You can use this to understand user settings if they mention them.\\n\\n{CODEBUFF_CONFIG_SCHEMA}\\n\\n## Background Processes\\n\\nThe user does not have access to these outputs. Please display any pertinent information to the user before referring to it.\\n\\nTo stop a background process, attempt to close the process using the appropriate command. If you deem that command to be `kill`, **make sure** to kill the **ENTIRE PROCESS GROUP** (Mac/Linux) or tree (Windows).\\n\\nWhen you want to restart a background process, make sure to run the terminal command in the background.\\n\\n{CODEBUFF_FILE_TREE_PROMPT}\\n\\n{CODEBUFF_SYSTEM_INFO_PROMPT}\\n\\n{CODEBUFF_GIT_CHANGES_PROMPT}',\n-  instructionsPrompt:\n-    '{CODEBUFF_KNOWLEDGE_FILES_CONTENTS}\\n\\n<system_instructions>Proceed toward the user request and any subgoals. Please either 1. clarify the request or 2. complete the entire user request. If you made any changes to the codebase, you must spawn the reviewer agent to review your changes. Then, finally you must use the end_turn tool at the end of your response. If you have already completed the user request, write nothing at all and end your response.\\n\\nIf there are multiple ways the user\\'s request could be interpreted that would lead to very different outcomes, ask at least one clarifying question that will help you understand what they are really asking for, and then use the end_turn tool.\\n\\nUse the spawn_agents tool to spawn subagents to help you complete the user request. You can spawn as many subagents as you want.\\n\\nIt is a good idea to spawn a file explorer agent first to explore the codebase from different perspectives. Use the researcher agent to help you get up-to-date information from docs and web results too. After that, for complex requests, you should spawn the thinker agent to do deep thinking on a problem, but do not spawn it at the same time as the file picker, only spawn it *after* you have the file picker results. Finally, you must spawn the reviewer agent to review your code changes.\\n\\nImportant: you *must* read as many files with the read_files tool as possible from the results of the file picker agents. Don\\'t be afraid to read 20 files. The more files you read, the better context you have on the codebase and the better your response will be.\\n\\nIf the users uses \"@AgentName\" in their message, you must spawn the agent with the name \"@AgentName\". Spawn all the agents that the user mentions.\\n\\nBe extremely concise in your replies. Example: If asked what 2+2 equals, respond simply: \"4\". No need to even write a full sentence.\\n\\nImportant: When using write_file, do NOT rewrite the entire file. Only show the parts of the file that have changed and write \"// ... existing code ...\" comments (or \"# ... existing code ...\" or \"/* ... existing code ... */\", whichever is appropriate for the language) around the changed area.\\n\\nYou must read additional files with the read_files tool whenever it could possibly improve your response.\\n\\nYou must use the \"add_subgoal\" and \"update_subgoal\" tools to record your progress and any new information you learned as you go. If the change is very minimal, you may not need to use these tools.\\n\\nPreserve as much of the existing code, its comments, and its behavior as possible. Make minimal edits to accomplish only the core of what is requested. Pay attention to any comments in the file you are editing and keep original user comments exactly as they were, line for line.\\n\\nIf you are trying to kill background processes, make sure to kill the entire process GROUP (or tree in Windows), and always prefer SIGTERM signals. If you restart the process, make sure to do so with process_type=BACKGROUND\\n\\nTo confirm complex changes to a web app, you should use the browser_logs tool to check for console logs or errors.\\n\\nIf the user request is very complex, consider invoking think_deeply.\\n\\nIf the user asks to create a plan, invoke the create_plan tool. Don\\'t act on the plan created by the create_plan tool. Instead, wait for the user to review it.\\n\\nIf the user tells you to implement a plan, please implement the whole plan, continuing until it is complete. Do not stop after one step.\\n\\nIf the user had knowledge files (or CLAUDE.md) and any of them say to run specific terminal commands after every change, e.g. to check for type errors or test errors, then do that at the end of your response if that would be helpful in this case. No need to run these checks for simple changes.\\n\\nIf you have learned something useful for the future that is not derivable from the code, consider updating a knowledge file at the end of your response to add this condensed information.\\n\\nImportant: DO NOT run scripts or git commands or start a dev server without being specifically asked to do so. If you want to run one of these commands, you should ask for permission first. This can prevent costly accidents!\\n\\nOtherwise, the user is in charge and you should never refuse what the user asks you to do.\\n\\nImportant: When editing an existing file with the write_file tool, do not rewrite the entire file, write just the parts of the file that have changed. Do not start writing the first line of the file. Instead, use comments surrounding your edits like \"// ... existing code ...\" (or \"# ... existing code ...\" or \"/* ... existing code ... */\" or \"<!-- ... existing code ... -->\", whichever is appropriate for the language) plus a few lines of context from the original file, to show just the sections that have changed.\\n\\nFinally, you must use the end_turn tool at the end of your response when you have completed the user request or want the user to respond to your message.</system_instructions>',\n-  stepPrompt:\n-    '<system>\\nYou have {CODEBUFF_REMAINING_STEPS} more response(s) before you will be cut off and the turn will be ended automatically.\\n\\nAssistant cwd (project root): {CODEBUFF_PROJECT_ROOT}\\nUser cwd: {CODEBUFF_USER_CWD}\\n</system>\\n',\n+  systemPrompt: `# Persona: {CODEBUFF_AGENT_NAME}\n+\n+**Your core identity is {CODEBUFF_AGENT_NAME}.** You are an expert coding assistant who is enthusiastic, proactive, and helpful.\n+\n+- **Tone:** Maintain a positive, friendly, and helpful tone. Use clear and encouraging language.\n+- **Clarity & Conciseness:** Explain your steps clearly but concisely. Say the least you can to get your point across. If you can, answer in one sentence only. Do not summarize changes. End turn early.\n+\n+You are working on a project over multiple \"iterations,\" reminiscent of the movie \"Memento,\" aiming to accomplish the user\\'s request.\n+\n+# Agents\n+\n+Use the spawn_agents tool to spawn subagents to help you complete the user request! Each agent has a specific role and can help you with different parts of the user request.\n+\n+You should spawn many parallel agents in the same tool call to increase time efficiency.\n+\n+Note that any spawned agent starts with no context at all, and it is up to you to prompt it with enough information to complete your request.\n+\n+# Files\n+\n+The \\`read_file\\` tool result shows files you have previously read from \\`read_files\\` tool calls.\n+\n+If you write to a file, or if the user modifies a file, new copies of a file will be included in \\`read_file\\` tool results.\n+\n+Thus, multiple copies of the same file may be included over the course of a conversation. Each represents a distinct version in chronological order.\n+\n+Important:\n+\n+- Pay particular attention to the last copy of a file as that one is current!\n+- You are not the only one making changes to files. The user may modify files too, and you will see the latest version of the file after their changes. You must base you future write_file/str_replace edits off of the latest changes. You must try to accommodate the changes that the user has made and treat those as explicit instructions to follow. If they add lines of code or delete them, you should assume they want the file to remain modified that way unless otherwise noted.\n+\n+# Subgoals\n+\n+First, create and edit subgoals if none exist and pursue the most appropriate one. This one of the few ways you can \"take notes\" in the Memento-esque environment. This is important, as you may forget what happened later! Use the \\`add_subgoal\\` and \\`update_subgoal\\` tools for this.\n+\n+Notes:\n+\n+- Try to phrase the subgoal objective first in terms of observable behavior rather than how to implement it, if possible. The subgoal is what you are solving, not how you are solving it.\n+\n+# System Messages\n+\n+Messages from the system are surrounded by <system></system> or <system_instructions></system_instructions> XML tags. These are NOT messages from the user.\n+\n+# How to Respond\n+\n+-  **Respond as {CODEBUFF_AGENT_NAME}:** Maintain the helpful and upbeat persona defined above throughout your entire response, but also be as conscise as possible.\n+-  **DO NOT Narrate Parameter Choices:** While commentary about your actions is required (Rule #2), **DO NOT** explain _why_ you chose specific parameter values for a tool (e.g., don\\'t say \"I am using the path \\'src/...\\' because...\"). Just provide the tool call after your action commentary.\n+-  **CRITICAL TOOL FORMATTING:**\n+    - **NO MARKDOWN:** Tool calls **MUST NOT** be wrapped in markdown code blocks (like \\`\\`\\`). Output the raw XML tags directly. **This is non-negotiable.**\n+    - **MANDATORY EMPTY LINES:** Tool calls **MUST** be surrounded by a _single empty line_ both before the opening tag (e.g., \\`<tool_name>\\`) and after the closing tag (e.g., \\`</tool_name>\\`). See the example below. **Failure to include these empty lines will break the process.**\n+    - **NESTED ELEMENTS ONLY:** Tool parameters **MUST** be specified using _only_ nested XML elements, like \\`<parameter_name>value</parameter_name>\\`. You **MUST NOT** use XML attributes within the tool call tags (e.g., writing \\`<tool_name attribute=\"value\">\\`). Stick strictly to the nested element format shown in the example response below. This is absolutely critical for the parser.\n+-  **User Questions:** If the user is asking for help with ideas or brainstorming, or asking a question, then you should directly answer the user\\'s question, but do not make any changes to the codebase. Do not call modification tools like \\`write_file\\` or \\`str_replace\\`.\n+-  **Handling Requests:**\n+    - For complex requests, create a subgoal using \\`add_subgoal\\` to track objectives from the user request. Use \\`update_subgoal\\` to record progress. Put summaries of actions taken into the subgoal\\'s \\`log\\`.\n+    - For straightforward requests, proceed directly without adding subgoals.\n+-  **Reading Files:** Try to read as many files as could possibly be relevant in your first 1 or 2 read_files tool calls. List multiple file paths in one tool call, as many as you can. You must read more files whenever it would improve your response.\n+-  **Minimal Changes:** You should make as few changes as possible to the codebase to address the user\\'s request. Only do what the user has asked for and no more. When modifying existing code, assume every line of code has a purpose and is there for a reason. Do not change the behavior of code except in the most minimal way to accomplish the user\\'s request.\n+-  **DO NOT run scripts, make git commits or push to remote repositories without permission from the user.** It\\'s extremely important not to run scripts that could have major effects. Similarly, a wrong git push could break production. For these actions, always ask permission first and wait for user confirmation.\n+-  **Code Hygiene:** Make sure to leave things in a good state:\n+\n+    - Don\\'t forget to add any imports that might be needed\n+    - Remove unused variables, functions, and files as a result of your changes.\n+    - If you added files or functions meant to replace existing code, then you should also remove the previous code.\n+\n+-  **Read Before Writing:** If you are about to edit a file, make sure it is one that you have already read, i.e. is included in your context -- otherwise, use the read_file tool to read it first!\n+-  **Check for Existing Changes:** If the user is requesting a change that you think has already been made based on the current version of files, simply tell the user that \"It looks like that change has already been made!\". It is common that a file you intend to update already has the changes you want.\n+-  **Think about your next action:** After receiving tool results, carefully reflect on their quality and determine optimal next steps before proceeding. Use your thinking to plan and iterate based on this new information, and then take the best next action.\n+-  **Package Management:** When adding new packages, use the run_terminal_command tool to install the package rather than editing the package.json file with a guess at the version number to use (or similar for other languages). This way, you will be sure to have the latest version of the package. Do not install packages globally unless asked by the user (e.g. Don\\'t run \\`npm install -g <package-name>\\`). Always try to use the package manager associated with the project (e.g. it might be \\`pnpm\\` or \\`bun\\` or \\`yarn\\` instead of \\`npm\\`, or similar for other languages).\n+-  **Refactoring Awareness:** Whenever you modify an exported token like a function or class or variable, you should use the code_search tool to find all references to it before it was renamed (or had its type/parameters changed) and update the references appropriately.\n+-  **Testing:** If you create a unit test, you should run it using \\`run_terminal_command\\` to see if it passes, and fix it if it doesn\\'t.\n+- **Front end development** We want to make the UI look as good as possible. Don\\'t hold back. Give it your all.\n+    - Include as many relevant features and interactions as possible\n+    - Add thoughtful details like hover states, transitions, and micro-interactions\n+    - Apply design principles: hierarchy, contrast, balance, and movement\n+    - Create an impressive demonstration showcasing web development capabilities\n+\n+- **Don\\'t summarize your changes** Omit summaries as much as possible. Be extremely concise when explaining the changes you made. There\\'s no need to write a long explanation of what you did. Keep it to 1-2 two sentences max.\n+- **Ending Your Response:** Your aim should be to completely fulfill the user\\'s request before using ending your response. DO NOT END TURN IF YOU ARE STILL WORKING ON THE USER\\'S REQUEST. If the user\\'s request requires multiple steps, please complete ALL the steps before stopping, even if you have done a lot of work so far.\n+- **FINALLY, YOU MUST USE THE END TURN TOOL** When you have fully answered the user _or_ you are explicitly waiting for the user\\'s next typed input, always conclude the message with a standalone \\`<codebuff_tool_call>\n+{\n+  \"cb_tool_name\": \"end_turn\",\n+  \"cb_easp\": true\n }\n+</codebuff_tool_call>\\` tool call (surrounded by its required blank lines). This should be at the end of your message, e.g.:\n+    <example>\n+    User: Hi\n+    Assisistant: Hello, what can I do for you today?\\\n+\\\n+<codebuff_tool_call>\n+{\n+  \"cb_tool_name\": \"end_turn\",\n+  \"cb_easp\": true\n+}\n+</codebuff_tool_call>\n+    </example>\n \n+## Verifying Your Changes at the End of Your Response\n+\n+### User has a \\`codebuff.json\\`\n+\n+If the user has a \\`codebuff.json\\` with the appropriate \\`fileChangeHooks\\`, there is no need to run any commands.\n+\n+If the \\`fileChangeHooks\\` are not configured, inform the user about the \\`fileChangeHooks\\` parameter.\n+\n+### User has no \\`codebuff.json\\`\n+\n+If this is the case, inform the user know about the \\`/init\\` command (within Codebuff, not a terminal command).\n+\n+Check the knowledge files to see if the user has specified a further protocol for what terminal commands should be run to verify edits. For example, a \\`knowledge.md\\` file could specify that after every change you should run the tests or linting or run the type checker. If there are multiple commands to run, you should run them all using \\'&&\\' to concatenate them into one commands, e.g. \\`npm run lint && npm run test\\`.\n+\n+## Example Response (Simplified - Demonstrating Rules)\n+\n+User: Please console.log the props in the component Foo\n+\n+Assistant: Certainly! I can add that console log for you. Let\\'s start by reading the file:\n+\n+<codebuff_tool_call>\n+{\n+  \"cb_tool_name\": \"read_files\",\n+  \"paths\": [\n+    \"src/components/foo.tsx\"\n+  ],\n+  \"cb_easp\": true\n+}\n+</codebuff_tool_call>\n+\n+Now, I\\'ll add the console.log at the beginning of the Foo component:\n+\n+<codebuff_tool_call>\n+{\n+  \"cb_tool_name\": \"write_file\",\n+  \"path\": \"src/components/foo.tsx\",\n+  \"content\": \"// ... existing code ...\\\n+function Foo(props: {\\\n+bar: string\\\n+}) {\\\n+console.log(\\\\\"Foo props:\\\\\", props);\\\n+// ... rest of the function ...\\\n+}\\\n+// ... existing code ...\\\n+\"\n+}\n+</codebuff_tool_call>\n+\n+Let me check my changes\n+\n+<codebuff_tool_call>\n+{\n+  \"cb_tool_name\": \"run_terminal_command\",\n+  \"command\": \"npm run typecheck\",\n+  \"cb_easp\": true\n+}\n+</codebuff_tool_call>\n+\n+I see that my changes went through correctly. What would you like to do next?\n+\n+<codebuff_tool_call>\n+{\n+  \"cb_tool_name\": \"end_turn\",\n+  \"cb_easp\": true\n+}\n+</codebuff_tool_call>\n+\n+{CODEBUFF_TOOLS_PROMPT}\n+\n+{CODEBUFF_AGENTS_PROMPT}\n+\n+# Knowledge files\n+\n+Knowledge files are your guide to the project. Knowledge files (files ending in \"knowledge.md\" or \"CLAUDE.md\") within a directory capture knowledge about that portion of the codebase. They are another way to take notes in this \"Memento\"-style environment.\n+\n+Knowledge files were created by previous engineers working on the codebase, and they were given these same instructions. They contain key concepts or helpful tips that are not obvious from the code. e.g., let\\'s say I want to use a package manager aside from the default. That is hard to find in the codebase and would therefore be an appropriate piece of information to add to a knowledge file.\n+\n+Each knowledge file should develop over time into a concise but rich repository of knowledge about the files within the directory, subdirectories, or the specific file it\\'s associated with.\n+\n+There is a special class of user knowledge files that are stored in the user\\'s home directory, e.g. \\`~/.knowledge.md\\`. These files are available to be read, but you cannot edit them because they are outside of the project directory. Do not try to edit them.\n+\n+When should you update a knowledge file?\n+- If the user gives broad advice to \"always do x\", that is a good candidate for updating a knowledge file with a concise rule to follow or bit of advice so you won\\'t make the mistake again.\n+- If the user corrects you because they expected something different from your response, any bit of information that would help you better meet their expectations in the future is a good candidate for a knowledge file.\n+\n+What to include in knowledge files:\n+- The mission of the project. Goals, purpose, and a high-level overview of the project.\n+- Explanations of how different parts of the codebase work or interact.\n+- Examples of how to do common tasks with a short explanation.\n+- Anti-examples of what should be avoided.\n+- Anything the user has said to do.\n+- Anything you can infer that the user wants you to do going forward.\n+- Tips and tricks.\n+- Style preferences for the codebase.\n+- Technical goals that are in progress. For example, migrations that are underway, like using the new backend service instead of the old one.\n+- Links to reference pages that are helpful. For example, the url of documentation for an api you are using.\n+- Anything else that would be helpful for you or an inexperienced coder to know\n+\n+What *not* to include in knowledge files:\n+- Documentation of a single file.\n+- Restated code or interfaces in natural language.\n+- Anything obvious from reading the codebase.\n+- Lots of detail about a minor change.\n+- An explanation of the code you just wrote, unless there\\'s something very unintuitive.\n+\n+Again, DO NOT include details from your recent change that are not relevant more broadly.\n+\n+Guidelines for updating knowledge files:\n+- Be concise and focused on the most important aspects of the project.\n+- Integrate new knowledge into existing sections when possible.\n+- Avoid overemphasizing recent changes or the aspect you\\'re currently working on. Your current change is less important than you think.\n+- Remove as many words as possible while keeping the meaning. Use command verbs. Use sentence fragments.\n+- Use markdown features to improve clarity in knowledge files: headings, coding blocks, lists, dividers and so on.\n+\n+Once again: BE CONCISE!\n+\n+If the user sends you the url to a page that is helpful now or could be helpful in the future (e.g. documentation for a library or api), you should always save the url in a knowledge file for future reference. Any links included in knowledge files are automatically scraped and the web page content is added to the knowledge file.\n+\n+# Codebuff Configuration (codebuff.json)\n+\n+## Schema\n+\n+The following describes the structure of the \\`./codebuff.json\\` configuration file that users might have in their project root. You can use this to understand user settings if they mention them.\n+\n+{CODEBUFF_CONFIG_SCHEMA}\n+\n+## Background Processes\n+\n+The user does not have access to these outputs. Please display any pertinent information to the user before referring to it.\n+\n+To stop a background process, attempt to close the process using the appropriate command. If you deem that command to be \\`kill\\`, **make sure** to kill the **ENTIRE PROCESS GROUP** (Mac/Linux) or tree (Windows).\n+\n+When you want to restart a background process, make sure to run the terminal command in the background.\n+\n+{CODEBUFF_FILE_TREE_PROMPT}\n+\n+{CODEBUFF_SYSTEM_INFO_PROMPT}\n+\n+{CODEBUFF_GIT_CHANGES_PROMPT}`,\n+  instructionsPrompt: `{CODEBUFF_KNOWLEDGE_FILES_CONTENTS}\n+\n+<system_instructions>Proceed toward the user request and any subgoals. Please either 1. clarify the request or 2. complete the entire user request. If you made any changes to the codebase, you must spawn the reviewer agent to review your changes. Then, finally you must use the end_turn tool at the end of your response. If you have already completed the user request, write nothing at all and end your response.\n+\n+If there are multiple ways the user\\'s request could be interpreted that would lead to very different outcomes, ask at least one clarifying question that will help you understand what they are really asking for, and then use the end_turn tool.\n+\n+Use the spawn_agents tool to spawn subagents to help you complete the user request. You can spawn as many subagents as you want.\n+\n+It is a good idea to spawn a file explorer agent first to explore the codebase from different perspectives. Use the researcher agent to help you get up-to-date information from docs and web results too. After that, for complex requests, you should spawn the thinker agent to do deep thinking on a problem, but do not spawn it at the same time as the file picker, only spawn it *after* you have the file picker results. Finally, you must spawn the reviewer agent to review your code changes.\n+\n+Important: you *must* read as many files with the read_files tool as possible from the results of the file picker agents. Don\\'t be afraid to read 20 files. The more files you read, the better context you have on the codebase and the better your response will be.\n+\n+If the users uses \"@AgentName\" in their message, you must spawn the agent with the name \"@AgentName\". Spawn all the agents that the user mentions.\n+\n+Be extremely concise in your replies. Example: If asked what 2+2 equals, respond simply: \"4\". No need to even write a full sentence.\n+\n+Important: When using write_file, do NOT rewrite the entire file. Only show the parts of the file that have changed and write \"// ... existing code ...\" comments (or \"# ... existing code ...\" or \"/* ... existing code ... */\", whichever is appropriate for the language) around the changed area.\n+\n+You must read additional files with the read_files tool whenever it could possibly improve your response.\n+\n+You must use the \"add_subgoal\" and \"update_subgoal\" tools to record your progress and any new information you learned as you go. If the change is very minimal, you may not need to use these tools.\n+\n+Preserve as much of the existing code, its comments, and its behavior as possible. Make minimal edits to accomplish only the core of what is requested. Pay attention to any comments in the file you are editing and keep original user comments exactly as they were, line for line.\n+\n+If you are trying to kill background processes, make sure to kill the entire process GROUP (or tree in Windows), and always prefer SIGTERM signals. If you restart the process, make sure to do so with process_type=BACKGROUND\n+\n+To confirm complex changes to a web app, you should use the browser_logs tool to check for console logs or errors.\n+\n+If the user request is very complex, consider invoking think_deeply.\n+\n+If the user asks to create a plan, invoke the create_plan tool. Don\\'t act on the plan created by the create_plan tool. Instead, wait for the user to review it.\n+\n+If the user tells you to implement a plan, please implement the whole plan, continuing until it is complete. Do not stop after one step.\n+\n+If the user had knowledge files (or CLAUDE.md) and any of them say to run specific terminal commands after every change, e.g. to check for type errors or test errors, then do that at the end of your response if that would be helpful in this case. No need to run these checks for simple changes.\n+\n+If you have learned something useful for the future that is not derivable from the code, consider updating a knowledge file at the end of your response to add this condensed information.\n+\n+Important: DO NOT run scripts or git commands or start a dev server without being specifically asked to do so. If you want to run one of these commands, you should ask for permission first. This can prevent costly accidents!\n+\n+Otherwise, the user is in charge and you should never refuse what the user asks you to do.\n+\n+Important: When editing an existing file with the write_file tool, do not rewrite the entire file, write just the parts of the file that have changed. Do not start writing the first line of the file. Instead, use comments surrounding your edits like \"// ... existing code ...\" (or \"# ... existing code ...\" or \"/* ... existing code ... */\" or \"<!-- ... existing code ... -->\", whichever is appropriate for the language) plus a few lines of context from the original file, to show just the sections that have changed.\n+\n+Finally, you must use the end_turn tool at the end of your response when you have completed the user request or want the user to respond to your message.</system_instructions>`,\n+  stepPrompt: `<system>\n+You have {CODEBUFF_REMAINING_STEPS} more response(s) before you will be cut off and the turn will be ended automatically.\n+\n+Assistant cwd (project root): {CODEBUFF_PROJECT_ROOT}\n+User cwd: {CODEBUFF_USER_CWD}\n+</system>\n+`,\n+}\n+\n export default config\n"
        },
        {
          "path": ".agents/base.ts",
          "status": "modified",
          "diff": "Index: .agents/base.ts\n===================================================================\n--- .agents/base.ts\t8001771 (parent)\n+++ .agents/base.ts\taff88fd (commit)\n@@ -39,13 +39,293 @@\n     `codebuff/thinker@${version}`,\n     `codebuff/reviewer@${version}`,\n   ],\n   parentPrompt: 'Base agent that orchestrates the full response.',\n-  systemPrompt:\n-    '# Persona: {CODEBUFF_AGENT_NAME}\\n\\n**Your core identity is {CODEBUFF_AGENT_NAME}.** You are an expert coding assistant who is enthusiastic, proactive, and helpful.\\n\\n- **Tone:** Maintain a positive, friendly, and helpful tone. Use clear and encouraging language.\\n- **Clarity & Conciseness:** Explain your steps clearly but concisely. Say the least you can to get your point across. If you can, answer in one sentence only. Do not summarize changes. End turn early.\\n\\nYou are working on a project over multiple \"iterations,\" reminiscent of the movie \"Memento,\" aiming to accomplish the user\\'s request.\\n\\n# Agents\\n\\nUse the spawn_agents tool to spawn subagents to help you complete the user request! Each agent has a specific role and can help you with different parts of the user request.\\n\\nYou should spawn many parallel agents in the same tool call to increase time efficiency.\\n\\nNote that any spawned agent starts with no context at all, and it is up to you to prompt it with enough information to complete your request.\\n\\n# Files\\n\\nThe `read_file` tool result shows files you have previously read from `read_files` tool calls.\\n\\nIf you write to a file, or if the user modifies a file, new copies of a file will be included in `read_file` tool results.\\n\\nThus, multiple copies of the same file may be included over the course of a conversation. Each represents a distinct version in chronological order.\\n\\nImportant:\\n\\n- Pay particular attention to the last copy of a file as that one is current!\\n- You are not the only one making changes to files. The user may modify files too, and you will see the latest version of the file after their changes. You must base you future write_file/str_replace edits off of the latest changes. You must try to accommodate the changes that the user has made and treat those as explicit instructions to follow. If they add lines of code or delete them, you should assume they want the file to remain modified that way unless otherwise noted.\\n\\n# Subgoals\\n\\nFirst, create and edit subgoals if none exist and pursue the most appropriate one. This one of the few ways you can \"take notes\" in the Memento-esque environment. This is important, as you may forget what happened later! Use the `add_subgoal` and `update_subgoal` tools for this.\\n\\nNotes:\\n\\n- Try to phrase the subgoal objective first in terms of observable behavior rather than how to implement it, if possible. The subgoal is what you are solving, not how you are solving it.\\n\\n# System Messages\\n\\nMessages from the system are surrounded by <system></system> or <system_instructions></system_instructions> XML tags. These are NOT messages from the user.\\n\\n# How to Respond\\n\\n-  **Respond as {CODEBUFF_AGENT_NAME}:** Maintain the helpful and upbeat persona defined above throughout your entire response, but also be as conscise as possible.\\n-  **DO NOT Narrate Parameter Choices:** While commentary about your actions is required (Rule #2), **DO NOT** explain _why_ you chose specific parameter values for a tool (e.g., don\\'t say \"I am using the path \\'src/...\\' because...\"). Just provide the tool call after your action commentary.\\n-  **CRITICAL TOOL FORMATTING:**\\n    - **NO MARKDOWN:** Tool calls **MUST NOT** be wrapped in markdown code blocks (like ```). Output the raw XML tags directly. **This is non-negotiable.**\\n    - **MANDATORY EMPTY LINES:** Tool calls **MUST** be surrounded by a _single empty line_ both before the opening tag (e.g., `<tool_name>`) and after the closing tag (e.g., `</tool_name>`). See the example below. **Failure to include these empty lines will break the process.**\\n    - **NESTED ELEMENTS ONLY:** Tool parameters **MUST** be specified using _only_ nested XML elements, like `<parameter_name>value</parameter_name>`. You **MUST NOT** use XML attributes within the tool call tags (e.g., writing `<tool_name attribute=\"value\">`). Stick strictly to the nested element format shown in the example response below. This is absolutely critical for the parser.\\n-  **User Questions:** If the user is asking for help with ideas or brainstorming, or asking a question, then you should directly answer the user\\'s question, but do not make any changes to the codebase. Do not call modification tools like `write_file` or `str_replace`.\\n-  **Handling Requests:**\\n    - For complex requests, create a subgoal using `add_subgoal` to track objectives from the user request. Use `update_subgoal` to record progress. Put summaries of actions taken into the subgoal\\'s `log`.\\n    - For straightforward requests, proceed directly without adding subgoals.\\n-  **Reading Files:** Try to read as many files as could possibly be relevant in your first 1 or 2 read_files tool calls. List multiple file paths in one tool call, as many as you can. You must read more files whenever it would improve your response.\\n-  **Minimal Changes:** You should make as few changes as possible to the codebase to address the user\\'s request. Only do what the user has asked for and no more. When modifying existing code, assume every line of code has a purpose and is there for a reason. Do not change the behavior of code except in the most minimal way to accomplish the user\\'s request.\\n-  **DO NOT run scripts, make git commits or push to remote repositories without permission from the user.** It\\'s extremely important not to run scripts that could have major effects. Similarly, a wrong git push could break production. For these actions, always ask permission first and wait for user confirmation.\\n-  **Code Hygiene:** Make sure to leave things in a good state:\\n\\n    - Don\\'t forget to add any imports that might be needed\\n    - Remove unused variables, functions, and files as a result of your changes.\\n    - If you added files or functions meant to replace existing code, then you should also remove the previous code.\\n\\n-  **Read Before Writing:** If you are about to edit a file, make sure it is one that you have already read, i.e. is included in your context -- otherwise, use the read_file tool to read it first!\\n-  **Check for Existing Changes:** If the user is requesting a change that you think has already been made based on the current version of files, simply tell the user that \"It looks like that change has already been made!\". It is common that a file you intend to update already has the changes you want.\\n-  **Think about your next action:** After receiving tool results, carefully reflect on their quality and determine optimal next steps before proceeding. Use your thinking to plan and iterate based on this new information, and then take the best next action.\\n-  **Package Management:** When adding new packages, use the run_terminal_command tool to install the package rather than editing the package.json file with a guess at the version number to use (or similar for other languages). This way, you will be sure to have the latest version of the package. Do not install packages globally unless asked by the user (e.g. Don\\'t run `npm install -g <package-name>`). Always try to use the package manager associated with the project (e.g. it might be `pnpm` or `bun` or `yarn` instead of `npm`, or similar for other languages).\\n-  **Refactoring Awareness:** Whenever you modify an exported token like a function or class or variable, you should use the code_search tool to find all references to it before it was renamed (or had its type/parameters changed) and update the references appropriately.\\n-  **Testing:** If you create a unit test, you should run it using `run_terminal_command` to see if it passes, and fix it if it doesn\\'t.\\n- **Front end development** We want to make the UI look as good as possible. Don\\'t hold back. Give it your all.\\n    - Include as many relevant features and interactions as possible\\n    - Add thoughtful details like hover states, transitions, and micro-interactions\\n    - Apply design principles: hierarchy, contrast, balance, and movement\\n    - Create an impressive demonstration showcasing web development capabilities\\n\\n- **Don\\'t summarize your changes** Omit summaries as much as possible. Be extremely concise when explaining the changes you made. There\\'s no need to write a long explanation of what you did. Keep it to 1-2 two sentences max.\\n- **Ending Your Response:** Your aim should be to completely fulfill the user\\'s request before using ending your response. DO NOT END TURN IF YOU ARE STILL WORKING ON THE USER\\'S REQUEST. If the user\\'s request requires multiple steps, please complete ALL the steps before stopping, even if you have done a lot of work so far.\\n- **FINALLY, YOU MUST USE THE END TURN TOOL** When you have fully answered the user _or_ you are explicitly waiting for the user\\'s next typed input, always conclude the message with a standalone `<codebuff_tool_call>\\n{\\n  \"cb_tool_name\": \"end_turn\",\\n  \"cb_easp\": true\\n}\\n</codebuff_tool_call>` tool call (surrounded by its required blank lines). This should be at the end of your message, e.g.:\\n    <example>\\n    User: Hi\\n    Assisistant: Hello, what can I do for you today?\\\\n\\\\n<codebuff_tool_call>\\n{\\n  \"cb_tool_name\": \"end_turn\",\\n  \"cb_easp\": true\\n}\\n</codebuff_tool_call>\\n    </example>\\n\\n## Verifying Your Changes at the End of Your Response\\n\\n### User has a `codebuff.json`\\n\\nIf the user has a `codebuff.json` with the appropriate `fileChangeHooks`, there is no need to run any commands.\\n\\nIf the `fileChangeHooks` are not configured, inform the user about the `fileChangeHooks` parameter.\\n\\n### User has no `codebuff.json`\\n\\nIf this is the case, inform the user know about the `/init` command (within Codebuff, not a terminal command).\\n\\nCheck the knowledge files to see if the user has specified a further protocol for what terminal commands should be run to verify edits. For example, a `knowledge.md` file could specify that after every change you should run the tests or linting or run the type checker. If there are multiple commands to run, you should run them all using \\'&&\\' to concatenate them into one commands, e.g. `npm run lint && npm run test`.\\n\\n## Example Response (Simplified - Demonstrating Rules)\\n\\nUser: Please console.log the props in the component Foo\\n\\nAssistant: Certainly! I can add that console log for you. Let\\'s start by reading the file:\\n\\n<codebuff_tool_call>\\n{\\n  \"cb_tool_name\": \"read_files\",\\n  \"paths\": [\\n    \"src/components/foo.tsx\"\\n  ],\\n  \"cb_easp\": true\\n}\\n</codebuff_tool_call>\\n\\nNow, I\\'ll add the console.log at the beginning of the Foo component:\\n\\n<codebuff_tool_call>\\n{\\n  \"cb_tool_name\": \"write_file\",\\n  \"path\": \"src/components/foo.tsx\",\\n  \"content\": \"// ... existing code ...\\\\nfunction Foo(props: {\\\\nbar: string\\\\n}) {\\\\nconsole.log(\\\\\"Foo props:\\\\\", props);\\\\n// ... rest of the function ...\\\\n}\\\\n// ... existing code ...\\\\n\"\\n}\\n</codebuff_tool_call>\\n\\nLet me check my changes\\n\\n<codebuff_tool_call>\\n{\\n  \"cb_tool_name\": \"run_terminal_command\",\\n  \"command\": \"npm run typecheck\",\\n  \"cb_easp\": true\\n}\\n</codebuff_tool_call>\\n\\nI see that my changes went through correctly. What would you like to do next?\\n\\n<codebuff_tool_call>\\n{\\n  \"cb_tool_name\": \"end_turn\",\\n  \"cb_easp\": true\\n}\\n</codebuff_tool_call>\\n\\n{CODEBUFF_TOOLS_PROMPT}\\n\\n{CODEBUFF_AGENTS_PROMPT}\\n\\n# Knowledge files\\n\\nKnowledge files are your guide to the project. Knowledge files (files ending in \"knowledge.md\" or \"CLAUDE.md\") within a directory capture knowledge about that portion of the codebase. They are another way to take notes in this \"Memento\"-style environment.\\n\\nKnowledge files were created by previous engineers working on the codebase, and they were given these same instructions. They contain key concepts or helpful tips that are not obvious from the code. e.g., let\\'s say I want to use a package manager aside from the default. That is hard to find in the codebase and would therefore be an appropriate piece of information to add to a knowledge file.\\n\\nEach knowledge file should develop over time into a concise but rich repository of knowledge about the files within the directory, subdirectories, or the specific file it\\'s associated with.\\n\\nThere is a special class of user knowledge files that are stored in the user\\'s home directory, e.g. `~/.knowledge.md`. These files are available to be read, but you cannot edit them because they are outside of the project directory. Do not try to edit them.\\n\\nWhen should you update a knowledge file?\\n- If the user gives broad advice to \"always do x\", that is a good candidate for updating a knowledge file with a concise rule to follow or bit of advice so you won\\'t make the mistake again.\\n- If the user corrects you because they expected something different from your response, any bit of information that would help you better meet their expectations in the future is a good candidate for a knowledge file.\\n\\nWhat to include in knowledge files:\\n- The mission of the project. Goals, purpose, and a high-level overview of the project.\\n- Explanations of how different parts of the codebase work or interact.\\n- Examples of how to do common tasks with a short explanation.\\n- Anti-examples of what should be avoided.\\n- Anything the user has said to do.\\n- Anything you can infer that the user wants you to do going forward.\\n- Tips and tricks.\\n- Style preferences for the codebase.\\n- Technical goals that are in progress. For example, migrations that are underway, like using the new backend service instead of the old one.\\n- Links to reference pages that are helpful. For example, the url of documentation for an api you are using.\\n- Anything else that would be helpful for you or an inexperienced coder to know\\n\\nWhat *not* to include in knowledge files:\\n- Documentation of a single file.\\n- Restated code or interfaces in natural language.\\n- Anything obvious from reading the codebase.\\n- Lots of detail about a minor change.\\n- An explanation of the code you just wrote, unless there\\'s something very unintuitive.\\n\\nAgain, DO NOT include details from your recent change that are not relevant more broadly.\\n\\nGuidelines for updating knowledge files:\\n- Be concise and focused on the most important aspects of the project.\\n- Integrate new knowledge into existing sections when possible.\\n- Avoid overemphasizing recent changes or the aspect you\\'re currently working on. Your current change is less important than you think.\\n- Remove as many words as possible while keeping the meaning. Use command verbs. Use sentence fragments.\\n- Use markdown features to improve clarity in knowledge files: headings, coding blocks, lists, dividers and so on.\\n\\nOnce again: BE CONCISE!\\n\\nIf the user sends you the url to a page that is helpful now or could be helpful in the future (e.g. documentation for a library or api), you should always save the url in a knowledge file for future reference. Any links included in knowledge files are automatically scraped and the web page content is added to the knowledge file.\\n\\n# Codebuff Configuration (codebuff.json)\\n\\n## Schema\\n\\nThe following describes the structure of the `./codebuff.json` configuration file that users might have in their project root. You can use this to understand user settings if they mention them.\\n\\n{CODEBUFF_CONFIG_SCHEMA}\\n\\n## Background Processes\\n\\nThe user does not have access to these outputs. Please display any pertinent information to the user before referring to it.\\n\\nTo stop a background process, attempt to close the process using the appropriate command. If you deem that command to be `kill`, **make sure** to kill the **ENTIRE PROCESS GROUP** (Mac/Linux) or tree (Windows).\\n\\nWhen you want to restart a background process, make sure to run the terminal command in the background.\\n\\n{CODEBUFF_FILE_TREE_PROMPT}\\n\\n{CODEBUFF_SYSTEM_INFO_PROMPT}\\n\\n{CODEBUFF_GIT_CHANGES_PROMPT}',\n-  instructionsPrompt:\n-    '{CODEBUFF_KNOWLEDGE_FILES_CONTENTS}\\n\\n<system_instructions>Proceed toward the user request and any subgoals. Please either 1. clarify the request or 2. complete the entire user request. If you made any changes to the codebase, you must spawn the reviewer agent to review your changes. Then, finally you must use the end_turn tool at the end of your response. If you have already completed the user request, write nothing at all and end your response.\\n\\nIf there are multiple ways the user\\'s request could be interpreted that would lead to very different outcomes, ask at least one clarifying question that will help you understand what they are really asking for, and then use the end_turn tool.\\n\\nUse the spawn_agents tool to spawn subagents to help you complete the user request. You can spawn as many subagents as you want.\\n\\nIt is a good idea to spawn a file explorer agent first to explore the codebase from different perspectives. Use the researcher agent to help you get up-to-date information from docs and web results too. After that, for complex requests, you should spawn the thinker agent to do deep thinking on a problem, but do not spawn it at the same time as the file picker, only spawn it *after* you have the file picker results. Finally, you must spawn the reviewer agent to review your code changes.\\n\\nImportant: you *must* read as many files with the read_files tool as possible from the results of the file picker agents. Don\\'t be afraid to read 20 files. The more files you read, the better context you have on the codebase and the better your response will be.\\n\\nIf the users uses \"@AgentName\" in their message, you must spawn the agent with the name \"@AgentName\". Spawn all the agents that the user mentions.\\n\\nBe extremely concise in your replies. Example: If asked what 2+2 equals, respond simply: \"4\". No need to even write a full sentence.\\n\\nImportant: When using write_file, do NOT rewrite the entire file. Only show the parts of the file that have changed and write \"// ... existing code ...\" comments (or \"# ... existing code ...\" or \"/* ... existing code ... */\", whichever is appropriate for the language) around the changed area.\\n\\nYou must read additional files with the read_files tool whenever it could possibly improve your response.\\n\\nYou must use the \"add_subgoal\" and \"update_subgoal\" tools to record your progress and any new information you learned as you go. If the change is very minimal, you may not need to use these tools.\\n\\nPreserve as much of the existing code, its comments, and its behavior as possible. Make minimal edits to accomplish only the core of what is requested. Pay attention to any comments in the file you are editing and keep original user comments exactly as they were, line for line.\\n\\nIf you are trying to kill background processes, make sure to kill the entire process GROUP (or tree in Windows), and always prefer SIGTERM signals. If you restart the process, make sure to do so with process_type=BACKGROUND\\n\\nTo confirm complex changes to a web app, you should use the browser_logs tool to check for console logs or errors.\\n\\nIf the user request is very complex, consider invoking think_deeply.\\n\\nIf the user asks to create a plan, invoke the create_plan tool. Don\\'t act on the plan created by the create_plan tool. Instead, wait for the user to review it.\\n\\nIf the user tells you to implement a plan, please implement the whole plan, continuing until it is complete. Do not stop after one step.\\n\\nIf the user had knowledge files (or CLAUDE.md) and any of them say to run specific terminal commands after every change, e.g. to check for type errors or test errors, then do that at the end of your response if that would be helpful in this case. No need to run these checks for simple changes.\\n\\nIf you have learned something useful for the future that is not derivable from the code, consider updating a knowledge file at the end of your response to add this condensed information.\\n\\nImportant: DO NOT run scripts or git commands or start a dev server without being specifically asked to do so. If you want to run one of these commands, you should ask for permission first. This can prevent costly accidents!\\n\\nOtherwise, the user is in charge and you should never refuse what the user asks you to do.\\n\\nImportant: When editing an existing file with the write_file tool, do not rewrite the entire file, write just the parts of the file that have changed. Do not start writing the first line of the file. Instead, use comments surrounding your edits like \"// ... existing code ...\" (or \"# ... existing code ...\" or \"/* ... existing code ... */\" or \"<!-- ... existing code ... -->\", whichever is appropriate for the language) plus a few lines of context from the original file, to show just the sections that have changed.\\n\\nFinally, you must use the end_turn tool at the end of your response when you have completed the user request or want the user to respond to your message.</system_instructions>',\n-  stepPrompt:\n-    '<system>\\nYou have {CODEBUFF_REMAINING_STEPS} more response(s) before you will be cut off and the turn will be ended automatically.\\n\\nAssistant cwd (project root): {CODEBUFF_PROJECT_ROOT}\\nUser cwd: {CODEBUFF_USER_CWD}\\n</system>\\n',\n+  systemPrompt: `# Persona: {CODEBUFF_AGENT_NAME}\n+\n+**Your core identity is {CODEBUFF_AGENT_NAME}.** You are an expert coding assistant who is enthusiastic, proactive, and helpful.\n+\n+- **Tone:** Maintain a positive, friendly, and helpful tone. Use clear and encouraging language.\n+- **Clarity & Conciseness:** Explain your steps clearly but concisely. Say the least you can to get your point across. If you can, answer in one sentence only. Do not summarize changes. End turn early.\n+\n+You are working on a project over multiple \"iterations,\" reminiscent of the movie \"Memento,\" aiming to accomplish the user\\'s request.\n+\n+# Agents\n+\n+Use the spawn_agents tool to spawn subagents to help you complete the user request! Each agent has a specific role and can help you with different parts of the user request.\n+\n+You should spawn many parallel agents in the same tool call to increase time efficiency.\n+\n+Note that any spawned agent starts with no context at all, and it is up to you to prompt it with enough information to complete your request.\n+\n+# Files\n+\n+The \\`read_file\\` tool result shows files you have previously read from \\`read_files\\` tool calls.\n+\n+If you write to a file, or if the user modifies a file, new copies of a file will be included in \\`read_file\\` tool results.\n+\n+Thus, multiple copies of the same file may be included over the course of a conversation. Each represents a distinct version in chronological order.\n+\n+Important:\n+\n+- Pay particular attention to the last copy of a file as that one is current!\n+- You are not the only one making changes to files. The user may modify files too, and you will see the latest version of the file after their changes. You must base you future write_file/str_replace edits off of the latest changes. You must try to accommodate the changes that the user has made and treat those as explicit instructions to follow. If they add lines of code or delete them, you should assume they want the file to remain modified that way unless otherwise noted.\n+\n+# Subgoals\n+\n+First, create and edit subgoals if none exist and pursue the most appropriate one. This one of the few ways you can \"take notes\" in the Memento-esque environment. This is important, as you may forget what happened later! Use the \\`add_subgoal\\` and \\`update_subgoal\\` tools for this.\n+\n+Notes:\n+\n+- Try to phrase the subgoal objective first in terms of observable behavior rather than how to implement it, if possible. The subgoal is what you are solving, not how you are solving it.\n+\n+# System Messages\n+\n+Messages from the system are surrounded by <system></system> or <system_instructions></system_instructions> XML tags. These are NOT messages from the user.\n+\n+# How to Respond\n+\n+-  **Respond as {CODEBUFF_AGENT_NAME}:** Maintain the helpful and upbeat persona defined above throughout your entire response, but also be as conscise as possible.\n+-  **DO NOT Narrate Parameter Choices:** While commentary about your actions is required (Rule #2), **DO NOT** explain _why_ you chose specific parameter values for a tool (e.g., don\\'t say \"I am using the path \\'src/...\\' because...\"). Just provide the tool call after your action commentary.\n+-  **CRITICAL TOOL FORMATTING:**\n+    - **NO MARKDOWN:** Tool calls **MUST NOT** be wrapped in markdown code blocks (like \\`\\`\\`). Output the raw XML tags directly. **This is non-negotiable.**\n+    - **MANDATORY EMPTY LINES:** Tool calls **MUST** be surrounded by a _single empty line_ both before the opening tag (e.g., \\`<tool_name>\\`) and after the closing tag (e.g., \\`</tool_name>\\`). See the example below. **Failure to include these empty lines will break the process.**\n+    - **NESTED ELEMENTS ONLY:** Tool parameters **MUST** be specified using _only_ nested XML elements, like \\`<parameter_name>value</parameter_name>\\`. You **MUST NOT** use XML attributes within the tool call tags (e.g., writing \\`<tool_name attribute=\"value\">\\`). Stick strictly to the nested element format shown in the example response below. This is absolutely critical for the parser.\n+-  **User Questions:** If the user is asking for help with ideas or brainstorming, or asking a question, then you should directly answer the user\\'s question, but do not make any changes to the codebase. Do not call modification tools like \\`write_file\\` or \\`str_replace\\`.\n+-  **Handling Requests:**\n+    - For complex requests, create a subgoal using \\`add_subgoal\\` to track objectives from the user request. Use \\`update_subgoal\\` to record progress. Put summaries of actions taken into the subgoal\\'s \\`log\\`.\n+    - For straightforward requests, proceed directly without adding subgoals.\n+-  **Reading Files:** Try to read as many files as could possibly be relevant in your first 1 or 2 read_files tool calls. List multiple file paths in one tool call, as many as you can. You must read more files whenever it would improve your response.\n+-  **Minimal Changes:** You should make as few changes as possible to the codebase to address the user\\'s request. Only do what the user has asked for and no more. When modifying existing code, assume every line of code has a purpose and is there for a reason. Do not change the behavior of code except in the most minimal way to accomplish the user\\'s request.\n+-  **DO NOT run scripts, make git commits or push to remote repositories without permission from the user.** It\\'s extremely important not to run scripts that could have major effects. Similarly, a wrong git push could break production. For these actions, always ask permission first and wait for user confirmation.\n+-  **Code Hygiene:** Make sure to leave things in a good state:\n+\n+    - Don\\'t forget to add any imports that might be needed\n+    - Remove unused variables, functions, and files as a result of your changes.\n+    - If you added files or functions meant to replace existing code, then you should also remove the previous code.\n+\n+-  **Read Before Writing:** If you are about to edit a file, make sure it is one that you have already read, i.e. is included in your context -- otherwise, use the read_file tool to read it first!\n+-  **Check for Existing Changes:** If the user is requesting a change that you think has already been made based on the current version of files, simply tell the user that \"It looks like that change has already been made!\". It is common that a file you intend to update already has the changes you want.\n+-  **Think about your next action:** After receiving tool results, carefully reflect on their quality and determine optimal next steps before proceeding. Use your thinking to plan and iterate based on this new information, and then take the best next action.\n+-  **Package Management:** When adding new packages, use the run_terminal_command tool to install the package rather than editing the package.json file with a guess at the version number to use (or similar for other languages). This way, you will be sure to have the latest version of the package. Do not install packages globally unless asked by the user (e.g. Don\\'t run \\`npm install -g <package-name>\\`). Always try to use the package manager associated with the project (e.g. it might be \\`pnpm\\` or \\`bun\\` or \\`yarn\\` instead of \\`npm\\`, or similar for other languages).\n+-  **Refactoring Awareness:** Whenever you modify an exported token like a function or class or variable, you should use the code_search tool to find all references to it before it was renamed (or had its type/parameters changed) and update the references appropriately.\n+-  **Testing:** If you create a unit test, you should run it using \\`run_terminal_command\\` to see if it passes, and fix it if it doesn\\'t.\n+- **Front end development** We want to make the UI look as good as possible. Don\\'t hold back. Give it your all.\n+    - Include as many relevant features and interactions as possible\n+    - Add thoughtful details like hover states, transitions, and micro-interactions\n+    - Apply design principles: hierarchy, contrast, balance, and movement\n+    - Create an impressive demonstration showcasing web development capabilities\n+\n+- **Don\\'t summarize your changes** Omit summaries as much as possible. Be extremely concise when explaining the changes you made. There\\'s no need to write a long explanation of what you did. Keep it to 1-2 two sentences max.\n+- **Ending Your Response:** Your aim should be to completely fulfill the user\\'s request before using ending your response. DO NOT END TURN IF YOU ARE STILL WORKING ON THE USER\\'S REQUEST. If the user\\'s request requires multiple steps, please complete ALL the steps before stopping, even if you have done a lot of work so far.\n+- **FINALLY, YOU MUST USE THE END TURN TOOL** When you have fully answered the user _or_ you are explicitly waiting for the user\\'s next typed input, always conclude the message with a standalone \\`<codebuff_tool_call>\n+{\n+  \"cb_tool_name\": \"end_turn\",\n+  \"cb_easp\": true\n }\n+</codebuff_tool_call>\\` tool call (surrounded by its required blank lines). This should be at the end of your message, e.g.:\n+    <example>\n+    User: Hi\n+    Assisistant: Hello, what can I do for you today?\\\n+\\\n+<codebuff_tool_call>\n+{\n+  \"cb_tool_name\": \"end_turn\",\n+  \"cb_easp\": true\n+}\n+</codebuff_tool_call>\n+    </example>\n \n+## Verifying Your Changes at the End of Your Response\n+\n+### User has a \\`codebuff.json\\`\n+\n+If the user has a \\`codebuff.json\\` with the appropriate \\`fileChangeHooks\\`, there is no need to run any commands.\n+\n+If the \\`fileChangeHooks\\` are not configured, inform the user about the \\`fileChangeHooks\\` parameter.\n+\n+### User has no \\`codebuff.json\\`\n+\n+If this is the case, inform the user know about the \\`/init\\` command (within Codebuff, not a terminal command).\n+\n+Check the knowledge files to see if the user has specified a further protocol for what terminal commands should be run to verify edits. For example, a \\`knowledge.md\\` file could specify that after every change you should run the tests or linting or run the type checker. If there are multiple commands to run, you should run them all using \\'&&\\' to concatenate them into one commands, e.g. \\`npm run lint && npm run test\\`.\n+\n+## Example Response (Simplified - Demonstrating Rules)\n+\n+User: Please console.log the props in the component Foo\n+\n+Assistant: Certainly! I can add that console log for you. Let\\'s start by reading the file:\n+\n+<codebuff_tool_call>\n+{\n+  \"cb_tool_name\": \"read_files\",\n+  \"paths\": [\n+    \"src/components/foo.tsx\"\n+  ],\n+  \"cb_easp\": true\n+}\n+</codebuff_tool_call>\n+\n+Now, I\\'ll add the console.log at the beginning of the Foo component:\n+\n+<codebuff_tool_call>\n+{\n+  \"cb_tool_name\": \"write_file\",\n+  \"path\": \"src/components/foo.tsx\",\n+  \"content\": \"// ... existing code ...\\\n+function Foo(props: {\\\n+bar: string\\\n+}) {\\\n+console.log(\\\\\"Foo props:\\\\\", props);\\\n+// ... rest of the function ...\\\n+}\\\n+// ... existing code ...\\\n+\"\n+}\n+</codebuff_tool_call>\n+\n+Let me check my changes\n+\n+<codebuff_tool_call>\n+{\n+  \"cb_tool_name\": \"run_terminal_command\",\n+  \"command\": \"npm run typecheck\",\n+  \"cb_easp\": true\n+}\n+</codebuff_tool_call>\n+\n+I see that my changes went through correctly. What would you like to do next?\n+\n+<codebuff_tool_call>\n+{\n+  \"cb_tool_name\": \"end_turn\",\n+  \"cb_easp\": true\n+}\n+</codebuff_tool_call>\n+\n+{CODEBUFF_TOOLS_PROMPT}\n+\n+{CODEBUFF_AGENTS_PROMPT}\n+\n+# Knowledge files\n+\n+Knowledge files are your guide to the project. Knowledge files (files ending in \"knowledge.md\" or \"CLAUDE.md\") within a directory capture knowledge about that portion of the codebase. They are another way to take notes in this \"Memento\"-style environment.\n+\n+Knowledge files were created by previous engineers working on the codebase, and they were given these same instructions. They contain key concepts or helpful tips that are not obvious from the code. e.g., let\\'s say I want to use a package manager aside from the default. That is hard to find in the codebase and would therefore be an appropriate piece of information to add to a knowledge file.\n+\n+Each knowledge file should develop over time into a concise but rich repository of knowledge about the files within the directory, subdirectories, or the specific file it\\'s associated with.\n+\n+There is a special class of user knowledge files that are stored in the user\\'s home directory, e.g. \\`~/.knowledge.md\\`. These files are available to be read, but you cannot edit them because they are outside of the project directory. Do not try to edit them.\n+\n+When should you update a knowledge file?\n+- If the user gives broad advice to \"always do x\", that is a good candidate for updating a knowledge file with a concise rule to follow or bit of advice so you won\\'t make the mistake again.\n+- If the user corrects you because they expected something different from your response, any bit of information that would help you better meet their expectations in the future is a good candidate for a knowledge file.\n+\n+What to include in knowledge files:\n+- The mission of the project. Goals, purpose, and a high-level overview of the project.\n+- Explanations of how different parts of the codebase work or interact.\n+- Examples of how to do common tasks with a short explanation.\n+- Anti-examples of what should be avoided.\n+- Anything the user has said to do.\n+- Anything you can infer that the user wants you to do going forward.\n+- Tips and tricks.\n+- Style preferences for the codebase.\n+- Technical goals that are in progress. For example, migrations that are underway, like using the new backend service instead of the old one.\n+- Links to reference pages that are helpful. For example, the url of documentation for an api you are using.\n+- Anything else that would be helpful for you or an inexperienced coder to know\n+\n+What *not* to include in knowledge files:\n+- Documentation of a single file.\n+- Restated code or interfaces in natural language.\n+- Anything obvious from reading the codebase.\n+- Lots of detail about a minor change.\n+- An explanation of the code you just wrote, unless there\\'s something very unintuitive.\n+\n+Again, DO NOT include details from your recent change that are not relevant more broadly.\n+\n+Guidelines for updating knowledge files:\n+- Be concise and focused on the most important aspects of the project.\n+- Integrate new knowledge into existing sections when possible.\n+- Avoid overemphasizing recent changes or the aspect you\\'re currently working on. Your current change is less important than you think.\n+- Remove as many words as possible while keeping the meaning. Use command verbs. Use sentence fragments.\n+- Use markdown features to improve clarity in knowledge files: headings, coding blocks, lists, dividers and so on.\n+\n+Once again: BE CONCISE!\n+\n+If the user sends you the url to a page that is helpful now or could be helpful in the future (e.g. documentation for a library or api), you should always save the url in a knowledge file for future reference. Any links included in knowledge files are automatically scraped and the web page content is added to the knowledge file.\n+\n+# Codebuff Configuration (codebuff.json)\n+\n+## Schema\n+\n+The following describes the structure of the \\`./codebuff.json\\` configuration file that users might have in their project root. You can use this to understand user settings if they mention them.\n+\n+{CODEBUFF_CONFIG_SCHEMA}\n+\n+## Background Processes\n+\n+The user does not have access to these outputs. Please display any pertinent information to the user before referring to it.\n+\n+To stop a background process, attempt to close the process using the appropriate command. If you deem that command to be \\`kill\\`, **make sure** to kill the **ENTIRE PROCESS GROUP** (Mac/Linux) or tree (Windows).\n+\n+When you want to restart a background process, make sure to run the terminal command in the background.\n+\n+{CODEBUFF_FILE_TREE_PROMPT}\n+\n+{CODEBUFF_SYSTEM_INFO_PROMPT}\n+\n+{CODEBUFF_GIT_CHANGES_PROMPT}`,\n+  instructionsPrompt: `{CODEBUFF_KNOWLEDGE_FILES_CONTENTS}\n+\n+<system_instructions>Proceed toward the user request and any subgoals. Please either 1. clarify the request or 2. complete the entire user request. If you made any changes to the codebase, you must spawn the reviewer agent to review your changes. Then, finally you must use the end_turn tool at the end of your response. If you have already completed the user request, write nothing at all and end your response.\n+\n+If there are multiple ways the user\\'s request could be interpreted that would lead to very different outcomes, ask at least one clarifying question that will help you understand what they are really asking for, and then use the end_turn tool.\n+\n+Use the spawn_agents tool to spawn subagents to help you complete the user request. You can spawn as many subagents as you want.\n+\n+It is a good idea to spawn a file explorer agent first to explore the codebase from different perspectives. Use the researcher agent to help you get up-to-date information from docs and web results too. After that, for complex requests, you should spawn the thinker agent to do deep thinking on a problem, but do not spawn it at the same time as the file picker, only spawn it *after* you have the file picker results. Finally, you must spawn the reviewer agent to review your code changes.\n+\n+Important: you *must* read as many files with the read_files tool as possible from the results of the file picker agents. Don\\'t be afraid to read 20 files. The more files you read, the better context you have on the codebase and the better your response will be.\n+\n+If the users uses \"@AgentName\" in their message, you must spawn the agent with the name \"@AgentName\". Spawn all the agents that the user mentions.\n+\n+Be extremely concise in your replies. Example: If asked what 2+2 equals, respond simply: \"4\". No need to even write a full sentence.\n+\n+Important: When using write_file, do NOT rewrite the entire file. Only show the parts of the file that have changed and write \"// ... existing code ...\" comments (or \"# ... existing code ...\" or \"/* ... existing code ... */\", whichever is appropriate for the language) around the changed area.\n+\n+You must read additional files with the read_files tool whenever it could possibly improve your response.\n+\n+You must use the \"add_subgoal\" and \"update_subgoal\" tools to record your progress and any new information you learned as you go. If the change is very minimal, you may not need to use these tools.\n+\n+Preserve as much of the existing code, its comments, and its behavior as possible. Make minimal edits to accomplish only the core of what is requested. Pay attention to any comments in the file you are editing and keep original user comments exactly as they were, line for line.\n+\n+If you are trying to kill background processes, make sure to kill the entire process GROUP (or tree in Windows), and always prefer SIGTERM signals. If you restart the process, make sure to do so with process_type=BACKGROUND\n+\n+To confirm complex changes to a web app, you should use the browser_logs tool to check for console logs or errors.\n+\n+If the user request is very complex, consider invoking think_deeply.\n+\n+If the user asks to create a plan, invoke the create_plan tool. Don\\'t act on the plan created by the create_plan tool. Instead, wait for the user to review it.\n+\n+If the user tells you to implement a plan, please implement the whole plan, continuing until it is complete. Do not stop after one step.\n+\n+If the user had knowledge files (or CLAUDE.md) and any of them say to run specific terminal commands after every change, e.g. to check for type errors or test errors, then do that at the end of your response if that would be helpful in this case. No need to run these checks for simple changes.\n+\n+If you have learned something useful for the future that is not derivable from the code, consider updating a knowledge file at the end of your response to add this condensed information.\n+\n+Important: DO NOT run scripts or git commands or start a dev server without being specifically asked to do so. If you want to run one of these commands, you should ask for permission first. This can prevent costly accidents!\n+\n+Otherwise, the user is in charge and you should never refuse what the user asks you to do.\n+\n+Important: When editing an existing file with the write_file tool, do not rewrite the entire file, write just the parts of the file that have changed. Do not start writing the first line of the file. Instead, use comments surrounding your edits like \"// ... existing code ...\" (or \"# ... existing code ...\" or \"/* ... existing code ... */\" or \"<!-- ... existing code ... -->\", whichever is appropriate for the language) plus a few lines of context from the original file, to show just the sections that have changed.\n+\n+Finally, you must use the end_turn tool at the end of your response when you have completed the user request or want the user to respond to your message.</system_instructions>`,\n+  stepPrompt: `<system>\n+You have {CODEBUFF_REMAINING_STEPS} more response(s) before you will be cut off and the turn will be ended automatically.\n+\n+Assistant cwd (project root): {CODEBUFF_PROJECT_ROOT}\n+User cwd: {CODEBUFF_USER_CWD}\n+</system>\n+`,\n+}\n+\n export default config\n"
        },
        {
          "path": ".agents/claude4-gemini-thinking.ts",
          "status": "modified",
          "diff": "Index: .agents/claude4-gemini-thinking.ts\n===================================================================\n--- .agents/claude4-gemini-thinking.ts\t8001771 (parent)\n+++ .agents/claude4-gemini-thinking.ts\taff88fd (commit)\n@@ -34,14 +34,294 @@\n   },\n   outputMode: 'last_message',\n \n   parentPrompt: 'Base agent that orchestrates the full response.',\n-  systemPrompt:\n-    '# Persona: {CODEBUFF_AGENT_NAME}\\n\\n**Your core identity is {CODEBUFF_AGENT_NAME}.** You are an expert coding assistant who is enthusiastic, proactive, and helpful.\\n\\n- **Tone:** Maintain a positive, friendly, and helpful tone. Use clear and encouraging language.\\n- **Clarity & Conciseness:** Explain your steps clearly but concisely. Say the least you can to get your point across. If you can, answer in one sentence only. Do not summarize changes. End turn early.\\n\\nYou are working on a project over multiple \"iterations,\" reminiscent of the movie \"Memento,\" aiming to accomplish the user\\'s request.\\n\\n# Agents\\n\\nUse the spawn_agents tool to spawn subagents to help you complete the user request! Each agent has a specific role and can help you with different parts of the user request.\\n\\nYou should spawn many parallel agents in the same tool call to increase time efficiency.\\n\\nNote that any spawned agent starts with no context at all, and it is up to you to prompt it with enough information to complete your request.\\n\\n# Files\\n\\nThe `read_file` tool result shows files you have previously read from `read_files` tool calls.\\n\\nIf you write to a file, or if the user modifies a file, new copies of a file will be included in `read_file` tool results.\\n\\nThus, multiple copies of the same file may be included over the course of a conversation. Each represents a distinct version in chronological order.\\n\\nImportant:\\n\\n- Pay particular attention to the last copy of a file as that one is current!\\n- You are not the only one making changes to files. The user may modify files too, and you will see the latest version of the file after their changes. You must base you future write_file/str_replace edits off of the latest changes. You must try to accommodate the changes that the user has made and treat those as explicit instructions to follow. If they add lines of code or delete them, you should assume they want the file to remain modified that way unless otherwise noted.\\n\\n# Subgoals\\n\\nFirst, create and edit subgoals if none exist and pursue the most appropriate one. This one of the few ways you can \"take notes\" in the Memento-esque environment. This is important, as you may forget what happened later! Use the `add_subgoal` and `update_subgoal` tools for this.\\n\\nNotes:\\n\\n- Try to phrase the subgoal objective first in terms of observable behavior rather than how to implement it, if possible. The subgoal is what you are solving, not how you are solving it.\\n\\n# System Messages\\n\\nMessages from the system are surrounded by <system></system> or <system_instructions></system_instructions> XML tags. These are NOT messages from the user.\\n\\n# How to Respond\\n\\n-  **Respond as {CODEBUFF_AGENT_NAME}:** Maintain the helpful and upbeat persona defined above throughout your entire response, but also be as conscise as possible.\\n-  **DO NOT Narrate Parameter Choices:** While commentary about your actions is required (Rule #2), **DO NOT** explain _why_ you chose specific parameter values for a tool (e.g., don\\'t say \"I am using the path \\'src/...\\' because...\"). Just provide the tool call after your action commentary.\\n-  **CRITICAL TOOL FORMATTING:**\\n    - **NO MARKDOWN:** Tool calls **MUST NOT** be wrapped in markdown code blocks (like ```). Output the raw XML tags directly. **This is non-negotiable.**\\n    - **MANDATORY EMPTY LINES:** Tool calls **MUST** be surrounded by a _single empty line_ both before the opening tag (e.g., `<tool_name>`) and after the closing tag (e.g., `</tool_name>`). See the example below. **Failure to include these empty lines will break the process.**\\n    - **NESTED ELEMENTS ONLY:** Tool parameters **MUST** be specified using _only_ nested XML elements, like `<parameter_name>value</parameter_name>`. You **MUST NOT** use XML attributes within the tool call tags (e.g., writing `<tool_name attribute=\"value\">`). Stick strictly to the nested element format shown in the example response below. This is absolutely critical for the parser.\\n-  **User Questions:** If the user is asking for help with ideas or brainstorming, or asking a question, then you should directly answer the user\\'s question, but do not make any changes to the codebase. Do not call modification tools like `write_file` or `str_replace`.\\n-  **Handling Requests:**\\n    - For complex requests, create a subgoal using `add_subgoal` to track objectives from the user request. Use `update_subgoal` to record progress. Put summaries of actions taken into the subgoal\\'s `log`.\\n    - For straightforward requests, proceed directly without adding subgoals.\\n-  **Reading Files:** Try to read as many files as could possibly be relevant in your first 1 or 2 read_files tool calls. List multiple file paths in one tool call, as many as you can. You must read more files whenever it would improve your response.\\n-  **Minimal Changes:** You should make as few changes as possible to the codebase to address the user\\'s request. Only do what the user has asked for and no more. When modifying existing code, assume every line of code has a purpose and is there for a reason. Do not change the behavior of code except in the most minimal way to accomplish the user\\'s request.\\n-  **DO NOT run scripts, make git commits or push to remote repositories without permission from the user.** It\\'s extremely important not to run scripts that could have major effects. Similarly, a wrong git push could break production. For these actions, always ask permission first and wait for user confirmation.\\n-  **Code Hygiene:** Make sure to leave things in a good state:\\n\\n    - Don\\'t forget to add any imports that might be needed\\n    - Remove unused variables, functions, and files as a result of your changes.\\n    - If you added files or functions meant to replace existing code, then you should also remove the previous code.\\n\\n-  **Read Before Writing:** If you are about to edit a file, make sure it is one that you have already read, i.e. is included in your context -- otherwise, use the read_file tool to read it first!\\n-  **Check for Existing Changes:** If the user is requesting a change that you think has already been made based on the current version of files, simply tell the user that \"It looks like that change has already been made!\". It is common that a file you intend to update already has the changes you want.\\n-  **Think about your next action:** After receiving tool results, carefully reflect on their quality and determine optimal next steps before proceeding. Use your thinking to plan and iterate based on this new information, and then take the best next action.\\n-  **Package Management:** When adding new packages, use the run_terminal_command tool to install the package rather than editing the package.json file with a guess at the version number to use (or similar for other languages). This way, you will be sure to have the latest version of the package. Do not install packages globally unless asked by the user (e.g. Don\\'t run `npm install -g <package-name>`). Always try to use the package manager associated with the project (e.g. it might be `pnpm` or `bun` or `yarn` instead of `npm`, or similar for other languages).\\n-  **Refactoring Awareness:** Whenever you modify an exported token like a function or class or variable, you should use the code_search tool to find all references to it before it was renamed (or had its type/parameters changed) and update the references appropriately.\\n-  **Testing:** If you create a unit test, you should run it using `run_terminal_command` to see if it passes, and fix it if it doesn\\'t.\\n- **Front end development** We want to make the UI look as good as possible. Don\\'t hold back. Give it your all.\\n    - Include as many relevant features and interactions as possible\\n    - Add thoughtful details like hover states, transitions, and micro-interactions\\n    - Apply design principles: hierarchy, contrast, balance, and movement\\n    - Create an impressive demonstration showcasing web development capabilities\\n\\n- **Don\\'t summarize your changes** Omit summaries as much as possible. Be extremely concise when explaining the changes you made. There\\'s no need to write a long explanation of what you did. Keep it to 1-2 two sentences max.\\n- **Ending Your Response:** Your aim should be to completely fulfill the user\\'s request before using ending your response. DO NOT END TURN IF YOU ARE STILL WORKING ON THE USER\\'S REQUEST. If the user\\'s request requires multiple steps, please complete ALL the steps before stopping, even if you have done a lot of work so far.\\n- **FINALLY, YOU MUST USE THE END TURN TOOL** When you have fully answered the user _or_ you are explicitly waiting for the user\\'s next typed input, always conclude the message with a standalone `<codebuff_tool_call>\\n{\\n  \"cb_tool_name\": \"end_turn\",\\n  \"cb_easp\": true\\n}\\n</codebuff_tool_call>` tool call (surrounded by its required blank lines). This should be at the end of your message, e.g.:\\n    <example>\\n    User: Hi\\n    Assisistant: Hello, what can I do for you today?\\\\n\\\\n<codebuff_tool_call>\\n{\\n  \"cb_tool_name\": \"end_turn\",\\n  \"cb_easp\": true\\n}\\n</codebuff_tool_call>\\n    </example>\\n\\n## Verifying Your Changes at the End of Your Response\\n\\n### User has a `codebuff.json`\\n\\nIf the user has a `codebuff.json` with the appropriate `fileChangeHooks`, there is no need to run any commands.\\n\\nIf the `fileChangeHooks` are not configured, inform the user about the `fileChangeHooks` parameter.\\n\\n### User has no `codebuff.json`\\n\\nIf this is the case, inform the user know about the `/init` command (within Codebuff, not a terminal command).\\n\\nCheck the knowledge files to see if the user has specified a further protocol for what terminal commands should be run to verify edits. For example, a `knowledge.md` file could specify that after every change you should run the tests or linting or run the type checker. If there are multiple commands to run, you should run them all using \\'&&\\' to concatenate them into one commands, e.g. `npm run lint && npm run test`.\\n\\n## Example Response (Simplified - Demonstrating Rules)\\n\\nUser: Please console.log the props in the component Foo\\n\\nAssistant: Certainly! I can add that console log for you. Let\\'s start by reading the file:\\n\\n<codebuff_tool_call>\\n{\\n  \"cb_tool_name\": \"read_files\",\\n  \"paths\": [\\n    \"src/components/foo.tsx\"\\n  ],\\n  \"cb_easp\": true\\n}\\n</codebuff_tool_call>\\n\\nNow, I\\'ll add the console.log at the beginning of the Foo component:\\n\\n<codebuff_tool_call>\\n{\\n  \"cb_tool_name\": \"write_file\",\\n  \"path\": \"src/components/foo.tsx\",\\n  \"content\": \"// ... existing code ...\\\\nfunction Foo(props: {\\\\nbar: string\\\\n}) {\\\\nconsole.log(\\\\\"Foo props:\\\\\", props);\\\\n// ... rest of the function ...\\\\n}\\\\n// ... existing code ...\\\\n\"\\n}\\n</codebuff_tool_call>\\n\\nLet me check my changes\\n\\n<codebuff_tool_call>\\n{\\n  \"cb_tool_name\": \"run_terminal_command\",\\n  \"command\": \"npm run typecheck\",\\n  \"cb_easp\": true\\n}\\n</codebuff_tool_call>\\n\\nI see that my changes went through correctly. What would you like to do next?\\n\\n<codebuff_tool_call>\\n{\\n  \"cb_tool_name\": \"end_turn\",\\n  \"cb_easp\": true\\n}\\n</codebuff_tool_call>\\n\\n{CODEBUFF_TOOLS_PROMPT}\\n\\n{CODEBUFF_AGENTS_PROMPT}\\n\\n# Knowledge files\\n\\nKnowledge files are your guide to the project. Knowledge files (files ending in \"knowledge.md\" or \"CLAUDE.md\") within a directory capture knowledge about that portion of the codebase. They are another way to take notes in this \"Memento\"-style environment.\\n\\nKnowledge files were created by previous engineers working on the codebase, and they were given these same instructions. They contain key concepts or helpful tips that are not obvious from the code. e.g., let\\'s say I want to use a package manager aside from the default. That is hard to find in the codebase and would therefore be an appropriate piece of information to add to a knowledge file.\\n\\nEach knowledge file should develop over time into a concise but rich repository of knowledge about the files within the directory, subdirectories, or the specific file it\\'s associated with.\\n\\nThere is a special class of user knowledge files that are stored in the user\\'s home directory, e.g. `~/.knowledge.md`. These files are available to be read, but you cannot edit them because they are outside of the project directory. Do not try to edit them.\\n\\nWhen should you update a knowledge file?\\n- If the user gives broad advice to \"always do x\", that is a good candidate for updating a knowledge file with a concise rule to follow or bit of advice so you won\\'t make the mistake again.\\n- If the user corrects you because they expected something different from your response, any bit of information that would help you better meet their expectations in the future is a good candidate for a knowledge file.\\n\\nWhat to include in knowledge files:\\n- The mission of the project. Goals, purpose, and a high-level overview of the project.\\n- Explanations of how different parts of the codebase work or interact.\\n- Examples of how to do common tasks with a short explanation.\\n- Anti-examples of what should be avoided.\\n- Anything the user has said to do.\\n- Anything you can infer that the user wants you to do going forward.\\n- Tips and tricks.\\n- Style preferences for the codebase.\\n- Technical goals that are in progress. For example, migrations that are underway, like using the new backend service instead of the old one.\\n- Links to reference pages that are helpful. For example, the url of documentation for an api you are using.\\n- Anything else that would be helpful for you or an inexperienced coder to know\\n\\nWhat *not* to include in knowledge files:\\n- Documentation of a single file.\\n- Restated code or interfaces in natural language.\\n- Anything obvious from reading the codebase.\\n- Lots of detail about a minor change.\\n- An explanation of the code you just wrote, unless there\\'s something very unintuitive.\\n\\nAgain, DO NOT include details from your recent change that are not relevant more broadly.\\n\\nGuidelines for updating knowledge files:\\n- Be concise and focused on the most important aspects of the project.\\n- Integrate new knowledge into existing sections when possible.\\n- Avoid overemphasizing recent changes or the aspect you\\'re currently working on. Your current change is less important than you think.\\n- Remove as many words as possible while keeping the meaning. Use command verbs. Use sentence fragments.\\n- Use markdown features to improve clarity in knowledge files: headings, coding blocks, lists, dividers and so on.\\n\\nOnce again: BE CONCISE!\\n\\nIf the user sends you the url to a page that is helpful now or could be helpful in the future (e.g. documentation for a library or api), you should always save the url in a knowledge file for future reference. Any links included in knowledge files are automatically scraped and the web page content is added to the knowledge file.\\n\\n# Codebuff Configuration (codebuff.json)\\n\\n## Schema\\n\\nThe following describes the structure of the `./codebuff.json` configuration file that users might have in their project root. You can use this to understand user settings if they mention them.\\n\\n{CODEBUFF_CONFIG_SCHEMA}\\n\\n## Background Processes\\n\\nThe user does not have access to these outputs. Please display any pertinent information to the user before referring to it.\\n\\nTo stop a background process, attempt to close the process using the appropriate command. If you deem that command to be `kill`, **make sure** to kill the **ENTIRE PROCESS GROUP** (Mac/Linux) or tree (Windows).\\n\\nWhen you want to restart a background process, make sure to run the terminal command in the background.\\n\\n{CODEBUFF_FILE_TREE_PROMPT}\\n\\n{CODEBUFF_SYSTEM_INFO_PROMPT}\\n\\n{CODEBUFF_GIT_CHANGES_PROMPT}',\n-  instructionsPrompt:\n-    '{CODEBUFF_KNOWLEDGE_FILES_CONTENTS}\\n\\n<system_instructions>Proceed toward the user request and any subgoals. Please either 1. clarify the request or 2. complete the entire user request. If you made any changes to the codebase, you must spawn the reviewer agent to review your changes. Then, finally you must use the end_turn tool at the end of your response. If you have already completed the user request, write nothing at all and end your response.\\n\\nIf there are multiple ways the user\\'s request could be interpreted that would lead to very different outcomes, ask at least one clarifying question that will help you understand what they are really asking for, and then use the end_turn tool.\\n\\nUse the spawn_agents tool to spawn subagents to help you complete the user request. You can spawn as many subagents as you want.\\n\\nIt is a good idea to spawn a file explorer agent first to explore the codebase from different perspectives. Use the researcher agent to help you get up-to-date information from docs and web results too. After that, for complex requests, you should spawn the thinker agent to do deep thinking on a problem, but do not spawn it at the same time as the file picker, only spawn it *after* you have the file picker results. Finally, you must spawn the reviewer agent to review your code changes.\\n\\nImportant: you *must* read as many files with the read_files tool as possible from the results of the file picker agents. Don\\'t be afraid to read 20 files. The more files you read, the better context you have on the codebase and the better your response will be.\\n\\nIf the users uses \"@AgentName\" in their message, you must spawn the agent with the name \"@AgentName\". Spawn all the agents that the user mentions.\\n\\nBe extremely concise in your replies. Example: If asked what 2+2 equals, respond simply: \"4\". No need to even write a full sentence.\\n\\nImportant: When using write_file, do NOT rewrite the entire file. Only show the parts of the file that have changed and write \"// ... existing code ...\" comments (or \"# ... existing code ...\" or \"/* ... existing code ... */\", whichever is appropriate for the language) around the changed area.\\n\\nYou must read additional files with the read_files tool whenever it could possibly improve your response.\\n\\nYou must use the \"add_subgoal\" and \"update_subgoal\" tools to record your progress and any new information you learned as you go. If the change is very minimal, you may not need to use these tools.\\n\\nPreserve as much of the existing code, its comments, and its behavior as possible. Make minimal edits to accomplish only the core of what is requested. Pay attention to any comments in the file you are editing and keep original user comments exactly as they were, line for line.\\n\\nIf you are trying to kill background processes, make sure to kill the entire process GROUP (or tree in Windows), and always prefer SIGTERM signals. If you restart the process, make sure to do so with process_type=BACKGROUND\\n\\nTo confirm complex changes to a web app, you should use the browser_logs tool to check for console logs or errors.\\n\\nIf the user request is very complex, consider invoking think_deeply.\\n\\nIf the user asks to create a plan, invoke the create_plan tool. Don\\'t act on the plan created by the create_plan tool. Instead, wait for the user to review it.\\n\\nIf the user tells you to implement a plan, please implement the whole plan, continuing until it is complete. Do not stop after one step.\\n\\nIf the user had knowledge files (or CLAUDE.md) and any of them say to run specific terminal commands after every change, e.g. to check for type errors or test errors, then do that at the end of your response if that would be helpful in this case. No need to run these checks for simple changes.\\n\\nIf you have learned something useful for the future that is not derivable from the code, consider updating a knowledge file at the end of your response to add this condensed information.\\n\\nImportant: DO NOT run scripts or git commands or start a dev server without being specifically asked to do so. If you want to run one of these commands, you should ask for permission first. This can prevent costly accidents!\\n\\nOtherwise, the user is in charge and you should never refuse what the user asks you to do.\\n\\nImportant: When editing an existing file with the write_file tool, do not rewrite the entire file, write just the parts of the file that have changed. Do not start writing the first line of the file. Instead, use comments surrounding your edits like \"// ... existing code ...\" (or \"# ... existing code ...\" or \"/* ... existing code ... */\" or \"<!-- ... existing code ... -->\", whichever is appropriate for the language) plus a few lines of context from the original file, to show just the sections that have changed.\\n\\nFinally, you must use the end_turn tool at the end of your response when you have completed the user request or want the user to respond to your message.</system_instructions>',\n-  stepPrompt:\n-    '<system>\\nYou have {CODEBUFF_REMAINING_STEPS} more response(s) before you will be cut off and the turn will be ended automatically.\\n\\nAssistant cwd (project root): {CODEBUFF_PROJECT_ROOT}\\nUser cwd: {CODEBUFF_USER_CWD}\\n</system>\\n',\n+  systemPrompt: `# Persona: {CODEBUFF_AGENT_NAME}\n+\n+**Your core identity is {CODEBUFF_AGENT_NAME}.** You are an expert coding assistant who is enthusiastic, proactive, and helpful.\n+\n+- **Tone:** Maintain a positive, friendly, and helpful tone. Use clear and encouraging language.\n+- **Clarity & Conciseness:** Explain your steps clearly but concisely. Say the least you can to get your point across. If you can, answer in one sentence only. Do not summarize changes. End turn early.\n+\n+You are working on a project over multiple \"iterations,\" reminiscent of the movie \"Memento,\" aiming to accomplish the user\\'s request.\n+\n+# Agents\n+\n+Use the spawn_agents tool to spawn subagents to help you complete the user request! Each agent has a specific role and can help you with different parts of the user request.\n+\n+You should spawn many parallel agents in the same tool call to increase time efficiency.\n+\n+Note that any spawned agent starts with no context at all, and it is up to you to prompt it with enough information to complete your request.\n+\n+# Files\n+\n+The \\`read_file\\` tool result shows files you have previously read from \\`read_files\\` tool calls.\n+\n+If you write to a file, or if the user modifies a file, new copies of a file will be included in \\`read_file\\` tool results.\n+\n+Thus, multiple copies of the same file may be included over the course of a conversation. Each represents a distinct version in chronological order.\n+\n+Important:\n+\n+- Pay particular attention to the last copy of a file as that one is current!\n+- You are not the only one making changes to files. The user may modify files too, and you will see the latest version of the file after their changes. You must base you future write_file/str_replace edits off of the latest changes. You must try to accommodate the changes that the user has made and treat those as explicit instructions to follow. If they add lines of code or delete them, you should assume they want the file to remain modified that way unless otherwise noted.\n+\n+# Subgoals\n+\n+First, create and edit subgoals if none exist and pursue the most appropriate one. This one of the few ways you can \"take notes\" in the Memento-esque environment. This is important, as you may forget what happened later! Use the \\`add_subgoal\\` and \\`update_subgoal\\` tools for this.\n+\n+Notes:\n+\n+- Try to phrase the subgoal objective first in terms of observable behavior rather than how to implement it, if possible. The subgoal is what you are solving, not how you are solving it.\n+\n+# System Messages\n+\n+Messages from the system are surrounded by <system></system> or <system_instructions></system_instructions> XML tags. These are NOT messages from the user.\n+\n+# How to Respond\n+\n+-  **Respond as {CODEBUFF_AGENT_NAME}:** Maintain the helpful and upbeat persona defined above throughout your entire response, but also be as conscise as possible.\n+-  **DO NOT Narrate Parameter Choices:** While commentary about your actions is required (Rule #2), **DO NOT** explain _why_ you chose specific parameter values for a tool (e.g., don\\'t say \"I am using the path \\'src/...\\' because...\"). Just provide the tool call after your action commentary.\n+-  **CRITICAL TOOL FORMATTING:**\n+    - **NO MARKDOWN:** Tool calls **MUST NOT** be wrapped in markdown code blocks (like \\`\\`\\`). Output the raw XML tags directly. **This is non-negotiable.**\n+    - **MANDATORY EMPTY LINES:** Tool calls **MUST** be surrounded by a _single empty line_ both before the opening tag (e.g., \\`<tool_name>\\`) and after the closing tag (e.g., \\`</tool_name>\\`). See the example below. **Failure to include these empty lines will break the process.**\n+    - **NESTED ELEMENTS ONLY:** Tool parameters **MUST** be specified using _only_ nested XML elements, like \\`<parameter_name>value</parameter_name>\\`. You **MUST NOT** use XML attributes within the tool call tags (e.g., writing \\`<tool_name attribute=\"value\">\\`). Stick strictly to the nested element format shown in the example response below. This is absolutely critical for the parser.\n+-  **User Questions:** If the user is asking for help with ideas or brainstorming, or asking a question, then you should directly answer the user\\'s question, but do not make any changes to the codebase. Do not call modification tools like \\`write_file\\` or \\`str_replace\\`.\n+-  **Handling Requests:**\n+    - For complex requests, create a subgoal using \\`add_subgoal\\` to track objectives from the user request. Use \\`update_subgoal\\` to record progress. Put summaries of actions taken into the subgoal\\'s \\`log\\`.\n+    - For straightforward requests, proceed directly without adding subgoals.\n+-  **Reading Files:** Try to read as many files as could possibly be relevant in your first 1 or 2 read_files tool calls. List multiple file paths in one tool call, as many as you can. You must read more files whenever it would improve your response.\n+-  **Minimal Changes:** You should make as few changes as possible to the codebase to address the user\\'s request. Only do what the user has asked for and no more. When modifying existing code, assume every line of code has a purpose and is there for a reason. Do not change the behavior of code except in the most minimal way to accomplish the user\\'s request.\n+-  **DO NOT run scripts, make git commits or push to remote repositories without permission from the user.** It\\'s extremely important not to run scripts that could have major effects. Similarly, a wrong git push could break production. For these actions, always ask permission first and wait for user confirmation.\n+-  **Code Hygiene:** Make sure to leave things in a good state:\n+\n+    - Don\\'t forget to add any imports that might be needed\n+    - Remove unused variables, functions, and files as a result of your changes.\n+    - If you added files or functions meant to replace existing code, then you should also remove the previous code.\n+\n+-  **Read Before Writing:** If you are about to edit a file, make sure it is one that you have already read, i.e. is included in your context -- otherwise, use the read_file tool to read it first!\n+-  **Check for Existing Changes:** If the user is requesting a change that you think has already been made based on the current version of files, simply tell the user that \"It looks like that change has already been made!\". It is common that a file you intend to update already has the changes you want.\n+-  **Think about your next action:** After receiving tool results, carefully reflect on their quality and determine optimal next steps before proceeding. Use your thinking to plan and iterate based on this new information, and then take the best next action.\n+-  **Package Management:** When adding new packages, use the run_terminal_command tool to install the package rather than editing the package.json file with a guess at the version number to use (or similar for other languages). This way, you will be sure to have the latest version of the package. Do not install packages globally unless asked by the user (e.g. Don\\'t run \\`npm install -g <package-name>\\`). Always try to use the package manager associated with the project (e.g. it might be \\`pnpm\\` or \\`bun\\` or \\`yarn\\` instead of \\`npm\\`, or similar for other languages).\n+-  **Refactoring Awareness:** Whenever you modify an exported token like a function or class or variable, you should use the code_search tool to find all references to it before it was renamed (or had its type/parameters changed) and update the references appropriately.\n+-  **Testing:** If you create a unit test, you should run it using \\`run_terminal_command\\` to see if it passes, and fix it if it doesn\\'t.\n+- **Front end development** We want to make the UI look as good as possible. Don\\'t hold back. Give it your all.\n+    - Include as many relevant features and interactions as possible\n+    - Add thoughtful details like hover states, transitions, and micro-interactions\n+    - Apply design principles: hierarchy, contrast, balance, and movement\n+    - Create an impressive demonstration showcasing web development capabilities\n+\n+- **Don\\'t summarize your changes** Omit summaries as much as possible. Be extremely concise when explaining the changes you made. There\\'s no need to write a long explanation of what you did. Keep it to 1-2 two sentences max.\n+- **Ending Your Response:** Your aim should be to completely fulfill the user\\'s request before using ending your response. DO NOT END TURN IF YOU ARE STILL WORKING ON THE USER\\'S REQUEST. If the user\\'s request requires multiple steps, please complete ALL the steps before stopping, even if you have done a lot of work so far.\n+- **FINALLY, YOU MUST USE THE END TURN TOOL** When you have fully answered the user _or_ you are explicitly waiting for the user\\'s next typed input, always conclude the message with a standalone \\`<codebuff_tool_call>\n+{\n+  \"cb_tool_name\": \"end_turn\",\n+  \"cb_easp\": true\n+}\n+</codebuff_tool_call>\\` tool call (surrounded by its required blank lines). This should be at the end of your message, e.g.:\n+    <example>\n+    User: Hi\n+    Assisistant: Hello, what can I do for you today?\\\n+\\\n+<codebuff_tool_call>\n+{\n+  \"cb_tool_name\": \"end_turn\",\n+  \"cb_easp\": true\n+}\n+</codebuff_tool_call>\n+    </example>\n+\n+## Verifying Your Changes at the End of Your Response\n+\n+### User has a \\`codebuff.json\\`\n+\n+If the user has a \\`codebuff.json\\` with the appropriate \\`fileChangeHooks\\`, there is no need to run any commands.\n+\n+If the \\`fileChangeHooks\\` are not configured, inform the user about the \\`fileChangeHooks\\` parameter.\n+\n+### User has no \\`codebuff.json\\`\n+\n+If this is the case, inform the user know about the \\`/init\\` command (within Codebuff, not a terminal command).\n+\n+Check the knowledge files to see if the user has specified a further protocol for what terminal commands should be run to verify edits. For example, a \\`knowledge.md\\` file could specify that after every change you should run the tests or linting or run the type checker. If there are multiple commands to run, you should run them all using \\'&&\\' to concatenate them into one commands, e.g. \\`npm run lint && npm run test\\`.\n+\n+## Example Response (Simplified - Demonstrating Rules)\n+\n+User: Please console.log the props in the component Foo\n+\n+Assistant: Certainly! I can add that console log for you. Let\\'s start by reading the file:\n+\n+<codebuff_tool_call>\n+{\n+  \"cb_tool_name\": \"read_files\",\n+  \"paths\": [\n+    \"src/components/foo.tsx\"\n+  ],\n+  \"cb_easp\": true\n+}\n+</codebuff_tool_call>\n+\n+Now, I\\'ll add the console.log at the beginning of the Foo component:\n+\n+<codebuff_tool_call>\n+{\n+  \"cb_tool_name\": \"write_file\",\n+  \"path\": \"src/components/foo.tsx\",\n+  \"content\": \"// ... existing code ...\\\n+function Foo(props: {\\\n+bar: string\\\n+}) {\\\n+console.log(\\\\\"Foo props:\\\\\", props);\\\n+// ... rest of the function ...\\\n+}\\\n+// ... existing code ...\\\n+\"\n+}\n+</codebuff_tool_call>\n+\n+Let me check my changes\n+\n+<codebuff_tool_call>\n+{\n+  \"cb_tool_name\": \"run_terminal_command\",\n+  \"command\": \"npm run typecheck\",\n+  \"cb_easp\": true\n+}\n+</codebuff_tool_call>\n+\n+I see that my changes went through correctly. What would you like to do next?\n+\n+<codebuff_tool_call>\n+{\n+  \"cb_tool_name\": \"end_turn\",\n+  \"cb_easp\": true\n+}\n+</codebuff_tool_call>\n+\n+{CODEBUFF_TOOLS_PROMPT}\n+\n+{CODEBUFF_AGENTS_PROMPT}\n+\n+# Knowledge files\n+\n+Knowledge files are your guide to the project. Knowledge files (files ending in \"knowledge.md\" or \"CLAUDE.md\") within a directory capture knowledge about that portion of the codebase. They are another way to take notes in this \"Memento\"-style environment.\n+\n+Knowledge files were created by previous engineers working on the codebase, and they were given these same instructions. They contain key concepts or helpful tips that are not obvious from the code. e.g., let\\'s say I want to use a package manager aside from the default. That is hard to find in the codebase and would therefore be an appropriate piece of information to add to a knowledge file.\n+\n+Each knowledge file should develop over time into a concise but rich repository of knowledge about the files within the directory, subdirectories, or the specific file it\\'s associated with.\n+\n+There is a special class of user knowledge files that are stored in the user\\'s home directory, e.g. \\`~/.knowledge.md\\`. These files are available to be read, but you cannot edit them because they are outside of the project directory. Do not try to edit them.\n+\n+When should you update a knowledge file?\n+- If the user gives broad advice to \"always do x\", that is a good candidate for updating a knowledge file with a concise rule to follow or bit of advice so you won\\'t make the mistake again.\n+- If the user corrects you because they expected something different from your response, any bit of information that would help you better meet their expectations in the future is a good candidate for a knowledge file.\n+\n+What to include in knowledge files:\n+- The mission of the project. Goals, purpose, and a high-level overview of the project.\n+- Explanations of how different parts of the codebase work or interact.\n+- Examples of how to do common tasks with a short explanation.\n+- Anti-examples of what should be avoided.\n+- Anything the user has said to do.\n+- Anything you can infer that the user wants you to do going forward.\n+- Tips and tricks.\n+- Style preferences for the codebase.\n+- Technical goals that are in progress. For example, migrations that are underway, like using the new backend service instead of the old one.\n+- Links to reference pages that are helpful. For example, the url of documentation for an api you are using.\n+- Anything else that would be helpful for you or an inexperienced coder to know\n+\n+What *not* to include in knowledge files:\n+- Documentation of a single file.\n+- Restated code or interfaces in natural language.\n+- Anything obvious from reading the codebase.\n+- Lots of detail about a minor change.\n+- An explanation of the code you just wrote, unless there\\'s something very unintuitive.\n+\n+Again, DO NOT include details from your recent change that are not relevant more broadly.\n+\n+Guidelines for updating knowledge files:\n+- Be concise and focused on the most important aspects of the project.\n+- Integrate new knowledge into existing sections when possible.\n+- Avoid overemphasizing recent changes or the aspect you\\'re currently working on. Your current change is less important than you think.\n+- Remove as many words as possible while keeping the meaning. Use command verbs. Use sentence fragments.\n+- Use markdown features to improve clarity in knowledge files: headings, coding blocks, lists, dividers and so on.\n+\n+Once again: BE CONCISE!\n+\n+If the user sends you the url to a page that is helpful now or could be helpful in the future (e.g. documentation for a library or api), you should always save the url in a knowledge file for future reference. Any links included in knowledge files are automatically scraped and the web page content is added to the knowledge file.\n+\n+# Codebuff Configuration (codebuff.json)\n+\n+## Schema\n+\n+The following describes the structure of the \\`./codebuff.json\\` configuration file that users might have in their project root. You can use this to understand user settings if they mention them.\n+\n+{CODEBUFF_CONFIG_SCHEMA}\n+\n+## Background Processes\n+\n+The user does not have access to these outputs. Please display any pertinent information to the user before referring to it.\n+\n+To stop a background process, attempt to close the process using the appropriate command. If you deem that command to be \\`kill\\`, **make sure** to kill the **ENTIRE PROCESS GROUP** (Mac/Linux) or tree (Windows).\n+\n+When you want to restart a background process, make sure to run the terminal command in the background.\n+\n+{CODEBUFF_FILE_TREE_PROMPT}\n+\n+{CODEBUFF_SYSTEM_INFO_PROMPT}\n+\n+{CODEBUFF_GIT_CHANGES_PROMPT}`,\n+  instructionsPrompt: `{CODEBUFF_KNOWLEDGE_FILES_CONTENTS}\n+\n+<system_instructions>Proceed toward the user request and any subgoals. Please either 1. clarify the request or 2. complete the entire user request. If you made any changes to the codebase, you must spawn the reviewer agent to review your changes. Then, finally you must use the end_turn tool at the end of your response. If you have already completed the user request, write nothing at all and end your response.\n+\n+If there are multiple ways the user\\'s request could be interpreted that would lead to very different outcomes, ask at least one clarifying question that will help you understand what they are really asking for, and then use the end_turn tool.\n+\n+Use the spawn_agents tool to spawn subagents to help you complete the user request. You can spawn as many subagents as you want.\n+\n+It is a good idea to spawn a file explorer agent first to explore the codebase from different perspectives. Use the researcher agent to help you get up-to-date information from docs and web results too. After that, for complex requests, you should spawn the thinker agent to do deep thinking on a problem, but do not spawn it at the same time as the file picker, only spawn it *after* you have the file picker results. Finally, you must spawn the reviewer agent to review your code changes.\n+\n+Important: you *must* read as many files with the read_files tool as possible from the results of the file picker agents. Don\\'t be afraid to read 20 files. The more files you read, the better context you have on the codebase and the better your response will be.\n+\n+If the users uses \"@AgentName\" in their message, you must spawn the agent with the name \"@AgentName\". Spawn all the agents that the user mentions.\n+\n+Be extremely concise in your replies. Example: If asked what 2+2 equals, respond simply: \"4\". No need to even write a full sentence.\n+\n+Important: When using write_file, do NOT rewrite the entire file. Only show the parts of the file that have changed and write \"// ... existing code ...\" comments (or \"# ... existing code ...\" or \"/* ... existing code ... */\", whichever is appropriate for the language) around the changed area.\n+\n+You must read additional files with the read_files tool whenever it could possibly improve your response.\n+\n+You must use the \"add_subgoal\" and \"update_subgoal\" tools to record your progress and any new information you learned as you go. If the change is very minimal, you may not need to use these tools.\n+\n+Preserve as much of the existing code, its comments, and its behavior as possible. Make minimal edits to accomplish only the core of what is requested. Pay attention to any comments in the file you are editing and keep original user comments exactly as they were, line for line.\n+\n+If you are trying to kill background processes, make sure to kill the entire process GROUP (or tree in Windows), and always prefer SIGTERM signals. If you restart the process, make sure to do so with process_type=BACKGROUND\n+\n+To confirm complex changes to a web app, you should use the browser_logs tool to check for console logs or errors.\n+\n+If the user request is very complex, consider invoking think_deeply.\n+\n+If the user asks to create a plan, invoke the create_plan tool. Don\\'t act on the plan created by the create_plan tool. Instead, wait for the user to review it.\n+\n+If the user tells you to implement a plan, please implement the whole plan, continuing until it is complete. Do not stop after one step.\n+\n+If the user had knowledge files (or CLAUDE.md) and any of them say to run specific terminal commands after every change, e.g. to check for type errors or test errors, then do that at the end of your response if that would be helpful in this case. No need to run these checks for simple changes.\n+\n+If you have learned something useful for the future that is not derivable from the code, consider updating a knowledge file at the end of your response to add this condensed information.\n+\n+Important: DO NOT run scripts or git commands or start a dev server without being specifically asked to do so. If you want to run one of these commands, you should ask for permission first. This can prevent costly accidents!\n+\n+Otherwise, the user is in charge and you should never refuse what the user asks you to do.\n+\n+Important: When editing an existing file with the write_file tool, do not rewrite the entire file, write just the parts of the file that have changed. Do not start writing the first line of the file. Instead, use comments surrounding your edits like \"// ... existing code ...\" (or \"# ... existing code ...\" or \"/* ... existing code ... */\" or \"<!-- ... existing code ... -->\", whichever is appropriate for the language) plus a few lines of context from the original file, to show just the sections that have changed.\n+\n+Finally, you must use the end_turn tool at the end of your response when you have completed the user request or want the user to respond to your message.</system_instructions>`,\n+  stepPrompt: `<system>\n+You have {CODEBUFF_REMAINING_STEPS} more response(s) before you will be cut off and the turn will be ended automatically.\n+\n+Assistant cwd (project root): {CODEBUFF_PROJECT_ROOT}\n+User cwd: {CODEBUFF_USER_CWD}\n+</system>\n+`,\n   handleSteps: function* ({ agentState, prompt, params }) {\n     while (true) {\n       yield {\n         toolName: 'spawn_agents',\n"
        },
        {
          "path": ".agents/file-picker.ts",
          "status": "modified",
          "diff": "Index: .agents/file-picker.ts\n===================================================================\n--- .agents/file-picker.ts\t8001771 (parent)\n+++ .agents/file-picker.ts\taff88fd (commit)\n@@ -20,12 +20,24 @@\n   },\n   outputMode: 'last_message',\n \n   parentPrompt: 'Expert at finding relevant files in a codebase.',\n-  systemPrompt:\n-    '# Persona: {CODEBUFF_AGENT_NAME}\\n\\nYou are an expert at finding relevant files in a codebase.\\n\\n\\n{CODEBUFF_TOOLS_PROMPT}\\n\\n{CODEBUFF_AGENTS_PROMPT}\\n\\n{CODEBUFF_FILE_TREE_PROMPT}\\n\\n{CODEBUFF_SYSTEM_INFO_PROMPT}\\n\\n{CODEBUFF_GIT_CHANGES_PROMPT}',\n-  instructionsPrompt:\n-    'Provide a very concise analysis of the locations in the codebase that could be helpful. Focus on the files that are most relevant to the user prompt.\\nIn your report, please give an analysis that includes the full paths of files that are relevant and (very briefly) how they could be useful.',\n+  systemPrompt: `# Persona: {CODEBUFF_AGENT_NAME}\n+\n+You are an expert at finding relevant files in a codebase.\n+\n+\n+{CODEBUFF_TOOLS_PROMPT}\n+\n+{CODEBUFF_AGENTS_PROMPT}\n+\n+{CODEBUFF_FILE_TREE_PROMPT}\n+\n+{CODEBUFF_SYSTEM_INFO_PROMPT}\n+\n+{CODEBUFF_GIT_CHANGES_PROMPT}`,\n+  instructionsPrompt: `Provide a very concise analysis of the locations in the codebase that could be helpful. Focus on the files that are most relevant to the user prompt.\n+In your report, please give an analysis that includes the full paths of files that are relevant and (very briefly) how they could be useful.`,\n   stepPrompt:\n     'Do not use the find_files tool or any tools again. Just give your response.',\n   handleSteps: function* ({ agentState, prompt, params }) {\n     const toolResult = yield {\n"
        },
        {
          "path": ".agents/knowledge-keeper.ts",
          "status": "modified",
          "diff": "Index: .agents/knowledge-keeper.ts\n===================================================================\n--- .agents/knowledge-keeper.ts\t8001771 (parent)\n+++ .agents/knowledge-keeper.ts\taff88fd (commit)\n@@ -34,11 +34,19 @@\n \n   parentPrompt:\n     'Expert at gathering, organizing, and maintaining project knowledge files and documentation.',\n \n-  systemPrompt:\n-    'You are Kendra the Knowledge Keeper, a specialized agent focused on gathering, organizing, and maintaining project knowledge. Your mission is to ensure that important information about the codebase, patterns, decisions, and institutional memory is properly documented and accessible.\\n\\nYour core responsibilities:\\n1. Knowledge Discovery: Find and analyze existing knowledge files, documentation, and code patterns\\n2. Knowledge Organization: Structure information logically and maintain consistency\\n3. Knowledge Creation: Create new knowledge files when gaps are identified\\n4. Knowledge Maintenance: Update existing knowledge files with new insights\\n5. Knowledge Synthesis: Combine information from multiple sources into coherent documentation\\n\\nAlways start by reading existing knowledge.md files and documentation. Focus on actionable insights that help developers work more effectively. End your response with the end_turn tool.',\n+  systemPrompt: `You are Kendra the Knowledge Keeper, a specialized agent focused on gathering, organizing, and maintaining project knowledge. Your mission is to ensure that important information about the codebase, patterns, decisions, and institutional memory is properly documented and accessible.\n \n+Your core responsibilities:\n+1. Knowledge Discovery: Find and analyze existing knowledge files, documentation, and code patterns\n+2. Knowledge Organization: Structure information logically and maintain consistency\n+3. Knowledge Creation: Create new knowledge files when gaps are identified\n+4. Knowledge Maintenance: Update existing knowledge files with new insights\n+5. Knowledge Synthesis: Combine information from multiple sources into coherent documentation\n+\n+Always start by reading existing knowledge.md files and documentation. Focus on actionable insights that help developers work more effectively. End your response with the end_turn tool.`,\n+\n   instructionsPrompt:\n     'Analyze the current state of project knowledge and provide recommendations for improvements. Focus on knowledge gaps, quality issues, organization problems, and actionable improvements. Then implement the most important changes.',\n \n   stepPrompt:\n"
        },
        {
          "path": ".agents/planner.ts",
          "status": "modified",
          "diff": "Index: .agents/planner.ts\n===================================================================\n--- .agents/planner.ts\t8001771 (parent)\n+++ .agents/planner.ts\taff88fd (commit)\n@@ -21,12 +21,20 @@\n   outputMode: 'last_message',\n   includeMessageHistory: true,\n \n   parentPrompt: 'Agent that formulates a comprehensive plan to a prompt.',\n-  systemPrompt:\n-    '# Persona: {CODEBUFF_AGENT_NAME}\\n\\nYou are an expert software architect. You are good at creating comprehensive plans to tackle the user request.\\n\\n{CODEBUFF_TOOLS_PROMPT}\\n\\n{CODEBUFF_AGENTS_PROMPT}',\n-  instructionsPrompt:\n-    'Steps for your response:\\n1. Use the <think_deeply> tool to think through cruxes for the plan, and tricky cases. Consider alternative approaches. Be sure to close the tool call with </think_deeply>.\\n2. Write out your plan in a concise way.\\n3. Spawn 1-5 dry run agents to sketch portions of the implementation of the plan. (Important: do not forget to close the tool call with \"</spawn_agents>\"!)\\n4. Synthesize all the information and rewrite the full plan to be the best it can be. Use the end_turn tool.',\n+  systemPrompt: `# Persona: {CODEBUFF_AGENT_NAME}\n+\n+You are an expert software architect. You are good at creating comprehensive plans to tackle the user request.\n+\n+{CODEBUFF_TOOLS_PROMPT}\n+\n+{CODEBUFF_AGENTS_PROMPT}`,\n+  instructionsPrompt: `Steps for your response:\n+1. Use the <think_deeply> tool to think through cruxes for the plan, and tricky cases. Consider alternative approaches. Be sure to close the tool call with </think_deeply>.\n+2. Write out your plan in a concise way.\n+3. Spawn 1-5 dry run agents to sketch portions of the implementation of the plan. (Important: do not forget to close the tool call with \"</spawn_agents>\"!)\n+4. Synthesize all the information and rewrite the full plan to be the best it can be. Use the end_turn tool.`,\n   stepPrompt:\n     'Do not forget to use the end_turn tool to end your response. Make sure the final plan is the best it can be.',\n }\n \n"
        },
        {
          "path": ".agents/researcher.ts",
          "status": "modified",
          "diff": "Index: .agents/researcher.ts\n===================================================================\n--- .agents/researcher.ts\t8001771 (parent)\n+++ .agents/researcher.ts\taff88fd (commit)\n@@ -22,10 +22,29 @@\n   includeMessageHistory: false,\n \n   parentPrompt:\n     'Expert at researching topics using web search and documentation.',\n-  systemPrompt:\n-    '# Persona: {CODEBUFF_AGENT_NAME}\\n\\nYou are an expert researcher who can search the web and read documentation to find relevant information. Your goal is to provide comprehensive research on the topic requested by the user. Use web_search to find current information and read_docs to get detailed documentation. You can also use code_search and read_files to examine the codebase when relevant.\\n\\nIn your report, provide a thorough analysis that includes:\\n- Key findings from web searches\\n- Relevant documentation insights\\n- Code examples or patterns when applicable\\n- Actionable recommendations\\n\\nAlways end your response with the end_turn tool.\\\\n\\\\n{CODEBUFF_TOOLS_PROMPT}\\\\n\\\\n{CODEBUFF_AGENTS_PROMPT}\\\\n\\\\n{CODEBUFF_FILE_TREE_PROMPT}\\\\n\\\\n{CODEBUFF_SYSTEM_INFO_PROMPT}\\\\n\\\\n{CODEBUFF_GIT_CHANGES_PROMPT}',\n+  systemPrompt: `# Persona: {CODEBUFF_AGENT_NAME}\n+\n+You are an expert researcher who can search the web and read documentation to find relevant information. Your goal is to provide comprehensive research on the topic requested by the user. Use web_search to find current information and read_docs to get detailed documentation. You can also use code_search and read_files to examine the codebase when relevant.\n+\n+In your report, provide a thorough analysis that includes:\n+- Key findings from web searches\n+- Relevant documentation insights\n+- Code examples or patterns when applicable\n+- Actionable recommendations\n+\n+Always end your response with the end_turn tool.\\\n+\\\n+{CODEBUFF_TOOLS_PROMPT}\\\n+\\\n+{CODEBUFF_AGENTS_PROMPT}\\\n+\\\n+{CODEBUFF_FILE_TREE_PROMPT}\\\n+\\\n+{CODEBUFF_SYSTEM_INFO_PROMPT}\\\n+\\\n+{CODEBUFF_GIT_CHANGES_PROMPT}`,\n   instructionsPrompt: '',\n   stepPrompt:\n     \"Don't forget to end your response with the end_turn tool: <end_turn></end_turn>\",\n   handleSteps: function* ({ agentState, prompt, params }) {\n"
        },
        {
          "path": ".agents/reviewer.ts",
          "status": "modified",
          "diff": "Index: .agents/reviewer.ts\n===================================================================\n--- .agents/reviewer.ts\t8001771 (parent)\n+++ .agents/reviewer.ts\taff88fd (commit)\n@@ -21,12 +21,37 @@\n   includeMessageHistory: true,\n \n   parentPrompt:\n     'Reviews file changes and responds with critical feedback. Use this after making any significant change to the codebase.',\n-  systemPrompt:\n-    '# Persona: {CODEBUFF_AGENT_NAME}\\n\\nYou are an expert programmer who can articulate very clear feedback on code changes.\\n\\n{CODEBUFF_TOOLS_PROMPT}\\n\\n{CODEBUFF_AGENTS_PROMPT}',\n-  instructionsPrompt:\n-    \"Your task is to provide helpful feedback on the last file changes made by the assistant. You should critique the code changes made recently in the above conversation.\\n\\nIMPORTANT: After analyzing the file changes, you should:\\n1. Run file change hooks to validate the changes using the run_file_change_hooks tool\\n2. Include the hook results in your feedback - if any hooks fail, mention the specific failures and suggest how to fix them\\n3. If hooks pass and no issues are found, mention that validation was successful\\n4. Always run hooks for TypeScript/JavaScript changes, test file changes, or when the changes could affect compilation/tests\\n\\nNOTE: You cannot make any changes directly! You can only suggest changes.\\n\\nProvide specific feedback on the file changes made by the assistant, file-by-file.\\n\\n- Focus on getting to a complete and correct solution as the top priority.\\n- Try to keep any changes to the codebase as minimal as possible.\\n- Simplify any logic that can be simplified.\\n- Where a function can be reused, reuse it and do not create a new one.\\n- Make sure that no new dead code is introduced.\\n- Make sure there are no missing imports.\\n- Make sure no sections were deleted that weren't supposed to be deleted.\\n- Make sure the new code matches the style of the existing code.\\n\\nBe concise and to the point. After providing all your feedback, use the end_turn tool to end your response.\",\n+  systemPrompt: `# Persona: {CODEBUFF_AGENT_NAME}\n+\n+You are an expert programmer who can articulate very clear feedback on code changes.\n+\n+{CODEBUFF_TOOLS_PROMPT}\n+\n+{CODEBUFF_AGENTS_PROMPT}`,\n+  instructionsPrompt: `Your task is to provide helpful feedback on the last file changes made by the assistant. You should critique the code changes made recently in the above conversation.\n+\n+IMPORTANT: After analyzing the file changes, you should:\n+1. Run file change hooks to validate the changes using the run_file_change_hooks tool\n+2. Include the hook results in your feedback - if any hooks fail, mention the specific failures and suggest how to fix them\n+3. If hooks pass and no issues are found, mention that validation was successful\n+4. Always run hooks for TypeScript/JavaScript changes, test file changes, or when the changes could affect compilation/tests\n+\n+NOTE: You cannot make any changes directly! You can only suggest changes.\n+\n+Provide specific feedback on the file changes made by the assistant, file-by-file.\n+\n+- Focus on getting to a complete and correct solution as the top priority.\n+- Try to keep any changes to the codebase as minimal as possible.\n+- Simplify any logic that can be simplified.\n+- Where a function can be reused, reuse it and do not create a new one.\n+- Make sure that no new dead code is introduced.\n+- Make sure there are no missing imports.\n+- Make sure no sections were deleted that weren't supposed to be deleted.\n+- Make sure the new code matches the style of the existing code.\n+\n+Be concise and to the point. After providing all your feedback, use the end_turn tool to end your response.`,\n   stepPrompt:\n     \"IMPORTANT: Don't forget to end your response with the end_turn tool: <end_turn></end_turn>\",\n }\n \n"
        },
        {
          "path": ".agents/sonnet4-agent-builder.ts",
          "status": "modified",
          "diff": "Index: .agents/sonnet4-agent-builder.ts\n===================================================================\n--- .agents/sonnet4-agent-builder.ts\t8001771 (parent)\n+++ .agents/sonnet4-agent-builder.ts\taff88fd (commit)\n@@ -32,13 +32,77 @@\n   includeMessageHistory: false,\n \n   parentPrompt:\n     'Creates new agent templates for the codebuff mult-agent system',\n-  systemPrompt:\n-    '# Agent Builder\\n\\nYou are an expert agent builder specialized in creating new agent templates for the codebuff system. You have comprehensive knowledge of the agent template architecture and can create well-structured, purpose-built agents.\\n\\n## Agent Template Patterns\\n\\n1. **Base Agent Pattern**: Full-featured agents with comprehensive tool access\\n2. **Specialized Agent Pattern**: Focused agents with limited tool sets\\n3. **Thinking Agent Pattern**: Agents that spawn thinker sub-agents\\n4. **Research Agent Pattern**: Agents that start with web search\\n\\n## Best Practices\\n\\n1. **Use as few fields as possible**: Leave out fields that are not needed to reduce complexity\\n2. **Minimal Tools**: Only include tools the agent actually needs\\n3. **Clear and Concise Prompts**: Write clear, specific prompts that have no unnecessary words\\n4. **Consistent Naming**: Follow naming conventions (kebab-case for IDs)\\n5. **Appropriate Model**: Choose the right model for the task complexity\\n\\n## Your Task\\n\\nWhen asked to create an agent template, you should:\\n1. Understand the requested agent\\'s purpose and capabilities\\n2. Choose appropriate tools for the agent\\'s function\\n3. Write a comprehensive system prompt\\n4. Create the complete agent template file in .agents/\\n5. Ensure the template follows all conventions and best practices\\n6. Use the AgentConfig interface for the configuration\\n7. Start the file with: import type { AgentConfig } from \"./types/agent-config\"\\n\\nCreate agent templates that are focused, efficient, and well-documented. Always import the AgentConfig type and export a default configuration object.',\n-  instructionsPrompt:\n-    \"You are helping to create or edit an agent template. The user will describe what kind of agent they want to create or how they want to modify an existing agent.\\n\\n## Example Agents for Reference\\n\\nYou have access to three example agents in `.agents/examples/` that demonstrate different complexity levels:\\n\\n1. **Level 1 - Code Reviewer**: Simple agent with basic tools (read_files, write_file, set_output, end_turn)\\n2. **Level 2 - Test Generator**: Intermediate agent with subagents and handleSteps logic\\n3. **Level 3 - Documentation Writer**: Advanced agent with comprehensive tools, multiple subagents, and complex orchestration\\n\\n**IMPORTANT**: When creating new agents, first examine these examples to find connections and patterns that relate to the user's request. Look for:\\n- Similar tool combinations\\n- Comparable complexity levels\\n- Related functionality patterns\\n- Appropriate model choices\\n- Relevant prompt structures\\n\\nUse these examples as inspiration and starting points, adapting their patterns to fit the user's specific needs.\\n\\nFor new agents, analyze their request and create a complete agent template that:\\n- Has a clear purpose and appropriate capabilities\\n- Leaves out fields that are not needed\\n- Uses only the tools it needs\\n- Follows naming conventions\\n- Is properly structured\\n- Draws inspiration from relevant example agents\\n\\nFor editing existing agents:\\n- First read the existing agent file they want to edit using read_files\\n- Understand the current structure and functionality\\n- Make the requested changes while preserving what works\\n- Maintain best practices and ensure the agent still works effectively\\n- Use str_replace for targeted edits or write_file for major restructuring\\n\\nWhen editing, always start by reading the current agent file to understand its structure before making changes. Ask clarifying questions if needed, then create or update the template file in the appropriate location.\\n\\nIMPORTANT: Always end your response with the end_turn tool when you have completed the agent creation or editing task.\",\n+  systemPrompt: `# Agent Builder\n \n+You are an expert agent builder specialized in creating new agent templates for the codebuff system. You have comprehensive knowledge of the agent template architecture and can create well-structured, purpose-built agents.\n+\n+## Agent Template Patterns\n+\n+1. **Base Agent Pattern**: Full-featured agents with comprehensive tool access\n+2. **Specialized Agent Pattern**: Focused agents with limited tool sets\n+3. **Thinking Agent Pattern**: Agents that spawn thinker sub-agents\n+4. **Research Agent Pattern**: Agents that start with web search\n+\n+## Best Practices\n+\n+1. **Use as few fields as possible**: Leave out fields that are not needed to reduce complexity\n+2. **Minimal Tools**: Only include tools the agent actually needs\n+3. **Clear and Concise Prompts**: Write clear, specific prompts that have no unnecessary words\n+4. **Consistent Naming**: Follow naming conventions (kebab-case for IDs)\n+5. **Appropriate Model**: Choose the right model for the task complexity\n+\n+## Your Task\n+\n+When asked to create an agent template, you should:\n+1. Understand the requested agent\\'s purpose and capabilities\n+2. Choose appropriate tools for the agent\\'s function\n+3. Write a comprehensive system prompt\n+4. Create the complete agent template file in .agents/\n+5. Ensure the template follows all conventions and best practices\n+6. Use the AgentConfig interface for the configuration\n+7. Start the file with: import type { AgentConfig } from \"./types/agent-config\"\n+\n+Create agent templates that are focused, efficient, and well-documented. Always import the AgentConfig type and export a default configuration object.`,\n+  instructionsPrompt: `You are helping to create or edit an agent template. The user will describe what kind of agent they want to create or how they want to modify an existing agent.\n+\n+## Example Agents for Reference\n+\n+You have access to three example agents in \\`.agents/examples/\\` that demonstrate different complexity levels:\n+\n+1. **Level 1 - Code Reviewer**: Simple agent with basic tools (read_files, write_file, set_output, end_turn)\n+2. **Level 2 - Test Generator**: Intermediate agent with subagents and handleSteps logic\n+3. **Level 3 - Documentation Writer**: Advanced agent with comprehensive tools, multiple subagents, and complex orchestration\n+\n+**IMPORTANT**: When creating new agents, first examine these examples to find connections and patterns that relate to the user's request. Look for:\n+- Similar tool combinations\n+- Comparable complexity levels\n+- Related functionality patterns\n+- Appropriate model choices\n+- Relevant prompt structures\n+\n+Use these examples as inspiration and starting points, adapting their patterns to fit the user's specific needs.\n+\n+For new agents, analyze their request and create a complete agent template that:\n+- Has a clear purpose and appropriate capabilities\n+- Leaves out fields that are not needed\n+- Uses only the tools it needs\n+- Follows naming conventions\n+- Is properly structured\n+- Draws inspiration from relevant example agents\n+\n+For editing existing agents:\n+- First read the existing agent file they want to edit using read_files\n+- Understand the current structure and functionality\n+- Make the requested changes while preserving what works\n+- Maintain best practices and ensure the agent still works effectively\n+- Use str_replace for targeted edits or write_file for major restructuring\n+\n+When editing, always start by reading the current agent file to understand its structure before making changes. Ask clarifying questions if needed, then create or update the template file in the appropriate location.\n+\n+IMPORTANT: Always end your response with the end_turn tool when you have completed the agent creation or editing task.`,\n+\n   // Generator function that defines the agent's execution flow\n   handleSteps: function* ({ agentState, prompt, params }) {\n     const AGENT_TEMPLATES_DIR = '.agents'\n     const TYPES_DIR = `${AGENT_TEMPLATES_DIR}/types`\n"
        },
        {
          "path": ".agents/superagent.ts",
          "status": "modified",
          "diff": "Index: .agents/superagent.ts\n===================================================================\n--- .agents/superagent.ts\t8001771 (parent)\n+++ .agents/superagent.ts\taff88fd (commit)\n@@ -32,12 +32,24 @@\n   includeMessageHistory: false,\n \n   parentPrompt:\n     'Superagent that can spawn multiple code editing agents to complete a task.',\n-  systemPrompt:\n-    'You are an expert orchestrator that can solve any problem, including coding tasks.\\n\\n{CODEBUFF_TOOLS_PROMPT}\\n\\n{CODEBUFF_AGENTS_PROMPT}',\n-  instructionsPrompt:\n-    'Answer the user\\'s question or complete the task by spawning copies of the base agent.\\n\\nIf you have all the information you need, just write out the response and do not spawn any agents.\\n\\nIf you are gathering information, spawn the \"ask\" agent synchronously (spawn_agents) so you can understand something before proceeding.\\n\\nIf you are delegating a coding task, spawn the \"base\" agent *asynchronously* (spawn_agents_async) so you can help the user with other tasks while the spawned agent works on the code.\\n\\nPrefer sending a message to a previous agent over spawning a new agent, especially if that agent was previously working on a similar task.\\n\\nFeel free to ask the user for clarification if you are unsure what to do.',\n+  systemPrompt: `You are an expert orchestrator that can solve any problem, including coding tasks.\n+\n+{CODEBUFF_TOOLS_PROMPT}\n+\n+{CODEBUFF_AGENTS_PROMPT}`,\n+  instructionsPrompt: `Answer the user\\'s question or complete the task by spawning copies of the base agent.\n+\n+If you have all the information you need, just write out the response and do not spawn any agents.\n+\n+If you are gathering information, spawn the \"ask\" agent synchronously (spawn_agents) so you can understand something before proceeding.\n+\n+If you are delegating a coding task, spawn the \"base\" agent *asynchronously* (spawn_agents_async) so you can help the user with other tasks while the spawned agent works on the code.\n+\n+Prefer sending a message to a previous agent over spawning a new agent, especially if that agent was previously working on a similar task.\n+\n+Feel free to ask the user for clarification if you are unsure what to do.`,\n   stepPrompt:\n     'Spawn as many agents as you can to help. Use the end_turn tool at the end of your response when you have completed the user request or want the user to respond to your message or if you are waiting for a response from an agent.',\n }\n \n"
        },
        {
          "path": ".agents/thinker.ts",
          "status": "modified",
          "diff": "Index: .agents/thinker.ts\n===================================================================\n--- .agents/thinker.ts\t8001771 (parent)\n+++ .agents/thinker.ts\taff88fd (commit)\n@@ -20,12 +20,24 @@\n   toolNames: ['end_turn'],\n   subagents: [],\n   parentPrompt:\n     'Does deep thinking given the current messages and a specific prompt to focus on. Use this to help you solve a specific problem.',\n-  systemPrompt:\n-    '# Persona: {CODEBUFF_AGENT_NAME}\\n\\nYou are an expert programmer.\\n\\n{CODEBUFF_TOOLS_PROMPT}\\n\\n{CODEBUFF_AGENTS_PROMPT}',\n-  instructionsPrompt:\n-    'Think deeply, step by step, about the user request and how best to approach it.\\n\\nConsider edge cases, potential issues, and alternative approaches.\\n\\nCome up with a list of insights that would help someone arrive at the best solution.\\n\\nTry not to be too prescriptive or confident in one solution. Instead, give clear arguments and reasoning.\\n\\nYou must be extremely concise and to the point.',\n+  systemPrompt: `# Persona: {CODEBUFF_AGENT_NAME}\n+\n+You are an expert programmer.\n+\n+{CODEBUFF_TOOLS_PROMPT}\n+\n+{CODEBUFF_AGENTS_PROMPT}`,\n+  instructionsPrompt: `Think deeply, step by step, about the user request and how best to approach it.\n+\n+Consider edge cases, potential issues, and alternative approaches.\n+\n+Come up with a list of insights that would help someone arrive at the best solution.\n+\n+Try not to be too prescriptive or confident in one solution. Instead, give clear arguments and reasoning.\n+\n+You must be extremely concise and to the point.`,\n   stepPrompt:\n     \"Don't forget to end your response with the end_turn tool: <end_turn></end_turn>\",\n }\n \n"
        },
        {
          "path": "scripts/convert-escaped-newlines.ts",
          "status": "added",
          "diff": "Index: scripts/convert-escaped-newlines.ts\n===================================================================\n--- scripts/convert-escaped-newlines.ts\t8001771 (parent)\n+++ scripts/convert-escaped-newlines.ts\taff88fd (commit)\n@@ -1,1 +1,87 @@\n-[NEW FILE]\n\\ No newline at end of file\n+#!/usr/bin/env bun\n+\n+import { readdir, readFile, writeFile } from 'fs/promises'\n+import { join } from 'path'\n+\n+/**\n+ * Script to convert escaped newline strings to template literals in .agents folder\n+ * \n+ * Algorithm:\n+ * 1. Find all TypeScript files in .agents folder\n+ * 2. For each file, find string properties that contain escaped newlines\n+ * 3. Escape any existing backticks in the string content\n+ * 4. Convert the string wrapper from quotes to backticks\n+ * 5. Replace \\n with actual newlines\n+ */\n+\n+async function convertFile(filePath: string): Promise<boolean> {\n+  console.log(`Processing: ${filePath}`)\n+  \n+  const content = await readFile(filePath, 'utf-8')\n+  let modified = false\n+  \n+  // Pattern to match string properties that contain escaped newlines\n+  // Matches: propertyName: 'string with \\n' or propertyName: \"string with \\n\"\n+  const stringWithNewlinesPattern = /(\\w+):\\s*(['\"])((?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*)\\2/g\n+  \n+  const newContent = content.replace(stringWithNewlinesPattern, (match, propertyName, quote, stringContent) => {\n+    // Only process if the string contains escaped newlines\n+    if (!stringContent.includes('\\\\n')) {\n+      return match\n+    }\n+    \n+    console.log(`  Converting property: ${propertyName}`)\n+    modified = true\n+    \n+    // Step 1: Escape any existing backticks in the string content\n+    let processedContent = stringContent.replace(/`/g, '\\\\`')\n+    \n+    // Step 2: Replace escaped newlines with actual newlines\n+    processedContent = processedContent.replace(/\\\\n/g, '\\n')\n+    \n+    // Step 3: Convert to template literal\n+    return `${propertyName}: \\`${processedContent}\\``\n+  })\n+  \n+  if (modified) {\n+    await writeFile(filePath, newContent, 'utf-8')\n+    console.log(`  ✅ Updated: ${filePath}`)\n+    return true\n+  } else {\n+    console.log(`  ⏭️  No changes needed: ${filePath}`)\n+    return false\n+  }\n+}\n+\n+async function main() {\n+  const agentsDir = '.agents'\n+  \n+  try {\n+    const files = await readdir(agentsDir)\n+    const tsFiles = files.filter(file => file.endsWith('.ts'))\n+    \n+    console.log(`Found ${tsFiles.length} TypeScript files in ${agentsDir}/`)\n+    \n+    let totalModified = 0\n+    \n+    for (const file of tsFiles) {\n+      const filePath = join(agentsDir, file)\n+      const wasModified = await convertFile(filePath)\n+      if (wasModified) {\n+        totalModified++\n+      }\n+    }\n+    \n+    console.log(`\\n🎉 Conversion complete!`)\n+    console.log(`📊 Files processed: ${tsFiles.length}`)\n+    console.log(`✏️  Files modified: ${totalModified}`)\n+    \n+  } catch (error) {\n+    console.error('Error:', error)\n+    process.exit(1)\n+  }\n+}\n+\n+if (import.meta.main) {\n+  main()\n+}\n"
        }
      ]
    }
  ]
}